
MasterNode_Rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ff4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405ff4  00405ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  00405ffc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00007b2c  204009e8  004069e8  000209e8  2**3
                  ALLOC
  4 .stack        00002004  20408514  0040e514  000209e8  2**0
                  ALLOC
  5 .heap         00000200  2040a518  00410518  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   000251d1  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004681  00000000  00000000  00045c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000095c8  00000000  00000000  0004a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d20  00000000  00000000  00053889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e78  00000000  00000000  000545a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e432  00000000  00000000  00055421  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000115b3  00000000  00000000  00063853  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4c89  00000000  00000000  00074e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002bf8  00000000  00000000  00119a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 a5 40 20 c5 20 40 00 c1 20 40 00 c1 20 40 00     ..@ . @.. @.. @.
  400010:	c1 20 40 00 c1 20 40 00 c1 20 40 00 00 00 00 00     . @.. @.. @.....
	...
  40002c:	c1 20 40 00 c1 20 40 00 00 00 00 00 c1 20 40 00     . @.. @...... @.
  40003c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40004c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40005c:	c1 20 40 00 c1 20 40 00 00 00 00 00 1d 1f 40 00     . @.. @.......@.
  40006c:	31 1f 40 00 45 1f 40 00 c1 20 40 00 c1 20 40 00     1.@.E.@.. @.. @.
  40007c:	c1 20 40 00 59 1f 40 00 6d 1f 40 00 c1 20 40 00     . @.Y.@.m.@.. @.
  40008c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40009c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000ac:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000bc:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000cc:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000dc:	75 0d 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     u.@.. @.. @.. @.
  4000ec:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  4000fc:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40010c:	c1 20 40 00 c1 20 40 00 00 00 00 00 00 00 00 00     . @.. @.........
  40011c:	00 00 00 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     ..... @.. @.. @.
  40012c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40013c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40014c:	c1 20 40 00 c1 20 40 00 c1 20 40 00 c1 20 40 00     . @.. @.. @.. @.
  40015c:	c1 20 40 00 c1 20 40 00 c1 20 40 00                 . @.. @.. @.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009e8 	.word	0x204009e8
  400184:	00000000 	.word	0x00000000
  400188:	00405ffc 	.word	0x00405ffc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405ffc 	.word	0x00405ffc
  4001c8:	204009ec 	.word	0x204009ec
  4001cc:	00405ffc 	.word	0x00405ffc
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20408300 	.word	0x20408300
  40020c:	204072e8 	.word	0x204072e8

00400210 <circ_inc>:
#endif

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
  400210:	8803      	ldrh	r3, [r0, #0]
  400212:	3301      	adds	r3, #1
  400214:	b29b      	uxth	r3, r3
        if((*headortail) >= size) {
            (*headortail) = 0;
  400216:	428b      	cmp	r3, r1
  400218:	bf28      	it	cs
  40021a:	2300      	movcs	r3, #0
  40021c:	8003      	strh	r3, [r0, #0]
  40021e:	4770      	bx	lr

00400220 <gmac_reset_tx_mem>:
 *
 * \param p_dev Pointer to GMAC driver instance.
 *
 */
static void gmac_reset_tx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400220:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400222:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_tx_buff = p_dev->gmac_queue_list[queue_idx].p_tx_buffer;
  400226:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40022a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40022e:	685a      	ldr	r2, [r3, #4]
	gmac_tx_descriptor_t *p_td = p_dev->gmac_queue_list[queue_idx].p_tx_dscr;
  400230:	691e      	ldr	r6, [r3, #16]
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400232:	f8de 4000 	ldr.w	r4, [lr]
  400236:	f024 0408 	bic.w	r4, r4, #8
  40023a:	f8ce 4000 	str.w	r4, [lr]

	/* Disable TX */
	gmac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->gmac_queue_list[queue_idx].us_tx_head, p_dev->gmac_queue_list[queue_idx].us_tx_tail);
  40023e:	2400      	movs	r4, #0
  400240:	851c      	strh	r4, [r3, #40]	; 0x28
  400242:	84dc      	strh	r4, [r3, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400244:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400246:	b1fb      	cbz	r3, 400288 <gmac_reset_tx_mem+0x68>
  400248:	4634      	mov	r4, r6
  40024a:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * GMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40024c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400250:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400254:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		p_td[ul_index].addr = ul_address;
  400258:	f846 2033 	str.w	r2, [r6, r3, lsl #3]
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40025c:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  40025e:	3301      	adds	r3, #1
  400260:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  400262:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
  400266:	3408      	adds	r4, #8
  400268:	429d      	cmp	r5, r3
  40026a:	d8f5      	bhi.n	400258 <gmac_reset_tx_mem+0x38>
	}
	p_td[p_dev->gmac_queue_list[queue_idx].us_tx_list_size - 1].status.val =
  40026c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  400270:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  400274:	f845 3c04 	str.w	r3, [r5, #-4]
			GMAC_TXD_USED | GMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  400278:	b141      	cbz	r1, 40028c <gmac_reset_tx_mem+0x6c>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40027a:	f026 0603 	bic.w	r6, r6, #3
  40027e:	f201 110f 	addw	r1, r1, #271	; 0x10f
  400282:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400288:	2500      	movs	r5, #0
  40028a:	e7ef      	b.n	40026c <gmac_reset_tx_mem+0x4c>
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40028c:	f026 0603 	bic.w	r6, r6, #3
  400290:	f8ce 601c 	str.w	r6, [lr, #28]
  400294:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400296 <gmac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_dev Pointer to GMAC Driver instance.
 */
static void gmac_reset_rx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400296:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400298:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_rx_buff = p_dev->gmac_queue_list[queue_idx].p_rx_buffer;
  40029c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4002a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4002a4:	689a      	ldr	r2, [r3, #8]
	gmac_rx_descriptor_t *pRd = p_dev->gmac_queue_list[queue_idx].p_rx_dscr;
  4002a6:	68de      	ldr	r6, [r3, #12]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  4002a8:	f8de 4000 	ldr.w	r4, [lr]
  4002ac:	f024 0404 	bic.w	r4, r4, #4
  4002b0:	f8ce 4000 	str.w	r4, [lr]

	/* Disable RX */
	gmac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->gmac_queue_list[queue_idx].us_rx_idx = 0;
  4002b4:	2400      	movs	r4, #0
  4002b6:	845c      	strh	r4, [r3, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002b8:	8c1b      	ldrh	r3, [r3, #32]
  4002ba:	b313      	cbz	r3, 400302 <gmac_reset_rx_mem+0x6c>
  4002bc:	4634      	mov	r4, r6
  4002be:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * GMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
  4002c0:	461f      	mov	r7, r3
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002c2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  4002c6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
  4002ca:	f022 0503 	bic.w	r5, r2, #3
  4002ce:	f846 5033 	str.w	r5, [r6, r3, lsl #3]
		pRd[ul_index].status.val = 0;
  4002d2:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002d4:	3301      	adds	r3, #1
  4002d6:	8c05      	ldrh	r5, [r0, #32]
  4002d8:	3280      	adds	r2, #128	; 0x80
  4002da:	3408      	adds	r4, #8
  4002dc:	429d      	cmp	r5, r3
  4002de:	d8f4      	bhi.n	4002ca <gmac_reset_rx_mem+0x34>
	}
	pRd[p_dev->gmac_queue_list[queue_idx].us_rx_list_size - 1].addr.val |= GMAC_RXD_WRAP;
  4002e0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  4002e4:	442b      	add	r3, r5
  4002e6:	f856 2033 	ldr.w	r2, [r6, r3, lsl #3]
  4002ea:	f042 0202 	orr.w	r2, r2, #2
  4002ee:	f846 2033 	str.w	r2, [r6, r3, lsl #3]

	/* Set receive buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  4002f2:	b141      	cbz	r1, 400306 <gmac_reset_rx_mem+0x70>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  4002f4:	f026 0603 	bic.w	r6, r6, #3
  4002f8:	f201 111f 	addw	r1, r1, #287	; 0x11f
  4002fc:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400302:	2500      	movs	r5, #0
  400304:	e7ec      	b.n	4002e0 <gmac_reset_rx_mem+0x4a>
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  400306:	f026 0603 	bic.w	r6, r6, #3
  40030a:	f8ce 6018 	str.w	r6, [lr, #24]
  40030e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400310 <gmac_dev_init>:
 * \param p_gmac_dev Pointer to the GMAC device instance.
 * \param p_opt GMAC configure options.
 */
void gmac_dev_init(Gmac* p_gmac, gmac_device_t* p_gmac_dev,
		gmac_options_t* p_opt)
{
  400310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400312:	4604      	mov	r4, r0
  400314:	460e      	mov	r6, r1
  400316:	4615      	mov	r5, r2
	p_gmac->GMAC_NCR = ul_ncr;
  400318:	2300      	movs	r3, #0
  40031a:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_IDR = ul_source;
  40031c:	f04f 33ff 	mov.w	r3, #4294967295
  400320:	62c3      	str	r3, [r0, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  400322:	6803      	ldr	r3, [r0, #0]
  400324:	f043 0320 	orr.w	r3, r3, #32
  400328:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_RSR = ul_status;
  40032a:	230f      	movs	r3, #15
  40032c:	6203      	str	r3, [r0, #32]
	p_gmac->GMAC_TSR = ul_status;
  40032e:	f240 133f 	movw	r3, #319	; 0x13f
  400332:	6143      	str	r3, [r0, #20]
	return p_gmac->GMAC_NCFGR;
  400334:	6842      	ldr	r2, [r0, #4]
	gmac_clear_tx_status(p_gmac, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
            | GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP | GMAC_TSR_HRESP );

	/* Enable the copy of data into the buffers
	   ignore broadcasts, enable Receive checksum and not copy FCS. */
	gmac_set_config(p_gmac, gmac_get_config(p_gmac) |
  400336:	4b45      	ldr	r3, [pc, #276]	; (40044c <gmac_dev_init+0x13c>)
  400338:	4313      	orrs	r3, r2
	p_gmac->GMAC_NCFGR = ul_cfg;
  40033a:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40033c:	782b      	ldrb	r3, [r5, #0]
  40033e:	2b00      	cmp	r3, #0
  400340:	d079      	beq.n	400436 <gmac_dev_init+0x126>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  400342:	6843      	ldr	r3, [r0, #4]
  400344:	f043 0310 	orr.w	r3, r3, #16
  400348:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40034a:	786b      	ldrb	r3, [r5, #1]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d177      	bne.n	400440 <gmac_dev_init+0x130>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  400350:	6863      	ldr	r3, [r4, #4]
  400352:	f023 0320 	bic.w	r3, r3, #32
  400356:	6063      	str	r3, [r4, #4]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  400358:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  40035c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  400360:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  400364:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  400368:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40036c:	4b38      	ldr	r3, [pc, #224]	; (400450 <gmac_dev_init+0x140>)
  40036e:	f04f 32ff 	mov.w	r2, #4294967295
  400372:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  400374:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  400378:	605a      	str	r2, [r3, #4]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40037a:	f023 0303 	bic.w	r3, r3, #3
  40037e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  400382:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  400386:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  40038a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  40038e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  400392:	4b30      	ldr	r3, [pc, #192]	; (400454 <gmac_dev_init+0x144>)
  400394:	f06f 0201 	mvn.w	r2, #1
  400398:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  40039a:	2700      	movs	r7, #0
  40039c:	605f      	str	r7, [r3, #4]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  40039e:	f023 0303 	bic.w	r3, r3, #3
  4003a2:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  4003a6:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  4003aa:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  4003ae:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  4003b2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	return p_gmac->GMAC_ISR;
  4003b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
  4003b8:	4b27      	ldr	r3, [pc, #156]	; (400458 <gmac_dev_init+0x148>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
  4003ba:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_buffer =
  4003be:	60b3      	str	r3, [r6, #8]
			(gmac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr
  4003c0:	4b26      	ldr	r3, [pc, #152]	; (40045c <gmac_dev_init+0x14c>)
			& 0xFFFFFFF8);
  4003c2:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_dscr =
  4003c6:	60f3      	str	r3, [r6, #12]
	p_gmac_queue->us_rx_list_size = p_dev_mm->us_rx_size;
  4003c8:	2210      	movs	r2, #16
  4003ca:	8432      	strh	r2, [r6, #32]
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
  4003cc:	4b24      	ldr	r3, [pc, #144]	; (400460 <gmac_dev_init+0x150>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
  4003ce:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_buffer =
  4003d2:	6073      	str	r3, [r6, #4]
			(gmac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr
  4003d4:	4b23      	ldr	r3, [pc, #140]	; (400464 <gmac_dev_init+0x154>)
			& 0xFFFFFFF8);
  4003d6:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_dscr =
  4003da:	6133      	str	r3, [r6, #16]
	p_gmac_queue->us_tx_list_size = p_dev_mm->us_tx_size;
  4003dc:	84b2      	strh	r2, [r6, #36]	; 0x24
	p_gmac_queue->func_tx_cb_list = p_tx_cb;
  4003de:	4b22      	ldr	r3, [pc, #136]	; (400468 <gmac_dev_init+0x158>)
  4003e0:	61f3      	str	r3, [r6, #28]
	gmac_reset_rx_mem(p_gmac_dev, queue_idx);
  4003e2:	4639      	mov	r1, r7
  4003e4:	4630      	mov	r0, r6
  4003e6:	4b21      	ldr	r3, [pc, #132]	; (40046c <gmac_dev_init+0x15c>)
  4003e8:	4798      	blx	r3
	gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  4003ea:	4639      	mov	r1, r7
  4003ec:	4630      	mov	r0, r6
  4003ee:	4b20      	ldr	r3, [pc, #128]	; (400470 <gmac_dev_init+0x160>)
  4003f0:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4003f2:	6823      	ldr	r3, [r4, #0]
  4003f4:	f043 0308 	orr.w	r3, r3, #8
  4003f8:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4003fa:	6823      	ldr	r3, [r4, #0]
  4003fc:	f043 0304 	orr.w	r3, r3, #4
  400400:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  400402:	6823      	ldr	r3, [r4, #0]
  400404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400408:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  40040a:	f643 43f6 	movw	r3, #15606	; 0x3cf6
  40040e:	62a3      	str	r3, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400410:	796a      	ldrb	r2, [r5, #5]
			| (p_mac_addr[2] << 16)
  400412:	792b      	ldrb	r3, [r5, #4]
  400414:	041b      	lsls	r3, r3, #16
  400416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  40041a:	78aa      	ldrb	r2, [r5, #2]
  40041c:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  40041e:	78ea      	ldrb	r2, [r5, #3]
			| (p_mac_addr[0]);
  400420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400424:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400428:	79ea      	ldrb	r2, [r5, #7]
			| (p_mac_addr[4]);
  40042a:	79ab      	ldrb	r3, [r5, #6]
  40042c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400430:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  400434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  400436:	6843      	ldr	r3, [r0, #4]
  400438:	f023 0310 	bic.w	r3, r3, #16
  40043c:	6043      	str	r3, [r0, #4]
  40043e:	e784      	b.n	40034a <gmac_dev_init+0x3a>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  400440:	6863      	ldr	r3, [r4, #4]
  400442:	f043 0320 	orr.w	r3, r3, #32
  400446:	6063      	str	r3, [r4, #4]
  400448:	e786      	b.n	400358 <gmac_dev_init+0x48>
  40044a:	bf00      	nop
  40044c:	00022102 	.word	0x00022102
  400450:	20400b50 	.word	0x20400b50
  400454:	20400a88 	.word	0x20400a88
  400458:	20400b58 	.word	0x20400b58
  40045c:	20400a08 	.word	0x20400a08
  400460:	20401358 	.word	0x20401358
  400464:	20400ad0 	.word	0x20400ad0
  400468:	20400a90 	.word	0x20400a90
  40046c:	00400297 	.word	0x00400297
  400470:	00400221 	.word	0x00400221

00400474 <gmac_dev_read>:
 *
 * \return GMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t gmac_dev_read(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
  400474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400478:	b087      	sub	sp, #28
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  40047a:	9102      	str	r1, [sp, #8]
	uint16_t us_tmp_idx = p_gmac_queue->us_rx_idx;
  40047c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  400480:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  400484:	8c66      	ldrh	r6, [r4, #34]	; 0x22
  400486:	f8ad 6016 	strh.w	r6, [sp, #22]
	gmac_rx_descriptor_t *p_rx_td =
			&p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
  40048a:	2a00      	cmp	r2, #0
  40048c:	f000 80cb 	beq.w	400626 <gmac_dev_read+0x1b2>
  400490:	468e      	mov	lr, r1
  400492:	4615      	mov	r5, r2
	gmac_rx_descriptor_t *p_rx_td =
  400494:	68e2      	ldr	r2, [r4, #12]
  400496:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
		return GMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
  40049a:	f04f 0c00 	mov.w	ip, #0
  40049e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  4004a0:	f8c7 c000 	str.w	ip, [r7]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4004a4:	f852 2036 	ldr.w	r2, [r2, r6, lsl #3]
  4004a8:	f012 0f01 	tst.w	r2, #1
  4004ac:	f000 80bd 	beq.w	40062a <gmac_dev_read+0x1b6>
  4004b0:	9501      	str	r5, [sp, #4]
  4004b2:	469b      	mov	fp, r3
  4004b4:	9103      	str	r1, [sp, #12]
  4004b6:	4605      	mov	r5, r0
			/* Skip previous fragment */
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);

				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4004b8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4004bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4004c0:	3322      	adds	r3, #34	; 0x22
  4004c2:	9300      	str	r3, [sp, #0]
  4004c4:	46e0      	mov	r8, ip
  4004c6:	46e1      	mov	r9, ip
  4004c8:	4667      	mov	r7, ip
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			/* A complete turn has been made but no EOF found */
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  4004ca:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  4004ce:	00f6      	lsls	r6, r6, #3
  4004d0:	e01c      	b.n	40050c <gmac_dev_read+0x98>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  4004d2:	19ab      	adds	r3, r5, r6
  4004d4:	8c19      	ldrh	r1, [r3, #32]
  4004d6:	f10d 0016 	add.w	r0, sp, #22
  4004da:	4b55      	ldr	r3, [pc, #340]	; (400630 <gmac_dev_read+0x1bc>)
  4004dc:	4798      	blx	r3
		if (c_is_frame) {
  4004de:	f1b8 0f00 	cmp.w	r8, #0
  4004e2:	d13a      	bne.n	40055a <gmac_dev_read+0xe6>
				return GMAC_OK;
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4004e4:	6823      	ldr	r3, [r4, #0]
  4004e6:	f023 0301 	bic.w	r3, r3, #1
  4004ea:	6023      	str	r3, [r4, #0]
			p_gmac_queue->us_rx_idx = us_tmp_idx;
  4004ec:	19ab      	adds	r3, r5, r6
  4004ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4004f2:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_gmac_queue->p_rx_dscr[us_tmp_idx];
  4004f4:	19ab      	adds	r3, r5, r6
  4004f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4004fa:	68db      	ldr	r3, [r3, #12]
  4004fc:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  400500:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400504:	f013 0f01 	tst.w	r3, #1
  400508:	f000 8089 	beq.w	40061e <gmac_dev_read+0x1aa>
		if ((p_rx_td->status.val & GMAC_RXD_SOF) == GMAC_RXD_SOF) {
  40050c:	6863      	ldr	r3, [r4, #4]
  40050e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400512:	d0de      	beq.n	4004d2 <gmac_dev_read+0x5e>
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400514:	19ab      	adds	r3, r5, r6
  400516:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400518:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40051c:	429a      	cmp	r2, r3
  40051e:	d013      	beq.n	400548 <gmac_dev_read+0xd4>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400520:	19af      	adds	r7, r5, r6
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400522:	f8df 810c 	ldr.w	r8, [pc, #268]	; 400630 <gmac_dev_read+0x1bc>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400526:	68fa      	ldr	r2, [r7, #12]
  400528:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40052c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
  400530:	f021 0101 	bic.w	r1, r1, #1
  400534:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400538:	8c39      	ldrh	r1, [r7, #32]
  40053a:	9800      	ldr	r0, [sp, #0]
  40053c:	47c0      	blx	r8
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  40053e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  400540:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400544:	429a      	cmp	r2, r3
  400546:	d1ee      	bne.n	400526 <gmac_dev_read+0xb2>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  400548:	19ab      	adds	r3, r5, r6
  40054a:	8c19      	ldrh	r1, [r3, #32]
  40054c:	f10d 0016 	add.w	r0, sp, #22
  400550:	4b37      	ldr	r3, [pc, #220]	; (400630 <gmac_dev_read+0x1bc>)
  400552:	4798      	blx	r3
  400554:	f8dd 9004 	ldr.w	r9, [sp, #4]
  400558:	2700      	movs	r7, #0
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  40055a:	f8bd a016 	ldrh.w	sl, [sp, #22]
  40055e:	19ab      	adds	r3, r5, r6
  400560:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400562:	4553      	cmp	r3, sl
  400564:	d008      	beq.n	400578 <gmac_dev_read+0x104>
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
  400566:	f107 0380 	add.w	r3, r7, #128	; 0x80
  40056a:	455b      	cmp	r3, fp
  40056c:	d91d      	bls.n	4005aa <gmac_dev_read+0x136>
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
  40056e:	ebab 0807 	sub.w	r8, fp, r7
  400572:	fa1f f888 	uxth.w	r8, r8
  400576:	e01a      	b.n	4005ae <gmac_dev_read+0x13a>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400578:	9b02      	ldr	r3, [sp, #8]
  40057a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40057e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400582:	4c2b      	ldr	r4, [pc, #172]	; (400630 <gmac_dev_read+0x1bc>)
  400584:	9e00      	ldr	r6, [sp, #0]
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400586:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  400588:	68ea      	ldr	r2, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40058a:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  40058e:	f023 0301 	bic.w	r3, r3, #1
  400592:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400596:	8c29      	ldrh	r1, [r5, #32]
  400598:	4630      	mov	r0, r6
  40059a:	47a0      	blx	r4
				} while (us_tmp_idx != p_gmac_queue->us_rx_idx);
  40059c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  40059e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4005a2:	429a      	cmp	r2, r3
  4005a4:	d1ef      	bne.n	400586 <gmac_dev_read+0x112>
				return GMAC_RX_ERROR;
  4005a6:	2003      	movs	r0, #3
  4005a8:	e03a      	b.n	400620 <gmac_dev_read+0x1ac>
			us_buffer_length = GMAC_RX_UNITSIZE;
  4005aa:	f04f 0880 	mov.w	r8, #128	; 0x80
					(void *)(p_rx_td->addr.val & GMAC_RXD_ADDR_MASK),
  4005ae:	6821      	ldr	r1, [r4, #0]
			memcpy(p_tmp_frame,
  4005b0:	4642      	mov	r2, r8
  4005b2:	f021 0103 	bic.w	r1, r1, #3
  4005b6:	4648      	mov	r0, r9
  4005b8:	4b1e      	ldr	r3, [pc, #120]	; (400634 <gmac_dev_read+0x1c0>)
  4005ba:	4798      	blx	r3
			p_tmp_frame += us_buffer_length;
  4005bc:	44c1      	add	r9, r8
			tmp_ul_frame_size += us_buffer_length;
  4005be:	4447      	add	r7, r8
			if ((p_rx_td->status.val & GMAC_RXD_EOF) == GMAC_RXD_EOF) {
  4005c0:	6863      	ldr	r3, [r4, #4]
  4005c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4005c6:	d102      	bne.n	4005ce <gmac_dev_read+0x15a>
  4005c8:	f04f 0801 	mov.w	r8, #1
  4005cc:	e792      	b.n	4004f4 <gmac_dev_read+0x80>
				*p_rcv_size = (p_rx_td->status.val & GMAC_RXD_LEN_MASK);
  4005ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4005d4:	6013      	str	r3, [r2, #0]
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  4005d6:	9b03      	ldr	r3, [sp, #12]
  4005d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4005dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4005e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  4005e2:	459a      	cmp	sl, r3
  4005e4:	d014      	beq.n	400610 <gmac_dev_read+0x19c>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4005e6:	9a02      	ldr	r2, [sp, #8]
  4005e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4005ec:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4005f0:	4c0f      	ldr	r4, [pc, #60]	; (400630 <gmac_dev_read+0x1bc>)
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4005f2:	68e9      	ldr	r1, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4005f4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  4005f8:	f022 0201 	bic.w	r2, r2, #1
  4005fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400600:	8c29      	ldrh	r1, [r5, #32]
  400602:	9800      	ldr	r0, [sp, #0]
  400604:	47a0      	blx	r4
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400606:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  400608:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40060c:	429a      	cmp	r2, r3
  40060e:	d1f0      	bne.n	4005f2 <gmac_dev_read+0x17e>
				if (tmp_ul_frame_size < *p_rcv_size) {
  400610:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400612:	6818      	ldr	r0, [r3, #0]
				return GMAC_OK;
  400614:	4287      	cmp	r7, r0
  400616:	bf34      	ite	cc
  400618:	2005      	movcc	r0, #5
  40061a:	2000      	movcs	r0, #0
  40061c:	e000      	b.n	400620 <gmac_dev_read+0x1ac>
	}

	return GMAC_RX_NO_DATA;
  40061e:	2004      	movs	r0, #4
}
  400620:	b007      	add	sp, #28
  400622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return GMAC_PARAM;
  400626:	2006      	movs	r0, #6
  400628:	e7fa      	b.n	400620 <gmac_dev_read+0x1ac>
	return GMAC_RX_NO_DATA;
  40062a:	2004      	movs	r0, #4
  40062c:	e7f8      	b.n	400620 <gmac_dev_read+0x1ac>
  40062e:	bf00      	nop
  400630:	00400211 	.word	0x00400211
  400634:	00402de5 	.word	0x00402de5

00400638 <gmac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t gmac_dev_write(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, void *p_buffer,
		uint32_t ul_size, gmac_dev_tx_cb_t func_tx_cb)
{
  400638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	Gmac *p_hw = p_gmac_dev->p_hw;
	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];

	/* Check parameter */
	if (ul_size > GMAC_TX_UNITSIZE) {
  40063c:	f240 56ee 	movw	r6, #1518	; 0x5ee
  400640:	42b3      	cmp	r3, r6
  400642:	d902      	bls.n	40064a <gmac_dev_write+0x12>
		return GMAC_PARAM;
  400644:	2006      	movs	r0, #6
  400646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_head];
  40064a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  40064e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
  400652:	8cef      	ldrh	r7, [r5, #38]	; 0x26
  400654:	00fe      	lsls	r6, r7, #3
  400656:	f8d5 e010 	ldr.w	lr, [r5, #16]
  40065a:	eb0e 0806 	add.w	r8, lr, r6

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  40065e:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
  400660:	f107 0c01 	add.w	ip, r7, #1
  400664:	eba4 040c 	sub.w	r4, r4, ip
  400668:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
  40066c:	fb94 f5fc 	sdiv	r5, r4, ip
  400670:	fb0c 4415 	mls	r4, ip, r5, r4
  400674:	b91c      	cbnz	r4, 40067e <gmac_dev_write+0x46>
					p_gmac_queue->us_tx_list_size) == 0) {
		if (p_tx_td[p_gmac_queue->us_tx_head].status.val & GMAC_TXD_USED)
  400676:	4446      	add	r6, r8
  400678:	6874      	ldr	r4, [r6, #4]
  40067a:	2c00      	cmp	r4, #0
  40067c:	db41      	blt.n	400702 <gmac_dev_write+0xca>
  40067e:	461e      	mov	r6, r3
  400680:	4694      	mov	ip, r2
  400682:	460c      	mov	r4, r1
  400684:	4605      	mov	r5, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  400686:	f8d0 9000 	ldr.w	r9, [r0]
			return GMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_head];
  40068a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40068e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400692:	f8d3 a01c 	ldr.w	sl, [r3, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
  400696:	b102      	cbz	r2, 40069a <gmac_dev_write+0x62>
  400698:	bb2e      	cbnz	r6, 4006e6 <gmac_dev_write+0xae>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
  40069a:	9b08      	ldr	r3, [sp, #32]
  40069c:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_gmac_queue->us_tx_head == p_gmac_queue->us_tx_list_size - 1) {
  4006a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4006a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4006a8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  4006aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4006ac:	3b01      	subs	r3, #1
  4006ae:	429a      	cmp	r2, r3
  4006b0:	d020      	beq.n	4006f4 <gmac_dev_write+0xbc>
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
				| GMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST;
  4006b2:	f3c6 030c 	ubfx	r3, r6, #0, #13
  4006b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		p_tx_td->status.val =
  4006ba:	f8c8 3004 	str.w	r3, [r8, #4]
	}

	circ_inc(&p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_list_size);
  4006be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4006c2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4006c6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  4006c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
  4006cc:	4b0e      	ldr	r3, [pc, #56]	; (400708 <gmac_dev_write+0xd0>)
  4006ce:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4006d0:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  4006d4:	f8d9 3000 	ldr.w	r3, [r9]
  4006d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4006dc:	f8c9 3000 	str.w	r3, [r9]

	/* Now start to transmit if it is still not done */
	gmac_start_transmission(p_hw);

	return GMAC_OK;
  4006e0:	2000      	movs	r0, #0
  4006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
  4006e6:	f85e 0037 	ldr.w	r0, [lr, r7, lsl #3]
  4006ea:	4632      	mov	r2, r6
  4006ec:	4661      	mov	r1, ip
  4006ee:	4b07      	ldr	r3, [pc, #28]	; (40070c <gmac_dev_write+0xd4>)
  4006f0:	4798      	blx	r3
  4006f2:	e7d2      	b.n	40069a <gmac_dev_write+0x62>
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
  4006f4:	f3c6 030c 	ubfx	r3, r6, #0, #13
				| GMAC_TXD_WRAP;
  4006f8:	4a05      	ldr	r2, [pc, #20]	; (400710 <gmac_dev_write+0xd8>)
  4006fa:	431a      	orrs	r2, r3
		p_tx_td->status.val =
  4006fc:	f8c8 2004 	str.w	r2, [r8, #4]
  400700:	e7dd      	b.n	4006be <gmac_dev_write+0x86>
			return GMAC_TX_BUSY;
  400702:	2002      	movs	r0, #2
}
  400704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400708:	00400211 	.word	0x00400211
  40070c:	00402de5 	.word	0x00402de5
  400710:	40008000 	.word	0x40008000

00400714 <gmac_handler>:
 * \brief GMAC Interrupt handler.
 *
 * \param p_gmac_dev   Pointer to GMAC device instance.
 */
void gmac_handler(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx)
{
  400714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400718:	b085      	sub	sp, #20
  40071a:	4607      	mov	r7, r0
  40071c:	460d      	mov	r5, r1
	Gmac *p_hw = p_gmac_dev->p_hw;
  40071e:	6806      	ldr	r6, [r0, #0]
	uint32_t ul_tx_status_flag;
#ifdef FREERTOS_USED
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
#endif

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  400720:	460c      	mov	r4, r1

	if(queue_idx == GMAC_QUE_0) {
  400722:	2900      	cmp	r1, #0
  400724:	d153      	bne.n	4007ce <gmac_handler+0xba>
	return p_gmac->GMAC_ISR;
  400726:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ul_isr = gmac_get_interrupt_status(p_hw);
  400728:	9303      	str	r3, [sp, #12]
	return p_gmac->GMAC_RSR;
  40072a:	6a33      	ldr	r3, [r6, #32]
	} else {
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
	}
	ul_rsr = gmac_get_rx_status(p_hw);
  40072c:	9302      	str	r3, [sp, #8]
	return p_gmac->GMAC_TSR;
  40072e:	6973      	ldr	r3, [r6, #20]
	ul_tsr = gmac_get_tx_status(p_hw);
  400730:	9301      	str	r3, [sp, #4]
	return p_gmac->GMAC_IMR;
  400732:	6b31      	ldr	r1, [r6, #48]	; 0x30

	ul_isr &= ~(gmac_get_interrupt_mask(p_hw) | 0xF8030300);
  400734:	9b03      	ldr	r3, [sp, #12]
  400736:	4a49      	ldr	r2, [pc, #292]	; (40085c <gmac_handler+0x148>)
  400738:	430a      	orrs	r2, r1
  40073a:	ea23 0302 	bic.w	r3, r3, r2
  40073e:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & GMAC_ISR_RCOMP) || (ul_rsr & GMAC_RSR_REC)) {
  400740:	9b03      	ldr	r3, [sp, #12]
  400742:	f013 0f02 	tst.w	r3, #2
  400746:	d103      	bne.n	400750 <gmac_handler+0x3c>
  400748:	9b02      	ldr	r3, [sp, #8]
  40074a:	f013 0f02 	tst.w	r3, #2
  40074e:	d014      	beq.n	40077a <gmac_handler+0x66>
		ul_rx_status_flag = GMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & GMAC_RSR_RXOVR) {
  400750:	9b02      	ldr	r3, [sp, #8]
  400752:	f003 0304 	and.w	r3, r3, #4
			ul_rx_status_flag |= GMAC_RSR_RXOVR;
  400756:	2b00      	cmp	r3, #0
  400758:	bf0c      	ite	eq
  40075a:	2002      	moveq	r0, #2
  40075c:	2006      	movne	r0, #6
		}
		/* Check BNA */
		if (ul_rsr & GMAC_RSR_BNA) {
  40075e:	9b02      	ldr	r3, [sp, #8]
  400760:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= GMAC_RSR_BNA;
  400764:	bf18      	it	ne
  400766:	f040 0001 	orrne.w	r0, r0, #1
	p_gmac->GMAC_RSR = ul_status;
  40076a:	6230      	str	r0, [r6, #32]
		}
		/* Clear status */
		gmac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_gmac_queue->func_rx_cb) {
  40076c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400770:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400774:	695b      	ldr	r3, [r3, #20]
  400776:	b103      	cbz	r3, 40077a <gmac_handler+0x66>
			p_gmac_queue->func_rx_cb(ul_rx_status_flag);
  400778:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & GMAC_ISR_TCOMP) || (ul_tsr & GMAC_TSR_TXCOMP)) {
  40077a:	9b03      	ldr	r3, [sp, #12]
  40077c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400780:	d103      	bne.n	40078a <gmac_handler+0x76>
  400782:	9b01      	ldr	r3, [sp, #4]
  400784:	f013 0f20 	tst.w	r3, #32
  400788:	d065      	beq.n	400856 <gmac_handler+0x142>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;

		/* Check RLE */
		if (ul_tsr & GMAC_TSR_RLE) {
  40078a:	9b01      	ldr	r3, [sp, #4]
  40078c:	f013 0f04 	tst.w	r3, #4
  400790:	d123      	bne.n	4007da <gmac_handler+0xc6>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;
  400792:	f04f 0920 	mov.w	r9, #32
			p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
			gmac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & GMAC_TSR_COL) {
  400796:	9b01      	ldr	r3, [sp, #4]
  400798:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= GMAC_TSR_COL;
  40079c:	bf18      	it	ne
  40079e:	f049 0902 	orrne.w	r9, r9, #2
	p_gmac->GMAC_TSR = ul_status;
  4007a2:	f8c6 9014 	str.w	r9, [r6, #20]
		}

		/* Clear status */
		gmac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail)) {
  4007a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  4007aa:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  4007ae:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  4007b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4007b2:	429a      	cmp	r2, r3
  4007b4:	d037      	beq.n	400826 <gmac_handler+0x112>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007b6:	1c6e      	adds	r6, r5, #1
  4007b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4007bc:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  4007c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4007c4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007c8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 400864 <gmac_handler+0x150>
  4007cc:	e01c      	b.n	400808 <gmac_handler+0xf4>
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  4007ce:	f101 03ff 	add.w	r3, r1, #255	; 0xff
  4007d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
  4007d6:	9303      	str	r3, [sp, #12]
  4007d8:	e7a7      	b.n	40072a <gmac_handler+0x16>
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  4007da:	4629      	mov	r1, r5
  4007dc:	4638      	mov	r0, r7
  4007de:	4b20      	ldr	r3, [pc, #128]	; (400860 <gmac_handler+0x14c>)
  4007e0:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4007e2:	6833      	ldr	r3, [r6, #0]
  4007e4:	f043 0308 	orr.w	r3, r3, #8
  4007e8:	6033      	str	r3, [r6, #0]
			ul_tx_status_flag = GMAC_TSR_RLE;
  4007ea:	f04f 0904 	mov.w	r9, #4
  4007ee:	e7d2      	b.n	400796 <gmac_handler+0x82>
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007f0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  4007f2:	4630      	mov	r0, r6
  4007f4:	47c0      	blx	r8
			} while (CIRC_CNT(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  4007f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  4007f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4007fa:	1a9b      	subs	r3, r3, r2
  4007fc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  4007fe:	fb93 f2f1 	sdiv	r2, r3, r1
  400802:	fb01 3312 	mls	r3, r1, r2, r3
  400806:	b173      	cbz	r3, 400826 <gmac_handler+0x112>
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400808:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
  40080a:	69e1      	ldr	r1, [r4, #28]
				if ((p_tx_td->status.val & GMAC_TXD_USED) == 0) {
  40080c:	6923      	ldr	r3, [r4, #16]
  40080e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  400812:	685b      	ldr	r3, [r3, #4]
  400814:	2b00      	cmp	r3, #0
  400816:	da06      	bge.n	400826 <gmac_handler+0x112>
				if (*p_tx_cb) {
  400818:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
  40081c:	2b00      	cmp	r3, #0
  40081e:	d0e7      	beq.n	4007f0 <gmac_handler+0xdc>
					(*p_tx_cb) (ul_tx_status_flag);
  400820:	4648      	mov	r0, r9
  400822:	4798      	blx	r3
  400824:	e7e4      	b.n	4007f0 <gmac_handler+0xdc>
							p_gmac_queue->us_tx_list_size));
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400826:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  40082a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  40082e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  400830:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
  400832:	3101      	adds	r1, #1
  400834:	1a52      	subs	r2, r2, r1
  400836:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  400838:	fb92 f1f0 	sdiv	r1, r2, r0
  40083c:	fb00 2211 	mls	r2, r0, r1, r2
				p_gmac_queue->us_tx_list_size) >= p_gmac_queue->uc_wakeup_threshold)
  400840:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400844:	429a      	cmp	r2, r3
  400846:	db06      	blt.n	400856 <gmac_handler+0x142>
				&& p_gmac_queue->func_wakeup_cb) {
  400848:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40084c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  400850:	69ab      	ldr	r3, [r5, #24]
  400852:	b103      	cbz	r3, 400856 <gmac_handler+0x142>
			p_gmac_queue->func_wakeup_cb();
  400854:	4798      	blx	r3
		/* the complete IP stack. */
		xSemaphoreGiveFromISR(netif_notification_semaphore,
				&xHigherPriorityTaskWoken);
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
}
  400856:	b005      	add	sp, #20
  400858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40085c:	f8030300 	.word	0xf8030300
  400860:	00400221 	.word	0x00400221
  400864:	00400211 	.word	0x00400211

00400868 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400868:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40086a:	4b07      	ldr	r3, [pc, #28]	; (400888 <spi_enable_clock+0x20>)
  40086c:	4298      	cmp	r0, r3
  40086e:	d003      	beq.n	400878 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400870:	4b06      	ldr	r3, [pc, #24]	; (40088c <spi_enable_clock+0x24>)
  400872:	4298      	cmp	r0, r3
  400874:	d004      	beq.n	400880 <spi_enable_clock+0x18>
  400876:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400878:	2015      	movs	r0, #21
  40087a:	4b05      	ldr	r3, [pc, #20]	; (400890 <spi_enable_clock+0x28>)
  40087c:	4798      	blx	r3
  40087e:	bd08      	pop	{r3, pc}
  400880:	202a      	movs	r0, #42	; 0x2a
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <spi_enable_clock+0x28>)
  400884:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400886:	e7f6      	b.n	400876 <spi_enable_clock+0xe>
  400888:	40008000 	.word	0x40008000
  40088c:	40058000 	.word	0x40058000
  400890:	004020a1 	.word	0x004020a1

00400894 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400894:	6843      	ldr	r3, [r0, #4]
  400896:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40089a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40089c:	6843      	ldr	r3, [r0, #4]
  40089e:	0409      	lsls	r1, r1, #16
  4008a0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4008a4:	4319      	orrs	r1, r3
  4008a6:	6041      	str	r1, [r0, #4]
  4008a8:	4770      	bx	lr

004008aa <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4008aa:	6843      	ldr	r3, [r0, #4]
  4008ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4008b0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4008b2:	6843      	ldr	r3, [r0, #4]
  4008b4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4008b8:	6041      	str	r1, [r0, #4]
  4008ba:	4770      	bx	lr

004008bc <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4008bc:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4008be:	f643 2399 	movw	r3, #15001	; 0x3a99
  4008c2:	6904      	ldr	r4, [r0, #16]
  4008c4:	f014 0f01 	tst.w	r4, #1
  4008c8:	d103      	bne.n	4008d2 <spi_read+0x16>
		if (!timeout--) {
  4008ca:	3b01      	subs	r3, #1
  4008cc:	d1f9      	bne.n	4008c2 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4008ce:	2001      	movs	r0, #1
  4008d0:	e009      	b.n	4008e6 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4008d2:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4008d4:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4008d6:	f010 0f02 	tst.w	r0, #2
  4008da:	d002      	beq.n	4008e2 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4008dc:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4008e0:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4008e2:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4008e4:	2000      	movs	r0, #0
}
  4008e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ea:	4770      	bx	lr

004008ec <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4008ec:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008ee:	f643 2499 	movw	r4, #15001	; 0x3a99
  4008f2:	6905      	ldr	r5, [r0, #16]
  4008f4:	f015 0f02 	tst.w	r5, #2
  4008f8:	d103      	bne.n	400902 <spi_write+0x16>
		if (!timeout--) {
  4008fa:	3c01      	subs	r4, #1
  4008fc:	d1f9      	bne.n	4008f2 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4008fe:	2001      	movs	r0, #1
  400900:	e00c      	b.n	40091c <spi_write+0x30>
  400902:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400904:	f014 0f02 	tst.w	r4, #2
  400908:	d006      	beq.n	400918 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40090a:	0412      	lsls	r2, r2, #16
  40090c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400910:	4311      	orrs	r1, r2
		if (uc_last) {
  400912:	b10b      	cbz	r3, 400918 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400914:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400918:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40091a:	2000      	movs	r0, #0
}
  40091c:	bc30      	pop	{r4, r5}
  40091e:	4770      	bx	lr

00400920 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400920:	b932      	cbnz	r2, 400930 <spi_set_clock_polarity+0x10>
  400922:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400926:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400928:	f023 0301 	bic.w	r3, r3, #1
  40092c:	6303      	str	r3, [r0, #48]	; 0x30
  40092e:	4770      	bx	lr
  400930:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400934:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400936:	f043 0301 	orr.w	r3, r3, #1
  40093a:	6303      	str	r3, [r0, #48]	; 0x30
  40093c:	4770      	bx	lr

0040093e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40093e:	b932      	cbnz	r2, 40094e <spi_set_clock_phase+0x10>
  400940:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400944:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400946:	f023 0302 	bic.w	r3, r3, #2
  40094a:	6303      	str	r3, [r0, #48]	; 0x30
  40094c:	4770      	bx	lr
  40094e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400952:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400954:	f043 0302 	orr.w	r3, r3, #2
  400958:	6303      	str	r3, [r0, #48]	; 0x30
  40095a:	4770      	bx	lr

0040095c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40095c:	2a04      	cmp	r2, #4
  40095e:	d003      	beq.n	400968 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400960:	b16a      	cbz	r2, 40097e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400962:	2a08      	cmp	r2, #8
  400964:	d016      	beq.n	400994 <spi_configure_cs_behavior+0x38>
  400966:	4770      	bx	lr
  400968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40096c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40096e:	f023 0308 	bic.w	r3, r3, #8
  400972:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400974:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400976:	f043 0304 	orr.w	r3, r3, #4
  40097a:	6303      	str	r3, [r0, #48]	; 0x30
  40097c:	4770      	bx	lr
  40097e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400982:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400984:	f023 0308 	bic.w	r3, r3, #8
  400988:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40098a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40098c:	f023 0304 	bic.w	r3, r3, #4
  400990:	6303      	str	r3, [r0, #48]	; 0x30
  400992:	4770      	bx	lr
  400994:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400998:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40099a:	f043 0308 	orr.w	r3, r3, #8
  40099e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4009a0:	e7e1      	b.n	400966 <spi_configure_cs_behavior+0xa>

004009a2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4009a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4009a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4009ac:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4009ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009b0:	431a      	orrs	r2, r3
  4009b2:	630a      	str	r2, [r1, #48]	; 0x30
  4009b4:	4770      	bx	lr

004009b6 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4009b6:	b17a      	cbz	r2, 4009d8 <spi_set_baudrate_div+0x22>
{
  4009b8:	b410      	push	{r4}
  4009ba:	4614      	mov	r4, r2
  4009bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4009c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4009c6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4009c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4009ca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4009ce:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4009d0:	2000      	movs	r0, #0
}
  4009d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009d6:	4770      	bx	lr
        return -1;
  4009d8:	f04f 30ff 	mov.w	r0, #4294967295
  4009dc:	4770      	bx	lr

004009de <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4009de:	b410      	push	{r4}
  4009e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4009e4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4009e6:	b280      	uxth	r0, r0
  4009e8:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4009ea:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4009ec:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4009f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4009f4:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4009f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009fa:	4770      	bx	lr

004009fc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4009fc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009fe:	010b      	lsls	r3, r1, #4
  400a00:	4293      	cmp	r3, r2
  400a02:	d914      	bls.n	400a2e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a04:	00c9      	lsls	r1, r1, #3
  400a06:	084b      	lsrs	r3, r1, #1
  400a08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a0c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a10:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a12:	1e5c      	subs	r4, r3, #1
  400a14:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a18:	428c      	cmp	r4, r1
  400a1a:	d901      	bls.n	400a20 <usart_set_async_baudrate+0x24>
		return 1;
  400a1c:	2001      	movs	r0, #1
  400a1e:	e017      	b.n	400a50 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a20:	6841      	ldr	r1, [r0, #4]
  400a22:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a26:	6041      	str	r1, [r0, #4]
  400a28:	e00c      	b.n	400a44 <usart_set_async_baudrate+0x48>
		return 1;
  400a2a:	2001      	movs	r0, #1
  400a2c:	e010      	b.n	400a50 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a2e:	0859      	lsrs	r1, r3, #1
  400a30:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400a34:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400a38:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a3a:	1e5c      	subs	r4, r3, #1
  400a3c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a40:	428c      	cmp	r4, r1
  400a42:	d8f2      	bhi.n	400a2a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a44:	0412      	lsls	r2, r2, #16
  400a46:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a4a:	431a      	orrs	r2, r3
  400a4c:	6202      	str	r2, [r0, #32]

	return 0;
  400a4e:	2000      	movs	r0, #0
}
  400a50:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a54:	4770      	bx	lr
	...

00400a58 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a58:	4b08      	ldr	r3, [pc, #32]	; (400a7c <usart_reset+0x24>)
  400a5a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400a5e:	2300      	movs	r3, #0
  400a60:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400a62:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a64:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a66:	2388      	movs	r3, #136	; 0x88
  400a68:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a6a:	2324      	movs	r3, #36	; 0x24
  400a6c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400a72:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400a74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400a78:	6003      	str	r3, [r0, #0]
  400a7a:	4770      	bx	lr
  400a7c:	55534100 	.word	0x55534100

00400a80 <usart_init_rs232>:
{
  400a80:	b570      	push	{r4, r5, r6, lr}
  400a82:	4605      	mov	r5, r0
  400a84:	460c      	mov	r4, r1
  400a86:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400a88:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <usart_init_rs232+0x48>)
  400a8a:	4798      	blx	r3
	ul_reg_val = 0;
  400a8c:	2200      	movs	r2, #0
  400a8e:	4b0f      	ldr	r3, [pc, #60]	; (400acc <usart_init_rs232+0x4c>)
  400a90:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a92:	b1a4      	cbz	r4, 400abe <usart_init_rs232+0x3e>
  400a94:	4632      	mov	r2, r6
  400a96:	6821      	ldr	r1, [r4, #0]
  400a98:	4628      	mov	r0, r5
  400a9a:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <usart_init_rs232+0x50>)
  400a9c:	4798      	blx	r3
  400a9e:	4602      	mov	r2, r0
  400aa0:	b978      	cbnz	r0, 400ac2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	68a1      	ldr	r1, [r4, #8]
  400aa6:	430b      	orrs	r3, r1
  400aa8:	6921      	ldr	r1, [r4, #16]
  400aaa:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400aac:	68e1      	ldr	r1, [r4, #12]
  400aae:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ab0:	4906      	ldr	r1, [pc, #24]	; (400acc <usart_init_rs232+0x4c>)
  400ab2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400ab4:	6869      	ldr	r1, [r5, #4]
  400ab6:	430b      	orrs	r3, r1
  400ab8:	606b      	str	r3, [r5, #4]
}
  400aba:	4610      	mov	r0, r2
  400abc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400abe:	2201      	movs	r2, #1
  400ac0:	e7fb      	b.n	400aba <usart_init_rs232+0x3a>
  400ac2:	2201      	movs	r2, #1
  400ac4:	e7f9      	b.n	400aba <usart_init_rs232+0x3a>
  400ac6:	bf00      	nop
  400ac8:	00400a59 	.word	0x00400a59
  400acc:	20407238 	.word	0x20407238
  400ad0:	004009fd 	.word	0x004009fd

00400ad4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400ad4:	2340      	movs	r3, #64	; 0x40
  400ad6:	6003      	str	r3, [r0, #0]
  400ad8:	4770      	bx	lr

00400ada <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400ada:	2310      	movs	r3, #16
  400adc:	6003      	str	r3, [r0, #0]
  400ade:	4770      	bx	lr

00400ae0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ae0:	6943      	ldr	r3, [r0, #20]
  400ae2:	f013 0f02 	tst.w	r3, #2
  400ae6:	d004      	beq.n	400af2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ae8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400aec:	61c1      	str	r1, [r0, #28]
	return 0;
  400aee:	2000      	movs	r0, #0
  400af0:	4770      	bx	lr
		return 1;
  400af2:	2001      	movs	r0, #1
}
  400af4:	4770      	bx	lr

00400af6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400af6:	6943      	ldr	r3, [r0, #20]
  400af8:	f013 0f01 	tst.w	r3, #1
  400afc:	d005      	beq.n	400b0a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400afe:	6983      	ldr	r3, [r0, #24]
  400b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b04:	600b      	str	r3, [r1, #0]
	return 0;
  400b06:	2000      	movs	r0, #0
  400b08:	4770      	bx	lr
		return 1;
  400b0a:	2001      	movs	r0, #1
}
  400b0c:	4770      	bx	lr
	...

00400b10 <read_dev_gmac>:

#include "GMAC_Artnet.h"
#include "softLib/ArtNet/Art-Net.h"

uint32_t read_dev_gmac(void)
{
  400b10:	b510      	push	{r4, lr}
  400b12:	b082      	sub	sp, #8
	return gmac_dev_read(&gs_gmac_dev, GMAC_QUE_0, (uint8_t *) gs_uc_eth_buffer_rx, sizeof(gs_uc_eth_buffer_rx), &ul_frm_size_rx);
  400b14:	4b05      	ldr	r3, [pc, #20]	; (400b2c <read_dev_gmac+0x1c>)
  400b16:	9300      	str	r3, [sp, #0]
  400b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  400b1c:	4a04      	ldr	r2, [pc, #16]	; (400b30 <read_dev_gmac+0x20>)
  400b1e:	2100      	movs	r1, #0
  400b20:	4804      	ldr	r0, [pc, #16]	; (400b34 <read_dev_gmac+0x24>)
  400b22:	4c05      	ldr	r4, [pc, #20]	; (400b38 <read_dev_gmac+0x28>)
  400b24:	47a0      	blx	r4
}
  400b26:	b002      	add	sp, #8
  400b28:	bd10      	pop	{r4, pc}
  400b2a:	bf00      	nop
  400b2c:	204082e0 	.word	0x204082e0
  400b30:	204075e4 	.word	0x204075e4
  400b34:	204074ec 	.word	0x204074ec
  400b38:	00400475 	.word	0x00400475

00400b3c <init_gmac_ethernet>:

	return (uint16_t) (~ul_tmp);
}

bool init_gmac_ethernet(void)
{
  400b3c:	b538      	push	{r3, r4, r5, lr}
	at24mac_get_mac_address();
	#endif


	// Wait for PHY to be ready (CAT811: Max400ms)
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  400b3e:	4a27      	ldr	r2, [pc, #156]	; (400bdc <init_gmac_ethernet+0xa0>)
  400b40:	4b27      	ldr	r3, [pc, #156]	; (400be0 <init_gmac_ethernet+0xa4>)
  400b42:	601a      	str	r2, [r3, #0]
	while (ul_delay--);
  400b44:	461a      	mov	r2, r3
  400b46:	6813      	ldr	r3, [r2, #0]
  400b48:	1e59      	subs	r1, r3, #1
  400b4a:	6011      	str	r1, [r2, #0]
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d1fa      	bne.n	400b46 <init_gmac_ethernet+0xa>

	// Enable GMAC clock
	pmc_enable_periph_clk(ID_GMAC);
  400b50:	2027      	movs	r0, #39	; 0x27
  400b52:	4b24      	ldr	r3, [pc, #144]	; (400be4 <init_gmac_ethernet+0xa8>)
  400b54:	4798      	blx	r3

	// Fill in GMAC options
	gmac_option.uc_copy_all_frame = 0;
  400b56:	4a24      	ldr	r2, [pc, #144]	; (400be8 <init_gmac_ethernet+0xac>)
  400b58:	2500      	movs	r5, #0
  400b5a:	7015      	strb	r5, [r2, #0]
	gmac_option.uc_no_boardcast = 0;
  400b5c:	7055      	strb	r5, [r2, #1]

	memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
  400b5e:	4b23      	ldr	r3, [pc, #140]	; (400bec <init_gmac_ethernet+0xb0>)
  400b60:	6818      	ldr	r0, [r3, #0]
  400b62:	f8c2 0002 	str.w	r0, [r2, #2]
  400b66:	889b      	ldrh	r3, [r3, #4]
  400b68:	80d3      	strh	r3, [r2, #6]

	gs_gmac_dev.p_hw = GMAC;
  400b6a:	4921      	ldr	r1, [pc, #132]	; (400bf0 <init_gmac_ethernet+0xb4>)
  400b6c:	4c21      	ldr	r4, [pc, #132]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b6e:	600c      	str	r4, [r1, #0]

	// Init GMAC driver structure
	gmac_dev_init(GMAC, &gs_gmac_dev, &gmac_option);
  400b70:	4620      	mov	r0, r4
  400b72:	4b21      	ldr	r3, [pc, #132]	; (400bf8 <init_gmac_ethernet+0xbc>)
  400b74:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b76:	2280      	movs	r2, #128	; 0x80
  400b78:	4b20      	ldr	r3, [pc, #128]	; (400bfc <init_gmac_ethernet+0xc0>)
  400b7a:	605a      	str	r2, [r3, #4]

	// Enable Interrupt
	NVIC_EnableIRQ(GMAC_IRQn);

	// Init MAC PHY driver
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz())
  400b7c:	4a20      	ldr	r2, [pc, #128]	; (400c00 <init_gmac_ethernet+0xc4>)
  400b7e:	4629      	mov	r1, r5
  400b80:	4620      	mov	r0, r4
  400b82:	4b20      	ldr	r3, [pc, #128]	; (400c04 <init_gmac_ethernet+0xc8>)
  400b84:	4798      	blx	r3
  400b86:	b9c8      	cbnz	r0, 400bbc <init_gmac_ethernet+0x80>
		puts("PHY Initialize ERROR!\r");
		return 0;
	}

	// Auto Negotiate, work in RMII mode
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  400b88:	2100      	movs	r1, #0
  400b8a:	481a      	ldr	r0, [pc, #104]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b8c:	4b1e      	ldr	r3, [pc, #120]	; (400c08 <init_gmac_ethernet+0xcc>)
  400b8e:	4798      	blx	r3
  400b90:	b9c8      	cbnz	r0, 400bc6 <init_gmac_ethernet+0x8a>
		puts("Auto Negotiate ERROR!\r");
		return 0;
	}

	// Establish ethernet link
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  400b92:	2201      	movs	r2, #1
  400b94:	2100      	movs	r1, #0
  400b96:	4817      	ldr	r0, [pc, #92]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b98:	4b1c      	ldr	r3, [pc, #112]	; (400c0c <init_gmac_ethernet+0xd0>)
  400b9a:	4798      	blx	r3
  400b9c:	b9c0      	cbnz	r0, 400bd0 <init_gmac_ethernet+0x94>
		puts("Set link ERROR!\r");
		return 0;
	}
	
	for(uint8_t i = 0; i<4; i++)
		p_artAddr.IP[i] = gs_uc_ip_address[i];
  400b9e:	4b1c      	ldr	r3, [pc, #112]	; (400c10 <init_gmac_ethernet+0xd4>)
  400ba0:	4a1c      	ldr	r2, [pc, #112]	; (400c14 <init_gmac_ethernet+0xd8>)
  400ba2:	7811      	ldrb	r1, [r2, #0]
  400ba4:	7019      	strb	r1, [r3, #0]
  400ba6:	7851      	ldrb	r1, [r2, #1]
  400ba8:	7059      	strb	r1, [r3, #1]
  400baa:	7891      	ldrb	r1, [r2, #2]
  400bac:	7099      	strb	r1, [r3, #2]
  400bae:	78d2      	ldrb	r2, [r2, #3]
  400bb0:	70da      	strb	r2, [r3, #3]
	
	p_artAddr.Port = 0x6391;
  400bb2:	f246 3291 	movw	r2, #25489	; 0x6391
  400bb6:	809a      	strh	r2, [r3, #4]
	
	return 1;
  400bb8:	2001      	movs	r0, #1
}
  400bba:	bd38      	pop	{r3, r4, r5, pc}
		puts("PHY Initialize ERROR!\r");
  400bbc:	4816      	ldr	r0, [pc, #88]	; (400c18 <init_gmac_ethernet+0xdc>)
  400bbe:	4b17      	ldr	r3, [pc, #92]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bc0:	4798      	blx	r3
		return 0;
  400bc2:	4628      	mov	r0, r5
  400bc4:	bd38      	pop	{r3, r4, r5, pc}
		puts("Auto Negotiate ERROR!\r");
  400bc6:	4816      	ldr	r0, [pc, #88]	; (400c20 <init_gmac_ethernet+0xe4>)
  400bc8:	4b14      	ldr	r3, [pc, #80]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bca:	4798      	blx	r3
		return 0;
  400bcc:	2000      	movs	r0, #0
  400bce:	bd38      	pop	{r3, r4, r5, pc}
		puts("Set link ERROR!\r");
  400bd0:	4814      	ldr	r0, [pc, #80]	; (400c24 <init_gmac_ethernet+0xe8>)
  400bd2:	4b12      	ldr	r3, [pc, #72]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bd4:	4798      	blx	r3
		return 0;
  400bd6:	2000      	movs	r0, #0
  400bd8:	bd38      	pop	{r3, r4, r5, pc}
  400bda:	bf00      	nop
  400bdc:	02625a00 	.word	0x02625a00
  400be0:	204075e0 	.word	0x204075e0
  400be4:	004020a1 	.word	0x004020a1
  400be8:	20407be4 	.word	0x20407be4
  400bec:	20400010 	.word	0x20400010
  400bf0:	204074ec 	.word	0x204074ec
  400bf4:	40050000 	.word	0x40050000
  400bf8:	00400311 	.word	0x00400311
  400bfc:	e000e100 	.word	0xe000e100
  400c00:	11e1a300 	.word	0x11e1a300
  400c04:	0040194d 	.word	0x0040194d
  400c08:	00401751 	.word	0x00401751
  400c0c:	0040165d 	.word	0x0040165d
  400c10:	204082e4 	.word	0x204082e4
  400c14:	2040000c 	.word	0x2040000c
  400c18:	00405a74 	.word	0x00405a74
  400c1c:	00403051 	.word	0x00403051
  400c20:	00405a8c 	.word	0x00405a8c
  400c24:	00405aa4 	.word	0x00405aa4

00400c28 <gmac_process_arp_packet>:

void gmac_process_arp_packet(uint8_t *p_uc_data, uint32_t ul_size)
{
  400c28:	b570      	push	{r4, r5, r6, lr}
  400c2a:	b082      	sub	sp, #8
	uint8_t ul_rc = GMAC_OK;

	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_arp_header_t p_arp = (p_arp_header_t) (p_uc_data + ETH_HEADER_SIZE);

	if (SWAP16(p_arp->ar_op) == ARP_REQUEST) {
  400c2c:	8a83      	ldrh	r3, [r0, #20]
  400c2e:	021c      	lsls	r4, r3, #8
  400c30:	b2a4      	uxth	r4, r4
  400c32:	ea44 2413 	orr.w	r4, r4, r3, lsr #8
  400c36:	2c01      	cmp	r4, #1
  400c38:	d001      	beq.n	400c3e <gmac_process_arp_packet+0x16>
			#ifdef _DEBUG_
printf("E: ARP Send - 0x%x\n\r", ul_rc);
#endif
		}
	}
}
  400c3a:	b002      	add	sp, #8
  400c3c:	bd70      	pop	{r4, r5, r6, pc}
		p_arp->ar_op = SWAP16(ARP_REPLY);
  400c3e:	2300      	movs	r3, #0
  400c40:	7503      	strb	r3, [r0, #20]
  400c42:	2302      	movs	r3, #2
  400c44:	7543      	strb	r3, [r0, #21]
  400c46:	1e44      	subs	r4, r0, #1
  400c48:	4a11      	ldr	r2, [pc, #68]	; (400c90 <gmac_process_arp_packet+0x68>)
  400c4a:	1d43      	adds	r3, r0, #5
			p_eth->et_dest[i] = p_eth->et_src[i];
  400c4c:	79e5      	ldrb	r5, [r4, #7]
  400c4e:	f804 5f01 	strb.w	r5, [r4, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  400c52:	f812 5b01 	ldrb.w	r5, [r2], #1
  400c56:	71a5      	strb	r5, [r4, #6]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
  400c58:	7da6      	ldrb	r6, [r4, #22]
  400c5a:	f884 6020 	strb.w	r6, [r4, #32]
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
  400c5e:	75a5      	strb	r5, [r4, #22]
		for (i = 0; i < 6; i++) {
  400c60:	429c      	cmp	r4, r3
  400c62:	d1f3      	bne.n	400c4c <gmac_process_arp_packet+0x24>
  400c64:	f100 041b 	add.w	r4, r0, #27
  400c68:	4a0a      	ldr	r2, [pc, #40]	; (400c94 <gmac_process_arp_packet+0x6c>)
  400c6a:	f100 031f 	add.w	r3, r0, #31
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
  400c6e:	7865      	ldrb	r5, [r4, #1]
  400c70:	72e5      	strb	r5, [r4, #11]
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
  400c72:	f812 5b01 	ldrb.w	r5, [r2], #1
  400c76:	f804 5f01 	strb.w	r5, [r4, #1]!
		for (i = 0; i < 4; i++) {
  400c7a:	429c      	cmp	r4, r3
  400c7c:	d1f7      	bne.n	400c6e <gmac_process_arp_packet+0x46>
  400c7e:	460b      	mov	r3, r1
  400c80:	4602      	mov	r2, r0
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data, ul_size, NULL);
  400c82:	2100      	movs	r1, #0
  400c84:	9100      	str	r1, [sp, #0]
  400c86:	4804      	ldr	r0, [pc, #16]	; (400c98 <gmac_process_arp_packet+0x70>)
  400c88:	4c04      	ldr	r4, [pc, #16]	; (400c9c <gmac_process_arp_packet+0x74>)
  400c8a:	47a0      	blx	r4
}
  400c8c:	e7d5      	b.n	400c3a <gmac_process_arp_packet+0x12>
  400c8e:	bf00      	nop
  400c90:	20400010 	.word	0x20400010
  400c94:	2040000c 	.word	0x2040000c
  400c98:	204074ec 	.word	0x204074ec
  400c9c:	00400639 	.word	0x00400639

00400ca0 <gmac_process_ICMP_packet>:
	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_ip_header_t p_ip_header = (p_ip_header_t) (p_uc_data + ETH_HEADER_SIZE);

	p_icmp_echo_header_t p_icmp_echo = (p_icmp_echo_header_t) ((int8_t *) p_ip_header + ETH_IP_HEADER_SIZE);
		
	if (p_icmp_echo->type == ICMP_ECHO_REQUEST) {
  400ca0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  400ca4:	2b08      	cmp	r3, #8
  400ca6:	d000      	beq.n	400caa <gmac_process_ICMP_packet+0xa>
  400ca8:	4770      	bx	lr
{
  400caa:	b570      	push	{r4, r5, r6, lr}
  400cac:	b082      	sub	sp, #8
	p_icmp_echo_header_t p_icmp_echo = (p_icmp_echo_header_t) ((int8_t *) p_ip_header + ETH_IP_HEADER_SIZE);
  400cae:	f100 0622 	add.w	r6, r0, #34	; 0x22
		p_icmp_echo->type = ICMP_ECHO_REPLY;
  400cb2:	2300      	movs	r3, #0
  400cb4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		p_icmp_echo->code = 0;
  400cb8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		p_icmp_echo->cksum = 0;
  400cbc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  400cc0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

		/* Checksum of the ICMP message */
		ul_icmp_len = (SWAP16(p_ip_header->ip_len) - ETH_IP_HEADER_SIZE);
  400cc4:	8a02      	ldrh	r2, [r0, #16]
  400cc6:	0213      	lsls	r3, r2, #8
  400cc8:	b29b      	uxth	r3, r3
  400cca:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  400cce:	f1a3 0214 	sub.w	r2, r3, #20
		if (ul_icmp_len % 2) {
  400cd2:	f012 0f01 	tst.w	r2, #1
  400cd6:	d003      	beq.n	400ce0 <gmac_process_ICMP_packet+0x40>
			*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
  400cd8:	2100      	movs	r1, #0
  400cda:	54b1      	strb	r1, [r6, r2]
			ul_icmp_len++;
  400cdc:	f1a3 0213 	sub.w	r2, r3, #19
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400ce0:	0852      	lsrs	r2, r2, #1
  400ce2:	d03c      	beq.n	400d5e <gmac_process_ICMP_packet+0xbe>
  400ce4:	2100      	movs	r1, #0
  400ce6:	460d      	mov	r5, r1
		ul_tmp += SWAP16(*p_buff);
  400ce8:	f836 4b02 	ldrh.w	r4, [r6], #2
  400cec:	0223      	lsls	r3, r4, #8
  400cee:	b29b      	uxth	r3, r3
  400cf0:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
  400cf4:	441d      	add	r5, r3
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400cf6:	3101      	adds	r1, #1
  400cf8:	428a      	cmp	r2, r1
  400cfa:	d1f5      	bne.n	400ce8 <gmac_process_ICMP_packet+0x48>
	ul_tmp = (ul_tmp & 0xffff) + (ul_tmp >> 16);
  400cfc:	0c2b      	lsrs	r3, r5, #16
  400cfe:	fa13 f585 	uxtah	r5, r3, r5
	return (uint16_t) (~ul_tmp);
  400d02:	43ed      	mvns	r5, r5
  400d04:	b2ad      	uxth	r5, r5
		}
		ul_icmp_len = ul_icmp_len / sizeof(uint16_t);

		p_icmp_echo->cksum = SWAP16(
  400d06:	0a2b      	lsrs	r3, r5, #8
  400d08:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  400d0c:	8485      	strh	r5, [r0, #36]	; 0x24
  400d0e:	f100 0319 	add.w	r3, r0, #25
  400d12:	4a14      	ldr	r2, [pc, #80]	; (400d64 <gmac_process_ICMP_packet+0xc4>)
  400d14:	f100 041d 	add.w	r4, r0, #29
		gmac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
		/* Swap the IP destination  address and the IP source address */
		for (i = 0; i < 4; i++) {
			p_ip_header->ip_dst[i] =
  400d18:	7859      	ldrb	r1, [r3, #1]
  400d1a:	7159      	strb	r1, [r3, #5]
			p_ip_header->ip_src[i];
			p_ip_header->ip_src[i] = gs_uc_ip_address[i];
  400d1c:	f812 1b01 	ldrb.w	r1, [r2], #1
  400d20:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  400d24:	42a3      	cmp	r3, r4
  400d26:	d1f7      	bne.n	400d18 <gmac_process_ICMP_packet+0x78>
  400d28:	1e42      	subs	r2, r0, #1
  400d2a:	490f      	ldr	r1, [pc, #60]	; (400d68 <gmac_process_ICMP_packet+0xc8>)
  400d2c:	1d45      	adds	r5, r0, #5
  400d2e:	462b      	mov	r3, r5
		}
		/* Swap ethernet destination address and ethernet source address */
		for (i = 0; i < 6; i++) {
			/* Swap ethernet destination address and ethernet source address */
			p_eth->et_dest[i] = p_eth->et_src[i];
  400d30:	785c      	ldrb	r4, [r3, #1]
  400d32:	f802 4f01 	strb.w	r4, [r2, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  400d36:	f811 4b01 	ldrb.w	r4, [r1], #1
  400d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
		for (i = 0; i < 6; i++) {
  400d3e:	42aa      	cmp	r2, r5
  400d40:	d1f6      	bne.n	400d30 <gmac_process_ICMP_packet+0x90>
  400d42:	4602      	mov	r2, r0
		#if (SAM4E)
		ul_rc = gmac_dev_write(&gs_gmac_dev, p_uc_data,
		SWAP16(p_ip_header->ip_len) + 14, NULL);
		#else
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
		SWAP16(p_ip_header->ip_len) + 14, NULL);
  400d44:	8a01      	ldrh	r1, [r0, #16]
  400d46:	020b      	lsls	r3, r1, #8
  400d48:	b29b      	uxth	r3, r3
  400d4a:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
  400d4e:	2100      	movs	r1, #0
  400d50:	9100      	str	r1, [sp, #0]
  400d52:	330e      	adds	r3, #14
  400d54:	4805      	ldr	r0, [pc, #20]	; (400d6c <gmac_process_ICMP_packet+0xcc>)
  400d56:	4c06      	ldr	r4, [pc, #24]	; (400d70 <gmac_process_ICMP_packet+0xd0>)
  400d58:	47a0      	blx	r4
			#ifdef _DEBUG_
printf("E: ICMP Send - 0x%x\n\r", ul_rc);
#endif
		}
	}
}
  400d5a:	b002      	add	sp, #8
  400d5c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400d5e:	4615      	mov	r5, r2
  400d60:	e7cc      	b.n	400cfc <gmac_process_ICMP_packet+0x5c>
  400d62:	bf00      	nop
  400d64:	2040000c 	.word	0x2040000c
  400d68:	20400010 	.word	0x20400010
  400d6c:	204074ec 	.word	0x204074ec
  400d70:	00400639 	.word	0x00400639

00400d74 <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  400d74:	b508      	push	{r3, lr}
	gmac_handler(&gs_gmac_dev, GMAC_QUE_0);
  400d76:	2100      	movs	r1, #0
  400d78:	4801      	ldr	r0, [pc, #4]	; (400d80 <GMAC_Handler+0xc>)
  400d7a:	4b02      	ldr	r3, [pc, #8]	; (400d84 <GMAC_Handler+0x10>)
  400d7c:	4798      	blx	r3
  400d7e:	bd08      	pop	{r3, pc}
  400d80:	204074ec 	.word	0x204074ec
  400d84:	00400715 	.word	0x00400715

00400d88 <print_address_register>:
{
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
}

static void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  400d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d8c:	b083      	sub	sp, #12
  400d8e:	af00      	add	r7, sp, #0
  400d90:	460e      	mov	r6, r1
  400d92:	4614      	mov	r4, r2
	printf("%s\t", name);
  400d94:	4601      	mov	r1, r0
  400d96:	4829      	ldr	r0, [pc, #164]	; (400e3c <print_address_register+0xb4>)
  400d98:	4b29      	ldr	r3, [pc, #164]	; (400e40 <print_address_register+0xb8>)
  400d9a:	4798      	blx	r3
	while(qty--){
  400d9c:	2c00      	cmp	r4, #0
  400d9e:	d045      	beq.n	400e2c <print_address_register+0xa4>
  400da0:	4434      	add	r4, r6
  400da2:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  400da6:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 400e50 <print_address_register+0xc8>
	while(qty--){
  400daa:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  400dae:	f89b 4000 	ldrb.w	r4, [fp]
  400db2:	1de3      	adds	r3, r4, #7
  400db4:	f023 0307 	bic.w	r3, r3, #7
  400db8:	ebad 0d03 	sub.w	sp, sp, r3
  400dbc:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  400dbe:	f106 0901 	add.w	r9, r6, #1
  400dc2:	fa5f f989 	uxtb.w	r9, r9
{
  400dc6:	f8c7 d000 	str.w	sp, [r7]
	uint8_t status[len+1];
  400dca:	f104 0308 	add.w	r3, r4, #8
  400dce:	f023 0307 	bic.w	r3, r3, #7
  400dd2:	ebad 0d03 	sub.w	sp, sp, r3
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  400dd6:	f006 061f 	and.w	r6, r6, #31
  400dda:	f88d 6000 	strb.w	r6, [sp]
	spi_master_transfer(&status, sizeof(status));
  400dde:	1c61      	adds	r1, r4, #1
  400de0:	4668      	mov	r0, sp
  400de2:	4b18      	ldr	r3, [pc, #96]	; (400e44 <print_address_register+0xbc>)
  400de4:	4798      	blx	r3
	for (uint8_t i = 0; i< len; i++)
  400de6:	b15c      	cbz	r4, 400e00 <print_address_register+0x78>
  400de8:	f10d 0801 	add.w	r8, sp, #1
  400dec:	1e6b      	subs	r3, r5, #1
  400dee:	1e61      	subs	r1, r4, #1
  400df0:	fa55 f181 	uxtab	r1, r5, r1
		buf[i] = status[i+1];
  400df4:	f818 2b01 	ldrb.w	r2, [r8], #1
  400df8:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  400dfc:	428b      	cmp	r3, r1
  400dfe:	d1f9      	bne.n	400df4 <print_address_register+0x6c>
  400e00:	f8d7 d000 	ldr.w	sp, [r7]
		
		printf(" 0x");
  400e04:	4810      	ldr	r0, [pc, #64]	; (400e48 <print_address_register+0xc0>)
  400e06:	4b0e      	ldr	r3, [pc, #56]	; (400e40 <print_address_register+0xb8>)
  400e08:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  400e0a:	3c01      	subs	r4, #1
  400e0c:	192c      	adds	r4, r5, r4
  400e0e:	d208      	bcs.n	400e22 <print_address_register+0x9a>
			printf("%02x", *bufptr);
  400e10:	f8df 8040 	ldr.w	r8, [pc, #64]	; 400e54 <print_address_register+0xcc>
  400e14:	4e0a      	ldr	r6, [pc, #40]	; (400e40 <print_address_register+0xb8>)
  400e16:	f814 1901 	ldrb.w	r1, [r4], #-1
  400e1a:	4640      	mov	r0, r8
  400e1c:	47b0      	blx	r6
		while(--bufptr >= buffer){
  400e1e:	42a5      	cmp	r5, r4
  400e20:	d9f9      	bls.n	400e16 <print_address_register+0x8e>
  400e22:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  400e26:	464e      	mov	r6, r9
	while(qty--){
  400e28:	45d1      	cmp	r9, sl
  400e2a:	d1be      	bne.n	400daa <print_address_register+0x22>
		}
	}
	printf("\r\n");
  400e2c:	4807      	ldr	r0, [pc, #28]	; (400e4c <print_address_register+0xc4>)
  400e2e:	4b04      	ldr	r3, [pc, #16]	; (400e40 <print_address_register+0xb8>)
  400e30:	4798      	blx	r3
}
  400e32:	370c      	adds	r7, #12
  400e34:	46bd      	mov	sp, r7
  400e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e3a:	bf00      	nop
  400e3c:	00405bec 	.word	0x00405bec
  400e40:	00402d5d 	.word	0x00402d5d
  400e44:	004015ad 	.word	0x004015ad
  400e48:	00405bf0 	.word	0x00405bf0
  400e4c:	00405df8 	.word	0x00405df8
  400e50:	204082ec 	.word	0x204082ec
  400e54:	00405bf4 	.word	0x00405bf4

00400e58 <writeRegister>:
{
  400e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e5a:	af00      	add	r7, sp, #0
	uint8_t p_buf[length+1];
  400e5c:	1c56      	adds	r6, r2, #1
  400e5e:	f102 0308 	add.w	r3, r2, #8
  400e62:	f023 0307 	bic.w	r3, r3, #7
  400e66:	ebad 0d03 	sub.w	sp, sp, r3
  400e6a:	466d      	mov	r5, sp
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400e6c:	f000 001f 	and.w	r0, r0, #31
  400e70:	f040 0020 	orr.w	r0, r0, #32
  400e74:	f88d 0000 	strb.w	r0, [sp]
	for (uint8_t i = 0; i < length; i++)
  400e78:	b152      	cbz	r2, 400e90 <writeRegister+0x38>
  400e7a:	1e4b      	subs	r3, r1, #1
  400e7c:	1c68      	adds	r0, r5, #1
  400e7e:	3a01      	subs	r2, #1
  400e80:	fa51 f482 	uxtab	r4, r1, r2
		p_buf[i+1] = (*buf++);
  400e84:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400e88:	f800 2b01 	strb.w	r2, [r0], #1
	for (uint8_t i = 0; i < length; i++)
  400e8c:	42a3      	cmp	r3, r4
  400e8e:	d1f9      	bne.n	400e84 <writeRegister+0x2c>
	spi_master_transfer(p_buf, sizeof(p_buf));
  400e90:	4631      	mov	r1, r6
  400e92:	4628      	mov	r0, r5
  400e94:	4b02      	ldr	r3, [pc, #8]	; (400ea0 <writeRegister+0x48>)
  400e96:	4798      	blx	r3
}
  400e98:	7828      	ldrb	r0, [r5, #0]
  400e9a:	46bd      	mov	sp, r7
  400e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e9e:	bf00      	nop
  400ea0:	004015ad 	.word	0x004015ad

00400ea4 <nRF24_readRegister>:
{
  400ea4:	b500      	push	{lr}
  400ea6:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  400ea8:	f000 001f 	and.w	r0, r0, #31
  400eac:	f88d 0004 	strb.w	r0, [sp, #4]
  400eb0:	23ff      	movs	r3, #255	; 0xff
  400eb2:	f88d 3005 	strb.w	r3, [sp, #5]
	spi_master_transfer(&cmd, sizeof(cmd));
  400eb6:	2102      	movs	r1, #2
  400eb8:	a801      	add	r0, sp, #4
  400eba:	4b03      	ldr	r3, [pc, #12]	; (400ec8 <nRF24_readRegister+0x24>)
  400ebc:	4798      	blx	r3
}
  400ebe:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400ec2:	b003      	add	sp, #12
  400ec4:	f85d fb04 	ldr.w	pc, [sp], #4
  400ec8:	004015ad 	.word	0x004015ad

00400ecc <print_byte_register>:

static void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  400ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ed0:	460d      	mov	r5, r1
  400ed2:	4616      	mov	r6, r2
	printf("%s\t", name);
  400ed4:	4601      	mov	r1, r0
  400ed6:	480d      	ldr	r0, [pc, #52]	; (400f0c <print_byte_register+0x40>)
  400ed8:	4b0d      	ldr	r3, [pc, #52]	; (400f10 <print_byte_register+0x44>)
  400eda:	4798      	blx	r3
	while (qty--)
  400edc:	b186      	cbz	r6, 400f00 <print_byte_register+0x34>
  400ede:	442e      	add	r6, r5
  400ee0:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  400ee2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400f18 <print_byte_register+0x4c>
  400ee6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 400f1c <print_byte_register+0x50>
  400eea:	4f09      	ldr	r7, [pc, #36]	; (400f10 <print_byte_register+0x44>)
  400eec:	1c6c      	adds	r4, r5, #1
  400eee:	b2e4      	uxtb	r4, r4
  400ef0:	4628      	mov	r0, r5
  400ef2:	47c8      	blx	r9
  400ef4:	4601      	mov	r1, r0
  400ef6:	4640      	mov	r0, r8
  400ef8:	47b8      	blx	r7
  400efa:	4625      	mov	r5, r4
	while (qty--)
  400efc:	42a6      	cmp	r6, r4
  400efe:	d1f5      	bne.n	400eec <print_byte_register+0x20>
	}
	printf("\r\n");
  400f00:	4804      	ldr	r0, [pc, #16]	; (400f14 <print_byte_register+0x48>)
  400f02:	4b03      	ldr	r3, [pc, #12]	; (400f10 <print_byte_register+0x44>)
  400f04:	4798      	blx	r3
  400f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f0a:	bf00      	nop
  400f0c:	00405bec 	.word	0x00405bec
  400f10:	00402d5d 	.word	0x00402d5d
  400f14:	00405df8 	.word	0x00405df8
  400f18:	00400ea5 	.word	0x00400ea5
  400f1c:	00405bfc 	.word	0x00405bfc

00400f20 <nRF24_writeRegister>:
{
  400f20:	b500      	push	{lr}
  400f22:	b083      	sub	sp, #12
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400f24:	f000 001f 	and.w	r0, r0, #31
  400f28:	f040 0020 	orr.w	r0, r0, #32
  400f2c:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  400f30:	f88d 1005 	strb.w	r1, [sp, #5]
	spi_master_transfer(p_buf, sizeof(p_buf));
  400f34:	2102      	movs	r1, #2
  400f36:	a801      	add	r0, sp, #4
  400f38:	4b03      	ldr	r3, [pc, #12]	; (400f48 <nRF24_writeRegister+0x28>)
  400f3a:	4798      	blx	r3
}
  400f3c:	f89d 0004 	ldrb.w	r0, [sp, #4]
  400f40:	b003      	add	sp, #12
  400f42:	f85d fb04 	ldr.w	pc, [sp], #4
  400f46:	bf00      	nop
  400f48:	004015ad 	.word	0x004015ad

00400f4c <nRF24_FlushRx>:
{
  400f4c:	b500      	push	{lr}
  400f4e:	b083      	sub	sp, #12
	cmd = FLUSH_RX;
  400f50:	a802      	add	r0, sp, #8
  400f52:	23e2      	movs	r3, #226	; 0xe2
  400f54:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400f58:	2101      	movs	r1, #1
  400f5a:	4b03      	ldr	r3, [pc, #12]	; (400f68 <nRF24_FlushRx+0x1c>)
  400f5c:	4798      	blx	r3
}
  400f5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f62:	b003      	add	sp, #12
  400f64:	f85d fb04 	ldr.w	pc, [sp], #4
  400f68:	004015ad 	.word	0x004015ad

00400f6c <nRF24_FlushTx>:
{
  400f6c:	b500      	push	{lr}
  400f6e:	b083      	sub	sp, #12
	cmd = FLUSH_TX;
  400f70:	a802      	add	r0, sp, #8
  400f72:	23e1      	movs	r3, #225	; 0xe1
  400f74:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400f78:	2101      	movs	r1, #1
  400f7a:	4b03      	ldr	r3, [pc, #12]	; (400f88 <nRF24_FlushTx+0x1c>)
  400f7c:	4798      	blx	r3
}
  400f7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400f82:	b003      	add	sp, #12
  400f84:	f85d fb04 	ldr.w	pc, [sp], #4
  400f88:	004015ad 	.word	0x004015ad

00400f8c <nRF24_getStatus>:
{
  400f8c:	b500      	push	{lr}
  400f8e:	b083      	sub	sp, #12
	cmd = RF24_NOP;
  400f90:	a802      	add	r0, sp, #8
  400f92:	23ff      	movs	r3, #255	; 0xff
  400f94:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400f98:	2101      	movs	r1, #1
  400f9a:	4b03      	ldr	r3, [pc, #12]	; (400fa8 <nRF24_getStatus+0x1c>)
  400f9c:	4798      	blx	r3
}
  400f9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400fa2:	b003      	add	sp, #12
  400fa4:	f85d fb04 	ldr.w	pc, [sp], #4
  400fa8:	004015ad 	.word	0x004015ad

00400fac <nRF24_setDataRate>:
{
  400fac:	b538      	push	{r3, r4, r5, lr}
  400fae:	4605      	mov	r5, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  400fb0:	2006      	movs	r0, #6
  400fb2:	4b0c      	ldr	r3, [pc, #48]	; (400fe4 <nRF24_setDataRate+0x38>)
  400fb4:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  400fb6:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	if (speed == RF24_2MBPS) {
  400fba:	2d01      	cmp	r5, #1
  400fbc:	d00b      	beq.n	400fd6 <nRF24_setDataRate+0x2a>
	nRF24_writeRegister(RF_SETUP, setup);
  400fbe:	4621      	mov	r1, r4
  400fc0:	2006      	movs	r0, #6
  400fc2:	4b09      	ldr	r3, [pc, #36]	; (400fe8 <nRF24_setDataRate+0x3c>)
  400fc4:	4798      	blx	r3
	if(nRF24_readRegister(RF_SETUP) == setup)
  400fc6:	2006      	movs	r0, #6
  400fc8:	4b06      	ldr	r3, [pc, #24]	; (400fe4 <nRF24_setDataRate+0x38>)
  400fca:	4798      	blx	r3
}
  400fcc:	4284      	cmp	r4, r0
  400fce:	bf14      	ite	ne
  400fd0:	2000      	movne	r0, #0
  400fd2:	2001      	moveq	r0, #1
  400fd4:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  400fd6:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  400fda:	2241      	movs	r2, #65	; 0x41
  400fdc:	4b03      	ldr	r3, [pc, #12]	; (400fec <nRF24_setDataRate+0x40>)
  400fde:	601a      	str	r2, [r3, #0]
  400fe0:	e7ed      	b.n	400fbe <nRF24_setDataRate+0x12>
  400fe2:	bf00      	nop
  400fe4:	00400ea5 	.word	0x00400ea5
  400fe8:	00400f21 	.word	0x00400f21
  400fec:	204082f8 	.word	0x204082f8

00400ff0 <getDataRate>:
{
  400ff0:	b508      	push	{r3, lr}
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  400ff2:	2006      	movs	r0, #6
  400ff4:	4b04      	ldr	r3, [pc, #16]	; (401008 <getDataRate+0x18>)
  400ff6:	4798      	blx	r3
	if (dr == (1<<RF_DR_HIGH)) {
  400ff8:	f000 0028 	and.w	r0, r0, #40	; 0x28
}
  400ffc:	2808      	cmp	r0, #8
  400ffe:	bf14      	ite	ne
  401000:	2000      	movne	r0, #0
  401002:	2001      	moveq	r0, #1
  401004:	bd08      	pop	{r3, pc}
  401006:	bf00      	nop
  401008:	00400ea5 	.word	0x00400ea5

0040100c <nRF24_setCRCLength>:
{
  40100c:	b510      	push	{r4, lr}
  40100e:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  401010:	2000      	movs	r0, #0
  401012:	4b07      	ldr	r3, [pc, #28]	; (401030 <nRF24_setCRCLength+0x24>)
  401014:	4798      	blx	r3
  401016:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	if (length == RF24_CRC_DISABLED){
  40101a:	b12c      	cbz	r4, 401028 <nRF24_setCRCLength+0x1c>
	else if (length == RF24_CRC_8){
  40101c:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  40101e:	bf0c      	ite	eq
  401020:	f041 0108 	orreq.w	r1, r1, #8
		config |= (1<<CRCO);
  401024:	f041 010c 	orrne.w	r1, r1, #12
	nRF24_writeRegister(NRF_CONFIG, config);
  401028:	2000      	movs	r0, #0
  40102a:	4b02      	ldr	r3, [pc, #8]	; (401034 <nRF24_setCRCLength+0x28>)
  40102c:	4798      	blx	r3
  40102e:	bd10      	pop	{r4, pc}
  401030:	00400ea5 	.word	0x00400ea5
  401034:	00400f21 	.word	0x00400f21

00401038 <getCRCLength>:
{
  401038:	b538      	push	{r3, r4, r5, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  40103a:	2000      	movs	r0, #0
  40103c:	4d08      	ldr	r5, [pc, #32]	; (401060 <getCRCLength+0x28>)
  40103e:	47a8      	blx	r5
  401040:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  401042:	2001      	movs	r0, #1
  401044:	47a8      	blx	r5
    if (config & (1<<EN_CRC) || AA) {
  401046:	f014 0f08 	tst.w	r4, #8
  40104a:	d102      	bne.n	401052 <getCRCLength+0x1a>
  40104c:	b908      	cbnz	r0, 401052 <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  40104e:	2000      	movs	r0, #0
}
  401050:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  401052:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  401056:	2c00      	cmp	r4, #0
  401058:	bf14      	ite	ne
  40105a:	2002      	movne	r0, #2
  40105c:	2001      	moveq	r0, #1
  40105e:	bd38      	pop	{r3, r4, r5, pc}
  401060:	00400ea5 	.word	0x00400ea5

00401064 <nRF24_setPALevel>:
{
  401064:	b510      	push	{r4, lr}
  401066:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  401068:	2006      	movs	r0, #6
  40106a:	4b08      	ldr	r3, [pc, #32]	; (40108c <nRF24_setPALevel+0x28>)
  40106c:	4798      	blx	r3
  40106e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	if (level > 3) {
  401072:	2c03      	cmp	r4, #3
  401074:	d808      	bhi.n	401088 <nRF24_setPALevel+0x24>
		level = (level << 1) + 1;
  401076:	0064      	lsls	r4, r4, #1
  401078:	3401      	adds	r4, #1
  40107a:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	nRF24_writeRegister(RF_SETUP, setup |= level);
  40107e:	4321      	orrs	r1, r4
  401080:	2006      	movs	r0, #6
  401082:	4b03      	ldr	r3, [pc, #12]	; (401090 <nRF24_setPALevel+0x2c>)
  401084:	4798      	blx	r3
  401086:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  401088:	2407      	movs	r4, #7
  40108a:	e7f8      	b.n	40107e <nRF24_setPALevel+0x1a>
  40108c:	00400ea5 	.word	0x00400ea5
  401090:	00400f21 	.word	0x00400f21

00401094 <nRF24_getPALevel>:
{
  401094:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  401096:	2006      	movs	r0, #6
  401098:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <nRF24_getPALevel+0x10>)
  40109a:	4798      	blx	r3
}
  40109c:	f3c0 0041 	ubfx	r0, r0, #1, #2
  4010a0:	bd08      	pop	{r3, pc}
  4010a2:	bf00      	nop
  4010a4:	00400ea5 	.word	0x00400ea5

004010a8 <printDetails>:
}

void printDetails(void)
{
  4010a8:	b570      	push	{r4, r5, r6, lr}
  4010aa:	b084      	sub	sp, #16
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  4010ac:	4b31      	ldr	r3, [pc, #196]	; (401174 <printDetails+0xcc>)
  4010ae:	6819      	ldr	r1, [r3, #0]
  4010b0:	4b31      	ldr	r3, [pc, #196]	; (401178 <printDetails+0xd0>)
  4010b2:	fba3 3101 	umull	r3, r1, r3, r1
  4010b6:	0c89      	lsrs	r1, r1, #18
  4010b8:	4830      	ldr	r0, [pc, #192]	; (40117c <printDetails+0xd4>)
  4010ba:	4d31      	ldr	r5, [pc, #196]	; (401180 <printDetails+0xd8>)
  4010bc:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  4010be:	4b31      	ldr	r3, [pc, #196]	; (401184 <printDetails+0xdc>)
  4010c0:	4798      	blx	r3
  4010c2:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  4010c4:	f000 0301 	and.w	r3, r0, #1
  4010c8:	9302      	str	r3, [sp, #8]
  4010ca:	f3c0 0340 	ubfx	r3, r0, #1, #1
  4010ce:	9301      	str	r3, [sp, #4]
  4010d0:	f3c0 1300 	ubfx	r3, r0, #4, #1
  4010d4:	9300      	str	r3, [sp, #0]
  4010d6:	f3c0 1340 	ubfx	r3, r0, #5, #1
  4010da:	f3c0 1280 	ubfx	r2, r0, #6, #1
  4010de:	482a      	ldr	r0, [pc, #168]	; (401188 <printDetails+0xe0>)
  4010e0:	47a8      	blx	r5
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  4010e2:	2202      	movs	r2, #2
  4010e4:	210a      	movs	r1, #10
  4010e6:	4829      	ldr	r0, [pc, #164]	; (40118c <printDetails+0xe4>)
  4010e8:	4e29      	ldr	r6, [pc, #164]	; (401190 <printDetails+0xe8>)
  4010ea:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  4010ec:	2204      	movs	r2, #4
  4010ee:	210c      	movs	r1, #12
  4010f0:	4828      	ldr	r0, [pc, #160]	; (401194 <printDetails+0xec>)
  4010f2:	4c29      	ldr	r4, [pc, #164]	; (401198 <printDetails+0xf0>)
  4010f4:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  4010f6:	2201      	movs	r2, #1
  4010f8:	2110      	movs	r1, #16
  4010fa:	4828      	ldr	r0, [pc, #160]	; (40119c <printDetails+0xf4>)
  4010fc:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  4010fe:	2206      	movs	r2, #6
  401100:	2111      	movs	r1, #17
  401102:	4827      	ldr	r0, [pc, #156]	; (4011a0 <printDetails+0xf8>)
  401104:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  401106:	2201      	movs	r2, #1
  401108:	2103      	movs	r1, #3
  40110a:	4826      	ldr	r0, [pc, #152]	; (4011a4 <printDetails+0xfc>)
  40110c:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  40110e:	2201      	movs	r2, #1
  401110:	4611      	mov	r1, r2
  401112:	4825      	ldr	r0, [pc, #148]	; (4011a8 <printDetails+0x100>)
  401114:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  401116:	2201      	movs	r2, #1
  401118:	2102      	movs	r1, #2
  40111a:	4824      	ldr	r0, [pc, #144]	; (4011ac <printDetails+0x104>)
  40111c:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  40111e:	2201      	movs	r2, #1
  401120:	2105      	movs	r1, #5
  401122:	4823      	ldr	r0, [pc, #140]	; (4011b0 <printDetails+0x108>)
  401124:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  401126:	2201      	movs	r2, #1
  401128:	2106      	movs	r1, #6
  40112a:	4822      	ldr	r0, [pc, #136]	; (4011b4 <printDetails+0x10c>)
  40112c:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  40112e:	2201      	movs	r2, #1
  401130:	2100      	movs	r1, #0
  401132:	4821      	ldr	r0, [pc, #132]	; (4011b8 <printDetails+0x110>)
  401134:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  401136:	2202      	movs	r2, #2
  401138:	211c      	movs	r1, #28
  40113a:	4820      	ldr	r0, [pc, #128]	; (4011bc <printDetails+0x114>)
  40113c:	47a0      	blx	r4
	
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  40113e:	4b20      	ldr	r3, [pc, #128]	; (4011c0 <printDetails+0x118>)
  401140:	4798      	blx	r3
  401142:	4b20      	ldr	r3, [pc, #128]	; (4011c4 <printDetails+0x11c>)
  401144:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401148:	481f      	ldr	r0, [pc, #124]	; (4011c8 <printDetails+0x120>)
  40114a:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  40114c:	491f      	ldr	r1, [pc, #124]	; (4011cc <printDetails+0x124>)
  40114e:	4820      	ldr	r0, [pc, #128]	; (4011d0 <printDetails+0x128>)
  401150:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  401152:	4b20      	ldr	r3, [pc, #128]	; (4011d4 <printDetails+0x12c>)
  401154:	4798      	blx	r3
  401156:	4b20      	ldr	r3, [pc, #128]	; (4011d8 <printDetails+0x130>)
  401158:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  40115c:	481f      	ldr	r0, [pc, #124]	; (4011dc <printDetails+0x134>)
  40115e:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  401160:	4b1f      	ldr	r3, [pc, #124]	; (4011e0 <printDetails+0x138>)
  401162:	4798      	blx	r3
  401164:	4b1f      	ldr	r3, [pc, #124]	; (4011e4 <printDetails+0x13c>)
  401166:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  40116a:	481f      	ldr	r0, [pc, #124]	; (4011e8 <printDetails+0x140>)
  40116c:	47a8      	blx	r5
}
  40116e:	b004      	add	sp, #16
  401170:	bd70      	pop	{r4, r5, r6, pc}
  401172:	bf00      	nop
  401174:	20400018 	.word	0x20400018
  401178:	431bde83 	.word	0x431bde83
  40117c:	00405abc 	.word	0x00405abc
  401180:	00402d5d 	.word	0x00402d5d
  401184:	00400f8d 	.word	0x00400f8d
  401188:	00405ad4 	.word	0x00405ad4
  40118c:	00405b1c 	.word	0x00405b1c
  401190:	00400d89 	.word	0x00400d89
  401194:	00405b2c 	.word	0x00405b2c
  401198:	00400ecd 	.word	0x00400ecd
  40119c:	00405b3c 	.word	0x00405b3c
  4011a0:	00405b48 	.word	0x00405b48
  4011a4:	00405b54 	.word	0x00405b54
  4011a8:	00405b60 	.word	0x00405b60
  4011ac:	00405b68 	.word	0x00405b68
  4011b0:	00405b74 	.word	0x00405b74
  4011b4:	00405b7c 	.word	0x00405b7c
  4011b8:	00405b88 	.word	0x00405b88
  4011bc:	00405b90 	.word	0x00405b90
  4011c0:	00400ff1 	.word	0x00400ff1
  4011c4:	00405c44 	.word	0x00405c44
  4011c8:	00405ba0 	.word	0x00405ba0
  4011cc:	00405c50 	.word	0x00405c50
  4011d0:	00405bb4 	.word	0x00405bb4
  4011d4:	00401039 	.word	0x00401039
  4011d8:	00405c20 	.word	0x00405c20
  4011dc:	00405bc4 	.word	0x00405bc4
  4011e0:	00401095 	.word	0x00401095
  4011e4:	00405c7c 	.word	0x00405c7c
  4011e8:	00405bd8 	.word	0x00405bd8

004011ec <nRF24_setAddressWidth>:
 * 
 * \param width address width
 *
 */
void nRF24_setAddressWidth(uint8_t width)
{
  4011ec:	b510      	push	{r4, lr}
	if (width -= 2){
  4011ee:	3802      	subs	r0, #2
  4011f0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  4011f4:	d107      	bne.n	401206 <nRF24_setAddressWidth+0x1a>
		nRF24_writeRegister(SETUP_AW, width % 4);
		addr_width = (width % 4) + 2;
		} else {
		nRF24_writeRegister(SETUP_AW, 0);
  4011f6:	2100      	movs	r1, #0
  4011f8:	2003      	movs	r0, #3
  4011fa:	4b08      	ldr	r3, [pc, #32]	; (40121c <nRF24_setAddressWidth+0x30>)
  4011fc:	4798      	blx	r3
		addr_width = 2;
  4011fe:	2202      	movs	r2, #2
  401200:	4b07      	ldr	r3, [pc, #28]	; (401220 <nRF24_setAddressWidth+0x34>)
  401202:	701a      	strb	r2, [r3, #0]
  401204:	bd10      	pop	{r4, pc}
		nRF24_writeRegister(SETUP_AW, width % 4);
  401206:	f000 0403 	and.w	r4, r0, #3
  40120a:	4621      	mov	r1, r4
  40120c:	2003      	movs	r0, #3
  40120e:	4b03      	ldr	r3, [pc, #12]	; (40121c <nRF24_setAddressWidth+0x30>)
  401210:	4798      	blx	r3
		addr_width = (width % 4) + 2;
  401212:	1ca0      	adds	r0, r4, #2
  401214:	4b02      	ldr	r3, [pc, #8]	; (401220 <nRF24_setAddressWidth+0x34>)
  401216:	7018      	strb	r0, [r3, #0]
  401218:	bd10      	pop	{r4, pc}
  40121a:	bf00      	nop
  40121c:	00400f21 	.word	0x00400f21
  401220:	204082ec 	.word	0x204082ec

00401224 <toggle_features>:
/**
 * \brief toggels ACK features
 *
 */
void toggle_features(void)
{
  401224:	b500      	push	{lr}
  401226:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  401228:	4b05      	ldr	r3, [pc, #20]	; (401240 <toggle_features+0x1c>)
  40122a:	881b      	ldrh	r3, [r3, #0]
  40122c:	a802      	add	r0, sp, #8
  40122e:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  401232:	2102      	movs	r1, #2
  401234:	4b03      	ldr	r3, [pc, #12]	; (401244 <toggle_features+0x20>)
  401236:	4798      	blx	r3
}
  401238:	b003      	add	sp, #12
  40123a:	f85d fb04 	ldr.w	pc, [sp], #4
  40123e:	bf00      	nop
  401240:	00405ab8 	.word	0x00405ab8
  401244:	004015ad 	.word	0x004015ad

00401248 <nRF24_setChannel>:
 * 
 * \param channel ferquency channel used
 *
 */
void nRF24_setChannel(uint8_t channel)
{
  401248:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  40124a:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  40124c:	bf8c      	ite	hi
  40124e:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  401250:	4601      	movls	r1, r0
  401252:	2005      	movs	r0, #5
  401254:	4b01      	ldr	r3, [pc, #4]	; (40125c <nRF24_setChannel+0x14>)
  401256:	4798      	blx	r3
  401258:	bd08      	pop	{r3, pc}
  40125a:	bf00      	nop
  40125c:	00400f21 	.word	0x00400f21

00401260 <nRF24_powerUp>:
/**
 * \brief power up the internal logic of the nRF24 chip
 * 
 */
void nRF24_powerUp(void)
{
  401260:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  401262:	2000      	movs	r0, #0
  401264:	4b07      	ldr	r3, [pc, #28]	; (401284 <nRF24_powerUp+0x24>)
  401266:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  401268:	f010 0f02 	tst.w	r0, #2
  40126c:	d000      	beq.n	401270 <nRF24_powerUp+0x10>
  40126e:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  401270:	f040 0102 	orr.w	r1, r0, #2
  401274:	b2c9      	uxtb	r1, r1
  401276:	2000      	movs	r0, #0
  401278:	4b03      	ldr	r3, [pc, #12]	; (401288 <nRF24_powerUp+0x28>)
  40127a:	4798      	blx	r3
		delay_ms(5);
  40127c:	4803      	ldr	r0, [pc, #12]	; (40128c <nRF24_powerUp+0x2c>)
  40127e:	4b04      	ldr	r3, [pc, #16]	; (401290 <nRF24_powerUp+0x30>)
  401280:	4798      	blx	r3
	}
}
  401282:	e7f4      	b.n	40126e <nRF24_powerUp+0xe>
  401284:	00400ea5 	.word	0x00400ea5
  401288:	00400f21 	.word	0x00400f21
  40128c:	0003dbc2 	.word	0x0003dbc2
  401290:	20400001 	.word	0x20400001

00401294 <nRF24_stopListening>:
/**
 * \brief use the nRF24 module as transmitter
 *
 */
void nRF24_stopListening(void)
{
  401294:	b538      	push	{r3, r4, r5, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401296:	f44f 7200 	mov.w	r2, #512	; 0x200
  40129a:	4b21      	ldr	r3, [pc, #132]	; (401320 <nRF24_stopListening+0x8c>)
  40129c:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	
	delay_us(txDelay);
  40129e:	4b21      	ldr	r3, [pc, #132]	; (401324 <nRF24_stopListening+0x90>)
  4012a0:	6819      	ldr	r1, [r3, #0]
  4012a2:	2900      	cmp	r1, #0
  4012a4:	d034      	beq.n	401310 <nRF24_stopListening+0x7c>
  4012a6:	4a20      	ldr	r2, [pc, #128]	; (401328 <nRF24_stopListening+0x94>)
  4012a8:	2300      	movs	r3, #0
  4012aa:	4c20      	ldr	r4, [pc, #128]	; (40132c <nRF24_stopListening+0x98>)
  4012ac:	2500      	movs	r5, #0
  4012ae:	4820      	ldr	r0, [pc, #128]	; (401330 <nRF24_stopListening+0x9c>)
  4012b0:	fbe0 4501 	umlal	r4, r5, r0, r1
  4012b4:	4620      	mov	r0, r4
  4012b6:	4629      	mov	r1, r5
  4012b8:	4c1e      	ldr	r4, [pc, #120]	; (401334 <nRF24_stopListening+0xa0>)
  4012ba:	47a0      	blx	r4
  4012bc:	4b1e      	ldr	r3, [pc, #120]	; (401338 <nRF24_stopListening+0xa4>)
  4012be:	4798      	blx	r3
	if (nRF24_readRegister(FEATURE) & 1<<(EN_ACK_PAY))
  4012c0:	201d      	movs	r0, #29
  4012c2:	4b1e      	ldr	r3, [pc, #120]	; (40133c <nRF24_stopListening+0xa8>)
  4012c4:	4798      	blx	r3
  4012c6:	f010 0f02 	tst.w	r0, #2
  4012ca:	d011      	beq.n	4012f0 <nRF24_stopListening+0x5c>
	{
		delay_us(txDelay);
  4012cc:	4b15      	ldr	r3, [pc, #84]	; (401324 <nRF24_stopListening+0x90>)
  4012ce:	6819      	ldr	r1, [r3, #0]
  4012d0:	b311      	cbz	r1, 401318 <nRF24_stopListening+0x84>
  4012d2:	4a15      	ldr	r2, [pc, #84]	; (401328 <nRF24_stopListening+0x94>)
  4012d4:	2300      	movs	r3, #0
  4012d6:	4c15      	ldr	r4, [pc, #84]	; (40132c <nRF24_stopListening+0x98>)
  4012d8:	2500      	movs	r5, #0
  4012da:	4815      	ldr	r0, [pc, #84]	; (401330 <nRF24_stopListening+0x9c>)
  4012dc:	fbe0 4501 	umlal	r4, r5, r0, r1
  4012e0:	4620      	mov	r0, r4
  4012e2:	4629      	mov	r1, r5
  4012e4:	4c13      	ldr	r4, [pc, #76]	; (401334 <nRF24_stopListening+0xa0>)
  4012e6:	47a0      	blx	r4
  4012e8:	4b13      	ldr	r3, [pc, #76]	; (401338 <nRF24_stopListening+0xa4>)
  4012ea:	4798      	blx	r3
		nRF24_FlushTx();
  4012ec:	4b14      	ldr	r3, [pc, #80]	; (401340 <nRF24_stopListening+0xac>)
  4012ee:	4798      	blx	r3
	}
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4012f0:	2000      	movs	r0, #0
  4012f2:	4d12      	ldr	r5, [pc, #72]	; (40133c <nRF24_stopListening+0xa8>)
  4012f4:	47a8      	blx	r5
  4012f6:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4012fa:	2000      	movs	r0, #0
  4012fc:	4c11      	ldr	r4, [pc, #68]	; (401344 <nRF24_stopListening+0xb0>)
  4012fe:	47a0      	blx	r4
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
  401300:	2002      	movs	r0, #2
  401302:	47a8      	blx	r5
  401304:	f040 0101 	orr.w	r1, r0, #1
  401308:	b2c9      	uxtb	r1, r1
  40130a:	2002      	movs	r0, #2
  40130c:	47a0      	blx	r4
  40130e:	bd38      	pop	{r3, r4, r5, pc}
	delay_us(txDelay);
  401310:	2033      	movs	r0, #51	; 0x33
  401312:	4b09      	ldr	r3, [pc, #36]	; (401338 <nRF24_stopListening+0xa4>)
  401314:	4798      	blx	r3
  401316:	e7d3      	b.n	4012c0 <nRF24_stopListening+0x2c>
		delay_us(txDelay);
  401318:	2033      	movs	r0, #51	; 0x33
  40131a:	4b07      	ldr	r3, [pc, #28]	; (401338 <nRF24_stopListening+0xa4>)
  40131c:	4798      	blx	r3
  40131e:	e7e5      	b.n	4012ec <nRF24_stopListening+0x58>
  401320:	400e1200 	.word	0x400e1200
  401324:	204082f8 	.word	0x204082f8
  401328:	005a83e0 	.word	0x005a83e0
  40132c:	005a83df 	.word	0x005a83df
  401330:	11e1a300 	.word	0x11e1a300
  401334:	004029fd 	.word	0x004029fd
  401338:	20400001 	.word	0x20400001
  40133c:	00400ea5 	.word	0x00400ea5
  401340:	00400f6d 	.word	0x00400f6d
  401344:	00400f21 	.word	0x00400f21

00401348 <nRF24_begin>:
 * address width: 32 bit / 4 bytes
 * 
 * \return 1 if nRF24 module reacts to data
 */
bool nRF24_begin(void)
{
  401348:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40134a:	4b1a      	ldr	r3, [pc, #104]	; (4013b4 <nRF24_begin+0x6c>)
  40134c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401350:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401352:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401356:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  401358:	210c      	movs	r1, #12
  40135a:	2000      	movs	r0, #0
  40135c:	4c16      	ldr	r4, [pc, #88]	; (4013b8 <nRF24_begin+0x70>)
  40135e:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  401360:	215f      	movs	r1, #95	; 0x5f
  401362:	2004      	movs	r0, #4
  401364:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  401366:	2000      	movs	r0, #0
  401368:	4b14      	ldr	r3, [pc, #80]	; (4013bc <nRF24_begin+0x74>)
  40136a:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  40136c:	2002      	movs	r0, #2
  40136e:	4b14      	ldr	r3, [pc, #80]	; (4013c0 <nRF24_begin+0x78>)
  401370:	4798      	blx	r3
	toggle_features();
  401372:	4b14      	ldr	r3, [pc, #80]	; (4013c4 <nRF24_begin+0x7c>)
  401374:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  401376:	2170      	movs	r1, #112	; 0x70
  401378:	2007      	movs	r0, #7
  40137a:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  40137c:	204c      	movs	r0, #76	; 0x4c
  40137e:	4b12      	ldr	r3, [pc, #72]	; (4013c8 <nRF24_begin+0x80>)
  401380:	4798      	blx	r3
	nRF24_setAddressWidth(ADDR_4bytes);
  401382:	2004      	movs	r0, #4
  401384:	4b11      	ldr	r3, [pc, #68]	; (4013cc <nRF24_begin+0x84>)
  401386:	4798      	blx	r3
	
	nRF24_FlushRx();
  401388:	4b11      	ldr	r3, [pc, #68]	; (4013d0 <nRF24_begin+0x88>)
  40138a:	4798      	blx	r3
	nRF24_FlushTx();
  40138c:	4b11      	ldr	r3, [pc, #68]	; (4013d4 <nRF24_begin+0x8c>)
  40138e:	4798      	blx	r3
	
	nRF24_powerUp();
  401390:	4b11      	ldr	r3, [pc, #68]	; (4013d8 <nRF24_begin+0x90>)
  401392:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  401394:	2000      	movs	r0, #0
  401396:	4d11      	ldr	r5, [pc, #68]	; (4013dc <nRF24_begin+0x94>)
  401398:	47a8      	blx	r5
  40139a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  40139e:	2000      	movs	r0, #0
  4013a0:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  4013a2:	2006      	movs	r0, #6
  4013a4:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  4013a6:	3801      	subs	r0, #1
  4013a8:	b2c0      	uxtb	r0, r0
}
  4013aa:	28fd      	cmp	r0, #253	; 0xfd
  4013ac:	bf8c      	ite	hi
  4013ae:	2000      	movhi	r0, #0
  4013b0:	2001      	movls	r0, #1
  4013b2:	bd38      	pop	{r3, r4, r5, pc}
  4013b4:	400e1200 	.word	0x400e1200
  4013b8:	00400f21 	.word	0x00400f21
  4013bc:	00400fad 	.word	0x00400fad
  4013c0:	0040100d 	.word	0x0040100d
  4013c4:	00401225 	.word	0x00401225
  4013c8:	00401249 	.word	0x00401249
  4013cc:	004011ed 	.word	0x004011ed
  4013d0:	00400f4d 	.word	0x00400f4d
  4013d4:	00400f6d 	.word	0x00400f6d
  4013d8:	00401261 	.word	0x00401261
  4013dc:	00400ea5 	.word	0x00400ea5

004013e0 <nRF24_openWritingPipe>:
 * 
 * \param address address of the receiving module
 *
 */
void nRF24_openWritingPipe(uint64_t address)
{
  4013e0:	b570      	push	{r4, r5, r6, lr}
  4013e2:	b082      	sub	sp, #8
  4013e4:	ac02      	add	r4, sp, #8
  4013e6:	e964 0102 	strd	r0, r1, [r4, #-8]!
	writeRegister(RX_ADDR_P0, (uint8_t *)(&address), addr_width);
  4013ea:	4e08      	ldr	r6, [pc, #32]	; (40140c <nRF24_openWritingPipe+0x2c>)
  4013ec:	7832      	ldrb	r2, [r6, #0]
  4013ee:	4621      	mov	r1, r4
  4013f0:	200a      	movs	r0, #10
  4013f2:	4d07      	ldr	r5, [pc, #28]	; (401410 <nRF24_openWritingPipe+0x30>)
  4013f4:	47a8      	blx	r5
	writeRegister(TX_ADDR, (uint8_t *)(&address), addr_width);
  4013f6:	7832      	ldrb	r2, [r6, #0]
  4013f8:	4621      	mov	r1, r4
  4013fa:	2010      	movs	r0, #16
  4013fc:	47a8      	blx	r5
	
	nRF24_writeRegister(RX_PW_P0, payload_size);
  4013fe:	4b05      	ldr	r3, [pc, #20]	; (401414 <nRF24_openWritingPipe+0x34>)
  401400:	7819      	ldrb	r1, [r3, #0]
  401402:	2011      	movs	r0, #17
  401404:	4b04      	ldr	r3, [pc, #16]	; (401418 <nRF24_openWritingPipe+0x38>)
  401406:	4798      	blx	r3
}
  401408:	b002      	add	sp, #8
  40140a:	bd70      	pop	{r4, r5, r6, pc}
  40140c:	204082ec 	.word	0x204082ec
  401410:	00400e59 	.word	0x00400e59
  401414:	20400016 	.word	0x20400016
  401418:	00400f21 	.word	0x00400f21

0040141c <nRF24_write>:
 * \param buf: pointer to the data buffer
 * \param len: length of the payload to be written
 *
 */
bool nRF24_write(const void* buf, uint8_t len)
{
  40141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40141e:	af00      	add	r7, sp, #0
{
  401420:	466e      	mov	r6, sp
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  401422:	4b24      	ldr	r3, [pc, #144]	; (4014b4 <nRF24_write+0x98>)
  401424:	781b      	ldrb	r3, [r3, #0]
  401426:	bb53      	cbnz	r3, 40147e <nRF24_write+0x62>
  401428:	4b23      	ldr	r3, [pc, #140]	; (4014b8 <nRF24_write+0x9c>)
  40142a:	781b      	ldrb	r3, [r3, #0]
  40142c:	1a5b      	subs	r3, r3, r1
  40142e:	b2db      	uxtb	r3, r3
	uint8_t size = data_len + blanklen + 1;
  401430:	3101      	adds	r1, #1
  401432:	4419      	add	r1, r3
  401434:	b2c9      	uxtb	r1, r1
	uint8_t s_buff[size];
  401436:	1dcb      	adds	r3, r1, #7
  401438:	f023 0307 	bic.w	r3, r3, #7
  40143c:	ebad 0d03 	sub.w	sp, sp, r3
  401440:	46ee      	mov	lr, sp
	s_buff[0] = writeType;
  401442:	23a0      	movs	r3, #160	; 0xa0
  401444:	f88d 3000 	strb.w	r3, [sp]
	for (uint8_t i = 1; i< size; i++)
  401448:	2901      	cmp	r1, #1
  40144a:	d90b      	bls.n	401464 <nRF24_write+0x48>
  40144c:	1e43      	subs	r3, r0, #1
  40144e:	f10d 0201 	add.w	r2, sp, #1
  401452:	1e8d      	subs	r5, r1, #2
  401454:	fa50 f585 	uxtab	r5, r0, r5
		s_buff[i] = current[i-1];
  401458:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  40145c:	f802 4b01 	strb.w	r4, [r2], #1
	for (uint8_t i = 1; i< size; i++)
  401460:	42ab      	cmp	r3, r5
  401462:	d1f9      	bne.n	401458 <nRF24_write+0x3c>
	spi_master_transfer(s_buff, size);
  401464:	4670      	mov	r0, lr
  401466:	4b15      	ldr	r3, [pc, #84]	; (4014bc <nRF24_write+0xa0>)
  401468:	4798      	blx	r3
  40146a:	46b5      	mov	sp, r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40146c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401470:	4b13      	ldr	r3, [pc, #76]	; (4014c0 <nRF24_write+0xa4>)
  401472:	631a      	str	r2, [r3, #48]	; 0x30
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  401474:	4c13      	ldr	r4, [pc, #76]	; (4014c4 <nRF24_write+0xa8>)
		delay_us(100);
  401476:	f241 36c2 	movw	r6, #5058	; 0x13c2
  40147a:	4d13      	ldr	r5, [pc, #76]	; (4014c8 <nRF24_write+0xac>)
  40147c:	e003      	b.n	401486 <nRF24_write+0x6a>
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  40147e:	2300      	movs	r3, #0
  401480:	e7d6      	b.n	401430 <nRF24_write+0x14>
		delay_us(100);
  401482:	4630      	mov	r0, r6
  401484:	47a8      	blx	r5
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  401486:	47a0      	blx	r4
  401488:	f010 0f30 	tst.w	r0, #48	; 0x30
  40148c:	d0f9      	beq.n	401482 <nRF24_write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40148e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401492:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <nRF24_write+0xa4>)
  401494:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t status = nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  401496:	2170      	movs	r1, #112	; 0x70
  401498:	2007      	movs	r0, #7
  40149a:	4b0c      	ldr	r3, [pc, #48]	; (4014cc <nRF24_write+0xb0>)
  40149c:	4798      	blx	r3
	if(status & (1<<MAX_RT)){
  40149e:	f010 0f10 	tst.w	r0, #16
  4014a2:	d102      	bne.n	4014aa <nRF24_write+0x8e>
	return 1;
  4014a4:	2001      	movs	r0, #1
	return nRFwrite(buf, len, 0);
  4014a6:	46bd      	mov	sp, r7
  4014a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nRF24_FlushTx();
  4014aa:	4b09      	ldr	r3, [pc, #36]	; (4014d0 <nRF24_write+0xb4>)
  4014ac:	4798      	blx	r3
		return 0;
  4014ae:	2000      	movs	r0, #0
  4014b0:	e7f9      	b.n	4014a6 <nRF24_write+0x8a>
  4014b2:	bf00      	nop
  4014b4:	2040723c 	.word	0x2040723c
  4014b8:	20400016 	.word	0x20400016
  4014bc:	004015ad 	.word	0x004015ad
  4014c0:	400e1200 	.word	0x400e1200
  4014c4:	00400f8d 	.word	0x00400f8d
  4014c8:	20400001 	.word	0x20400001
  4014cc:	00400f21 	.word	0x00400f21
  4014d0:	00400f6d 	.word	0x00400f6d

004014d4 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
void spi_master_initialize(void)
{	
  4014d4:	b538      	push	{r3, r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014d6:	4b28      	ldr	r3, [pc, #160]	; (401578 <spi_master_initialize+0xa4>)
  4014d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4014dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4014e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014e8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4014ec:	2500      	movs	r5, #0
  4014ee:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014f2:	601a      	str	r2, [r3, #0]
	#ifdef _DEBUG_
puts("-I- Initialize SPI as master\r");
#endif
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
  4014f4:	4c21      	ldr	r4, [pc, #132]	; (40157c <spi_master_initialize+0xa8>)
  4014f6:	4620      	mov	r0, r4
  4014f8:	4b21      	ldr	r3, [pc, #132]	; (401580 <spi_master_initialize+0xac>)
  4014fa:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4014fc:	2302      	movs	r3, #2
  4014fe:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401500:	2380      	movs	r3, #128	; 0x80
  401502:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401508:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40150a:	6863      	ldr	r3, [r4, #4]
  40150c:	f043 0301 	orr.w	r3, r3, #1
  401510:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401512:	6863      	ldr	r3, [r4, #4]
  401514:	f043 0310 	orr.w	r3, r3, #16
  401518:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_PCS);
  40151a:	210d      	movs	r1, #13
  40151c:	4620      	mov	r0, r4
  40151e:	4b19      	ldr	r3, [pc, #100]	; (401584 <spi_master_initialize+0xb0>)
  401520:	4798      	blx	r3
	spi_configure_cs_behavior(SPI0, SPI_CHIP_SEL, SPI_CS_RISE_NO_TX);
  401522:	462a      	mov	r2, r5
  401524:	2101      	movs	r1, #1
  401526:	4620      	mov	r0, r4
  401528:	4b17      	ldr	r3, [pc, #92]	; (401588 <spi_master_initialize+0xb4>)
  40152a:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI0, SPI_DLYBCS);
  40152c:	2105      	movs	r1, #5
  40152e:	4620      	mov	r0, r4
  401530:	4b16      	ldr	r3, [pc, #88]	; (40158c <spi_master_initialize+0xb8>)
  401532:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  401534:	462a      	mov	r2, r5
  401536:	2101      	movs	r1, #1
  401538:	4620      	mov	r0, r4
  40153a:	4b15      	ldr	r3, [pc, #84]	; (401590 <spi_master_initialize+0xbc>)
  40153c:	4798      	blx	r3
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
  40153e:	2201      	movs	r2, #1
  401540:	4611      	mov	r1, r2
  401542:	4620      	mov	r0, r4
  401544:	4b13      	ldr	r3, [pc, #76]	; (401594 <spi_master_initialize+0xc0>)
  401546:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  401548:	462a      	mov	r2, r5
  40154a:	2101      	movs	r1, #1
  40154c:	4620      	mov	r0, r4
  40154e:	4b12      	ldr	r3, [pc, #72]	; (401598 <spi_master_initialize+0xc4>)
  401550:	4798      	blx	r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL, (sysclk_get_peripheral_hz() / gs_ul_spi_clock));
  401552:	4b12      	ldr	r3, [pc, #72]	; (40159c <spi_master_initialize+0xc8>)
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	4a12      	ldr	r2, [pc, #72]	; (4015a0 <spi_master_initialize+0xcc>)
  401558:	fbb2 f2f3 	udiv	r2, r2, r3
  40155c:	b2d2      	uxtb	r2, r2
  40155e:	2101      	movs	r1, #1
  401560:	4620      	mov	r0, r4
  401562:	4b10      	ldr	r3, [pc, #64]	; (4015a4 <spi_master_initialize+0xd0>)
  401564:	4798      	blx	r3
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
  401566:	2308      	movs	r3, #8
  401568:	2220      	movs	r2, #32
  40156a:	2101      	movs	r1, #1
  40156c:	4620      	mov	r0, r4
  40156e:	4d0e      	ldr	r5, [pc, #56]	; (4015a8 <spi_master_initialize+0xd4>)
  401570:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401572:	2301      	movs	r3, #1
  401574:	6023      	str	r3, [r4, #0]
  401576:	bd38      	pop	{r3, r4, r5, pc}
  401578:	e000e100 	.word	0xe000e100
  40157c:	40008000 	.word	0x40008000
  401580:	00400869 	.word	0x00400869
  401584:	00400895 	.word	0x00400895
  401588:	0040095d 	.word	0x0040095d
  40158c:	004008ab 	.word	0x004008ab
  401590:	00400921 	.word	0x00400921
  401594:	0040093f 	.word	0x0040093f
  401598:	004009a3 	.word	0x004009a3
  40159c:	20400018 	.word	0x20400018
  4015a0:	08f0d180 	.word	0x08f0d180
  4015a4:	004009b7 	.word	0x004009b7
  4015a8:	004009df 	.word	0x004009df

004015ac <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
  4015ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4015b0:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  4015b2:	b1d9      	cbz	r1, 4015ec <spi_master_transfer+0x40>
  4015b4:	4688      	mov	r8, r1
  4015b6:	4605      	mov	r5, r0
  4015b8:	4480      	add	r8, r0
		if (i != size)
		{
			spi_write(SPI0, p_buffer[i], 0, 0);
  4015ba:	4c0f      	ldr	r4, [pc, #60]	; (4015f8 <spi_master_transfer+0x4c>)
  4015bc:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401608 <spi_master_transfer+0x5c>
		{
			spi_write(SPI0, p_buffer[i], 0, 1);
		}
		/* Wait transfer done. */
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
		spi_read(SPI0, &data, &uc_pcs);
  4015c0:	4e0e      	ldr	r6, [pc, #56]	; (4015fc <spi_master_transfer+0x50>)
  4015c2:	462f      	mov	r7, r5
			spi_write(SPI0, p_buffer[i], 0, 0);
  4015c4:	2300      	movs	r3, #0
  4015c6:	461a      	mov	r2, r3
  4015c8:	7829      	ldrb	r1, [r5, #0]
  4015ca:	4620      	mov	r0, r4
  4015cc:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  4015ce:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
  4015d0:	f013 0f01 	tst.w	r3, #1
  4015d4:	d0fb      	beq.n	4015ce <spi_master_transfer+0x22>
		spi_read(SPI0, &data, &uc_pcs);
  4015d6:	f10d 0207 	add.w	r2, sp, #7
  4015da:	4631      	mov	r1, r6
  4015dc:	4620      	mov	r0, r4
  4015de:	4b08      	ldr	r3, [pc, #32]	; (401600 <spi_master_transfer+0x54>)
  4015e0:	4798      	blx	r3
		p_buffer[i] = data;
  4015e2:	8833      	ldrh	r3, [r6, #0]
  4015e4:	703b      	strb	r3, [r7, #0]
  4015e6:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  4015e8:	4545      	cmp	r5, r8
  4015ea:	d1ea      	bne.n	4015c2 <spi_master_transfer+0x16>
	}
	delay_us(2);
  4015ec:	2066      	movs	r0, #102	; 0x66
  4015ee:	4b05      	ldr	r3, [pc, #20]	; (401604 <spi_master_transfer+0x58>)
  4015f0:	4798      	blx	r3
  4015f2:	b003      	add	sp, #12
  4015f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015f8:	40008000 	.word	0x40008000
  4015fc:	2040723e 	.word	0x2040723e
  401600:	004008bd 	.word	0x004008bd
  401604:	20400001 	.word	0x20400001
  401608:	004008ed 	.word	0x004008ed

0040160c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40160c:	3801      	subs	r0, #1
  40160e:	2802      	cmp	r0, #2
  401610:	d815      	bhi.n	40163e <_write+0x32>
{
  401612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401616:	460e      	mov	r6, r1
  401618:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40161a:	b19a      	cbz	r2, 401644 <_write+0x38>
  40161c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40161e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401658 <_write+0x4c>
  401622:	4f0c      	ldr	r7, [pc, #48]	; (401654 <_write+0x48>)
  401624:	f8d8 0000 	ldr.w	r0, [r8]
  401628:	f815 1b01 	ldrb.w	r1, [r5], #1
  40162c:	683b      	ldr	r3, [r7, #0]
  40162e:	4798      	blx	r3
  401630:	2800      	cmp	r0, #0
  401632:	db0a      	blt.n	40164a <_write+0x3e>
  401634:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401636:	3c01      	subs	r4, #1
  401638:	d1f4      	bne.n	401624 <_write+0x18>
  40163a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40163e:	f04f 30ff 	mov.w	r0, #4294967295
  401642:	4770      	bx	lr
	for (; len != 0; --len) {
  401644:	4610      	mov	r0, r2
  401646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40164a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401652:	bf00      	nop
  401654:	204082fc 	.word	0x204082fc
  401658:	20408300 	.word	0x20408300

0040165c <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  40165c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40165e:	b083      	sub	sp, #12
  401660:	4604      	mov	r4, r0
  401662:	460f      	mov	r7, r1
  401664:	4616      	mov	r6, r2
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  401666:	6803      	ldr	r3, [r0, #0]
  401668:	f043 0310 	orr.w	r3, r3, #16
  40166c:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  40166e:	ab01      	add	r3, sp, #4
  401670:	2201      	movs	r2, #1
  401672:	4d36      	ldr	r5, [pc, #216]	; (40174c <ethernet_phy_set_link+0xf0>)
  401674:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  401676:	b958      	cbnz	r0, 401690 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  401678:	9b01      	ldr	r3, [sp, #4]
  40167a:	f013 0f04 	tst.w	r3, #4
  40167e:	d10d      	bne.n	40169c <ethernet_phy_set_link+0x40>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401680:	6823      	ldr	r3, [r4, #0]
  401682:	f023 0310 	bic.w	r3, r3, #16
  401686:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  401688:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40168a:	4618      	mov	r0, r3
  40168c:	b003      	add	sp, #12
  40168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401690:	4603      	mov	r3, r0
  401692:	6822      	ldr	r2, [r4, #0]
  401694:	f022 0210 	bic.w	r2, r2, #16
  401698:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40169a:	e7f6      	b.n	40168a <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  40169c:	b92e      	cbnz	r6, 4016aa <ethernet_phy_set_link+0x4e>
  40169e:	6823      	ldr	r3, [r4, #0]
  4016a0:	f023 0310 	bic.w	r3, r3, #16
  4016a4:	6023      	str	r3, [r4, #0]
		return uc_rc;
  4016a6:	4633      	mov	r3, r6
  4016a8:	e7ef      	b.n	40168a <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  4016aa:	466b      	mov	r3, sp
  4016ac:	221e      	movs	r2, #30
  4016ae:	4639      	mov	r1, r7
  4016b0:	4620      	mov	r0, r4
  4016b2:	4d26      	ldr	r5, [pc, #152]	; (40174c <ethernet_phy_set_link+0xf0>)
  4016b4:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4016b6:	4603      	mov	r3, r0
  4016b8:	b950      	cbnz	r0, 4016d0 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  4016ba:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  4016bc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  4016c0:	d00b      	beq.n	4016da <ethernet_phy_set_link+0x7e>
  4016c2:	9900      	ldr	r1, [sp, #0]
  4016c4:	f011 0f05 	tst.w	r1, #5
  4016c8:	bf0c      	ite	eq
  4016ca:	2101      	moveq	r1, #1
  4016cc:	2100      	movne	r1, #0
  4016ce:	e005      	b.n	4016dc <ethernet_phy_set_link+0x80>
  4016d0:	6822      	ldr	r2, [r4, #0]
  4016d2:	f022 0210 	bic.w	r2, r2, #16
  4016d6:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4016d8:	e7d7      	b.n	40168a <ethernet_phy_set_link+0x2e>
  4016da:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  4016dc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  4016e0:	d003      	beq.n	4016ea <ethernet_phy_set_link+0x8e>
  4016e2:	9800      	ldr	r0, [sp, #0]
  4016e4:	f010 0f02 	tst.w	r0, #2
  4016e8:	d127      	bne.n	40173a <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4016ea:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4016ee:	d003      	beq.n	4016f8 <ethernet_phy_set_link+0x9c>
  4016f0:	9a00      	ldr	r2, [sp, #0]
  4016f2:	f012 0f01 	tst.w	r2, #1
  4016f6:	d111      	bne.n	40171c <ethernet_phy_set_link+0xc0>
	if (uc_speed) {
  4016f8:	b191      	cbz	r1, 401720 <ethernet_phy_set_link+0xc4>
  4016fa:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  4016fc:	6861      	ldr	r1, [r4, #4]
  4016fe:	f041 0101 	orr.w	r1, r1, #1
  401702:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  401704:	b1a2      	cbz	r2, 401730 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  401706:	6862      	ldr	r2, [r4, #4]
  401708:	f042 0202 	orr.w	r2, r2, #2
  40170c:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40170e:	6822      	ldr	r2, [r4, #0]
  401710:	f022 0210 	bic.w	r2, r2, #16
  401714:	6022      	str	r2, [r4, #0]
	return uc_rc;
  401716:	e7b8      	b.n	40168a <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  401718:	461a      	mov	r2, r3
  40171a:	e7ef      	b.n	4016fc <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  40171c:	461a      	mov	r2, r3
  40171e:	e000      	b.n	401722 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  401720:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  401722:	6861      	ldr	r1, [r4, #4]
  401724:	f021 0101 	bic.w	r1, r1, #1
  401728:	6061      	str	r1, [r4, #4]
  40172a:	e7eb      	b.n	401704 <ethernet_phy_set_link+0xa8>
  40172c:	461a      	mov	r2, r3
  40172e:	e7f8      	b.n	401722 <ethernet_phy_set_link+0xc6>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  401730:	6862      	ldr	r2, [r4, #4]
  401732:	f022 0202 	bic.w	r2, r2, #2
  401736:	6062      	str	r2, [r4, #4]
  401738:	e7e9      	b.n	40170e <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40173a:	f412 6f00 	tst.w	r2, #2048	; 0x800
  40173e:	d0eb      	beq.n	401718 <ethernet_phy_set_link+0xbc>
  401740:	9a00      	ldr	r2, [sp, #0]
  401742:	f012 0f01 	tst.w	r2, #1
  401746:	d1f1      	bne.n	40172c <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  401748:	461a      	mov	r2, r3
  40174a:	e7d7      	b.n	4016fc <ethernet_phy_set_link+0xa0>
  40174c:	00401ad9 	.word	0x00401ad9

00401750 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  401750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401754:	b082      	sub	sp, #8
  401756:	4604      	mov	r4, r0
  401758:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40175a:	6803      	ldr	r3, [r0, #0]
  40175c:	f043 0310 	orr.w	r3, r3, #16
  401760:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  401762:	ab01      	add	r3, sp, #4
  401764:	2200      	movs	r2, #0
  401766:	4e5d      	ldr	r6, [pc, #372]	; (4018dc <ethernet_phy_auto_negotiate+0x18c>)
  401768:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40176a:	b140      	cbz	r0, 40177e <ethernet_phy_auto_negotiate+0x2e>
  40176c:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40176e:	6822      	ldr	r2, [r4, #0]
  401770:	f022 0210 	bic.w	r2, r2, #16
  401774:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  401776:	4618      	mov	r0, r3
  401778:	b002      	add	sp, #8
  40177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  40177e:	9b01      	ldr	r3, [sp, #4]
  401780:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  401784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401788:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40178a:	2200      	movs	r2, #0
  40178c:	4629      	mov	r1, r5
  40178e:	4620      	mov	r0, r4
  401790:	4e53      	ldr	r6, [pc, #332]	; (4018e0 <ethernet_phy_auto_negotiate+0x190>)
  401792:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401794:	4603      	mov	r3, r0
  401796:	b120      	cbz	r0, 4017a2 <ethernet_phy_auto_negotiate+0x52>
  401798:	6822      	ldr	r2, [r4, #0]
  40179a:	f022 0210 	bic.w	r2, r2, #16
  40179e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4017a0:	e7e9      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  4017a2:	f240 13e1 	movw	r3, #481	; 0x1e1
  4017a6:	2204      	movs	r2, #4
  4017a8:	4629      	mov	r1, r5
  4017aa:	4620      	mov	r0, r4
  4017ac:	4e4c      	ldr	r6, [pc, #304]	; (4018e0 <ethernet_phy_auto_negotiate+0x190>)
  4017ae:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4017b0:	4603      	mov	r3, r0
  4017b2:	b120      	cbz	r0, 4017be <ethernet_phy_auto_negotiate+0x6e>
  4017b4:	6822      	ldr	r2, [r4, #0]
  4017b6:	f022 0210 	bic.w	r2, r2, #16
  4017ba:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4017bc:	e7db      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4017be:	ab01      	add	r3, sp, #4
  4017c0:	2200      	movs	r2, #0
  4017c2:	4629      	mov	r1, r5
  4017c4:	4620      	mov	r0, r4
  4017c6:	4e45      	ldr	r6, [pc, #276]	; (4018dc <ethernet_phy_auto_negotiate+0x18c>)
  4017c8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4017ca:	4603      	mov	r3, r0
  4017cc:	b120      	cbz	r0, 4017d8 <ethernet_phy_auto_negotiate+0x88>
  4017ce:	6822      	ldr	r2, [r4, #0]
  4017d0:	f022 0210 	bic.w	r2, r2, #16
  4017d4:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4017d6:	e7ce      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  4017d8:	9b01      	ldr	r3, [sp, #4]
  4017da:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  4017de:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  4017e0:	2200      	movs	r2, #0
  4017e2:	4629      	mov	r1, r5
  4017e4:	4620      	mov	r0, r4
  4017e6:	4e3e      	ldr	r6, [pc, #248]	; (4018e0 <ethernet_phy_auto_negotiate+0x190>)
  4017e8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4017ea:	4603      	mov	r3, r0
  4017ec:	b120      	cbz	r0, 4017f8 <ethernet_phy_auto_negotiate+0xa8>
  4017ee:	6822      	ldr	r2, [r4, #0]
  4017f0:	f022 0210 	bic.w	r2, r2, #16
  4017f4:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4017f6:	e7be      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  4017f8:	9b01      	ldr	r3, [sp, #4]
  4017fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4017fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  401802:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401804:	2200      	movs	r2, #0
  401806:	4629      	mov	r1, r5
  401808:	4620      	mov	r0, r4
  40180a:	4e35      	ldr	r6, [pc, #212]	; (4018e0 <ethernet_phy_auto_negotiate+0x190>)
  40180c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40180e:	4603      	mov	r3, r0
  401810:	b9b0      	cbnz	r0, 401840 <ethernet_phy_auto_negotiate+0xf0>
  401812:	4e34      	ldr	r6, [pc, #208]	; (4018e4 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  401814:	f04f 0801 	mov.w	r8, #1
  401818:	4f30      	ldr	r7, [pc, #192]	; (4018dc <ethernet_phy_auto_negotiate+0x18c>)
  40181a:	ab01      	add	r3, sp, #4
  40181c:	4642      	mov	r2, r8
  40181e:	4629      	mov	r1, r5
  401820:	4620      	mov	r0, r4
  401822:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  401824:	4603      	mov	r3, r0
  401826:	b980      	cbnz	r0, 40184a <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  401828:	9b01      	ldr	r3, [sp, #4]
  40182a:	f013 0f20 	tst.w	r3, #32
  40182e:	d111      	bne.n	401854 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  401830:	3e01      	subs	r6, #1
  401832:	d1f2      	bne.n	40181a <ethernet_phy_auto_negotiate+0xca>
  401834:	6823      	ldr	r3, [r4, #0]
  401836:	f023 0310 	bic.w	r3, r3, #16
  40183a:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  40183c:	2301      	movs	r3, #1
  40183e:	e79a      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
  401840:	6822      	ldr	r2, [r4, #0]
  401842:	f022 0210 	bic.w	r2, r2, #16
  401846:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401848:	e795      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
  40184a:	6822      	ldr	r2, [r4, #0]
  40184c:	f022 0210 	bic.w	r2, r2, #16
  401850:	6022      	str	r2, [r4, #0]
			return uc_rc;
  401852:	e790      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  401854:	466b      	mov	r3, sp
  401856:	2205      	movs	r2, #5
  401858:	4629      	mov	r1, r5
  40185a:	4620      	mov	r0, r4
  40185c:	4d1f      	ldr	r5, [pc, #124]	; (4018dc <ethernet_phy_auto_negotiate+0x18c>)
  40185e:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  401860:	4603      	mov	r3, r0
  401862:	b980      	cbnz	r0, 401886 <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  401864:	9a00      	ldr	r2, [sp, #0]
  401866:	f412 7f80 	tst.w	r2, #256	; 0x100
  40186a:	d113      	bne.n	401894 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  40186c:	f012 0f40 	tst.w	r2, #64	; 0x40
  401870:	d12c      	bne.n	4018cc <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  401872:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  401876:	bf08      	it	eq
  401878:	4602      	moveq	r2, r0
  40187a:	d109      	bne.n	401890 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  40187c:	6861      	ldr	r1, [r4, #4]
  40187e:	f021 0101 	bic.w	r1, r1, #1
  401882:	6061      	str	r1, [r4, #4]
  401884:	e00b      	b.n	40189e <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401886:	6822      	ldr	r2, [r4, #0]
  401888:	f022 0210 	bic.w	r2, r2, #16
  40188c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40188e:	e772      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  401890:	4602      	mov	r2, r0
  401892:	e000      	b.n	401896 <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  401894:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  401896:	6861      	ldr	r1, [r4, #4]
  401898:	f041 0101 	orr.w	r1, r1, #1
  40189c:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  40189e:	b1ba      	cbz	r2, 4018d0 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  4018a0:	6862      	ldr	r2, [r4, #4]
  4018a2:	f042 0202 	orr.w	r2, r2, #2
  4018a6:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  4018a8:	68e2      	ldr	r2, [r4, #12]
  4018aa:	f022 0201 	bic.w	r2, r2, #1
  4018ae:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4018b0:	4a0d      	ldr	r2, [pc, #52]	; (4018e8 <ethernet_phy_auto_negotiate+0x198>)
  4018b2:	6811      	ldr	r1, [r2, #0]
  4018b4:	f041 0108 	orr.w	r1, r1, #8
  4018b8:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4018ba:	6811      	ldr	r1, [r2, #0]
  4018bc:	f041 0104 	orr.w	r1, r1, #4
  4018c0:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4018c2:	6822      	ldr	r2, [r4, #0]
  4018c4:	f022 0210 	bic.w	r2, r2, #16
  4018c8:	6022      	str	r2, [r4, #0]
	return uc_rc;
  4018ca:	e754      	b.n	401776 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  4018cc:	2201      	movs	r2, #1
  4018ce:	e7d5      	b.n	40187c <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4018d0:	6862      	ldr	r2, [r4, #4]
  4018d2:	f022 0202 	bic.w	r2, r2, #2
  4018d6:	6062      	str	r2, [r4, #4]
  4018d8:	e7e6      	b.n	4018a8 <ethernet_phy_auto_negotiate+0x158>
  4018da:	bf00      	nop
  4018dc:	00401ad9 	.word	0x00401ad9
  4018e0:	00401b39 	.word	0x00401b39
  4018e4:	000f4240 	.word	0x000f4240
  4018e8:	40050000 	.word	0x40050000

004018ec <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4018ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018f0:	b083      	sub	sp, #12
  4018f2:	4605      	mov	r5, r0
  4018f4:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4018f6:	6803      	ldr	r3, [r0, #0]
  4018f8:	f043 0310 	orr.w	r3, r3, #16
  4018fc:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  4018fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401902:	ae02      	add	r6, sp, #8
  401904:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  401908:	2200      	movs	r2, #0
  40190a:	4c0e      	ldr	r4, [pc, #56]	; (401944 <ethernet_phy_reset+0x58>)
  40190c:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40190e:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  401910:	f04f 0800 	mov.w	r8, #0
  401914:	4f0c      	ldr	r7, [pc, #48]	; (401948 <ethernet_phy_reset+0x5c>)
  401916:	4633      	mov	r3, r6
  401918:	4642      	mov	r2, r8
  40191a:	4649      	mov	r1, r9
  40191c:	4628      	mov	r0, r5
  40191e:	47b8      	blx	r7
		ul_timeout--;
  401920:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  401922:	9b01      	ldr	r3, [sp, #4]
  401924:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401928:	d001      	beq.n	40192e <ethernet_phy_reset+0x42>
  40192a:	2c00      	cmp	r4, #0
  40192c:	d1f3      	bne.n	401916 <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40192e:	682b      	ldr	r3, [r5, #0]
  401930:	f023 0310 	bic.w	r3, r3, #16
  401934:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  401936:	fab4 f084 	clz	r0, r4
  40193a:	0940      	lsrs	r0, r0, #5
  40193c:	b003      	add	sp, #12
  40193e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401942:	bf00      	nop
  401944:	00401b39 	.word	0x00401b39
  401948:	00401ad9 	.word	0x00401ad9

0040194c <ethernet_phy_init>:
{
  40194c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401950:	b085      	sub	sp, #20
  401952:	4606      	mov	r6, r0
  401954:	4688      	mov	r8, r1
  401956:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  401958:	2401      	movs	r4, #1
  40195a:	9400      	str	r4, [sp, #0]
  40195c:	2300      	movs	r3, #0
  40195e:	4622      	mov	r2, r4
  401960:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401964:	4843      	ldr	r0, [pc, #268]	; (401a74 <ethernet_phy_init+0x128>)
  401966:	4f44      	ldr	r7, [pc, #272]	; (401a78 <ethernet_phy_init+0x12c>)
  401968:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  40196a:	4622      	mov	r2, r4
  40196c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401970:	4842      	ldr	r0, [pc, #264]	; (401a7c <ethernet_phy_init+0x130>)
  401972:	4b43      	ldr	r3, [pc, #268]	; (401a80 <ethernet_phy_init+0x134>)
  401974:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  401976:	f240 32ff 	movw	r2, #1023	; 0x3ff
  40197a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40197e:	4841      	ldr	r0, [pc, #260]	; (401a84 <ethernet_phy_init+0x138>)
  401980:	4b41      	ldr	r3, [pc, #260]	; (401a88 <ethernet_phy_init+0x13c>)
  401982:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  401984:	4641      	mov	r1, r8
  401986:	4841      	ldr	r0, [pc, #260]	; (401a8c <ethernet_phy_init+0x140>)
  401988:	4b41      	ldr	r3, [pc, #260]	; (401a90 <ethernet_phy_init+0x144>)
  40198a:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  40198c:	4b41      	ldr	r3, [pc, #260]	; (401a94 <ethernet_phy_init+0x148>)
  40198e:	429d      	cmp	r5, r3
  401990:	d85d      	bhi.n	401a4e <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  401992:	4b41      	ldr	r3, [pc, #260]	; (401a98 <ethernet_phy_init+0x14c>)
  401994:	429d      	cmp	r5, r3
  401996:	d80f      	bhi.n	4019b8 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  401998:	4b40      	ldr	r3, [pc, #256]	; (401a9c <ethernet_phy_init+0x150>)
  40199a:	429d      	cmp	r5, r3
  40199c:	d83e      	bhi.n	401a1c <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  40199e:	4b40      	ldr	r3, [pc, #256]	; (401aa0 <ethernet_phy_init+0x154>)
  4019a0:	429d      	cmp	r5, r3
  4019a2:	d83e      	bhi.n	401a22 <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  4019a4:	4b3f      	ldr	r3, [pc, #252]	; (401aa4 <ethernet_phy_init+0x158>)
  4019a6:	429d      	cmp	r5, r3
  4019a8:	d83e      	bhi.n	401a28 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  4019aa:	4b3f      	ldr	r3, [pc, #252]	; (401aa8 <ethernet_phy_init+0x15c>)
  4019ac:	429d      	cmp	r5, r3
  4019ae:	bf8c      	ite	hi
  4019b0:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  4019b4:	2300      	movls	r3, #0
  4019b6:	e001      	b.n	4019bc <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  4019b8:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  4019bc:	6872      	ldr	r2, [r6, #4]
  4019be:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  4019c2:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  4019c4:	6875      	ldr	r5, [r6, #4]
  4019c6:	431d      	orrs	r5, r3
  4019c8:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  4019ca:	ab04      	add	r3, sp, #16
  4019cc:	2200      	movs	r2, #0
  4019ce:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4019d2:	6832      	ldr	r2, [r6, #0]
  4019d4:	f042 0210 	orr.w	r2, r2, #16
  4019d8:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  4019da:	2202      	movs	r2, #2
  4019dc:	4641      	mov	r1, r8
  4019de:	4630      	mov	r0, r6
  4019e0:	4c32      	ldr	r4, [pc, #200]	; (401aac <ethernet_phy_init+0x160>)
  4019e2:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  4019e4:	9b03      	ldr	r3, [sp, #12]
  4019e6:	2b22      	cmp	r3, #34	; 0x22
  4019e8:	d035      	beq.n	401a56 <ethernet_phy_init+0x10a>
  4019ea:	4644      	mov	r4, r8
  4019ec:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  4019ee:	f04f 0902 	mov.w	r9, #2
  4019f2:	4f2e      	ldr	r7, [pc, #184]	; (401aac <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  4019f4:	3401      	adds	r4, #1
  4019f6:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  4019fa:	ab03      	add	r3, sp, #12
  4019fc:	464a      	mov	r2, r9
  4019fe:	4621      	mov	r1, r4
  401a00:	4630      	mov	r0, r6
  401a02:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  401a04:	9b03      	ldr	r3, [sp, #12]
  401a06:	2b22      	cmp	r3, #34	; 0x22
  401a08:	d011      	beq.n	401a2e <ethernet_phy_init+0xe2>
  401a0a:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  401a0c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  401a10:	d1f0      	bne.n	4019f4 <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401a12:	6833      	ldr	r3, [r6, #0]
  401a14:	f023 0310 	bic.w	r3, r3, #16
  401a18:	6033      	str	r3, [r6, #0]
  401a1a:	e018      	b.n	401a4e <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  401a1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401a20:	e7cc      	b.n	4019bc <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  401a22:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  401a26:	e7c9      	b.n	4019bc <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  401a28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401a2c:	e7c6      	b.n	4019bc <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401a2e:	6833      	ldr	r3, [r6, #0]
  401a30:	f023 0310 	bic.w	r3, r3, #16
  401a34:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  401a36:	ab03      	add	r3, sp, #12
  401a38:	2201      	movs	r2, #1
  401a3a:	4621      	mov	r1, r4
  401a3c:	4630      	mov	r0, r6
  401a3e:	4d1b      	ldr	r5, [pc, #108]	; (401aac <ethernet_phy_init+0x160>)
  401a40:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  401a42:	45a0      	cmp	r8, r4
  401a44:	d003      	beq.n	401a4e <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  401a46:	4641      	mov	r1, r8
  401a48:	4630      	mov	r0, r6
  401a4a:	4b11      	ldr	r3, [pc, #68]	; (401a90 <ethernet_phy_init+0x144>)
  401a4c:	4798      	blx	r3
}
  401a4e:	2000      	movs	r0, #0
  401a50:	b005      	add	sp, #20
  401a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a56:	6833      	ldr	r3, [r6, #0]
  401a58:	f023 0310 	bic.w	r3, r3, #16
  401a5c:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  401a5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  401a62:	d0f4      	beq.n	401a4e <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  401a64:	ab03      	add	r3, sp, #12
  401a66:	2201      	movs	r2, #1
  401a68:	4641      	mov	r1, r8
  401a6a:	4630      	mov	r0, r6
  401a6c:	4c0f      	ldr	r4, [pc, #60]	; (401aac <ethernet_phy_init+0x160>)
  401a6e:	47a0      	blx	r4
  401a70:	e7ed      	b.n	401a4e <ethernet_phy_init+0x102>
  401a72:	bf00      	nop
  401a74:	400e1200 	.word	0x400e1200
  401a78:	00401e9d 	.word	0x00401e9d
  401a7c:	400e0e00 	.word	0x400e0e00
  401a80:	00401e67 	.word	0x00401e67
  401a84:	400e1400 	.word	0x400e1400
  401a88:	00401dd5 	.word	0x00401dd5
  401a8c:	40050000 	.word	0x40050000
  401a90:	004018ed 	.word	0x004018ed
  401a94:	0e4e1c00 	.word	0x0e4e1c00
  401a98:	09896800 	.word	0x09896800
  401a9c:	07270e00 	.word	0x07270e00
  401aa0:	04c4b400 	.word	0x04c4b400
  401aa4:	02625a00 	.word	0x02625a00
  401aa8:	01312d00 	.word	0x01312d00
  401aac:	00401ad9 	.word	0x00401ad9

00401ab0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401ab0:	6943      	ldr	r3, [r0, #20]
  401ab2:	f013 0f02 	tst.w	r3, #2
  401ab6:	d002      	beq.n	401abe <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401ab8:	61c1      	str	r1, [r0, #28]
	return 0;
  401aba:	2000      	movs	r0, #0
  401abc:	4770      	bx	lr
		return 1;
  401abe:	2001      	movs	r0, #1
}
  401ac0:	4770      	bx	lr

00401ac2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ac2:	6943      	ldr	r3, [r0, #20]
  401ac4:	f013 0f01 	tst.w	r3, #1
  401ac8:	d003      	beq.n	401ad2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401aca:	6983      	ldr	r3, [r0, #24]
  401acc:	700b      	strb	r3, [r1, #0]
	return 0;
  401ace:	2000      	movs	r0, #0
  401ad0:	4770      	bx	lr
		return 1;
  401ad2:	2001      	movs	r0, #1
}
  401ad4:	4770      	bx	lr
	...

00401ad8 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401ad8:	b410      	push	{r4}
  401ada:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401adc:	6884      	ldr	r4, [r0, #8]
  401ade:	f014 0f04 	tst.w	r4, #4
  401ae2:	d0fb      	beq.n	401adc <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401ae4:	0492      	lsls	r2, r2, #18
  401ae6:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401aea:	4a11      	ldr	r2, [pc, #68]	; (401b30 <gmac_phy_read+0x58>)
  401aec:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401aee:	05c9      	lsls	r1, r1, #23
  401af0:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401af4:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401af6:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401af8:	2200      	movs	r2, #0
  401afa:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401afc:	490d      	ldr	r1, [pc, #52]	; (401b34 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401afe:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401b00:	f012 0f04 	tst.w	r2, #4
  401b04:	d107      	bne.n	401b16 <gmac_phy_read+0x3e>
		ul_retry_count++;
  401b06:	9a01      	ldr	r2, [sp, #4]
  401b08:	3201      	adds	r2, #1
  401b0a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b0c:	9a01      	ldr	r2, [sp, #4]
  401b0e:	428a      	cmp	r2, r1
  401b10:	d9f5      	bls.n	401afe <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  401b12:	2001      	movs	r0, #1
  401b14:	e007      	b.n	401b26 <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b16:	6882      	ldr	r2, [r0, #8]
  401b18:	f012 0f04 	tst.w	r2, #4
  401b1c:	d0fb      	beq.n	401b16 <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  401b1e:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401b20:	b292      	uxth	r2, r2
  401b22:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401b24:	2000      	movs	r0, #0
}
  401b26:	b003      	add	sp, #12
  401b28:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b2c:	4770      	bx	lr
  401b2e:	bf00      	nop
  401b30:	60020000 	.word	0x60020000
  401b34:	000f423f 	.word	0x000f423f

00401b38 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401b38:	b410      	push	{r4}
  401b3a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b3c:	6884      	ldr	r4, [r0, #8]
  401b3e:	f014 0f04 	tst.w	r4, #4
  401b42:	d0fb      	beq.n	401b3c <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401b44:	0492      	lsls	r2, r2, #18
  401b46:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401b4a:	4a0e      	ldr	r2, [pc, #56]	; (401b84 <gmac_phy_write+0x4c>)
  401b4c:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401b4e:	05c9      	lsls	r1, r1, #23
  401b50:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401b54:	430a      	orrs	r2, r1
  401b56:	b29b      	uxth	r3, r3
  401b58:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401b5a:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401b5c:	2300      	movs	r3, #0
  401b5e:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b60:	4a09      	ldr	r2, [pc, #36]	; (401b88 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401b62:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401b64:	f013 0f04 	tst.w	r3, #4
  401b68:	d107      	bne.n	401b7a <gmac_phy_write+0x42>
		ul_retry_count++;
  401b6a:	9b01      	ldr	r3, [sp, #4]
  401b6c:	3301      	adds	r3, #1
  401b6e:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b70:	9b01      	ldr	r3, [sp, #4]
  401b72:	4293      	cmp	r3, r2
  401b74:	d9f5      	bls.n	401b62 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  401b76:	2001      	movs	r0, #1
  401b78:	e000      	b.n	401b7c <gmac_phy_write+0x44>
	return GMAC_OK;
  401b7a:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  401b7c:	b003      	add	sp, #12
  401b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b82:	4770      	bx	lr
  401b84:	50020000 	.word	0x50020000
  401b88:	000f423f 	.word	0x000f423f

00401b8c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401b8c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  401b8e:	4810      	ldr	r0, [pc, #64]	; (401bd0 <sysclk_init+0x44>)
  401b90:	4b10      	ldr	r3, [pc, #64]	; (401bd4 <sysclk_init+0x48>)
  401b92:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401b94:	213e      	movs	r1, #62	; 0x3e
  401b96:	2000      	movs	r0, #0
  401b98:	4b0f      	ldr	r3, [pc, #60]	; (401bd8 <sysclk_init+0x4c>)
  401b9a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401b9c:	4c0f      	ldr	r4, [pc, #60]	; (401bdc <sysclk_init+0x50>)
  401b9e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401ba0:	2800      	cmp	r0, #0
  401ba2:	d0fc      	beq.n	401b9e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401ba4:	4b0e      	ldr	r3, [pc, #56]	; (401be0 <sysclk_init+0x54>)
  401ba6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401ba8:	4a0e      	ldr	r2, [pc, #56]	; (401be4 <sysclk_init+0x58>)
  401baa:	4b0f      	ldr	r3, [pc, #60]	; (401be8 <sysclk_init+0x5c>)
  401bac:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401bae:	4c0f      	ldr	r4, [pc, #60]	; (401bec <sysclk_init+0x60>)
  401bb0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401bb2:	2800      	cmp	r0, #0
  401bb4:	d0fc      	beq.n	401bb0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401bb6:	2002      	movs	r0, #2
  401bb8:	4b0d      	ldr	r3, [pc, #52]	; (401bf0 <sysclk_init+0x64>)
  401bba:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401bbc:	2000      	movs	r0, #0
  401bbe:	4b0d      	ldr	r3, [pc, #52]	; (401bf4 <sysclk_init+0x68>)
  401bc0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401bc2:	4b0d      	ldr	r3, [pc, #52]	; (401bf8 <sysclk_init+0x6c>)
  401bc4:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  401bc6:	4802      	ldr	r0, [pc, #8]	; (401bd0 <sysclk_init+0x44>)
  401bc8:	4b02      	ldr	r3, [pc, #8]	; (401bd4 <sysclk_init+0x48>)
  401bca:	4798      	blx	r3
  401bcc:	bd10      	pop	{r4, pc}
  401bce:	bf00      	nop
  401bd0:	08f0d180 	.word	0x08f0d180
  401bd4:	00402299 	.word	0x00402299
  401bd8:	0040201d 	.word	0x0040201d
  401bdc:	00402071 	.word	0x00402071
  401be0:	00402081 	.word	0x00402081
  401be4:	20183f01 	.word	0x20183f01
  401be8:	400e0600 	.word	0x400e0600
  401bec:	00402091 	.word	0x00402091
  401bf0:	00401f81 	.word	0x00401f81
  401bf4:	00401fb9 	.word	0x00401fb9
  401bf8:	0040218d 	.word	0x0040218d

00401bfc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401bfc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401bfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c02:	4b6e      	ldr	r3, [pc, #440]	; (401dbc <board_init+0x1c0>)
  401c04:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c06:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  401c0a:	4a6d      	ldr	r2, [pc, #436]	; (401dc0 <board_init+0x1c4>)
  401c0c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c0e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  401c12:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  401c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c18:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c1c:	4b69      	ldr	r3, [pc, #420]	; (401dc4 <board_init+0x1c8>)
  401c1e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401c22:	f022 0201 	bic.w	r2, r2, #1
  401c26:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c2a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401c2e:	f022 0201 	bic.w	r2, r2, #1
  401c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  401c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c3a:	f3bf 8f6f 	isb	sy
  401c3e:	200a      	movs	r0, #10
  401c40:	4c61      	ldr	r4, [pc, #388]	; (401dc8 <board_init+0x1cc>)
  401c42:	47a0      	blx	r4
  401c44:	200b      	movs	r0, #11
  401c46:	47a0      	blx	r4
  401c48:	200c      	movs	r0, #12
  401c4a:	47a0      	blx	r4
  401c4c:	2010      	movs	r0, #16
  401c4e:	47a0      	blx	r4
  401c50:	2011      	movs	r0, #17
  401c52:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c54:	4b5d      	ldr	r3, [pc, #372]	; (401dcc <board_init+0x1d0>)
  401c56:	f44f 7280 	mov.w	r2, #256	; 0x100
  401c5a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c60:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c62:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401c6a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401c70:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c76:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401c78:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401c7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401c80:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401c84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401c86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401c88:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401c8c:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401c92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401c9e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ca4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ca6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401cae:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401cb2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401cb4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401cb6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401cba:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cbc:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401cbe:	4844      	ldr	r0, [pc, #272]	; (401dd0 <board_init+0x1d4>)
  401cc0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  401cc4:	f041 0110 	orr.w	r1, r1, #16
  401cc8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401ccc:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  401cd0:	2110      	movs	r1, #16
  401cd2:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cd4:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cd8:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cda:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cdc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401ce0:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401ce2:	430c      	orrs	r4, r1
  401ce4:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401ce6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401ce8:	430c      	orrs	r4, r1
  401cea:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cec:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  401cee:	2008      	movs	r0, #8
  401cf0:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cf2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cf6:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cf8:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cfa:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cfe:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401d00:	f024 0408 	bic.w	r4, r4, #8
  401d04:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d06:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401d08:	f024 0408 	bic.w	r4, r4, #8
  401d0c:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d0e:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401d10:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d12:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d16:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d18:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d1a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d1e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401d20:	f020 0010 	bic.w	r0, r0, #16
  401d24:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d26:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401d28:	f020 0010 	bic.w	r0, r0, #16
  401d2c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d2e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401d30:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  401d34:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401d38:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d3a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d3e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d40:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d42:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401d46:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401d48:	4308      	orrs	r0, r1
  401d4a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d4c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401d4e:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  401d52:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d54:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401d56:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d5c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d5e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401d64:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d66:	4311      	orrs	r1, r2
  401d68:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d6a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d6c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401d70:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d72:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401d74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401d78:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d7e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d80:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401d86:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d88:	4311      	orrs	r1, r2
  401d8a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d8c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d8e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  401d92:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d94:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401d9a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401da0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401da2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401da8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401daa:	4311      	orrs	r1, r2
  401dac:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401dae:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401db0:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  401db4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401db6:	605a      	str	r2, [r3, #4]
  401db8:	bd10      	pop	{r4, pc}
  401dba:	bf00      	nop
  401dbc:	400e1850 	.word	0x400e1850
  401dc0:	5a00080c 	.word	0x5a00080c
  401dc4:	e000ed00 	.word	0xe000ed00
  401dc8:	004020a1 	.word	0x004020a1
  401dcc:	400e1200 	.word	0x400e1200
  401dd0:	40088000 	.word	0x40088000

00401dd4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401dd4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401dd6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401dda:	d03a      	beq.n	401e52 <pio_set_peripheral+0x7e>
  401ddc:	d813      	bhi.n	401e06 <pio_set_peripheral+0x32>
  401dde:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401de2:	d025      	beq.n	401e30 <pio_set_peripheral+0x5c>
  401de4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401de8:	d10a      	bne.n	401e00 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dec:	4313      	orrs	r3, r2
  401dee:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401df0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401df2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401df4:	400b      	ands	r3, r1
  401df6:	ea23 0302 	bic.w	r3, r3, r2
  401dfa:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401dfc:	6042      	str	r2, [r0, #4]
  401dfe:	4770      	bx	lr
	switch (ul_type) {
  401e00:	2900      	cmp	r1, #0
  401e02:	d1fb      	bne.n	401dfc <pio_set_peripheral+0x28>
  401e04:	4770      	bx	lr
  401e06:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401e0a:	d021      	beq.n	401e50 <pio_set_peripheral+0x7c>
  401e0c:	d809      	bhi.n	401e22 <pio_set_peripheral+0x4e>
  401e0e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401e12:	d1f3      	bne.n	401dfc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e14:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e16:	4313      	orrs	r3, r2
  401e18:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e1c:	4313      	orrs	r3, r2
  401e1e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401e20:	e7ec      	b.n	401dfc <pio_set_peripheral+0x28>
	switch (ul_type) {
  401e22:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401e26:	d013      	beq.n	401e50 <pio_set_peripheral+0x7c>
  401e28:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401e2c:	d010      	beq.n	401e50 <pio_set_peripheral+0x7c>
  401e2e:	e7e5      	b.n	401dfc <pio_set_peripheral+0x28>
{
  401e30:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e32:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e34:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401e36:	43d3      	mvns	r3, r2
  401e38:	4021      	ands	r1, r4
  401e3a:	461c      	mov	r4, r3
  401e3c:	4019      	ands	r1, r3
  401e3e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e40:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e42:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401e44:	400b      	ands	r3, r1
  401e46:	4023      	ands	r3, r4
  401e48:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401e4a:	6042      	str	r2, [r0, #4]
}
  401e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e50:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e52:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e54:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401e56:	400b      	ands	r3, r1
  401e58:	ea23 0302 	bic.w	r3, r3, r2
  401e5c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e5e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e60:	4313      	orrs	r3, r2
  401e62:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401e64:	e7ca      	b.n	401dfc <pio_set_peripheral+0x28>

00401e66 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401e66:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e68:	f012 0f01 	tst.w	r2, #1
  401e6c:	d10d      	bne.n	401e8a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401e6e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e70:	f012 0f0a 	tst.w	r2, #10
  401e74:	d00b      	beq.n	401e8e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401e76:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401e78:	f012 0f02 	tst.w	r2, #2
  401e7c:	d109      	bne.n	401e92 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401e7e:	f012 0f08 	tst.w	r2, #8
  401e82:	d008      	beq.n	401e96 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401e84:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401e88:	e005      	b.n	401e96 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401e8a:	6641      	str	r1, [r0, #100]	; 0x64
  401e8c:	e7f0      	b.n	401e70 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401e8e:	6241      	str	r1, [r0, #36]	; 0x24
  401e90:	e7f2      	b.n	401e78 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401e92:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401e96:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401e98:	6001      	str	r1, [r0, #0]
  401e9a:	4770      	bx	lr

00401e9c <pio_set_output>:
{
  401e9c:	b410      	push	{r4}
  401e9e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401ea0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401ea2:	b94c      	cbnz	r4, 401eb8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401ea4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401ea6:	b14b      	cbz	r3, 401ebc <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401ea8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401eaa:	b94a      	cbnz	r2, 401ec0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401eac:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401eae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401eb0:	6001      	str	r1, [r0, #0]
}
  401eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  401eb6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401eb8:	6641      	str	r1, [r0, #100]	; 0x64
  401eba:	e7f4      	b.n	401ea6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401ebc:	6541      	str	r1, [r0, #84]	; 0x54
  401ebe:	e7f4      	b.n	401eaa <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401ec0:	6301      	str	r1, [r0, #48]	; 0x30
  401ec2:	e7f4      	b.n	401eae <pio_set_output+0x12>

00401ec4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401ec4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401ec6:	4770      	bx	lr

00401ec8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401ec8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401eca:	4770      	bx	lr

00401ecc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ed0:	4604      	mov	r4, r0
  401ed2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401ed4:	4b0e      	ldr	r3, [pc, #56]	; (401f10 <pio_handler_process+0x44>)
  401ed6:	4798      	blx	r3
  401ed8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401eda:	4620      	mov	r0, r4
  401edc:	4b0d      	ldr	r3, [pc, #52]	; (401f14 <pio_handler_process+0x48>)
  401ede:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401ee0:	4005      	ands	r5, r0
  401ee2:	d013      	beq.n	401f0c <pio_handler_process+0x40>
  401ee4:	4c0c      	ldr	r4, [pc, #48]	; (401f18 <pio_handler_process+0x4c>)
  401ee6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401eea:	e003      	b.n	401ef4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401eec:	42b4      	cmp	r4, r6
  401eee:	d00d      	beq.n	401f0c <pio_handler_process+0x40>
  401ef0:	3410      	adds	r4, #16
		while (status != 0) {
  401ef2:	b15d      	cbz	r5, 401f0c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401ef4:	6820      	ldr	r0, [r4, #0]
  401ef6:	4540      	cmp	r0, r8
  401ef8:	d1f8      	bne.n	401eec <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401efa:	6861      	ldr	r1, [r4, #4]
  401efc:	4229      	tst	r1, r5
  401efe:	d0f5      	beq.n	401eec <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f00:	68e3      	ldr	r3, [r4, #12]
  401f02:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f04:	6863      	ldr	r3, [r4, #4]
  401f06:	ea25 0503 	bic.w	r5, r5, r3
  401f0a:	e7ef      	b.n	401eec <pio_handler_process+0x20>
  401f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f10:	00401ec5 	.word	0x00401ec5
  401f14:	00401ec9 	.word	0x00401ec9
  401f18:	20407240 	.word	0x20407240

00401f1c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401f1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401f1e:	210a      	movs	r1, #10
  401f20:	4801      	ldr	r0, [pc, #4]	; (401f28 <PIOA_Handler+0xc>)
  401f22:	4b02      	ldr	r3, [pc, #8]	; (401f2c <PIOA_Handler+0x10>)
  401f24:	4798      	blx	r3
  401f26:	bd08      	pop	{r3, pc}
  401f28:	400e0e00 	.word	0x400e0e00
  401f2c:	00401ecd 	.word	0x00401ecd

00401f30 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f30:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401f32:	210b      	movs	r1, #11
  401f34:	4801      	ldr	r0, [pc, #4]	; (401f3c <PIOB_Handler+0xc>)
  401f36:	4b02      	ldr	r3, [pc, #8]	; (401f40 <PIOB_Handler+0x10>)
  401f38:	4798      	blx	r3
  401f3a:	bd08      	pop	{r3, pc}
  401f3c:	400e1000 	.word	0x400e1000
  401f40:	00401ecd 	.word	0x00401ecd

00401f44 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401f44:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401f46:	210c      	movs	r1, #12
  401f48:	4801      	ldr	r0, [pc, #4]	; (401f50 <PIOC_Handler+0xc>)
  401f4a:	4b02      	ldr	r3, [pc, #8]	; (401f54 <PIOC_Handler+0x10>)
  401f4c:	4798      	blx	r3
  401f4e:	bd08      	pop	{r3, pc}
  401f50:	400e1200 	.word	0x400e1200
  401f54:	00401ecd 	.word	0x00401ecd

00401f58 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401f58:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401f5a:	2110      	movs	r1, #16
  401f5c:	4801      	ldr	r0, [pc, #4]	; (401f64 <PIOD_Handler+0xc>)
  401f5e:	4b02      	ldr	r3, [pc, #8]	; (401f68 <PIOD_Handler+0x10>)
  401f60:	4798      	blx	r3
  401f62:	bd08      	pop	{r3, pc}
  401f64:	400e1400 	.word	0x400e1400
  401f68:	00401ecd 	.word	0x00401ecd

00401f6c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401f6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401f6e:	2111      	movs	r1, #17
  401f70:	4801      	ldr	r0, [pc, #4]	; (401f78 <PIOE_Handler+0xc>)
  401f72:	4b02      	ldr	r3, [pc, #8]	; (401f7c <PIOE_Handler+0x10>)
  401f74:	4798      	blx	r3
  401f76:	bd08      	pop	{r3, pc}
  401f78:	400e1600 	.word	0x400e1600
  401f7c:	00401ecd 	.word	0x00401ecd

00401f80 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401f80:	2803      	cmp	r0, #3
  401f82:	d011      	beq.n	401fa8 <pmc_mck_set_division+0x28>
  401f84:	2804      	cmp	r0, #4
  401f86:	d012      	beq.n	401fae <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401f88:	2802      	cmp	r0, #2
  401f8a:	bf0c      	ite	eq
  401f8c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401f90:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401f92:	4a08      	ldr	r2, [pc, #32]	; (401fb4 <pmc_mck_set_division+0x34>)
  401f94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401f9a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401f9c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401f9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fa0:	f013 0f08 	tst.w	r3, #8
  401fa4:	d0fb      	beq.n	401f9e <pmc_mck_set_division+0x1e>
}
  401fa6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401fa8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401fac:	e7f1      	b.n	401f92 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401fae:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401fb2:	e7ee      	b.n	401f92 <pmc_mck_set_division+0x12>
  401fb4:	400e0600 	.word	0x400e0600

00401fb8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401fb8:	4a17      	ldr	r2, [pc, #92]	; (402018 <pmc_switch_mck_to_pllack+0x60>)
  401fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401fc0:	4318      	orrs	r0, r3
  401fc2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fc4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fc6:	f013 0f08 	tst.w	r3, #8
  401fca:	d10a      	bne.n	401fe2 <pmc_switch_mck_to_pllack+0x2a>
  401fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401fd0:	4911      	ldr	r1, [pc, #68]	; (402018 <pmc_switch_mck_to_pllack+0x60>)
  401fd2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401fd4:	f012 0f08 	tst.w	r2, #8
  401fd8:	d103      	bne.n	401fe2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fda:	3b01      	subs	r3, #1
  401fdc:	d1f9      	bne.n	401fd2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401fde:	2001      	movs	r0, #1
  401fe0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401fe2:	4a0d      	ldr	r2, [pc, #52]	; (402018 <pmc_switch_mck_to_pllack+0x60>)
  401fe4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fe6:	f023 0303 	bic.w	r3, r3, #3
  401fea:	f043 0302 	orr.w	r3, r3, #2
  401fee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ff0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ff2:	f013 0f08 	tst.w	r3, #8
  401ff6:	d10a      	bne.n	40200e <pmc_switch_mck_to_pllack+0x56>
  401ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401ffc:	4906      	ldr	r1, [pc, #24]	; (402018 <pmc_switch_mck_to_pllack+0x60>)
  401ffe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402000:	f012 0f08 	tst.w	r2, #8
  402004:	d105      	bne.n	402012 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402006:	3b01      	subs	r3, #1
  402008:	d1f9      	bne.n	401ffe <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40200a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40200c:	4770      	bx	lr
	return 0;
  40200e:	2000      	movs	r0, #0
  402010:	4770      	bx	lr
  402012:	2000      	movs	r0, #0
  402014:	4770      	bx	lr
  402016:	bf00      	nop
  402018:	400e0600 	.word	0x400e0600

0040201c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40201c:	b9a0      	cbnz	r0, 402048 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40201e:	480e      	ldr	r0, [pc, #56]	; (402058 <pmc_switch_mainck_to_xtal+0x3c>)
  402020:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402022:	0209      	lsls	r1, r1, #8
  402024:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402026:	4a0d      	ldr	r2, [pc, #52]	; (40205c <pmc_switch_mainck_to_xtal+0x40>)
  402028:	401a      	ands	r2, r3
  40202a:	4b0d      	ldr	r3, [pc, #52]	; (402060 <pmc_switch_mainck_to_xtal+0x44>)
  40202c:	4313      	orrs	r3, r2
  40202e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402030:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402032:	4602      	mov	r2, r0
  402034:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402036:	f013 0f01 	tst.w	r3, #1
  40203a:	d0fb      	beq.n	402034 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40203c:	4a06      	ldr	r2, [pc, #24]	; (402058 <pmc_switch_mainck_to_xtal+0x3c>)
  40203e:	6a11      	ldr	r1, [r2, #32]
  402040:	4b08      	ldr	r3, [pc, #32]	; (402064 <pmc_switch_mainck_to_xtal+0x48>)
  402042:	430b      	orrs	r3, r1
  402044:	6213      	str	r3, [r2, #32]
  402046:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402048:	4903      	ldr	r1, [pc, #12]	; (402058 <pmc_switch_mainck_to_xtal+0x3c>)
  40204a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40204c:	4a06      	ldr	r2, [pc, #24]	; (402068 <pmc_switch_mainck_to_xtal+0x4c>)
  40204e:	401a      	ands	r2, r3
  402050:	4b06      	ldr	r3, [pc, #24]	; (40206c <pmc_switch_mainck_to_xtal+0x50>)
  402052:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402054:	620b      	str	r3, [r1, #32]
  402056:	4770      	bx	lr
  402058:	400e0600 	.word	0x400e0600
  40205c:	ffc8fffc 	.word	0xffc8fffc
  402060:	00370001 	.word	0x00370001
  402064:	01370000 	.word	0x01370000
  402068:	fec8fffc 	.word	0xfec8fffc
  40206c:	01370002 	.word	0x01370002

00402070 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402070:	4b02      	ldr	r3, [pc, #8]	; (40207c <pmc_osc_is_ready_mainck+0xc>)
  402072:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402074:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	400e0600 	.word	0x400e0600

00402080 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402084:	4b01      	ldr	r3, [pc, #4]	; (40208c <pmc_disable_pllack+0xc>)
  402086:	629a      	str	r2, [r3, #40]	; 0x28
  402088:	4770      	bx	lr
  40208a:	bf00      	nop
  40208c:	400e0600 	.word	0x400e0600

00402090 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402090:	4b02      	ldr	r3, [pc, #8]	; (40209c <pmc_is_locked_pllack+0xc>)
  402092:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402094:	f000 0002 	and.w	r0, r0, #2
  402098:	4770      	bx	lr
  40209a:	bf00      	nop
  40209c:	400e0600 	.word	0x400e0600

004020a0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4020a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4020a4:	4b05      	ldr	r3, [pc, #20]	; (4020bc <pmc_enable_periph_clk+0x1c>)
  4020a6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4020aa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4020ae:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4020b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4020b6:	2000      	movs	r0, #0
  4020b8:	4770      	bx	lr
  4020ba:	bf00      	nop
  4020bc:	400e0600 	.word	0x400e0600

004020c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4020c0:	e7fe      	b.n	4020c0 <Dummy_Handler>
	...

004020c4 <Reset_Handler>:
{
  4020c4:	b500      	push	{lr}
  4020c6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4020c8:	4b25      	ldr	r3, [pc, #148]	; (402160 <Reset_Handler+0x9c>)
  4020ca:	4a26      	ldr	r2, [pc, #152]	; (402164 <Reset_Handler+0xa0>)
  4020cc:	429a      	cmp	r2, r3
  4020ce:	d010      	beq.n	4020f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4020d0:	4b25      	ldr	r3, [pc, #148]	; (402168 <Reset_Handler+0xa4>)
  4020d2:	4a23      	ldr	r2, [pc, #140]	; (402160 <Reset_Handler+0x9c>)
  4020d4:	429a      	cmp	r2, r3
  4020d6:	d20c      	bcs.n	4020f2 <Reset_Handler+0x2e>
  4020d8:	3b01      	subs	r3, #1
  4020da:	1a9b      	subs	r3, r3, r2
  4020dc:	f023 0303 	bic.w	r3, r3, #3
  4020e0:	3304      	adds	r3, #4
  4020e2:	4413      	add	r3, r2
  4020e4:	491f      	ldr	r1, [pc, #124]	; (402164 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4020e6:	f851 0b04 	ldr.w	r0, [r1], #4
  4020ea:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4020ee:	429a      	cmp	r2, r3
  4020f0:	d1f9      	bne.n	4020e6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4020f2:	4b1e      	ldr	r3, [pc, #120]	; (40216c <Reset_Handler+0xa8>)
  4020f4:	4a1e      	ldr	r2, [pc, #120]	; (402170 <Reset_Handler+0xac>)
  4020f6:	429a      	cmp	r2, r3
  4020f8:	d20a      	bcs.n	402110 <Reset_Handler+0x4c>
  4020fa:	3b01      	subs	r3, #1
  4020fc:	1a9b      	subs	r3, r3, r2
  4020fe:	f023 0303 	bic.w	r3, r3, #3
  402102:	3304      	adds	r3, #4
  402104:	4413      	add	r3, r2
                *pDest++ = 0;
  402106:	2100      	movs	r1, #0
  402108:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40210c:	4293      	cmp	r3, r2
  40210e:	d1fb      	bne.n	402108 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402110:	4a18      	ldr	r2, [pc, #96]	; (402174 <Reset_Handler+0xb0>)
  402112:	4b19      	ldr	r3, [pc, #100]	; (402178 <Reset_Handler+0xb4>)
  402114:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402118:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40211a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40211e:	fab3 f383 	clz	r3, r3
  402122:	095b      	lsrs	r3, r3, #5
  402124:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402126:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402128:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40212c:	2200      	movs	r2, #0
  40212e:	4b13      	ldr	r3, [pc, #76]	; (40217c <Reset_Handler+0xb8>)
  402130:	701a      	strb	r2, [r3, #0]
	return flags;
  402132:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402134:	4a12      	ldr	r2, [pc, #72]	; (402180 <Reset_Handler+0xbc>)
  402136:	6813      	ldr	r3, [r2, #0]
  402138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40213c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40213e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402142:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402146:	b129      	cbz	r1, 402154 <Reset_Handler+0x90>
		cpu_irq_enable();
  402148:	2201      	movs	r2, #1
  40214a:	4b0c      	ldr	r3, [pc, #48]	; (40217c <Reset_Handler+0xb8>)
  40214c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40214e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402152:	b662      	cpsie	i
        __libc_init_array();
  402154:	4b0b      	ldr	r3, [pc, #44]	; (402184 <Reset_Handler+0xc0>)
  402156:	4798      	blx	r3
        main();
  402158:	4b0b      	ldr	r3, [pc, #44]	; (402188 <Reset_Handler+0xc4>)
  40215a:	4798      	blx	r3
  40215c:	e7fe      	b.n	40215c <Reset_Handler+0x98>
  40215e:	bf00      	nop
  402160:	20400000 	.word	0x20400000
  402164:	00405ffc 	.word	0x00405ffc
  402168:	204009e8 	.word	0x204009e8
  40216c:	20408514 	.word	0x20408514
  402170:	204009e8 	.word	0x204009e8
  402174:	e000ed00 	.word	0xe000ed00
  402178:	00400000 	.word	0x00400000
  40217c:	2040001c 	.word	0x2040001c
  402180:	e000ed88 	.word	0xe000ed88
  402184:	00402d0d 	.word	0x00402d0d
  402188:	00402751 	.word	0x00402751

0040218c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40218c:	4b3b      	ldr	r3, [pc, #236]	; (40227c <SystemCoreClockUpdate+0xf0>)
  40218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402190:	f003 0303 	and.w	r3, r3, #3
  402194:	2b01      	cmp	r3, #1
  402196:	d01d      	beq.n	4021d4 <SystemCoreClockUpdate+0x48>
  402198:	b183      	cbz	r3, 4021bc <SystemCoreClockUpdate+0x30>
  40219a:	2b02      	cmp	r3, #2
  40219c:	d036      	beq.n	40220c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40219e:	4b37      	ldr	r3, [pc, #220]	; (40227c <SystemCoreClockUpdate+0xf0>)
  4021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021a6:	2b70      	cmp	r3, #112	; 0x70
  4021a8:	d05f      	beq.n	40226a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021aa:	4b34      	ldr	r3, [pc, #208]	; (40227c <SystemCoreClockUpdate+0xf0>)
  4021ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021ae:	4934      	ldr	r1, [pc, #208]	; (402280 <SystemCoreClockUpdate+0xf4>)
  4021b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4021b4:	680b      	ldr	r3, [r1, #0]
  4021b6:	40d3      	lsrs	r3, r2
  4021b8:	600b      	str	r3, [r1, #0]
  4021ba:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4021bc:	4b31      	ldr	r3, [pc, #196]	; (402284 <SystemCoreClockUpdate+0xf8>)
  4021be:	695b      	ldr	r3, [r3, #20]
  4021c0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4021c4:	bf14      	ite	ne
  4021c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4021ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4021ce:	4b2c      	ldr	r3, [pc, #176]	; (402280 <SystemCoreClockUpdate+0xf4>)
  4021d0:	601a      	str	r2, [r3, #0]
  4021d2:	e7e4      	b.n	40219e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4021d4:	4b29      	ldr	r3, [pc, #164]	; (40227c <SystemCoreClockUpdate+0xf0>)
  4021d6:	6a1b      	ldr	r3, [r3, #32]
  4021d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4021dc:	d003      	beq.n	4021e6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4021de:	4a2a      	ldr	r2, [pc, #168]	; (402288 <SystemCoreClockUpdate+0xfc>)
  4021e0:	4b27      	ldr	r3, [pc, #156]	; (402280 <SystemCoreClockUpdate+0xf4>)
  4021e2:	601a      	str	r2, [r3, #0]
  4021e4:	e7db      	b.n	40219e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021e6:	4a29      	ldr	r2, [pc, #164]	; (40228c <SystemCoreClockUpdate+0x100>)
  4021e8:	4b25      	ldr	r3, [pc, #148]	; (402280 <SystemCoreClockUpdate+0xf4>)
  4021ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4021ec:	4b23      	ldr	r3, [pc, #140]	; (40227c <SystemCoreClockUpdate+0xf0>)
  4021ee:	6a1b      	ldr	r3, [r3, #32]
  4021f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021f4:	2b10      	cmp	r3, #16
  4021f6:	d005      	beq.n	402204 <SystemCoreClockUpdate+0x78>
  4021f8:	2b20      	cmp	r3, #32
  4021fa:	d1d0      	bne.n	40219e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4021fc:	4a22      	ldr	r2, [pc, #136]	; (402288 <SystemCoreClockUpdate+0xfc>)
  4021fe:	4b20      	ldr	r3, [pc, #128]	; (402280 <SystemCoreClockUpdate+0xf4>)
  402200:	601a      	str	r2, [r3, #0]
          break;
  402202:	e7cc      	b.n	40219e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402204:	4a22      	ldr	r2, [pc, #136]	; (402290 <SystemCoreClockUpdate+0x104>)
  402206:	4b1e      	ldr	r3, [pc, #120]	; (402280 <SystemCoreClockUpdate+0xf4>)
  402208:	601a      	str	r2, [r3, #0]
          break;
  40220a:	e7c8      	b.n	40219e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40220c:	4b1b      	ldr	r3, [pc, #108]	; (40227c <SystemCoreClockUpdate+0xf0>)
  40220e:	6a1b      	ldr	r3, [r3, #32]
  402210:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402214:	d016      	beq.n	402244 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402216:	4a1c      	ldr	r2, [pc, #112]	; (402288 <SystemCoreClockUpdate+0xfc>)
  402218:	4b19      	ldr	r3, [pc, #100]	; (402280 <SystemCoreClockUpdate+0xf4>)
  40221a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40221c:	4b17      	ldr	r3, [pc, #92]	; (40227c <SystemCoreClockUpdate+0xf0>)
  40221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402220:	f003 0303 	and.w	r3, r3, #3
  402224:	2b02      	cmp	r3, #2
  402226:	d1ba      	bne.n	40219e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402228:	4a14      	ldr	r2, [pc, #80]	; (40227c <SystemCoreClockUpdate+0xf0>)
  40222a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40222c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40222e:	4814      	ldr	r0, [pc, #80]	; (402280 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402230:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402234:	6803      	ldr	r3, [r0, #0]
  402236:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40223a:	b2d2      	uxtb	r2, r2
  40223c:	fbb3 f3f2 	udiv	r3, r3, r2
  402240:	6003      	str	r3, [r0, #0]
  402242:	e7ac      	b.n	40219e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402244:	4a11      	ldr	r2, [pc, #68]	; (40228c <SystemCoreClockUpdate+0x100>)
  402246:	4b0e      	ldr	r3, [pc, #56]	; (402280 <SystemCoreClockUpdate+0xf4>)
  402248:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40224a:	4b0c      	ldr	r3, [pc, #48]	; (40227c <SystemCoreClockUpdate+0xf0>)
  40224c:	6a1b      	ldr	r3, [r3, #32]
  40224e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402252:	2b10      	cmp	r3, #16
  402254:	d005      	beq.n	402262 <SystemCoreClockUpdate+0xd6>
  402256:	2b20      	cmp	r3, #32
  402258:	d1e0      	bne.n	40221c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40225a:	4a0b      	ldr	r2, [pc, #44]	; (402288 <SystemCoreClockUpdate+0xfc>)
  40225c:	4b08      	ldr	r3, [pc, #32]	; (402280 <SystemCoreClockUpdate+0xf4>)
  40225e:	601a      	str	r2, [r3, #0]
          break;
  402260:	e7dc      	b.n	40221c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402262:	4a0b      	ldr	r2, [pc, #44]	; (402290 <SystemCoreClockUpdate+0x104>)
  402264:	4b06      	ldr	r3, [pc, #24]	; (402280 <SystemCoreClockUpdate+0xf4>)
  402266:	601a      	str	r2, [r3, #0]
          break;
  402268:	e7d8      	b.n	40221c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40226a:	4a05      	ldr	r2, [pc, #20]	; (402280 <SystemCoreClockUpdate+0xf4>)
  40226c:	6813      	ldr	r3, [r2, #0]
  40226e:	4909      	ldr	r1, [pc, #36]	; (402294 <SystemCoreClockUpdate+0x108>)
  402270:	fba1 1303 	umull	r1, r3, r1, r3
  402274:	085b      	lsrs	r3, r3, #1
  402276:	6013      	str	r3, [r2, #0]
  402278:	4770      	bx	lr
  40227a:	bf00      	nop
  40227c:	400e0600 	.word	0x400e0600
  402280:	20400020 	.word	0x20400020
  402284:	400e1810 	.word	0x400e1810
  402288:	00b71b00 	.word	0x00b71b00
  40228c:	003d0900 	.word	0x003d0900
  402290:	007a1200 	.word	0x007a1200
  402294:	aaaaaaab 	.word	0xaaaaaaab

00402298 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402298:	4b16      	ldr	r3, [pc, #88]	; (4022f4 <system_init_flash+0x5c>)
  40229a:	4298      	cmp	r0, r3
  40229c:	d913      	bls.n	4022c6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40229e:	4b16      	ldr	r3, [pc, #88]	; (4022f8 <system_init_flash+0x60>)
  4022a0:	4298      	cmp	r0, r3
  4022a2:	d915      	bls.n	4022d0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4022a4:	4b15      	ldr	r3, [pc, #84]	; (4022fc <system_init_flash+0x64>)
  4022a6:	4298      	cmp	r0, r3
  4022a8:	d916      	bls.n	4022d8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4022aa:	4b15      	ldr	r3, [pc, #84]	; (402300 <system_init_flash+0x68>)
  4022ac:	4298      	cmp	r0, r3
  4022ae:	d917      	bls.n	4022e0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4022b0:	4b14      	ldr	r3, [pc, #80]	; (402304 <system_init_flash+0x6c>)
  4022b2:	4298      	cmp	r0, r3
  4022b4:	d918      	bls.n	4022e8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4022b6:	4b14      	ldr	r3, [pc, #80]	; (402308 <system_init_flash+0x70>)
  4022b8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4022ba:	bf94      	ite	ls
  4022bc:	4a13      	ldrls	r2, [pc, #76]	; (40230c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4022be:	4a14      	ldrhi	r2, [pc, #80]	; (402310 <system_init_flash+0x78>)
  4022c0:	4b14      	ldr	r3, [pc, #80]	; (402314 <system_init_flash+0x7c>)
  4022c2:	601a      	str	r2, [r3, #0]
  4022c4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4022c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4022ca:	4b12      	ldr	r3, [pc, #72]	; (402314 <system_init_flash+0x7c>)
  4022cc:	601a      	str	r2, [r3, #0]
  4022ce:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4022d0:	4a11      	ldr	r2, [pc, #68]	; (402318 <system_init_flash+0x80>)
  4022d2:	4b10      	ldr	r3, [pc, #64]	; (402314 <system_init_flash+0x7c>)
  4022d4:	601a      	str	r2, [r3, #0]
  4022d6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4022d8:	4a10      	ldr	r2, [pc, #64]	; (40231c <system_init_flash+0x84>)
  4022da:	4b0e      	ldr	r3, [pc, #56]	; (402314 <system_init_flash+0x7c>)
  4022dc:	601a      	str	r2, [r3, #0]
  4022de:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4022e0:	4a0f      	ldr	r2, [pc, #60]	; (402320 <system_init_flash+0x88>)
  4022e2:	4b0c      	ldr	r3, [pc, #48]	; (402314 <system_init_flash+0x7c>)
  4022e4:	601a      	str	r2, [r3, #0]
  4022e6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4022e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4022ec:	4b09      	ldr	r3, [pc, #36]	; (402314 <system_init_flash+0x7c>)
  4022ee:	601a      	str	r2, [r3, #0]
  4022f0:	4770      	bx	lr
  4022f2:	bf00      	nop
  4022f4:	015ef3bf 	.word	0x015ef3bf
  4022f8:	02bde77f 	.word	0x02bde77f
  4022fc:	041cdb3f 	.word	0x041cdb3f
  402300:	057bceff 	.word	0x057bceff
  402304:	06dac2bf 	.word	0x06dac2bf
  402308:	0839b67f 	.word	0x0839b67f
  40230c:	04000500 	.word	0x04000500
  402310:	04000600 	.word	0x04000600
  402314:	400e0c00 	.word	0x400e0c00
  402318:	04000100 	.word	0x04000100
  40231c:	04000200 	.word	0x04000200
  402320:	04000300 	.word	0x04000300

00402324 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402324:	4b0a      	ldr	r3, [pc, #40]	; (402350 <_sbrk+0x2c>)
  402326:	681b      	ldr	r3, [r3, #0]
  402328:	b153      	cbz	r3, 402340 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40232a:	4b09      	ldr	r3, [pc, #36]	; (402350 <_sbrk+0x2c>)
  40232c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40232e:	181a      	adds	r2, r3, r0
  402330:	4908      	ldr	r1, [pc, #32]	; (402354 <_sbrk+0x30>)
  402332:	4291      	cmp	r1, r2
  402334:	db08      	blt.n	402348 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  402336:	4610      	mov	r0, r2
  402338:	4a05      	ldr	r2, [pc, #20]	; (402350 <_sbrk+0x2c>)
  40233a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40233c:	4618      	mov	r0, r3
  40233e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402340:	4a05      	ldr	r2, [pc, #20]	; (402358 <_sbrk+0x34>)
  402342:	4b03      	ldr	r3, [pc, #12]	; (402350 <_sbrk+0x2c>)
  402344:	601a      	str	r2, [r3, #0]
  402346:	e7f0      	b.n	40232a <_sbrk+0x6>
		return (caddr_t) -1;	
  402348:	f04f 30ff 	mov.w	r0, #4294967295
}
  40234c:	4770      	bx	lr
  40234e:	bf00      	nop
  402350:	204072b0 	.word	0x204072b0
  402354:	2045fffc 	.word	0x2045fffc
  402358:	2040a718 	.word	0x2040a718

0040235c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40235c:	f04f 30ff 	mov.w	r0, #4294967295
  402360:	4770      	bx	lr

00402362 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402366:	604b      	str	r3, [r1, #4]

	return 0;
}
  402368:	2000      	movs	r0, #0
  40236a:	4770      	bx	lr

0040236c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40236c:	2001      	movs	r0, #1
  40236e:	4770      	bx	lr

00402370 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402370:	2000      	movs	r0, #0
  402372:	4770      	bx	lr

00402374 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402374:	b5f0      	push	{r4, r5, r6, r7, lr}
  402376:	b083      	sub	sp, #12
  402378:	4605      	mov	r5, r0
  40237a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40237c:	2300      	movs	r3, #0
  40237e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402380:	4b2a      	ldr	r3, [pc, #168]	; (40242c <usart_serial_getchar+0xb8>)
  402382:	4298      	cmp	r0, r3
  402384:	d013      	beq.n	4023ae <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402386:	4b2a      	ldr	r3, [pc, #168]	; (402430 <usart_serial_getchar+0xbc>)
  402388:	4298      	cmp	r0, r3
  40238a:	d018      	beq.n	4023be <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40238c:	4b29      	ldr	r3, [pc, #164]	; (402434 <usart_serial_getchar+0xc0>)
  40238e:	4298      	cmp	r0, r3
  402390:	d01d      	beq.n	4023ce <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402392:	4b29      	ldr	r3, [pc, #164]	; (402438 <usart_serial_getchar+0xc4>)
  402394:	429d      	cmp	r5, r3
  402396:	d022      	beq.n	4023de <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402398:	4b28      	ldr	r3, [pc, #160]	; (40243c <usart_serial_getchar+0xc8>)
  40239a:	429d      	cmp	r5, r3
  40239c:	d027      	beq.n	4023ee <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40239e:	4b28      	ldr	r3, [pc, #160]	; (402440 <usart_serial_getchar+0xcc>)
  4023a0:	429d      	cmp	r5, r3
  4023a2:	d02e      	beq.n	402402 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4023a4:	4b27      	ldr	r3, [pc, #156]	; (402444 <usart_serial_getchar+0xd0>)
  4023a6:	429d      	cmp	r5, r3
  4023a8:	d035      	beq.n	402416 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4023aa:	b003      	add	sp, #12
  4023ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4023ae:	461f      	mov	r7, r3
  4023b0:	4e25      	ldr	r6, [pc, #148]	; (402448 <usart_serial_getchar+0xd4>)
  4023b2:	4621      	mov	r1, r4
  4023b4:	4638      	mov	r0, r7
  4023b6:	47b0      	blx	r6
  4023b8:	2800      	cmp	r0, #0
  4023ba:	d1fa      	bne.n	4023b2 <usart_serial_getchar+0x3e>
  4023bc:	e7e9      	b.n	402392 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4023be:	461f      	mov	r7, r3
  4023c0:	4e21      	ldr	r6, [pc, #132]	; (402448 <usart_serial_getchar+0xd4>)
  4023c2:	4621      	mov	r1, r4
  4023c4:	4638      	mov	r0, r7
  4023c6:	47b0      	blx	r6
  4023c8:	2800      	cmp	r0, #0
  4023ca:	d1fa      	bne.n	4023c2 <usart_serial_getchar+0x4e>
  4023cc:	e7e4      	b.n	402398 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4023ce:	461f      	mov	r7, r3
  4023d0:	4e1d      	ldr	r6, [pc, #116]	; (402448 <usart_serial_getchar+0xd4>)
  4023d2:	4621      	mov	r1, r4
  4023d4:	4638      	mov	r0, r7
  4023d6:	47b0      	blx	r6
  4023d8:	2800      	cmp	r0, #0
  4023da:	d1fa      	bne.n	4023d2 <usart_serial_getchar+0x5e>
  4023dc:	e7df      	b.n	40239e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4023de:	461f      	mov	r7, r3
  4023e0:	4e19      	ldr	r6, [pc, #100]	; (402448 <usart_serial_getchar+0xd4>)
  4023e2:	4621      	mov	r1, r4
  4023e4:	4638      	mov	r0, r7
  4023e6:	47b0      	blx	r6
  4023e8:	2800      	cmp	r0, #0
  4023ea:	d1fa      	bne.n	4023e2 <usart_serial_getchar+0x6e>
  4023ec:	e7da      	b.n	4023a4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4023ee:	461e      	mov	r6, r3
  4023f0:	4d16      	ldr	r5, [pc, #88]	; (40244c <usart_serial_getchar+0xd8>)
  4023f2:	a901      	add	r1, sp, #4
  4023f4:	4630      	mov	r0, r6
  4023f6:	47a8      	blx	r5
  4023f8:	2800      	cmp	r0, #0
  4023fa:	d1fa      	bne.n	4023f2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4023fc:	9b01      	ldr	r3, [sp, #4]
  4023fe:	7023      	strb	r3, [r4, #0]
  402400:	e7d3      	b.n	4023aa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402402:	461e      	mov	r6, r3
  402404:	4d11      	ldr	r5, [pc, #68]	; (40244c <usart_serial_getchar+0xd8>)
  402406:	a901      	add	r1, sp, #4
  402408:	4630      	mov	r0, r6
  40240a:	47a8      	blx	r5
  40240c:	2800      	cmp	r0, #0
  40240e:	d1fa      	bne.n	402406 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402410:	9b01      	ldr	r3, [sp, #4]
  402412:	7023      	strb	r3, [r4, #0]
  402414:	e7c9      	b.n	4023aa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402416:	461e      	mov	r6, r3
  402418:	4d0c      	ldr	r5, [pc, #48]	; (40244c <usart_serial_getchar+0xd8>)
  40241a:	a901      	add	r1, sp, #4
  40241c:	4630      	mov	r0, r6
  40241e:	47a8      	blx	r5
  402420:	2800      	cmp	r0, #0
  402422:	d1fa      	bne.n	40241a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402424:	9b01      	ldr	r3, [sp, #4]
  402426:	7023      	strb	r3, [r4, #0]
}
  402428:	e7bf      	b.n	4023aa <usart_serial_getchar+0x36>
  40242a:	bf00      	nop
  40242c:	400e0800 	.word	0x400e0800
  402430:	400e0a00 	.word	0x400e0a00
  402434:	400e1a00 	.word	0x400e1a00
  402438:	400e1c00 	.word	0x400e1c00
  40243c:	40024000 	.word	0x40024000
  402440:	40028000 	.word	0x40028000
  402444:	4002c000 	.word	0x4002c000
  402448:	00401ac3 	.word	0x00401ac3
  40244c:	00400af7 	.word	0x00400af7

00402450 <usart_serial_putchar>:
{
  402450:	b570      	push	{r4, r5, r6, lr}
  402452:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402454:	4b2a      	ldr	r3, [pc, #168]	; (402500 <usart_serial_putchar+0xb0>)
  402456:	4298      	cmp	r0, r3
  402458:	d013      	beq.n	402482 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40245a:	4b2a      	ldr	r3, [pc, #168]	; (402504 <usart_serial_putchar+0xb4>)
  40245c:	4298      	cmp	r0, r3
  40245e:	d019      	beq.n	402494 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402460:	4b29      	ldr	r3, [pc, #164]	; (402508 <usart_serial_putchar+0xb8>)
  402462:	4298      	cmp	r0, r3
  402464:	d01f      	beq.n	4024a6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402466:	4b29      	ldr	r3, [pc, #164]	; (40250c <usart_serial_putchar+0xbc>)
  402468:	4298      	cmp	r0, r3
  40246a:	d025      	beq.n	4024b8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40246c:	4b28      	ldr	r3, [pc, #160]	; (402510 <usart_serial_putchar+0xc0>)
  40246e:	4298      	cmp	r0, r3
  402470:	d02b      	beq.n	4024ca <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402472:	4b28      	ldr	r3, [pc, #160]	; (402514 <usart_serial_putchar+0xc4>)
  402474:	4298      	cmp	r0, r3
  402476:	d031      	beq.n	4024dc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402478:	4b27      	ldr	r3, [pc, #156]	; (402518 <usart_serial_putchar+0xc8>)
  40247a:	4298      	cmp	r0, r3
  40247c:	d037      	beq.n	4024ee <usart_serial_putchar+0x9e>
	return 0;
  40247e:	2000      	movs	r0, #0
}
  402480:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402482:	461e      	mov	r6, r3
  402484:	4d25      	ldr	r5, [pc, #148]	; (40251c <usart_serial_putchar+0xcc>)
  402486:	4621      	mov	r1, r4
  402488:	4630      	mov	r0, r6
  40248a:	47a8      	blx	r5
  40248c:	2800      	cmp	r0, #0
  40248e:	d1fa      	bne.n	402486 <usart_serial_putchar+0x36>
		return 1;
  402490:	2001      	movs	r0, #1
  402492:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402494:	461e      	mov	r6, r3
  402496:	4d21      	ldr	r5, [pc, #132]	; (40251c <usart_serial_putchar+0xcc>)
  402498:	4621      	mov	r1, r4
  40249a:	4630      	mov	r0, r6
  40249c:	47a8      	blx	r5
  40249e:	2800      	cmp	r0, #0
  4024a0:	d1fa      	bne.n	402498 <usart_serial_putchar+0x48>
		return 1;
  4024a2:	2001      	movs	r0, #1
  4024a4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4024a6:	461e      	mov	r6, r3
  4024a8:	4d1c      	ldr	r5, [pc, #112]	; (40251c <usart_serial_putchar+0xcc>)
  4024aa:	4621      	mov	r1, r4
  4024ac:	4630      	mov	r0, r6
  4024ae:	47a8      	blx	r5
  4024b0:	2800      	cmp	r0, #0
  4024b2:	d1fa      	bne.n	4024aa <usart_serial_putchar+0x5a>
		return 1;
  4024b4:	2001      	movs	r0, #1
  4024b6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4024b8:	461e      	mov	r6, r3
  4024ba:	4d18      	ldr	r5, [pc, #96]	; (40251c <usart_serial_putchar+0xcc>)
  4024bc:	4621      	mov	r1, r4
  4024be:	4630      	mov	r0, r6
  4024c0:	47a8      	blx	r5
  4024c2:	2800      	cmp	r0, #0
  4024c4:	d1fa      	bne.n	4024bc <usart_serial_putchar+0x6c>
		return 1;
  4024c6:	2001      	movs	r0, #1
  4024c8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024ca:	461e      	mov	r6, r3
  4024cc:	4d14      	ldr	r5, [pc, #80]	; (402520 <usart_serial_putchar+0xd0>)
  4024ce:	4621      	mov	r1, r4
  4024d0:	4630      	mov	r0, r6
  4024d2:	47a8      	blx	r5
  4024d4:	2800      	cmp	r0, #0
  4024d6:	d1fa      	bne.n	4024ce <usart_serial_putchar+0x7e>
		return 1;
  4024d8:	2001      	movs	r0, #1
  4024da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024dc:	461e      	mov	r6, r3
  4024de:	4d10      	ldr	r5, [pc, #64]	; (402520 <usart_serial_putchar+0xd0>)
  4024e0:	4621      	mov	r1, r4
  4024e2:	4630      	mov	r0, r6
  4024e4:	47a8      	blx	r5
  4024e6:	2800      	cmp	r0, #0
  4024e8:	d1fa      	bne.n	4024e0 <usart_serial_putchar+0x90>
		return 1;
  4024ea:	2001      	movs	r0, #1
  4024ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4024ee:	461e      	mov	r6, r3
  4024f0:	4d0b      	ldr	r5, [pc, #44]	; (402520 <usart_serial_putchar+0xd0>)
  4024f2:	4621      	mov	r1, r4
  4024f4:	4630      	mov	r0, r6
  4024f6:	47a8      	blx	r5
  4024f8:	2800      	cmp	r0, #0
  4024fa:	d1fa      	bne.n	4024f2 <usart_serial_putchar+0xa2>
		return 1;
  4024fc:	2001      	movs	r0, #1
  4024fe:	bd70      	pop	{r4, r5, r6, pc}
  402500:	400e0800 	.word	0x400e0800
  402504:	400e0a00 	.word	0x400e0a00
  402508:	400e1a00 	.word	0x400e1a00
  40250c:	400e1c00 	.word	0x400e1c00
  402510:	40024000 	.word	0x40024000
  402514:	40028000 	.word	0x40028000
  402518:	4002c000 	.word	0x4002c000
  40251c:	00401ab1 	.word	0x00401ab1
  402520:	00400ae1 	.word	0x00400ae1

00402524 <fill_ArtNode>:
	}
	return 1;
}

void fill_ArtNode(T_ArtNode *node)
{
  402524:	b5f0      	push	{r4, r5, r6, r7, lr}
  402526:	4604      	mov	r4, r0
	
	//fill to 0's
	memset (node, 0, sizeof(node));
  402528:	4603      	mov	r3, r0
  40252a:	2200      	movs	r2, #0
  40252c:	f843 2bd8 	str.w	r2, [r3], #216
	
	//fill data
	memcpy (node->mac, factory_mac, 6);                   // the mac address of node
  402530:	4a3c      	ldr	r2, [pc, #240]	; (402624 <fill_ArtNode+0x100>)
  402532:	6810      	ldr	r0, [r2, #0]
  402534:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  402538:	8892      	ldrh	r2, [r2, #4]
  40253a:	809a      	strh	r2, [r3, #4]
	memcpy (node->localIp, factory_localIp, 4);           // the IP address of node
  40253c:	4b3a      	ldr	r3, [pc, #232]	; (402628 <fill_ArtNode+0x104>)
  40253e:	681b      	ldr	r3, [r3, #0]
  402540:	f8c4 300a 	str.w	r3, [r4, #10]
	memcpy (node->broadcastIp, factory_broadcastIp, 4);   // broadcast IP address
  402544:	4b39      	ldr	r3, [pc, #228]	; (40262c <fill_ArtNode+0x108>)
  402546:	681b      	ldr	r3, [r3, #0]
  402548:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	memcpy (node->gateway, factory_gateway, 4);           // gateway IP address
  40254c:	4b38      	ldr	r3, [pc, #224]	; (402630 <fill_ArtNode+0x10c>)
  40254e:	681b      	ldr	r3, [r3, #0]
  402550:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	memcpy (node->subnetMask, factory_subnetMask, 4);     // network mask (art-net use 'A' network type)
  402554:	4b37      	ldr	r3, [pc, #220]	; (402634 <fill_ArtNode+0x110>)
  402556:	681b      	ldr	r3, [r3, #0]
  402558:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	
	sprintf((char *)node->id, "Art-Net\0"); // *** don't change never ***
  40255c:	4f36      	ldr	r7, [pc, #216]	; (402638 <fill_ArtNode+0x114>)
  40255e:	463a      	mov	r2, r7
  402560:	ca03      	ldmia	r2!, {r0, r1}
  402562:	6020      	str	r0, [r4, #0]
  402564:	6061      	str	r1, [r4, #4]
	sprintf((char *)node->shortname, "Control node\0");
  402566:	f107 050c 	add.w	r5, r7, #12
  40256a:	cd07      	ldmia	r5!, {r0, r1, r2}
  40256c:	f8c4 001a 	str.w	r0, [r4, #26]
  402570:	f8c4 101e 	str.w	r1, [r4, #30]
  402574:	f8c4 2022 	str.w	r2, [r4, #34]	; 0x22
  402578:	782a      	ldrb	r2, [r5, #0]
  40257a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	sprintf((char *)node->longname, "Interactive System Master Control Node (c) Robbie Smedts\0");
  40257e:	f107 061c 	add.w	r6, r7, #28
  402582:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  402586:	374c      	adds	r7, #76	; 0x4c
  402588:	46b6      	mov	lr, r6
  40258a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40258e:	6028      	str	r0, [r5, #0]
  402590:	6069      	str	r1, [r5, #4]
  402592:	60aa      	str	r2, [r5, #8]
  402594:	60eb      	str	r3, [r5, #12]
  402596:	4676      	mov	r6, lr
  402598:	3510      	adds	r5, #16
  40259a:	45be      	cmp	lr, r7
  40259c:	d1f4      	bne.n	402588 <fill_ArtNode+0x64>
  40259e:	ce03      	ldmia	r6!, {r0, r1}
  4025a0:	6028      	str	r0, [r5, #0]
  4025a2:	6069      	str	r1, [r5, #4]
  4025a4:	7833      	ldrb	r3, [r6, #0]
  4025a6:	722b      	strb	r3, [r5, #8]
	
	memset (node->porttypes,  0x80, 4);
  4025a8:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
  4025ac:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
	memset (node->goodinput,  0x08, 4);
  4025b0:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
  4025b4:	f8c4 30b2 	str.w	r3, [r4, #178]	; 0xb2
	//memset (node->goodoutput, 0x00, 4);
	
	
	node->subH           = 0x00;        // high byte of the Node Subnet Address (This field is currently unused and set to zero. It is
  4025b8:	2300      	movs	r3, #0
  4025ba:	74a3      	strb	r3, [r4, #18]
	// provided to allow future expansion.) (art-net III)
	node->sub            = 0x00;        // low byte of the Node Subnet Address
  4025bc:	74e3      	strb	r3, [r4, #19]
	
	// **************************** art-net address of universes **********************************
	node->swout      [0] = 0x00;        // This array defines the 8 bit Universe address of the available output channels.
  4025be:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
	node->swout      [1] = 0x01;        // values from 0x00 to 0xFF
  4025c2:	2201      	movs	r2, #1
  4025c4:	f884 20bf 	strb.w	r2, [r4, #191]	; 0xbf
	node->swout      [2] = 0x02;
  4025c8:	2002      	movs	r0, #2
  4025ca:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	node->swout      [3] = 0x03;
  4025ce:	2103      	movs	r1, #3
  4025d0:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
	
	// not implemented yet
	node->swin       [0] = 0x00;        // This array defines the 8 bit Universe address of the available input channels.
  4025d4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	node->swin       [1] = 0x01;        // values from 0x00 to 0xFF
  4025d8:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
	node->swin       [2] = 0x02;
  4025dc:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	node->swin       [3] = 0x03;
  4025e0:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
	

	node->goodoutput [0] = 0x80;
  4025e4:	2180      	movs	r1, #128	; 0x80
  4025e6:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6

	node->etsamanH = 'S';        // The ESTA manufacturer code.
  4025ea:	2153      	movs	r1, #83	; 0x53
  4025ec:	7621      	strb	r1, [r4, #24]
	node->etsamanL = 'R';        // The ESTA manufacturer code.
  4025ee:	2152      	movs	r1, #82	; 0x52
  4025f0:	7661      	strb	r1, [r4, #25]
	node->localPort  = 0x1936;   // artnet UDP port is by default 6454 (0x1936)
  4025f2:	f641 1136 	movw	r1, #6454	; 0x1936
  4025f6:	81e1      	strh	r1, [r4, #14]
	node->verH       = 0;        // high byte of Node firmware revision number.
  4025f8:	7423      	strb	r3, [r4, #16]
	node->ver        = 1;        // low byte of Node firmware revision number.
  4025fa:	7462      	strb	r2, [r4, #17]
	node->ProVerH    = 0;        // high byte of the Art-Net protocol revision number.
  4025fc:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
	node->ProVer     = 14;       // low byte of the Art-Net protocol revision number.
  402600:	220e      	movs	r2, #14
  402602:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	node->oemH       = 0;        // high byte of the oem value.
  402606:	7523      	strb	r3, [r4, #20]
	node->oem        = 0xFF;     // low byte of the oem value. (0x00FF = developer code)
  402608:	22ff      	movs	r2, #255	; 0xff
  40260a:	7562      	strb	r2, [r4, #21]
	node->ubea       = 0;        // This field contains the firmware version of the User Bios Extension Area (UBEA). 0 if not used
  40260c:	75a3      	strb	r3, [r4, #22]
	node->status     = 0x08;
  40260e:	2208      	movs	r2, #8
  402610:	75e2      	strb	r2, [r4, #23]
	node->swvideo    = 0;
  402612:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node->swmacro    = 0;
  402616:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	node->swremote   = 0;
  40261a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	node->style      = 0;        // StNode style - A DMX to/from Art-Net device
  40261e:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
  402622:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402624:	20400030 	.word	0x20400030
  402628:	2040002c 	.word	0x2040002c
  40262c:	20400024 	.word	0x20400024
  402630:	20400028 	.word	0x20400028
  402634:	20400038 	.word	0x20400038
  402638:	00405c8c 	.word	0x00405c8c

0040263c <get_packet_type>:
	printf("M: Address unicast\r\n");
#endif
}

T_ArtPacketType get_packet_type(uint8_t *packet) //this get artnet packet type
{
  40263c:	b510      	push	{r4, lr}
  40263e:	4604      	mov	r4, r0
	if (! memcmp( packet, ArtNode.id, 8))
  402640:	2208      	movs	r2, #8
  402642:	4906      	ldr	r1, [pc, #24]	; (40265c <get_packet_type+0x20>)
  402644:	4b06      	ldr	r3, [pc, #24]	; (402660 <get_packet_type+0x24>)
  402646:	4798      	blx	r3
  402648:	b930      	cbnz	r0, 402658 <get_packet_type+0x1c>
	{
		return BYTES_TO_SHORT(packet[9], packet[8]);
  40264a:	7a63      	ldrb	r3, [r4, #9]
  40264c:	7a20      	ldrb	r0, [r4, #8]
  40264e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402652:	b200      	sxth	r0, r0
	}
	return 0;  // bad packet
}
  402654:	b280      	uxth	r0, r0
  402656:	bd10      	pop	{r4, pc}
  402658:	2000      	movs	r0, #0
  40265a:	e7fb      	b.n	402654 <get_packet_type+0x18>
  40265c:	20408318 	.word	0x20408318
  402660:	00402d85 	.word	0x00402d85

00402664 <handleGMAC_Packet>:
bool handleGMAC_Packet(uint8_t *p_uc_data, uint32_t ul_size){
  402664:	b538      	push	{r3, r4, r5, lr}
  402666:	4604      	mov	r4, r0
  402668:	460d      	mov	r5, r1
	uint16_t eth_pkt_format = SWAP16(p_eth->et_protlen);
  40266a:	8983      	ldrh	r3, [r0, #12]
  40266c:	0a19      	lsrs	r1, r3, #8
  40266e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  402672:	b289      	uxth	r1, r1
	if(eth_pkt_format == ETH_PROT_IPV4){
  402674:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  402678:	d008      	beq.n	40268c <handleGMAC_Packet+0x28>
	else if(eth_pkt_format == ETH_PROT_ARP){
  40267a:	f640 0306 	movw	r3, #2054	; 0x806
  40267e:	4299      	cmp	r1, r3
  402680:	d045      	beq.n	40270e <handleGMAC_Packet+0xaa>
	printf("=== Default w_pkt_format= 0x%X===\n\r", eth_pkt_format);
  402682:	4827      	ldr	r0, [pc, #156]	; (402720 <handleGMAC_Packet+0xbc>)
  402684:	4b27      	ldr	r3, [pc, #156]	; (402724 <handleGMAC_Packet+0xc0>)
  402686:	4798      	blx	r3
		return 0;	
  402688:	2000      	movs	r0, #0
  40268a:	bd38      	pop	{r3, r4, r5, pc}
		if (p_ip->ip_p == IP_PROT_UDP){
  40268c:	7dc3      	ldrb	r3, [r0, #23]
  40268e:	2b11      	cmp	r3, #17
  402690:	d003      	beq.n	40269a <handleGMAC_Packet+0x36>
		else if(p_ip->ip_p == IP_PROT_ICMP)
  402692:	2b01      	cmp	r3, #1
  402694:	d036      	beq.n	402704 <handleGMAC_Packet+0xa0>
	return 1;
  402696:	2001      	movs	r0, #1
}
  402698:	bd38      	pop	{r3, r4, r5, pc}
	printf("M: UDP\r\n");
  40269a:	4823      	ldr	r0, [pc, #140]	; (402728 <handleGMAC_Packet+0xc4>)
  40269c:	4b21      	ldr	r3, [pc, #132]	; (402724 <handleGMAC_Packet+0xc0>)
  40269e:	4798      	blx	r3
			if (ul_size > hdr_len){
  4026a0:	2d2a      	cmp	r5, #42	; 0x2a
  4026a2:	d939      	bls.n	402718 <handleGMAC_Packet+0xb4>
				PacketType = (T_ArtPacketType) get_packet_type(p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + ICMP_HEADER_SIZE);
  4026a4:	f104 002a 	add.w	r0, r4, #42	; 0x2a
  4026a8:	4b20      	ldr	r3, [pc, #128]	; (40272c <handleGMAC_Packet+0xc8>)
  4026aa:	4798      	blx	r3
  4026ac:	4b20      	ldr	r3, [pc, #128]	; (402730 <handleGMAC_Packet+0xcc>)
  4026ae:	8018      	strh	r0, [r3, #0]
				if(PacketType == FAULTY_PACKET){  // bad packet
  4026b0:	2800      	cmp	r0, #0
  4026b2:	d033      	beq.n	40271c <handleGMAC_Packet+0xb8>
				if(PacketType == ARTNET_DMX){
  4026b4:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
  4026b8:	d007      	beq.n	4026ca <handleGMAC_Packet+0x66>
				else if(PacketType == ARTNET_POLL){
  4026ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  4026be:	d01c      	beq.n	4026fa <handleGMAC_Packet+0x96>
				else if(PacketType == ARTNET_ADDRESS){
  4026c0:	f5b0 40c0 	subs.w	r0, r0, #24576	; 0x6000
  4026c4:	bf18      	it	ne
  4026c6:	2001      	movne	r0, #1
  4026c8:	bd38      	pop	{r3, r4, r5, pc}
	printf("M: DMX\r\n");
  4026ca:	481a      	ldr	r0, [pc, #104]	; (402734 <handleGMAC_Packet+0xd0>)
  4026cc:	4b15      	ldr	r3, [pc, #84]	; (402724 <handleGMAC_Packet+0xc0>)
  4026ce:	4798      	blx	r3
						if(p_artDmx_packet->SubUni == ArtNode.swout[0])
  4026d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
  4026d4:	4b18      	ldr	r3, [pc, #96]	; (402738 <handleGMAC_Packet+0xd4>)
  4026d6:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
  4026da:	429a      	cmp	r2, r3
  4026dc:	d001      	beq.n	4026e2 <handleGMAC_Packet+0x7e>
	return 1;
  4026de:	2001      	movs	r0, #1
  4026e0:	bd38      	pop	{r3, r4, r5, pc}
							memcpy(artnet_data_buffer, p_artDmx_packet->Data, SWAP16(p_artDmx_packet->Length)); //mempcy(dst, src, arraylength);
  4026e2:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
  4026e4:	0213      	lsls	r3, r2, #8
  4026e6:	b29b      	uxth	r3, r3
  4026e8:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
  4026ec:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  4026f0:	4812      	ldr	r0, [pc, #72]	; (40273c <handleGMAC_Packet+0xd8>)
  4026f2:	4b13      	ldr	r3, [pc, #76]	; (402740 <handleGMAC_Packet+0xdc>)
  4026f4:	4798      	blx	r3
	return 1;
  4026f6:	2001      	movs	r0, #1
  4026f8:	bd38      	pop	{r3, r4, r5, pc}
	printf("M: ArtPoll\r\n");
  4026fa:	4812      	ldr	r0, [pc, #72]	; (402744 <handleGMAC_Packet+0xe0>)
  4026fc:	4b09      	ldr	r3, [pc, #36]	; (402724 <handleGMAC_Packet+0xc0>)
  4026fe:	4798      	blx	r3
						return 0;
  402700:	2000      	movs	r0, #0
  402702:	bd38      	pop	{r3, r4, r5, pc}
			gmac_process_ICMP_packet(p_uc_data, ul_size);
  402704:	4629      	mov	r1, r5
  402706:	4b10      	ldr	r3, [pc, #64]	; (402748 <handleGMAC_Packet+0xe4>)
  402708:	4798      	blx	r3
			return 0;
  40270a:	2000      	movs	r0, #0
  40270c:	bd38      	pop	{r3, r4, r5, pc}
		gmac_process_arp_packet(p_uc_data, ul_size);
  40270e:	4629      	mov	r1, r5
  402710:	4b0e      	ldr	r3, [pc, #56]	; (40274c <handleGMAC_Packet+0xe8>)
  402712:	4798      	blx	r3
		return 0;
  402714:	2000      	movs	r0, #0
  402716:	bd38      	pop	{r3, r4, r5, pc}
	return 1;
  402718:	2001      	movs	r0, #1
  40271a:	bd38      	pop	{r3, r4, r5, pc}
					return 0;
  40271c:	2000      	movs	r0, #0
  40271e:	bd38      	pop	{r3, r4, r5, pc}
  402720:	00405d0c 	.word	0x00405d0c
  402724:	00402d5d 	.word	0x00402d5d
  402728:	00405ce4 	.word	0x00405ce4
  40272c:	0040263d 	.word	0x0040263d
  402730:	20408304 	.word	0x20408304
  402734:	00405cf0 	.word	0x00405cf0
  402738:	20408318 	.word	0x20408318
  40273c:	204072ec 	.word	0x204072ec
  402740:	00402de5 	.word	0x00402de5
  402744:	00405cfc 	.word	0x00405cfc
  402748:	00400ca1 	.word	0x00400ca1
  40274c:	00400c29 	.word	0x00400c29

00402750 <main>:
{
  402750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402754:	b08d      	sub	sp, #52	; 0x34
	sysclk_init();
  402756:	4b7c      	ldr	r3, [pc, #496]	; (402948 <main+0x1f8>)
  402758:	4798      	blx	r3
	board_init();
  40275a:	4b7c      	ldr	r3, [pc, #496]	; (40294c <main+0x1fc>)
  40275c:	4798      	blx	r3
  40275e:	200e      	movs	r0, #14
  402760:	4e7b      	ldr	r6, [pc, #492]	; (402950 <main+0x200>)
  402762:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402764:	4d7b      	ldr	r5, [pc, #492]	; (402954 <main+0x204>)
  402766:	4b7c      	ldr	r3, [pc, #496]	; (402958 <main+0x208>)
  402768:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40276a:	4a7c      	ldr	r2, [pc, #496]	; (40295c <main+0x20c>)
  40276c:	4b7c      	ldr	r3, [pc, #496]	; (402960 <main+0x210>)
  40276e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402770:	4a7c      	ldr	r2, [pc, #496]	; (402964 <main+0x214>)
  402772:	4b7d      	ldr	r3, [pc, #500]	; (402968 <main+0x218>)
  402774:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402776:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40277a:	9306      	str	r3, [sp, #24]
	usart_settings.char_length = opt->charlength;
  40277c:	23c0      	movs	r3, #192	; 0xc0
  40277e:	9307      	str	r3, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  402780:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402784:	9308      	str	r3, [sp, #32]
	usart_settings.stop_bits= opt->stopbits;
  402786:	2400      	movs	r4, #0
  402788:	9409      	str	r4, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40278a:	940a      	str	r4, [sp, #40]	; 0x28
  40278c:	200e      	movs	r0, #14
  40278e:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  402790:	4a76      	ldr	r2, [pc, #472]	; (40296c <main+0x21c>)
  402792:	a906      	add	r1, sp, #24
  402794:	4628      	mov	r0, r5
  402796:	4b76      	ldr	r3, [pc, #472]	; (402970 <main+0x220>)
  402798:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40279a:	4628      	mov	r0, r5
  40279c:	4b75      	ldr	r3, [pc, #468]	; (402974 <main+0x224>)
  40279e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4027a0:	4628      	mov	r0, r5
  4027a2:	4b75      	ldr	r3, [pc, #468]	; (402978 <main+0x228>)
  4027a4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4027a6:	4e75      	ldr	r6, [pc, #468]	; (40297c <main+0x22c>)
  4027a8:	6833      	ldr	r3, [r6, #0]
  4027aa:	4621      	mov	r1, r4
  4027ac:	6898      	ldr	r0, [r3, #8]
  4027ae:	4d74      	ldr	r5, [pc, #464]	; (402980 <main+0x230>)
  4027b0:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4027b2:	6833      	ldr	r3, [r6, #0]
  4027b4:	4621      	mov	r1, r4
  4027b6:	6858      	ldr	r0, [r3, #4]
  4027b8:	47a8      	blx	r5
	puts(STRING_HEADER);
  4027ba:	4872      	ldr	r0, [pc, #456]	; (402984 <main+0x234>)
  4027bc:	4b72      	ldr	r3, [pc, #456]	; (402988 <main+0x238>)
  4027be:	4798      	blx	r3
	fill_ArtNode(&ArtNode);
  4027c0:	4872      	ldr	r0, [pc, #456]	; (40298c <main+0x23c>)
  4027c2:	4b73      	ldr	r3, [pc, #460]	; (402990 <main+0x240>)
  4027c4:	4798      	blx	r3
	if (!init_gmac_ethernet())
  4027c6:	4b73      	ldr	r3, [pc, #460]	; (402994 <main+0x244>)
  4027c8:	4798      	blx	r3
  4027ca:	2800      	cmp	r0, #0
  4027cc:	f000 80b7 	beq.w	40293e <main+0x1ee>
	gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
  4027d0:	4871      	ldr	r0, [pc, #452]	; (402998 <main+0x248>)
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  4027d2:	7883      	ldrb	r3, [r0, #2]
  4027d4:	7842      	ldrb	r2, [r0, #1]
  4027d6:	7801      	ldrb	r1, [r0, #0]
  4027d8:	7944      	ldrb	r4, [r0, #5]
  4027da:	9402      	str	r4, [sp, #8]
  4027dc:	7904      	ldrb	r4, [r0, #4]
  4027de:	9401      	str	r4, [sp, #4]
  4027e0:	78c0      	ldrb	r0, [r0, #3]
  4027e2:	9000      	str	r0, [sp, #0]
  4027e4:	486d      	ldr	r0, [pc, #436]	; (40299c <main+0x24c>)
  4027e6:	4c6e      	ldr	r4, [pc, #440]	; (4029a0 <main+0x250>)
  4027e8:	47a0      	blx	r4
	gs_uc_ip_address[2], gs_uc_ip_address[3]);
  4027ea:	486e      	ldr	r0, [pc, #440]	; (4029a4 <main+0x254>)
	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
  4027ec:	7883      	ldrb	r3, [r0, #2]
  4027ee:	7842      	ldrb	r2, [r0, #1]
  4027f0:	7801      	ldrb	r1, [r0, #0]
  4027f2:	78c0      	ldrb	r0, [r0, #3]
  4027f4:	9000      	str	r0, [sp, #0]
  4027f6:	486c      	ldr	r0, [pc, #432]	; (4029a8 <main+0x258>)
  4027f8:	47a0      	blx	r4
	puts("link detected\r");
  4027fa:	486c      	ldr	r0, [pc, #432]	; (4029ac <main+0x25c>)
  4027fc:	4b62      	ldr	r3, [pc, #392]	; (402988 <main+0x238>)
  4027fe:	4798      	blx	r3
	spi_master_initialize();
  402800:	4b6b      	ldr	r3, [pc, #428]	; (4029b0 <main+0x260>)
  402802:	4798      	blx	r3
	nRF24_begin();
  402804:	4b6b      	ldr	r3, [pc, #428]	; (4029b4 <main+0x264>)
  402806:	4798      	blx	r3
	nRF24_setPALevel(RF_PA_HIGH);
  402808:	2002      	movs	r0, #2
  40280a:	4b6b      	ldr	r3, [pc, #428]	; (4029b8 <main+0x268>)
  40280c:	4798      	blx	r3
	nRF24_stopListening();
  40280e:	4b6b      	ldr	r3, [pc, #428]	; (4029bc <main+0x26c>)
  402810:	4798      	blx	r3
	printDetails();
  402812:	4b6b      	ldr	r3, [pc, #428]	; (4029c0 <main+0x270>)
  402814:	4798      	blx	r3
		if (GMAC_OK == read_dev_gmac()) {
  402816:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4029f4 <main+0x2a4>
	dataOut.srcNode = 0;
  40281a:	4f6a      	ldr	r7, [pc, #424]	; (4029c4 <main+0x274>)
	printf("Node %d | HSV %d, %d, %d\r\n", currentNode, dataOut.hue, dataOut.saturation, dataOut.intensity);
  40281c:	46a3      	mov	fp, r4
			dataOut.destNode = currentNode;
  40281e:	9705      	str	r7, [sp, #20]
  402820:	e079      	b.n	402916 <main+0x1c6>
			nRF24_openWritingPipe(listeningPipes[currentNode]);
  402822:	2600      	movs	r6, #0
  402824:	f8d8 0004 	ldr.w	r0, [r8, #4]
  402828:	4631      	mov	r1, r6
  40282a:	4b67      	ldr	r3, [pc, #412]	; (4029c8 <main+0x278>)
  40282c:	4798      	blx	r3
			dataOut.destNode = currentNode;
  40282e:	f887 a001 	strb.w	sl, [r7, #1]
			dataOut.senCommand = disabled;
  402832:	70be      	strb	r6, [r7, #2]
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  402834:	2107      	movs	r1, #7
  402836:	9805      	ldr	r0, [sp, #20]
  402838:	4b64      	ldr	r3, [pc, #400]	; (4029cc <main+0x27c>)
  40283a:	4798      	blx	r3
  40283c:	2800      	cmp	r0, #0
  40283e:	d039      	beq.n	4028b4 <main+0x164>
	printf("disable sensor node %d\r\n", currentNode);
  402840:	9904      	ldr	r1, [sp, #16]
  402842:	4863      	ldr	r0, [pc, #396]	; (4029d0 <main+0x280>)
  402844:	47d8      	blx	fp
  402846:	3504      	adds	r5, #4
  402848:	3401      	adds	r4, #1
  40284a:	f108 0804 	add.w	r8, r8, #4
	for(i = artnetDmxAddress; i < (artnetDmxAddress + (nodes * 4)); i++)
  40284e:	2c04      	cmp	r4, #4
  402850:	d060      	beq.n	402914 <main+0x1c4>
  402852:	fa5f fa84 	uxtb.w	sl, r4
		nodeFunction = artnet_data_buffer[i++]; //use i, then increment
  402856:	786e      	ldrb	r6, [r5, #1]
		dataOut.hue = artnet_data_buffer[i++];
  402858:	78aa      	ldrb	r2, [r5, #2]
  40285a:	713a      	strb	r2, [r7, #4]
		dataOut.saturation = artnet_data_buffer[i++];
  40285c:	78eb      	ldrb	r3, [r5, #3]
  40285e:	717b      	strb	r3, [r7, #5]
		dataOut.intensity = artnet_data_buffer[i];
  402860:	7929      	ldrb	r1, [r5, #4]
  402862:	70f9      	strb	r1, [r7, #3]
	printf("Node %d | HSV %d, %d, %d\r\n", currentNode, dataOut.hue, dataOut.saturation, dataOut.intensity);
  402864:	9404      	str	r4, [sp, #16]
  402866:	9100      	str	r1, [sp, #0]
  402868:	4621      	mov	r1, r4
  40286a:	485a      	ldr	r0, [pc, #360]	; (4029d4 <main+0x284>)
  40286c:	47d8      	blx	fp
		if (nodeFunction <= 30)
  40286e:	2e1e      	cmp	r6, #30
  402870:	d9d7      	bls.n	402822 <main+0xd2>
		else if (nodeFunction >= 31 && nodeFunction <= 60)
  402872:	f1a6 031f 	sub.w	r3, r6, #31
  402876:	b2db      	uxtb	r3, r3
  402878:	2b1d      	cmp	r3, #29
  40287a:	d91e      	bls.n	4028ba <main+0x16a>
		else if (nodeFunction >= 61 && nodeFunction <= 90)
  40287c:	f1a6 033d 	sub.w	r3, r6, #61	; 0x3d
  402880:	b2db      	uxtb	r3, r3
  402882:	2b1d      	cmp	r3, #29
  402884:	d92e      	bls.n	4028e4 <main+0x194>
		else if (nodeFunction >= 91 && nodeFunction <= 120)
  402886:	3e5b      	subs	r6, #91	; 0x5b
  402888:	b2f6      	uxtb	r6, r6
  40288a:	2e1d      	cmp	r6, #29
  40288c:	d8db      	bhi.n	402846 <main+0xf6>
			nRF24_openWritingPipe(listeningPipes[currentNode]);
  40288e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  402892:	2100      	movs	r1, #0
  402894:	4b4c      	ldr	r3, [pc, #304]	; (4029c8 <main+0x278>)
  402896:	4798      	blx	r3
			dataOut.destNode = currentNode;
  402898:	f887 a001 	strb.w	sl, [r7, #1]
			dataOut.senCommand = active_int;
  40289c:	2303      	movs	r3, #3
  40289e:	70bb      	strb	r3, [r7, #2]
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4028a0:	2107      	movs	r1, #7
  4028a2:	9805      	ldr	r0, [sp, #20]
  4028a4:	4b49      	ldr	r3, [pc, #292]	; (4029cc <main+0x27c>)
  4028a6:	4798      	blx	r3
  4028a8:	2800      	cmp	r0, #0
  4028aa:	d030      	beq.n	40290e <main+0x1be>
	printf("Sensor active_sat node %d\r\n", currentNode);
  4028ac:	9904      	ldr	r1, [sp, #16]
  4028ae:	484a      	ldr	r0, [pc, #296]	; (4029d8 <main+0x288>)
  4028b0:	47d8      	blx	fp
  4028b2:	e7c8      	b.n	402846 <main+0xf6>
	printf("transmission failed\n\r");
  4028b4:	4849      	ldr	r0, [pc, #292]	; (4029dc <main+0x28c>)
  4028b6:	47d8      	blx	fp
  4028b8:	e7c2      	b.n	402840 <main+0xf0>
			nRF24_openWritingPipe(listeningPipes[currentNode]);
  4028ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
  4028be:	2100      	movs	r1, #0
  4028c0:	4b41      	ldr	r3, [pc, #260]	; (4029c8 <main+0x278>)
  4028c2:	4798      	blx	r3
			dataOut.destNode = currentNode;
  4028c4:	f887 a001 	strb.w	sl, [r7, #1]
			dataOut.senCommand = active_hue;
  4028c8:	2301      	movs	r3, #1
  4028ca:	70bb      	strb	r3, [r7, #2]
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4028cc:	2107      	movs	r1, #7
  4028ce:	9805      	ldr	r0, [sp, #20]
  4028d0:	4b3e      	ldr	r3, [pc, #248]	; (4029cc <main+0x27c>)
  4028d2:	4798      	blx	r3
  4028d4:	b118      	cbz	r0, 4028de <main+0x18e>
	printf("Sensor active_hue node %d\r\n", currentNode);
  4028d6:	9904      	ldr	r1, [sp, #16]
  4028d8:	4841      	ldr	r0, [pc, #260]	; (4029e0 <main+0x290>)
  4028da:	47d8      	blx	fp
  4028dc:	e7b3      	b.n	402846 <main+0xf6>
				printf("transmission failed\n\r");
  4028de:	483f      	ldr	r0, [pc, #252]	; (4029dc <main+0x28c>)
  4028e0:	47d8      	blx	fp
  4028e2:	e7f8      	b.n	4028d6 <main+0x186>
			nRF24_openWritingPipe(listeningPipes[currentNode]);
  4028e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
  4028e8:	2100      	movs	r1, #0
  4028ea:	4b37      	ldr	r3, [pc, #220]	; (4029c8 <main+0x278>)
  4028ec:	4798      	blx	r3
			dataOut.destNode = currentNode;
  4028ee:	f887 a001 	strb.w	sl, [r7, #1]
			dataOut.senCommand = active_sat;
  4028f2:	2302      	movs	r3, #2
  4028f4:	70bb      	strb	r3, [r7, #2]
			if(!nRF24_write(&dataOut, sizeof(dataOut)))
  4028f6:	2107      	movs	r1, #7
  4028f8:	9805      	ldr	r0, [sp, #20]
  4028fa:	4b34      	ldr	r3, [pc, #208]	; (4029cc <main+0x27c>)
  4028fc:	4798      	blx	r3
  4028fe:	b118      	cbz	r0, 402908 <main+0x1b8>
	printf("Sensor active_sat node %d\r\n", currentNode);
  402900:	9904      	ldr	r1, [sp, #16]
  402902:	4835      	ldr	r0, [pc, #212]	; (4029d8 <main+0x288>)
  402904:	47d8      	blx	fp
  402906:	e79e      	b.n	402846 <main+0xf6>
				printf("transmission failed\n\r");
  402908:	4834      	ldr	r0, [pc, #208]	; (4029dc <main+0x28c>)
  40290a:	47d8      	blx	fp
  40290c:	e7f8      	b.n	402900 <main+0x1b0>
				printf("transmission failed\n\r");
  40290e:	4833      	ldr	r0, [pc, #204]	; (4029dc <main+0x28c>)
  402910:	47d8      	blx	fp
  402912:	e7cb      	b.n	4028ac <main+0x15c>
  402914:	b662      	cpsie	i
		if (GMAC_OK == read_dev_gmac()) {
  402916:	47c8      	blx	r9
  402918:	2800      	cmp	r0, #0
  40291a:	d1fc      	bne.n	402916 <main+0x1c6>
			if (ul_frm_size_rx > 0) {
  40291c:	4b31      	ldr	r3, [pc, #196]	; (4029e4 <main+0x294>)
  40291e:	6819      	ldr	r1, [r3, #0]
  402920:	2900      	cmp	r1, #0
  402922:	d0f8      	beq.n	402916 <main+0x1c6>
				if(handleGMAC_Packet((uint8_t *) gs_uc_eth_buffer_rx, ul_frm_size_rx)){
  402924:	4830      	ldr	r0, [pc, #192]	; (4029e8 <main+0x298>)
  402926:	4b31      	ldr	r3, [pc, #196]	; (4029ec <main+0x29c>)
  402928:	4798      	blx	r3
  40292a:	2800      	cmp	r0, #0
  40292c:	d0f3      	beq.n	402916 <main+0x1c6>
  __ASM volatile ("cpsid i" : : : "memory");
  40292e:	b672      	cpsid	i
	dataOut.srcNode = 0;
  402930:	2300      	movs	r3, #0
  402932:	703b      	strb	r3, [r7, #0]
  402934:	4d2e      	ldr	r5, [pc, #184]	; (4029f0 <main+0x2a0>)
  402936:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4029f8 <main+0x2a8>
  40293a:	2401      	movs	r4, #1
  40293c:	e789      	b.n	402852 <main+0x102>
}//end of program
  40293e:	f04f 30ff 	mov.w	r0, #4294967295
  402942:	b00d      	add	sp, #52	; 0x34
  402944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402948:	00401b8d 	.word	0x00401b8d
  40294c:	00401bfd 	.word	0x00401bfd
  402950:	004020a1 	.word	0x004020a1
  402954:	40028000 	.word	0x40028000
  402958:	20408300 	.word	0x20408300
  40295c:	00402451 	.word	0x00402451
  402960:	204082fc 	.word	0x204082fc
  402964:	00402375 	.word	0x00402375
  402968:	204072e8 	.word	0x204072e8
  40296c:	08f0d180 	.word	0x08f0d180
  402970:	00400a81 	.word	0x00400a81
  402974:	00400ad5 	.word	0x00400ad5
  402978:	00400adb 	.word	0x00400adb
  40297c:	2040003c 	.word	0x2040003c
  402980:	00403061 	.word	0x00403061
  402984:	00405d48 	.word	0x00405d48
  402988:	00403051 	.word	0x00403051
  40298c:	20408318 	.word	0x20408318
  402990:	00402525 	.word	0x00402525
  402994:	00400b3d 	.word	0x00400b3d
  402998:	20400010 	.word	0x20400010
  40299c:	00405d9c 	.word	0x00405d9c
  4029a0:	00402d5d 	.word	0x00402d5d
  4029a4:	2040000c 	.word	0x2040000c
  4029a8:	00405db8 	.word	0x00405db8
  4029ac:	00405dd0 	.word	0x00405dd0
  4029b0:	004014d5 	.word	0x004014d5
  4029b4:	00401349 	.word	0x00401349
  4029b8:	00401065 	.word	0x00401065
  4029bc:	00401295 	.word	0x00401295
  4029c0:	004010a9 	.word	0x004010a9
  4029c4:	20408310 	.word	0x20408310
  4029c8:	004013e1 	.word	0x004013e1
  4029cc:	0040141d 	.word	0x0040141d
  4029d0:	00405e14 	.word	0x00405e14
  4029d4:	00405de0 	.word	0x00405de0
  4029d8:	00405e4c 	.word	0x00405e4c
  4029dc:	00405dfc 	.word	0x00405dfc
  4029e0:	00405e30 	.word	0x00405e30
  4029e4:	204082e0 	.word	0x204082e0
  4029e8:	204075e4 	.word	0x204075e4
  4029ec:	00402665 	.word	0x00402665
  4029f0:	204072ec 	.word	0x204072ec
  4029f4:	00400b11 	.word	0x00400b11
  4029f8:	00405d30 	.word	0x00405d30

004029fc <__aeabi_uldivmod>:
  4029fc:	b953      	cbnz	r3, 402a14 <__aeabi_uldivmod+0x18>
  4029fe:	b94a      	cbnz	r2, 402a14 <__aeabi_uldivmod+0x18>
  402a00:	2900      	cmp	r1, #0
  402a02:	bf08      	it	eq
  402a04:	2800      	cmpeq	r0, #0
  402a06:	bf1c      	itt	ne
  402a08:	f04f 31ff 	movne.w	r1, #4294967295
  402a0c:	f04f 30ff 	movne.w	r0, #4294967295
  402a10:	f000 b97a 	b.w	402d08 <__aeabi_idiv0>
  402a14:	f1ad 0c08 	sub.w	ip, sp, #8
  402a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402a1c:	f000 f806 	bl	402a2c <__udivmoddi4>
  402a20:	f8dd e004 	ldr.w	lr, [sp, #4]
  402a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402a28:	b004      	add	sp, #16
  402a2a:	4770      	bx	lr

00402a2c <__udivmoddi4>:
  402a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a30:	468c      	mov	ip, r1
  402a32:	460d      	mov	r5, r1
  402a34:	4604      	mov	r4, r0
  402a36:	9e08      	ldr	r6, [sp, #32]
  402a38:	2b00      	cmp	r3, #0
  402a3a:	d151      	bne.n	402ae0 <__udivmoddi4+0xb4>
  402a3c:	428a      	cmp	r2, r1
  402a3e:	4617      	mov	r7, r2
  402a40:	d96d      	bls.n	402b1e <__udivmoddi4+0xf2>
  402a42:	fab2 fe82 	clz	lr, r2
  402a46:	f1be 0f00 	cmp.w	lr, #0
  402a4a:	d00b      	beq.n	402a64 <__udivmoddi4+0x38>
  402a4c:	f1ce 0c20 	rsb	ip, lr, #32
  402a50:	fa01 f50e 	lsl.w	r5, r1, lr
  402a54:	fa20 fc0c 	lsr.w	ip, r0, ip
  402a58:	fa02 f70e 	lsl.w	r7, r2, lr
  402a5c:	ea4c 0c05 	orr.w	ip, ip, r5
  402a60:	fa00 f40e 	lsl.w	r4, r0, lr
  402a64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402a68:	0c25      	lsrs	r5, r4, #16
  402a6a:	fbbc f8fa 	udiv	r8, ip, sl
  402a6e:	fa1f f987 	uxth.w	r9, r7
  402a72:	fb0a cc18 	mls	ip, sl, r8, ip
  402a76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402a7a:	fb08 f309 	mul.w	r3, r8, r9
  402a7e:	42ab      	cmp	r3, r5
  402a80:	d90a      	bls.n	402a98 <__udivmoddi4+0x6c>
  402a82:	19ed      	adds	r5, r5, r7
  402a84:	f108 32ff 	add.w	r2, r8, #4294967295
  402a88:	f080 8123 	bcs.w	402cd2 <__udivmoddi4+0x2a6>
  402a8c:	42ab      	cmp	r3, r5
  402a8e:	f240 8120 	bls.w	402cd2 <__udivmoddi4+0x2a6>
  402a92:	f1a8 0802 	sub.w	r8, r8, #2
  402a96:	443d      	add	r5, r7
  402a98:	1aed      	subs	r5, r5, r3
  402a9a:	b2a4      	uxth	r4, r4
  402a9c:	fbb5 f0fa 	udiv	r0, r5, sl
  402aa0:	fb0a 5510 	mls	r5, sl, r0, r5
  402aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402aa8:	fb00 f909 	mul.w	r9, r0, r9
  402aac:	45a1      	cmp	r9, r4
  402aae:	d909      	bls.n	402ac4 <__udivmoddi4+0x98>
  402ab0:	19e4      	adds	r4, r4, r7
  402ab2:	f100 33ff 	add.w	r3, r0, #4294967295
  402ab6:	f080 810a 	bcs.w	402cce <__udivmoddi4+0x2a2>
  402aba:	45a1      	cmp	r9, r4
  402abc:	f240 8107 	bls.w	402cce <__udivmoddi4+0x2a2>
  402ac0:	3802      	subs	r0, #2
  402ac2:	443c      	add	r4, r7
  402ac4:	eba4 0409 	sub.w	r4, r4, r9
  402ac8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402acc:	2100      	movs	r1, #0
  402ace:	2e00      	cmp	r6, #0
  402ad0:	d061      	beq.n	402b96 <__udivmoddi4+0x16a>
  402ad2:	fa24 f40e 	lsr.w	r4, r4, lr
  402ad6:	2300      	movs	r3, #0
  402ad8:	6034      	str	r4, [r6, #0]
  402ada:	6073      	str	r3, [r6, #4]
  402adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ae0:	428b      	cmp	r3, r1
  402ae2:	d907      	bls.n	402af4 <__udivmoddi4+0xc8>
  402ae4:	2e00      	cmp	r6, #0
  402ae6:	d054      	beq.n	402b92 <__udivmoddi4+0x166>
  402ae8:	2100      	movs	r1, #0
  402aea:	e886 0021 	stmia.w	r6, {r0, r5}
  402aee:	4608      	mov	r0, r1
  402af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402af4:	fab3 f183 	clz	r1, r3
  402af8:	2900      	cmp	r1, #0
  402afa:	f040 808e 	bne.w	402c1a <__udivmoddi4+0x1ee>
  402afe:	42ab      	cmp	r3, r5
  402b00:	d302      	bcc.n	402b08 <__udivmoddi4+0xdc>
  402b02:	4282      	cmp	r2, r0
  402b04:	f200 80fa 	bhi.w	402cfc <__udivmoddi4+0x2d0>
  402b08:	1a84      	subs	r4, r0, r2
  402b0a:	eb65 0503 	sbc.w	r5, r5, r3
  402b0e:	2001      	movs	r0, #1
  402b10:	46ac      	mov	ip, r5
  402b12:	2e00      	cmp	r6, #0
  402b14:	d03f      	beq.n	402b96 <__udivmoddi4+0x16a>
  402b16:	e886 1010 	stmia.w	r6, {r4, ip}
  402b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b1e:	b912      	cbnz	r2, 402b26 <__udivmoddi4+0xfa>
  402b20:	2701      	movs	r7, #1
  402b22:	fbb7 f7f2 	udiv	r7, r7, r2
  402b26:	fab7 fe87 	clz	lr, r7
  402b2a:	f1be 0f00 	cmp.w	lr, #0
  402b2e:	d134      	bne.n	402b9a <__udivmoddi4+0x16e>
  402b30:	1beb      	subs	r3, r5, r7
  402b32:	0c3a      	lsrs	r2, r7, #16
  402b34:	fa1f fc87 	uxth.w	ip, r7
  402b38:	2101      	movs	r1, #1
  402b3a:	fbb3 f8f2 	udiv	r8, r3, r2
  402b3e:	0c25      	lsrs	r5, r4, #16
  402b40:	fb02 3318 	mls	r3, r2, r8, r3
  402b44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402b48:	fb0c f308 	mul.w	r3, ip, r8
  402b4c:	42ab      	cmp	r3, r5
  402b4e:	d907      	bls.n	402b60 <__udivmoddi4+0x134>
  402b50:	19ed      	adds	r5, r5, r7
  402b52:	f108 30ff 	add.w	r0, r8, #4294967295
  402b56:	d202      	bcs.n	402b5e <__udivmoddi4+0x132>
  402b58:	42ab      	cmp	r3, r5
  402b5a:	f200 80d1 	bhi.w	402d00 <__udivmoddi4+0x2d4>
  402b5e:	4680      	mov	r8, r0
  402b60:	1aed      	subs	r5, r5, r3
  402b62:	b2a3      	uxth	r3, r4
  402b64:	fbb5 f0f2 	udiv	r0, r5, r2
  402b68:	fb02 5510 	mls	r5, r2, r0, r5
  402b6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402b70:	fb0c fc00 	mul.w	ip, ip, r0
  402b74:	45a4      	cmp	ip, r4
  402b76:	d907      	bls.n	402b88 <__udivmoddi4+0x15c>
  402b78:	19e4      	adds	r4, r4, r7
  402b7a:	f100 33ff 	add.w	r3, r0, #4294967295
  402b7e:	d202      	bcs.n	402b86 <__udivmoddi4+0x15a>
  402b80:	45a4      	cmp	ip, r4
  402b82:	f200 80b8 	bhi.w	402cf6 <__udivmoddi4+0x2ca>
  402b86:	4618      	mov	r0, r3
  402b88:	eba4 040c 	sub.w	r4, r4, ip
  402b8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402b90:	e79d      	b.n	402ace <__udivmoddi4+0xa2>
  402b92:	4631      	mov	r1, r6
  402b94:	4630      	mov	r0, r6
  402b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b9a:	f1ce 0420 	rsb	r4, lr, #32
  402b9e:	fa05 f30e 	lsl.w	r3, r5, lr
  402ba2:	fa07 f70e 	lsl.w	r7, r7, lr
  402ba6:	fa20 f804 	lsr.w	r8, r0, r4
  402baa:	0c3a      	lsrs	r2, r7, #16
  402bac:	fa25 f404 	lsr.w	r4, r5, r4
  402bb0:	ea48 0803 	orr.w	r8, r8, r3
  402bb4:	fbb4 f1f2 	udiv	r1, r4, r2
  402bb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402bbc:	fb02 4411 	mls	r4, r2, r1, r4
  402bc0:	fa1f fc87 	uxth.w	ip, r7
  402bc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402bc8:	fb01 f30c 	mul.w	r3, r1, ip
  402bcc:	42ab      	cmp	r3, r5
  402bce:	fa00 f40e 	lsl.w	r4, r0, lr
  402bd2:	d909      	bls.n	402be8 <__udivmoddi4+0x1bc>
  402bd4:	19ed      	adds	r5, r5, r7
  402bd6:	f101 30ff 	add.w	r0, r1, #4294967295
  402bda:	f080 808a 	bcs.w	402cf2 <__udivmoddi4+0x2c6>
  402bde:	42ab      	cmp	r3, r5
  402be0:	f240 8087 	bls.w	402cf2 <__udivmoddi4+0x2c6>
  402be4:	3902      	subs	r1, #2
  402be6:	443d      	add	r5, r7
  402be8:	1aeb      	subs	r3, r5, r3
  402bea:	fa1f f588 	uxth.w	r5, r8
  402bee:	fbb3 f0f2 	udiv	r0, r3, r2
  402bf2:	fb02 3310 	mls	r3, r2, r0, r3
  402bf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402bfa:	fb00 f30c 	mul.w	r3, r0, ip
  402bfe:	42ab      	cmp	r3, r5
  402c00:	d907      	bls.n	402c12 <__udivmoddi4+0x1e6>
  402c02:	19ed      	adds	r5, r5, r7
  402c04:	f100 38ff 	add.w	r8, r0, #4294967295
  402c08:	d26f      	bcs.n	402cea <__udivmoddi4+0x2be>
  402c0a:	42ab      	cmp	r3, r5
  402c0c:	d96d      	bls.n	402cea <__udivmoddi4+0x2be>
  402c0e:	3802      	subs	r0, #2
  402c10:	443d      	add	r5, r7
  402c12:	1aeb      	subs	r3, r5, r3
  402c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402c18:	e78f      	b.n	402b3a <__udivmoddi4+0x10e>
  402c1a:	f1c1 0720 	rsb	r7, r1, #32
  402c1e:	fa22 f807 	lsr.w	r8, r2, r7
  402c22:	408b      	lsls	r3, r1
  402c24:	fa05 f401 	lsl.w	r4, r5, r1
  402c28:	ea48 0303 	orr.w	r3, r8, r3
  402c2c:	fa20 fe07 	lsr.w	lr, r0, r7
  402c30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402c34:	40fd      	lsrs	r5, r7
  402c36:	ea4e 0e04 	orr.w	lr, lr, r4
  402c3a:	fbb5 f9fc 	udiv	r9, r5, ip
  402c3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402c42:	fb0c 5519 	mls	r5, ip, r9, r5
  402c46:	fa1f f883 	uxth.w	r8, r3
  402c4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402c4e:	fb09 f408 	mul.w	r4, r9, r8
  402c52:	42ac      	cmp	r4, r5
  402c54:	fa02 f201 	lsl.w	r2, r2, r1
  402c58:	fa00 fa01 	lsl.w	sl, r0, r1
  402c5c:	d908      	bls.n	402c70 <__udivmoddi4+0x244>
  402c5e:	18ed      	adds	r5, r5, r3
  402c60:	f109 30ff 	add.w	r0, r9, #4294967295
  402c64:	d243      	bcs.n	402cee <__udivmoddi4+0x2c2>
  402c66:	42ac      	cmp	r4, r5
  402c68:	d941      	bls.n	402cee <__udivmoddi4+0x2c2>
  402c6a:	f1a9 0902 	sub.w	r9, r9, #2
  402c6e:	441d      	add	r5, r3
  402c70:	1b2d      	subs	r5, r5, r4
  402c72:	fa1f fe8e 	uxth.w	lr, lr
  402c76:	fbb5 f0fc 	udiv	r0, r5, ip
  402c7a:	fb0c 5510 	mls	r5, ip, r0, r5
  402c7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402c82:	fb00 f808 	mul.w	r8, r0, r8
  402c86:	45a0      	cmp	r8, r4
  402c88:	d907      	bls.n	402c9a <__udivmoddi4+0x26e>
  402c8a:	18e4      	adds	r4, r4, r3
  402c8c:	f100 35ff 	add.w	r5, r0, #4294967295
  402c90:	d229      	bcs.n	402ce6 <__udivmoddi4+0x2ba>
  402c92:	45a0      	cmp	r8, r4
  402c94:	d927      	bls.n	402ce6 <__udivmoddi4+0x2ba>
  402c96:	3802      	subs	r0, #2
  402c98:	441c      	add	r4, r3
  402c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402c9e:	eba4 0408 	sub.w	r4, r4, r8
  402ca2:	fba0 8902 	umull	r8, r9, r0, r2
  402ca6:	454c      	cmp	r4, r9
  402ca8:	46c6      	mov	lr, r8
  402caa:	464d      	mov	r5, r9
  402cac:	d315      	bcc.n	402cda <__udivmoddi4+0x2ae>
  402cae:	d012      	beq.n	402cd6 <__udivmoddi4+0x2aa>
  402cb0:	b156      	cbz	r6, 402cc8 <__udivmoddi4+0x29c>
  402cb2:	ebba 030e 	subs.w	r3, sl, lr
  402cb6:	eb64 0405 	sbc.w	r4, r4, r5
  402cba:	fa04 f707 	lsl.w	r7, r4, r7
  402cbe:	40cb      	lsrs	r3, r1
  402cc0:	431f      	orrs	r7, r3
  402cc2:	40cc      	lsrs	r4, r1
  402cc4:	6037      	str	r7, [r6, #0]
  402cc6:	6074      	str	r4, [r6, #4]
  402cc8:	2100      	movs	r1, #0
  402cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cce:	4618      	mov	r0, r3
  402cd0:	e6f8      	b.n	402ac4 <__udivmoddi4+0x98>
  402cd2:	4690      	mov	r8, r2
  402cd4:	e6e0      	b.n	402a98 <__udivmoddi4+0x6c>
  402cd6:	45c2      	cmp	sl, r8
  402cd8:	d2ea      	bcs.n	402cb0 <__udivmoddi4+0x284>
  402cda:	ebb8 0e02 	subs.w	lr, r8, r2
  402cde:	eb69 0503 	sbc.w	r5, r9, r3
  402ce2:	3801      	subs	r0, #1
  402ce4:	e7e4      	b.n	402cb0 <__udivmoddi4+0x284>
  402ce6:	4628      	mov	r0, r5
  402ce8:	e7d7      	b.n	402c9a <__udivmoddi4+0x26e>
  402cea:	4640      	mov	r0, r8
  402cec:	e791      	b.n	402c12 <__udivmoddi4+0x1e6>
  402cee:	4681      	mov	r9, r0
  402cf0:	e7be      	b.n	402c70 <__udivmoddi4+0x244>
  402cf2:	4601      	mov	r1, r0
  402cf4:	e778      	b.n	402be8 <__udivmoddi4+0x1bc>
  402cf6:	3802      	subs	r0, #2
  402cf8:	443c      	add	r4, r7
  402cfa:	e745      	b.n	402b88 <__udivmoddi4+0x15c>
  402cfc:	4608      	mov	r0, r1
  402cfe:	e708      	b.n	402b12 <__udivmoddi4+0xe6>
  402d00:	f1a8 0802 	sub.w	r8, r8, #2
  402d04:	443d      	add	r5, r7
  402d06:	e72b      	b.n	402b60 <__udivmoddi4+0x134>

00402d08 <__aeabi_idiv0>:
  402d08:	4770      	bx	lr
  402d0a:	bf00      	nop

00402d0c <__libc_init_array>:
  402d0c:	b570      	push	{r4, r5, r6, lr}
  402d0e:	4e0f      	ldr	r6, [pc, #60]	; (402d4c <__libc_init_array+0x40>)
  402d10:	4d0f      	ldr	r5, [pc, #60]	; (402d50 <__libc_init_array+0x44>)
  402d12:	1b76      	subs	r6, r6, r5
  402d14:	10b6      	asrs	r6, r6, #2
  402d16:	bf18      	it	ne
  402d18:	2400      	movne	r4, #0
  402d1a:	d005      	beq.n	402d28 <__libc_init_array+0x1c>
  402d1c:	3401      	adds	r4, #1
  402d1e:	f855 3b04 	ldr.w	r3, [r5], #4
  402d22:	4798      	blx	r3
  402d24:	42a6      	cmp	r6, r4
  402d26:	d1f9      	bne.n	402d1c <__libc_init_array+0x10>
  402d28:	4e0a      	ldr	r6, [pc, #40]	; (402d54 <__libc_init_array+0x48>)
  402d2a:	4d0b      	ldr	r5, [pc, #44]	; (402d58 <__libc_init_array+0x4c>)
  402d2c:	1b76      	subs	r6, r6, r5
  402d2e:	f003 f94f 	bl	405fd0 <_init>
  402d32:	10b6      	asrs	r6, r6, #2
  402d34:	bf18      	it	ne
  402d36:	2400      	movne	r4, #0
  402d38:	d006      	beq.n	402d48 <__libc_init_array+0x3c>
  402d3a:	3401      	adds	r4, #1
  402d3c:	f855 3b04 	ldr.w	r3, [r5], #4
  402d40:	4798      	blx	r3
  402d42:	42a6      	cmp	r6, r4
  402d44:	d1f9      	bne.n	402d3a <__libc_init_array+0x2e>
  402d46:	bd70      	pop	{r4, r5, r6, pc}
  402d48:	bd70      	pop	{r4, r5, r6, pc}
  402d4a:	bf00      	nop
  402d4c:	00405fdc 	.word	0x00405fdc
  402d50:	00405fdc 	.word	0x00405fdc
  402d54:	00405fe4 	.word	0x00405fe4
  402d58:	00405fdc 	.word	0x00405fdc

00402d5c <iprintf>:
  402d5c:	b40f      	push	{r0, r1, r2, r3}
  402d5e:	b500      	push	{lr}
  402d60:	4907      	ldr	r1, [pc, #28]	; (402d80 <iprintf+0x24>)
  402d62:	b083      	sub	sp, #12
  402d64:	ab04      	add	r3, sp, #16
  402d66:	6808      	ldr	r0, [r1, #0]
  402d68:	f853 2b04 	ldr.w	r2, [r3], #4
  402d6c:	6881      	ldr	r1, [r0, #8]
  402d6e:	9301      	str	r3, [sp, #4]
  402d70:	f000 faf4 	bl	40335c <_vfiprintf_r>
  402d74:	b003      	add	sp, #12
  402d76:	f85d eb04 	ldr.w	lr, [sp], #4
  402d7a:	b004      	add	sp, #16
  402d7c:	4770      	bx	lr
  402d7e:	bf00      	nop
  402d80:	2040003c 	.word	0x2040003c

00402d84 <memcmp>:
  402d84:	2a03      	cmp	r2, #3
  402d86:	b470      	push	{r4, r5, r6}
  402d88:	d922      	bls.n	402dd0 <memcmp+0x4c>
  402d8a:	ea40 0301 	orr.w	r3, r0, r1
  402d8e:	079b      	lsls	r3, r3, #30
  402d90:	d011      	beq.n	402db6 <memcmp+0x32>
  402d92:	7803      	ldrb	r3, [r0, #0]
  402d94:	780c      	ldrb	r4, [r1, #0]
  402d96:	42a3      	cmp	r3, r4
  402d98:	d11d      	bne.n	402dd6 <memcmp+0x52>
  402d9a:	440a      	add	r2, r1
  402d9c:	3101      	adds	r1, #1
  402d9e:	e005      	b.n	402dac <memcmp+0x28>
  402da0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402da4:	f811 4b01 	ldrb.w	r4, [r1], #1
  402da8:	42a3      	cmp	r3, r4
  402daa:	d114      	bne.n	402dd6 <memcmp+0x52>
  402dac:	4291      	cmp	r1, r2
  402dae:	d1f7      	bne.n	402da0 <memcmp+0x1c>
  402db0:	2000      	movs	r0, #0
  402db2:	bc70      	pop	{r4, r5, r6}
  402db4:	4770      	bx	lr
  402db6:	680d      	ldr	r5, [r1, #0]
  402db8:	6806      	ldr	r6, [r0, #0]
  402dba:	42ae      	cmp	r6, r5
  402dbc:	460c      	mov	r4, r1
  402dbe:	4603      	mov	r3, r0
  402dc0:	f101 0104 	add.w	r1, r1, #4
  402dc4:	f100 0004 	add.w	r0, r0, #4
  402dc8:	d108      	bne.n	402ddc <memcmp+0x58>
  402dca:	3a04      	subs	r2, #4
  402dcc:	2a03      	cmp	r2, #3
  402dce:	d8f2      	bhi.n	402db6 <memcmp+0x32>
  402dd0:	2a00      	cmp	r2, #0
  402dd2:	d1de      	bne.n	402d92 <memcmp+0xe>
  402dd4:	e7ec      	b.n	402db0 <memcmp+0x2c>
  402dd6:	1b18      	subs	r0, r3, r4
  402dd8:	bc70      	pop	{r4, r5, r6}
  402dda:	4770      	bx	lr
  402ddc:	4621      	mov	r1, r4
  402dde:	4618      	mov	r0, r3
  402de0:	e7d7      	b.n	402d92 <memcmp+0xe>
  402de2:	bf00      	nop

00402de4 <memcpy>:
  402de4:	4684      	mov	ip, r0
  402de6:	ea41 0300 	orr.w	r3, r1, r0
  402dea:	f013 0303 	ands.w	r3, r3, #3
  402dee:	d16d      	bne.n	402ecc <memcpy+0xe8>
  402df0:	3a40      	subs	r2, #64	; 0x40
  402df2:	d341      	bcc.n	402e78 <memcpy+0x94>
  402df4:	f851 3b04 	ldr.w	r3, [r1], #4
  402df8:	f840 3b04 	str.w	r3, [r0], #4
  402dfc:	f851 3b04 	ldr.w	r3, [r1], #4
  402e00:	f840 3b04 	str.w	r3, [r0], #4
  402e04:	f851 3b04 	ldr.w	r3, [r1], #4
  402e08:	f840 3b04 	str.w	r3, [r0], #4
  402e0c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e10:	f840 3b04 	str.w	r3, [r0], #4
  402e14:	f851 3b04 	ldr.w	r3, [r1], #4
  402e18:	f840 3b04 	str.w	r3, [r0], #4
  402e1c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e20:	f840 3b04 	str.w	r3, [r0], #4
  402e24:	f851 3b04 	ldr.w	r3, [r1], #4
  402e28:	f840 3b04 	str.w	r3, [r0], #4
  402e2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e30:	f840 3b04 	str.w	r3, [r0], #4
  402e34:	f851 3b04 	ldr.w	r3, [r1], #4
  402e38:	f840 3b04 	str.w	r3, [r0], #4
  402e3c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e40:	f840 3b04 	str.w	r3, [r0], #4
  402e44:	f851 3b04 	ldr.w	r3, [r1], #4
  402e48:	f840 3b04 	str.w	r3, [r0], #4
  402e4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e50:	f840 3b04 	str.w	r3, [r0], #4
  402e54:	f851 3b04 	ldr.w	r3, [r1], #4
  402e58:	f840 3b04 	str.w	r3, [r0], #4
  402e5c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e60:	f840 3b04 	str.w	r3, [r0], #4
  402e64:	f851 3b04 	ldr.w	r3, [r1], #4
  402e68:	f840 3b04 	str.w	r3, [r0], #4
  402e6c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e70:	f840 3b04 	str.w	r3, [r0], #4
  402e74:	3a40      	subs	r2, #64	; 0x40
  402e76:	d2bd      	bcs.n	402df4 <memcpy+0x10>
  402e78:	3230      	adds	r2, #48	; 0x30
  402e7a:	d311      	bcc.n	402ea0 <memcpy+0xbc>
  402e7c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e80:	f840 3b04 	str.w	r3, [r0], #4
  402e84:	f851 3b04 	ldr.w	r3, [r1], #4
  402e88:	f840 3b04 	str.w	r3, [r0], #4
  402e8c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e90:	f840 3b04 	str.w	r3, [r0], #4
  402e94:	f851 3b04 	ldr.w	r3, [r1], #4
  402e98:	f840 3b04 	str.w	r3, [r0], #4
  402e9c:	3a10      	subs	r2, #16
  402e9e:	d2ed      	bcs.n	402e7c <memcpy+0x98>
  402ea0:	320c      	adds	r2, #12
  402ea2:	d305      	bcc.n	402eb0 <memcpy+0xcc>
  402ea4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ea8:	f840 3b04 	str.w	r3, [r0], #4
  402eac:	3a04      	subs	r2, #4
  402eae:	d2f9      	bcs.n	402ea4 <memcpy+0xc0>
  402eb0:	3204      	adds	r2, #4
  402eb2:	d008      	beq.n	402ec6 <memcpy+0xe2>
  402eb4:	07d2      	lsls	r2, r2, #31
  402eb6:	bf1c      	itt	ne
  402eb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402ebc:	f800 3b01 	strbne.w	r3, [r0], #1
  402ec0:	d301      	bcc.n	402ec6 <memcpy+0xe2>
  402ec2:	880b      	ldrh	r3, [r1, #0]
  402ec4:	8003      	strh	r3, [r0, #0]
  402ec6:	4660      	mov	r0, ip
  402ec8:	4770      	bx	lr
  402eca:	bf00      	nop
  402ecc:	2a08      	cmp	r2, #8
  402ece:	d313      	bcc.n	402ef8 <memcpy+0x114>
  402ed0:	078b      	lsls	r3, r1, #30
  402ed2:	d08d      	beq.n	402df0 <memcpy+0xc>
  402ed4:	f010 0303 	ands.w	r3, r0, #3
  402ed8:	d08a      	beq.n	402df0 <memcpy+0xc>
  402eda:	f1c3 0304 	rsb	r3, r3, #4
  402ede:	1ad2      	subs	r2, r2, r3
  402ee0:	07db      	lsls	r3, r3, #31
  402ee2:	bf1c      	itt	ne
  402ee4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402ee8:	f800 3b01 	strbne.w	r3, [r0], #1
  402eec:	d380      	bcc.n	402df0 <memcpy+0xc>
  402eee:	f831 3b02 	ldrh.w	r3, [r1], #2
  402ef2:	f820 3b02 	strh.w	r3, [r0], #2
  402ef6:	e77b      	b.n	402df0 <memcpy+0xc>
  402ef8:	3a04      	subs	r2, #4
  402efa:	d3d9      	bcc.n	402eb0 <memcpy+0xcc>
  402efc:	3a01      	subs	r2, #1
  402efe:	f811 3b01 	ldrb.w	r3, [r1], #1
  402f02:	f800 3b01 	strb.w	r3, [r0], #1
  402f06:	d2f9      	bcs.n	402efc <memcpy+0x118>
  402f08:	780b      	ldrb	r3, [r1, #0]
  402f0a:	7003      	strb	r3, [r0, #0]
  402f0c:	784b      	ldrb	r3, [r1, #1]
  402f0e:	7043      	strb	r3, [r0, #1]
  402f10:	788b      	ldrb	r3, [r1, #2]
  402f12:	7083      	strb	r3, [r0, #2]
  402f14:	4660      	mov	r0, ip
  402f16:	4770      	bx	lr

00402f18 <memset>:
  402f18:	b470      	push	{r4, r5, r6}
  402f1a:	0786      	lsls	r6, r0, #30
  402f1c:	d046      	beq.n	402fac <memset+0x94>
  402f1e:	1e54      	subs	r4, r2, #1
  402f20:	2a00      	cmp	r2, #0
  402f22:	d041      	beq.n	402fa8 <memset+0x90>
  402f24:	b2ca      	uxtb	r2, r1
  402f26:	4603      	mov	r3, r0
  402f28:	e002      	b.n	402f30 <memset+0x18>
  402f2a:	f114 34ff 	adds.w	r4, r4, #4294967295
  402f2e:	d33b      	bcc.n	402fa8 <memset+0x90>
  402f30:	f803 2b01 	strb.w	r2, [r3], #1
  402f34:	079d      	lsls	r5, r3, #30
  402f36:	d1f8      	bne.n	402f2a <memset+0x12>
  402f38:	2c03      	cmp	r4, #3
  402f3a:	d92e      	bls.n	402f9a <memset+0x82>
  402f3c:	b2cd      	uxtb	r5, r1
  402f3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402f42:	2c0f      	cmp	r4, #15
  402f44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402f48:	d919      	bls.n	402f7e <memset+0x66>
  402f4a:	f103 0210 	add.w	r2, r3, #16
  402f4e:	4626      	mov	r6, r4
  402f50:	3e10      	subs	r6, #16
  402f52:	2e0f      	cmp	r6, #15
  402f54:	f842 5c10 	str.w	r5, [r2, #-16]
  402f58:	f842 5c0c 	str.w	r5, [r2, #-12]
  402f5c:	f842 5c08 	str.w	r5, [r2, #-8]
  402f60:	f842 5c04 	str.w	r5, [r2, #-4]
  402f64:	f102 0210 	add.w	r2, r2, #16
  402f68:	d8f2      	bhi.n	402f50 <memset+0x38>
  402f6a:	f1a4 0210 	sub.w	r2, r4, #16
  402f6e:	f022 020f 	bic.w	r2, r2, #15
  402f72:	f004 040f 	and.w	r4, r4, #15
  402f76:	3210      	adds	r2, #16
  402f78:	2c03      	cmp	r4, #3
  402f7a:	4413      	add	r3, r2
  402f7c:	d90d      	bls.n	402f9a <memset+0x82>
  402f7e:	461e      	mov	r6, r3
  402f80:	4622      	mov	r2, r4
  402f82:	3a04      	subs	r2, #4
  402f84:	2a03      	cmp	r2, #3
  402f86:	f846 5b04 	str.w	r5, [r6], #4
  402f8a:	d8fa      	bhi.n	402f82 <memset+0x6a>
  402f8c:	1f22      	subs	r2, r4, #4
  402f8e:	f022 0203 	bic.w	r2, r2, #3
  402f92:	3204      	adds	r2, #4
  402f94:	4413      	add	r3, r2
  402f96:	f004 0403 	and.w	r4, r4, #3
  402f9a:	b12c      	cbz	r4, 402fa8 <memset+0x90>
  402f9c:	b2c9      	uxtb	r1, r1
  402f9e:	441c      	add	r4, r3
  402fa0:	f803 1b01 	strb.w	r1, [r3], #1
  402fa4:	429c      	cmp	r4, r3
  402fa6:	d1fb      	bne.n	402fa0 <memset+0x88>
  402fa8:	bc70      	pop	{r4, r5, r6}
  402faa:	4770      	bx	lr
  402fac:	4614      	mov	r4, r2
  402fae:	4603      	mov	r3, r0
  402fb0:	e7c2      	b.n	402f38 <memset+0x20>
  402fb2:	bf00      	nop

00402fb4 <_puts_r>:
  402fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fb6:	4605      	mov	r5, r0
  402fb8:	b089      	sub	sp, #36	; 0x24
  402fba:	4608      	mov	r0, r1
  402fbc:	460c      	mov	r4, r1
  402fbe:	f000 f91f 	bl	403200 <strlen>
  402fc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402fc4:	4f21      	ldr	r7, [pc, #132]	; (40304c <_puts_r+0x98>)
  402fc6:	9404      	str	r4, [sp, #16]
  402fc8:	2601      	movs	r6, #1
  402fca:	1c44      	adds	r4, r0, #1
  402fcc:	a904      	add	r1, sp, #16
  402fce:	2202      	movs	r2, #2
  402fd0:	9403      	str	r4, [sp, #12]
  402fd2:	9005      	str	r0, [sp, #20]
  402fd4:	68ac      	ldr	r4, [r5, #8]
  402fd6:	9706      	str	r7, [sp, #24]
  402fd8:	9607      	str	r6, [sp, #28]
  402fda:	9101      	str	r1, [sp, #4]
  402fdc:	9202      	str	r2, [sp, #8]
  402fde:	b353      	cbz	r3, 403036 <_puts_r+0x82>
  402fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402fe2:	f013 0f01 	tst.w	r3, #1
  402fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fea:	b29a      	uxth	r2, r3
  402fec:	d101      	bne.n	402ff2 <_puts_r+0x3e>
  402fee:	0590      	lsls	r0, r2, #22
  402ff0:	d525      	bpl.n	40303e <_puts_r+0x8a>
  402ff2:	0491      	lsls	r1, r2, #18
  402ff4:	d406      	bmi.n	403004 <_puts_r+0x50>
  402ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403000:	81a3      	strh	r3, [r4, #12]
  403002:	6662      	str	r2, [r4, #100]	; 0x64
  403004:	4628      	mov	r0, r5
  403006:	aa01      	add	r2, sp, #4
  403008:	4621      	mov	r1, r4
  40300a:	f001 fba9 	bl	404760 <__sfvwrite_r>
  40300e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403010:	2800      	cmp	r0, #0
  403012:	bf0c      	ite	eq
  403014:	250a      	moveq	r5, #10
  403016:	f04f 35ff 	movne.w	r5, #4294967295
  40301a:	07da      	lsls	r2, r3, #31
  40301c:	d402      	bmi.n	403024 <_puts_r+0x70>
  40301e:	89a3      	ldrh	r3, [r4, #12]
  403020:	059b      	lsls	r3, r3, #22
  403022:	d502      	bpl.n	40302a <_puts_r+0x76>
  403024:	4628      	mov	r0, r5
  403026:	b009      	add	sp, #36	; 0x24
  403028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40302a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40302c:	f001 fd4e 	bl	404acc <__retarget_lock_release_recursive>
  403030:	4628      	mov	r0, r5
  403032:	b009      	add	sp, #36	; 0x24
  403034:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403036:	4628      	mov	r0, r5
  403038:	f001 f986 	bl	404348 <__sinit>
  40303c:	e7d0      	b.n	402fe0 <_puts_r+0x2c>
  40303e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403040:	f001 fd42 	bl	404ac8 <__retarget_lock_acquire_recursive>
  403044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403048:	b29a      	uxth	r2, r3
  40304a:	e7d2      	b.n	402ff2 <_puts_r+0x3e>
  40304c:	00405bb0 	.word	0x00405bb0

00403050 <puts>:
  403050:	4b02      	ldr	r3, [pc, #8]	; (40305c <puts+0xc>)
  403052:	4601      	mov	r1, r0
  403054:	6818      	ldr	r0, [r3, #0]
  403056:	f7ff bfad 	b.w	402fb4 <_puts_r>
  40305a:	bf00      	nop
  40305c:	2040003c 	.word	0x2040003c

00403060 <setbuf>:
  403060:	2900      	cmp	r1, #0
  403062:	bf0c      	ite	eq
  403064:	2202      	moveq	r2, #2
  403066:	2200      	movne	r2, #0
  403068:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40306c:	f000 b800 	b.w	403070 <setvbuf>

00403070 <setvbuf>:
  403070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403074:	4c61      	ldr	r4, [pc, #388]	; (4031fc <setvbuf+0x18c>)
  403076:	6825      	ldr	r5, [r4, #0]
  403078:	b083      	sub	sp, #12
  40307a:	4604      	mov	r4, r0
  40307c:	460f      	mov	r7, r1
  40307e:	4690      	mov	r8, r2
  403080:	461e      	mov	r6, r3
  403082:	b115      	cbz	r5, 40308a <setvbuf+0x1a>
  403084:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403086:	2b00      	cmp	r3, #0
  403088:	d064      	beq.n	403154 <setvbuf+0xe4>
  40308a:	f1b8 0f02 	cmp.w	r8, #2
  40308e:	d006      	beq.n	40309e <setvbuf+0x2e>
  403090:	f1b8 0f01 	cmp.w	r8, #1
  403094:	f200 809f 	bhi.w	4031d6 <setvbuf+0x166>
  403098:	2e00      	cmp	r6, #0
  40309a:	f2c0 809c 	blt.w	4031d6 <setvbuf+0x166>
  40309e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4030a0:	07d8      	lsls	r0, r3, #31
  4030a2:	d534      	bpl.n	40310e <setvbuf+0x9e>
  4030a4:	4621      	mov	r1, r4
  4030a6:	4628      	mov	r0, r5
  4030a8:	f001 f8f6 	bl	404298 <_fflush_r>
  4030ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4030ae:	b141      	cbz	r1, 4030c2 <setvbuf+0x52>
  4030b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4030b4:	4299      	cmp	r1, r3
  4030b6:	d002      	beq.n	4030be <setvbuf+0x4e>
  4030b8:	4628      	mov	r0, r5
  4030ba:	f001 fa6b 	bl	404594 <_free_r>
  4030be:	2300      	movs	r3, #0
  4030c0:	6323      	str	r3, [r4, #48]	; 0x30
  4030c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030c6:	2200      	movs	r2, #0
  4030c8:	61a2      	str	r2, [r4, #24]
  4030ca:	6062      	str	r2, [r4, #4]
  4030cc:	061a      	lsls	r2, r3, #24
  4030ce:	d43a      	bmi.n	403146 <setvbuf+0xd6>
  4030d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4030d4:	f023 0303 	bic.w	r3, r3, #3
  4030d8:	f1b8 0f02 	cmp.w	r8, #2
  4030dc:	81a3      	strh	r3, [r4, #12]
  4030de:	d01d      	beq.n	40311c <setvbuf+0xac>
  4030e0:	ab01      	add	r3, sp, #4
  4030e2:	466a      	mov	r2, sp
  4030e4:	4621      	mov	r1, r4
  4030e6:	4628      	mov	r0, r5
  4030e8:	f001 fcf2 	bl	404ad0 <__swhatbuf_r>
  4030ec:	89a3      	ldrh	r3, [r4, #12]
  4030ee:	4318      	orrs	r0, r3
  4030f0:	81a0      	strh	r0, [r4, #12]
  4030f2:	2e00      	cmp	r6, #0
  4030f4:	d132      	bne.n	40315c <setvbuf+0xec>
  4030f6:	9e00      	ldr	r6, [sp, #0]
  4030f8:	4630      	mov	r0, r6
  4030fa:	f001 fd61 	bl	404bc0 <malloc>
  4030fe:	4607      	mov	r7, r0
  403100:	2800      	cmp	r0, #0
  403102:	d06b      	beq.n	4031dc <setvbuf+0x16c>
  403104:	89a3      	ldrh	r3, [r4, #12]
  403106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40310a:	81a3      	strh	r3, [r4, #12]
  40310c:	e028      	b.n	403160 <setvbuf+0xf0>
  40310e:	89a3      	ldrh	r3, [r4, #12]
  403110:	0599      	lsls	r1, r3, #22
  403112:	d4c7      	bmi.n	4030a4 <setvbuf+0x34>
  403114:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403116:	f001 fcd7 	bl	404ac8 <__retarget_lock_acquire_recursive>
  40311a:	e7c3      	b.n	4030a4 <setvbuf+0x34>
  40311c:	2500      	movs	r5, #0
  40311e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403120:	2600      	movs	r6, #0
  403122:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403126:	f043 0302 	orr.w	r3, r3, #2
  40312a:	2001      	movs	r0, #1
  40312c:	60a6      	str	r6, [r4, #8]
  40312e:	07ce      	lsls	r6, r1, #31
  403130:	81a3      	strh	r3, [r4, #12]
  403132:	6022      	str	r2, [r4, #0]
  403134:	6122      	str	r2, [r4, #16]
  403136:	6160      	str	r0, [r4, #20]
  403138:	d401      	bmi.n	40313e <setvbuf+0xce>
  40313a:	0598      	lsls	r0, r3, #22
  40313c:	d53e      	bpl.n	4031bc <setvbuf+0x14c>
  40313e:	4628      	mov	r0, r5
  403140:	b003      	add	sp, #12
  403142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403146:	6921      	ldr	r1, [r4, #16]
  403148:	4628      	mov	r0, r5
  40314a:	f001 fa23 	bl	404594 <_free_r>
  40314e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403152:	e7bd      	b.n	4030d0 <setvbuf+0x60>
  403154:	4628      	mov	r0, r5
  403156:	f001 f8f7 	bl	404348 <__sinit>
  40315a:	e796      	b.n	40308a <setvbuf+0x1a>
  40315c:	2f00      	cmp	r7, #0
  40315e:	d0cb      	beq.n	4030f8 <setvbuf+0x88>
  403160:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403162:	2b00      	cmp	r3, #0
  403164:	d033      	beq.n	4031ce <setvbuf+0x15e>
  403166:	9b00      	ldr	r3, [sp, #0]
  403168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40316c:	6027      	str	r7, [r4, #0]
  40316e:	429e      	cmp	r6, r3
  403170:	bf1c      	itt	ne
  403172:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403176:	81a2      	strhne	r2, [r4, #12]
  403178:	f1b8 0f01 	cmp.w	r8, #1
  40317c:	bf04      	itt	eq
  40317e:	f042 0201 	orreq.w	r2, r2, #1
  403182:	81a2      	strheq	r2, [r4, #12]
  403184:	b292      	uxth	r2, r2
  403186:	f012 0308 	ands.w	r3, r2, #8
  40318a:	6127      	str	r7, [r4, #16]
  40318c:	6166      	str	r6, [r4, #20]
  40318e:	d00e      	beq.n	4031ae <setvbuf+0x13e>
  403190:	07d1      	lsls	r1, r2, #31
  403192:	d51a      	bpl.n	4031ca <setvbuf+0x15a>
  403194:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403196:	4276      	negs	r6, r6
  403198:	2300      	movs	r3, #0
  40319a:	f015 0501 	ands.w	r5, r5, #1
  40319e:	61a6      	str	r6, [r4, #24]
  4031a0:	60a3      	str	r3, [r4, #8]
  4031a2:	d009      	beq.n	4031b8 <setvbuf+0x148>
  4031a4:	2500      	movs	r5, #0
  4031a6:	4628      	mov	r0, r5
  4031a8:	b003      	add	sp, #12
  4031aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4031ae:	60a3      	str	r3, [r4, #8]
  4031b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4031b2:	f015 0501 	ands.w	r5, r5, #1
  4031b6:	d1f5      	bne.n	4031a4 <setvbuf+0x134>
  4031b8:	0593      	lsls	r3, r2, #22
  4031ba:	d4c0      	bmi.n	40313e <setvbuf+0xce>
  4031bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4031be:	f001 fc85 	bl	404acc <__retarget_lock_release_recursive>
  4031c2:	4628      	mov	r0, r5
  4031c4:	b003      	add	sp, #12
  4031c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4031ca:	60a6      	str	r6, [r4, #8]
  4031cc:	e7f0      	b.n	4031b0 <setvbuf+0x140>
  4031ce:	4628      	mov	r0, r5
  4031d0:	f001 f8ba 	bl	404348 <__sinit>
  4031d4:	e7c7      	b.n	403166 <setvbuf+0xf6>
  4031d6:	f04f 35ff 	mov.w	r5, #4294967295
  4031da:	e7b0      	b.n	40313e <setvbuf+0xce>
  4031dc:	f8dd 9000 	ldr.w	r9, [sp]
  4031e0:	45b1      	cmp	r9, r6
  4031e2:	d004      	beq.n	4031ee <setvbuf+0x17e>
  4031e4:	4648      	mov	r0, r9
  4031e6:	f001 fceb 	bl	404bc0 <malloc>
  4031ea:	4607      	mov	r7, r0
  4031ec:	b920      	cbnz	r0, 4031f8 <setvbuf+0x188>
  4031ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4031f2:	f04f 35ff 	mov.w	r5, #4294967295
  4031f6:	e792      	b.n	40311e <setvbuf+0xae>
  4031f8:	464e      	mov	r6, r9
  4031fa:	e783      	b.n	403104 <setvbuf+0x94>
  4031fc:	2040003c 	.word	0x2040003c

00403200 <strlen>:
  403200:	f890 f000 	pld	[r0]
  403204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403208:	f020 0107 	bic.w	r1, r0, #7
  40320c:	f06f 0c00 	mvn.w	ip, #0
  403210:	f010 0407 	ands.w	r4, r0, #7
  403214:	f891 f020 	pld	[r1, #32]
  403218:	f040 8049 	bne.w	4032ae <strlen+0xae>
  40321c:	f04f 0400 	mov.w	r4, #0
  403220:	f06f 0007 	mvn.w	r0, #7
  403224:	e9d1 2300 	ldrd	r2, r3, [r1]
  403228:	f891 f040 	pld	[r1, #64]	; 0x40
  40322c:	f100 0008 	add.w	r0, r0, #8
  403230:	fa82 f24c 	uadd8	r2, r2, ip
  403234:	faa4 f28c 	sel	r2, r4, ip
  403238:	fa83 f34c 	uadd8	r3, r3, ip
  40323c:	faa2 f38c 	sel	r3, r2, ip
  403240:	bb4b      	cbnz	r3, 403296 <strlen+0x96>
  403242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403246:	fa82 f24c 	uadd8	r2, r2, ip
  40324a:	f100 0008 	add.w	r0, r0, #8
  40324e:	faa4 f28c 	sel	r2, r4, ip
  403252:	fa83 f34c 	uadd8	r3, r3, ip
  403256:	faa2 f38c 	sel	r3, r2, ip
  40325a:	b9e3      	cbnz	r3, 403296 <strlen+0x96>
  40325c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403260:	fa82 f24c 	uadd8	r2, r2, ip
  403264:	f100 0008 	add.w	r0, r0, #8
  403268:	faa4 f28c 	sel	r2, r4, ip
  40326c:	fa83 f34c 	uadd8	r3, r3, ip
  403270:	faa2 f38c 	sel	r3, r2, ip
  403274:	b97b      	cbnz	r3, 403296 <strlen+0x96>
  403276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40327a:	f101 0120 	add.w	r1, r1, #32
  40327e:	fa82 f24c 	uadd8	r2, r2, ip
  403282:	f100 0008 	add.w	r0, r0, #8
  403286:	faa4 f28c 	sel	r2, r4, ip
  40328a:	fa83 f34c 	uadd8	r3, r3, ip
  40328e:	faa2 f38c 	sel	r3, r2, ip
  403292:	2b00      	cmp	r3, #0
  403294:	d0c6      	beq.n	403224 <strlen+0x24>
  403296:	2a00      	cmp	r2, #0
  403298:	bf04      	itt	eq
  40329a:	3004      	addeq	r0, #4
  40329c:	461a      	moveq	r2, r3
  40329e:	ba12      	rev	r2, r2
  4032a0:	fab2 f282 	clz	r2, r2
  4032a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4032a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4032ac:	4770      	bx	lr
  4032ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4032b2:	f004 0503 	and.w	r5, r4, #3
  4032b6:	f1c4 0000 	rsb	r0, r4, #0
  4032ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4032be:	f014 0f04 	tst.w	r4, #4
  4032c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4032c6:	fa0c f505 	lsl.w	r5, ip, r5
  4032ca:	ea62 0205 	orn	r2, r2, r5
  4032ce:	bf1c      	itt	ne
  4032d0:	ea63 0305 	ornne	r3, r3, r5
  4032d4:	4662      	movne	r2, ip
  4032d6:	f04f 0400 	mov.w	r4, #0
  4032da:	e7a9      	b.n	403230 <strlen+0x30>

004032dc <__sprint_r.part.0>:
  4032dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4032e2:	049c      	lsls	r4, r3, #18
  4032e4:	4693      	mov	fp, r2
  4032e6:	d52f      	bpl.n	403348 <__sprint_r.part.0+0x6c>
  4032e8:	6893      	ldr	r3, [r2, #8]
  4032ea:	6812      	ldr	r2, [r2, #0]
  4032ec:	b353      	cbz	r3, 403344 <__sprint_r.part.0+0x68>
  4032ee:	460e      	mov	r6, r1
  4032f0:	4607      	mov	r7, r0
  4032f2:	f102 0908 	add.w	r9, r2, #8
  4032f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4032fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4032fe:	d017      	beq.n	403330 <__sprint_r.part.0+0x54>
  403300:	3d04      	subs	r5, #4
  403302:	2400      	movs	r4, #0
  403304:	e001      	b.n	40330a <__sprint_r.part.0+0x2e>
  403306:	45a0      	cmp	r8, r4
  403308:	d010      	beq.n	40332c <__sprint_r.part.0+0x50>
  40330a:	4632      	mov	r2, r6
  40330c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403310:	4638      	mov	r0, r7
  403312:	f001 f8bb 	bl	40448c <_fputwc_r>
  403316:	1c43      	adds	r3, r0, #1
  403318:	f104 0401 	add.w	r4, r4, #1
  40331c:	d1f3      	bne.n	403306 <__sprint_r.part.0+0x2a>
  40331e:	2300      	movs	r3, #0
  403320:	f8cb 3008 	str.w	r3, [fp, #8]
  403324:	f8cb 3004 	str.w	r3, [fp, #4]
  403328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40332c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403330:	f02a 0a03 	bic.w	sl, sl, #3
  403334:	eba3 030a 	sub.w	r3, r3, sl
  403338:	f8cb 3008 	str.w	r3, [fp, #8]
  40333c:	f109 0908 	add.w	r9, r9, #8
  403340:	2b00      	cmp	r3, #0
  403342:	d1d8      	bne.n	4032f6 <__sprint_r.part.0+0x1a>
  403344:	2000      	movs	r0, #0
  403346:	e7ea      	b.n	40331e <__sprint_r.part.0+0x42>
  403348:	f001 fa0a 	bl	404760 <__sfvwrite_r>
  40334c:	2300      	movs	r3, #0
  40334e:	f8cb 3008 	str.w	r3, [fp, #8]
  403352:	f8cb 3004 	str.w	r3, [fp, #4]
  403356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40335a:	bf00      	nop

0040335c <_vfiprintf_r>:
  40335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403360:	b0ad      	sub	sp, #180	; 0xb4
  403362:	461d      	mov	r5, r3
  403364:	468b      	mov	fp, r1
  403366:	4690      	mov	r8, r2
  403368:	9307      	str	r3, [sp, #28]
  40336a:	9006      	str	r0, [sp, #24]
  40336c:	b118      	cbz	r0, 403376 <_vfiprintf_r+0x1a>
  40336e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403370:	2b00      	cmp	r3, #0
  403372:	f000 80f3 	beq.w	40355c <_vfiprintf_r+0x200>
  403376:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40337a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40337e:	07df      	lsls	r7, r3, #31
  403380:	b281      	uxth	r1, r0
  403382:	d402      	bmi.n	40338a <_vfiprintf_r+0x2e>
  403384:	058e      	lsls	r6, r1, #22
  403386:	f140 80fc 	bpl.w	403582 <_vfiprintf_r+0x226>
  40338a:	048c      	lsls	r4, r1, #18
  40338c:	d40a      	bmi.n	4033a4 <_vfiprintf_r+0x48>
  40338e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403392:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40339a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40339e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4033a2:	b289      	uxth	r1, r1
  4033a4:	0708      	lsls	r0, r1, #28
  4033a6:	f140 80b3 	bpl.w	403510 <_vfiprintf_r+0x1b4>
  4033aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4033ae:	2b00      	cmp	r3, #0
  4033b0:	f000 80ae 	beq.w	403510 <_vfiprintf_r+0x1b4>
  4033b4:	f001 031a 	and.w	r3, r1, #26
  4033b8:	2b0a      	cmp	r3, #10
  4033ba:	f000 80b5 	beq.w	403528 <_vfiprintf_r+0x1cc>
  4033be:	2300      	movs	r3, #0
  4033c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4033c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4033c6:	9311      	str	r3, [sp, #68]	; 0x44
  4033c8:	9310      	str	r3, [sp, #64]	; 0x40
  4033ca:	9303      	str	r3, [sp, #12]
  4033cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4033d0:	46ca      	mov	sl, r9
  4033d2:	f8cd b010 	str.w	fp, [sp, #16]
  4033d6:	f898 3000 	ldrb.w	r3, [r8]
  4033da:	4644      	mov	r4, r8
  4033dc:	b1fb      	cbz	r3, 40341e <_vfiprintf_r+0xc2>
  4033de:	2b25      	cmp	r3, #37	; 0x25
  4033e0:	d102      	bne.n	4033e8 <_vfiprintf_r+0x8c>
  4033e2:	e01c      	b.n	40341e <_vfiprintf_r+0xc2>
  4033e4:	2b25      	cmp	r3, #37	; 0x25
  4033e6:	d003      	beq.n	4033f0 <_vfiprintf_r+0x94>
  4033e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4033ec:	2b00      	cmp	r3, #0
  4033ee:	d1f9      	bne.n	4033e4 <_vfiprintf_r+0x88>
  4033f0:	eba4 0508 	sub.w	r5, r4, r8
  4033f4:	b19d      	cbz	r5, 40341e <_vfiprintf_r+0xc2>
  4033f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4033f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4033fa:	f8ca 8000 	str.w	r8, [sl]
  4033fe:	3301      	adds	r3, #1
  403400:	442a      	add	r2, r5
  403402:	2b07      	cmp	r3, #7
  403404:	f8ca 5004 	str.w	r5, [sl, #4]
  403408:	9211      	str	r2, [sp, #68]	; 0x44
  40340a:	9310      	str	r3, [sp, #64]	; 0x40
  40340c:	dd7a      	ble.n	403504 <_vfiprintf_r+0x1a8>
  40340e:	2a00      	cmp	r2, #0
  403410:	f040 84b0 	bne.w	403d74 <_vfiprintf_r+0xa18>
  403414:	9b03      	ldr	r3, [sp, #12]
  403416:	9210      	str	r2, [sp, #64]	; 0x40
  403418:	442b      	add	r3, r5
  40341a:	46ca      	mov	sl, r9
  40341c:	9303      	str	r3, [sp, #12]
  40341e:	7823      	ldrb	r3, [r4, #0]
  403420:	2b00      	cmp	r3, #0
  403422:	f000 83e0 	beq.w	403be6 <_vfiprintf_r+0x88a>
  403426:	2000      	movs	r0, #0
  403428:	f04f 0300 	mov.w	r3, #0
  40342c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403430:	f104 0801 	add.w	r8, r4, #1
  403434:	7862      	ldrb	r2, [r4, #1]
  403436:	4605      	mov	r5, r0
  403438:	4606      	mov	r6, r0
  40343a:	4603      	mov	r3, r0
  40343c:	f04f 34ff 	mov.w	r4, #4294967295
  403440:	f108 0801 	add.w	r8, r8, #1
  403444:	f1a2 0120 	sub.w	r1, r2, #32
  403448:	2958      	cmp	r1, #88	; 0x58
  40344a:	f200 82de 	bhi.w	403a0a <_vfiprintf_r+0x6ae>
  40344e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403452:	0221      	.short	0x0221
  403454:	02dc02dc 	.word	0x02dc02dc
  403458:	02dc0229 	.word	0x02dc0229
  40345c:	02dc02dc 	.word	0x02dc02dc
  403460:	02dc02dc 	.word	0x02dc02dc
  403464:	028902dc 	.word	0x028902dc
  403468:	02dc0295 	.word	0x02dc0295
  40346c:	02bd00a2 	.word	0x02bd00a2
  403470:	019f02dc 	.word	0x019f02dc
  403474:	01a401a4 	.word	0x01a401a4
  403478:	01a401a4 	.word	0x01a401a4
  40347c:	01a401a4 	.word	0x01a401a4
  403480:	01a401a4 	.word	0x01a401a4
  403484:	02dc01a4 	.word	0x02dc01a4
  403488:	02dc02dc 	.word	0x02dc02dc
  40348c:	02dc02dc 	.word	0x02dc02dc
  403490:	02dc02dc 	.word	0x02dc02dc
  403494:	02dc02dc 	.word	0x02dc02dc
  403498:	01b202dc 	.word	0x01b202dc
  40349c:	02dc02dc 	.word	0x02dc02dc
  4034a0:	02dc02dc 	.word	0x02dc02dc
  4034a4:	02dc02dc 	.word	0x02dc02dc
  4034a8:	02dc02dc 	.word	0x02dc02dc
  4034ac:	02dc02dc 	.word	0x02dc02dc
  4034b0:	02dc0197 	.word	0x02dc0197
  4034b4:	02dc02dc 	.word	0x02dc02dc
  4034b8:	02dc02dc 	.word	0x02dc02dc
  4034bc:	02dc019b 	.word	0x02dc019b
  4034c0:	025302dc 	.word	0x025302dc
  4034c4:	02dc02dc 	.word	0x02dc02dc
  4034c8:	02dc02dc 	.word	0x02dc02dc
  4034cc:	02dc02dc 	.word	0x02dc02dc
  4034d0:	02dc02dc 	.word	0x02dc02dc
  4034d4:	02dc02dc 	.word	0x02dc02dc
  4034d8:	021b025a 	.word	0x021b025a
  4034dc:	02dc02dc 	.word	0x02dc02dc
  4034e0:	026e02dc 	.word	0x026e02dc
  4034e4:	02dc021b 	.word	0x02dc021b
  4034e8:	027302dc 	.word	0x027302dc
  4034ec:	01f502dc 	.word	0x01f502dc
  4034f0:	02090182 	.word	0x02090182
  4034f4:	02dc02d7 	.word	0x02dc02d7
  4034f8:	02dc029a 	.word	0x02dc029a
  4034fc:	02dc00a7 	.word	0x02dc00a7
  403500:	022e02dc 	.word	0x022e02dc
  403504:	f10a 0a08 	add.w	sl, sl, #8
  403508:	9b03      	ldr	r3, [sp, #12]
  40350a:	442b      	add	r3, r5
  40350c:	9303      	str	r3, [sp, #12]
  40350e:	e786      	b.n	40341e <_vfiprintf_r+0xc2>
  403510:	4659      	mov	r1, fp
  403512:	9806      	ldr	r0, [sp, #24]
  403514:	f000 fdac 	bl	404070 <__swsetup_r>
  403518:	bb18      	cbnz	r0, 403562 <_vfiprintf_r+0x206>
  40351a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40351e:	f001 031a 	and.w	r3, r1, #26
  403522:	2b0a      	cmp	r3, #10
  403524:	f47f af4b 	bne.w	4033be <_vfiprintf_r+0x62>
  403528:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40352c:	2b00      	cmp	r3, #0
  40352e:	f6ff af46 	blt.w	4033be <_vfiprintf_r+0x62>
  403532:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403536:	07db      	lsls	r3, r3, #31
  403538:	d405      	bmi.n	403546 <_vfiprintf_r+0x1ea>
  40353a:	058f      	lsls	r7, r1, #22
  40353c:	d403      	bmi.n	403546 <_vfiprintf_r+0x1ea>
  40353e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403542:	f001 fac3 	bl	404acc <__retarget_lock_release_recursive>
  403546:	462b      	mov	r3, r5
  403548:	4642      	mov	r2, r8
  40354a:	4659      	mov	r1, fp
  40354c:	9806      	ldr	r0, [sp, #24]
  40354e:	f000 fd4d 	bl	403fec <__sbprintf>
  403552:	9003      	str	r0, [sp, #12]
  403554:	9803      	ldr	r0, [sp, #12]
  403556:	b02d      	add	sp, #180	; 0xb4
  403558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40355c:	f000 fef4 	bl	404348 <__sinit>
  403560:	e709      	b.n	403376 <_vfiprintf_r+0x1a>
  403562:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403566:	07d9      	lsls	r1, r3, #31
  403568:	d404      	bmi.n	403574 <_vfiprintf_r+0x218>
  40356a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40356e:	059a      	lsls	r2, r3, #22
  403570:	f140 84aa 	bpl.w	403ec8 <_vfiprintf_r+0xb6c>
  403574:	f04f 33ff 	mov.w	r3, #4294967295
  403578:	9303      	str	r3, [sp, #12]
  40357a:	9803      	ldr	r0, [sp, #12]
  40357c:	b02d      	add	sp, #180	; 0xb4
  40357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403582:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403586:	f001 fa9f 	bl	404ac8 <__retarget_lock_acquire_recursive>
  40358a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40358e:	b281      	uxth	r1, r0
  403590:	e6fb      	b.n	40338a <_vfiprintf_r+0x2e>
  403592:	4276      	negs	r6, r6
  403594:	9207      	str	r2, [sp, #28]
  403596:	f043 0304 	orr.w	r3, r3, #4
  40359a:	f898 2000 	ldrb.w	r2, [r8]
  40359e:	e74f      	b.n	403440 <_vfiprintf_r+0xe4>
  4035a0:	9608      	str	r6, [sp, #32]
  4035a2:	069e      	lsls	r6, r3, #26
  4035a4:	f100 8450 	bmi.w	403e48 <_vfiprintf_r+0xaec>
  4035a8:	9907      	ldr	r1, [sp, #28]
  4035aa:	06dd      	lsls	r5, r3, #27
  4035ac:	460a      	mov	r2, r1
  4035ae:	f100 83ef 	bmi.w	403d90 <_vfiprintf_r+0xa34>
  4035b2:	0658      	lsls	r0, r3, #25
  4035b4:	f140 83ec 	bpl.w	403d90 <_vfiprintf_r+0xa34>
  4035b8:	880e      	ldrh	r6, [r1, #0]
  4035ba:	3104      	adds	r1, #4
  4035bc:	2700      	movs	r7, #0
  4035be:	2201      	movs	r2, #1
  4035c0:	9107      	str	r1, [sp, #28]
  4035c2:	f04f 0100 	mov.w	r1, #0
  4035c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4035ca:	2500      	movs	r5, #0
  4035cc:	1c61      	adds	r1, r4, #1
  4035ce:	f000 8116 	beq.w	4037fe <_vfiprintf_r+0x4a2>
  4035d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4035d6:	9102      	str	r1, [sp, #8]
  4035d8:	ea56 0107 	orrs.w	r1, r6, r7
  4035dc:	f040 8114 	bne.w	403808 <_vfiprintf_r+0x4ac>
  4035e0:	2c00      	cmp	r4, #0
  4035e2:	f040 835c 	bne.w	403c9e <_vfiprintf_r+0x942>
  4035e6:	2a00      	cmp	r2, #0
  4035e8:	f040 83b7 	bne.w	403d5a <_vfiprintf_r+0x9fe>
  4035ec:	f013 0301 	ands.w	r3, r3, #1
  4035f0:	9305      	str	r3, [sp, #20]
  4035f2:	f000 8457 	beq.w	403ea4 <_vfiprintf_r+0xb48>
  4035f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4035fa:	2330      	movs	r3, #48	; 0x30
  4035fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403600:	9b05      	ldr	r3, [sp, #20]
  403602:	42a3      	cmp	r3, r4
  403604:	bfb8      	it	lt
  403606:	4623      	movlt	r3, r4
  403608:	9301      	str	r3, [sp, #4]
  40360a:	b10d      	cbz	r5, 403610 <_vfiprintf_r+0x2b4>
  40360c:	3301      	adds	r3, #1
  40360e:	9301      	str	r3, [sp, #4]
  403610:	9b02      	ldr	r3, [sp, #8]
  403612:	f013 0302 	ands.w	r3, r3, #2
  403616:	9309      	str	r3, [sp, #36]	; 0x24
  403618:	d002      	beq.n	403620 <_vfiprintf_r+0x2c4>
  40361a:	9b01      	ldr	r3, [sp, #4]
  40361c:	3302      	adds	r3, #2
  40361e:	9301      	str	r3, [sp, #4]
  403620:	9b02      	ldr	r3, [sp, #8]
  403622:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403626:	930a      	str	r3, [sp, #40]	; 0x28
  403628:	f040 8217 	bne.w	403a5a <_vfiprintf_r+0x6fe>
  40362c:	9b08      	ldr	r3, [sp, #32]
  40362e:	9a01      	ldr	r2, [sp, #4]
  403630:	1a9d      	subs	r5, r3, r2
  403632:	2d00      	cmp	r5, #0
  403634:	f340 8211 	ble.w	403a5a <_vfiprintf_r+0x6fe>
  403638:	2d10      	cmp	r5, #16
  40363a:	f340 8490 	ble.w	403f5e <_vfiprintf_r+0xc02>
  40363e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403640:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403642:	4ec4      	ldr	r6, [pc, #784]	; (403954 <_vfiprintf_r+0x5f8>)
  403644:	46d6      	mov	lr, sl
  403646:	2710      	movs	r7, #16
  403648:	46a2      	mov	sl, r4
  40364a:	4619      	mov	r1, r3
  40364c:	9c06      	ldr	r4, [sp, #24]
  40364e:	e007      	b.n	403660 <_vfiprintf_r+0x304>
  403650:	f101 0c02 	add.w	ip, r1, #2
  403654:	f10e 0e08 	add.w	lr, lr, #8
  403658:	4601      	mov	r1, r0
  40365a:	3d10      	subs	r5, #16
  40365c:	2d10      	cmp	r5, #16
  40365e:	dd11      	ble.n	403684 <_vfiprintf_r+0x328>
  403660:	1c48      	adds	r0, r1, #1
  403662:	3210      	adds	r2, #16
  403664:	2807      	cmp	r0, #7
  403666:	9211      	str	r2, [sp, #68]	; 0x44
  403668:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40366c:	9010      	str	r0, [sp, #64]	; 0x40
  40366e:	ddef      	ble.n	403650 <_vfiprintf_r+0x2f4>
  403670:	2a00      	cmp	r2, #0
  403672:	f040 81e4 	bne.w	403a3e <_vfiprintf_r+0x6e2>
  403676:	3d10      	subs	r5, #16
  403678:	2d10      	cmp	r5, #16
  40367a:	4611      	mov	r1, r2
  40367c:	f04f 0c01 	mov.w	ip, #1
  403680:	46ce      	mov	lr, r9
  403682:	dced      	bgt.n	403660 <_vfiprintf_r+0x304>
  403684:	4654      	mov	r4, sl
  403686:	4661      	mov	r1, ip
  403688:	46f2      	mov	sl, lr
  40368a:	442a      	add	r2, r5
  40368c:	2907      	cmp	r1, #7
  40368e:	9211      	str	r2, [sp, #68]	; 0x44
  403690:	f8ca 6000 	str.w	r6, [sl]
  403694:	f8ca 5004 	str.w	r5, [sl, #4]
  403698:	9110      	str	r1, [sp, #64]	; 0x40
  40369a:	f300 82ec 	bgt.w	403c76 <_vfiprintf_r+0x91a>
  40369e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4036a2:	f10a 0a08 	add.w	sl, sl, #8
  4036a6:	1c48      	adds	r0, r1, #1
  4036a8:	2d00      	cmp	r5, #0
  4036aa:	f040 81de 	bne.w	403a6a <_vfiprintf_r+0x70e>
  4036ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4036b0:	2b00      	cmp	r3, #0
  4036b2:	f000 81f8 	beq.w	403aa6 <_vfiprintf_r+0x74a>
  4036b6:	3202      	adds	r2, #2
  4036b8:	a90e      	add	r1, sp, #56	; 0x38
  4036ba:	2302      	movs	r3, #2
  4036bc:	2807      	cmp	r0, #7
  4036be:	9211      	str	r2, [sp, #68]	; 0x44
  4036c0:	9010      	str	r0, [sp, #64]	; 0x40
  4036c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4036c6:	f340 81ea 	ble.w	403a9e <_vfiprintf_r+0x742>
  4036ca:	2a00      	cmp	r2, #0
  4036cc:	f040 838c 	bne.w	403de8 <_vfiprintf_r+0xa8c>
  4036d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036d2:	2b80      	cmp	r3, #128	; 0x80
  4036d4:	f04f 0001 	mov.w	r0, #1
  4036d8:	4611      	mov	r1, r2
  4036da:	46ca      	mov	sl, r9
  4036dc:	f040 81e7 	bne.w	403aae <_vfiprintf_r+0x752>
  4036e0:	9b08      	ldr	r3, [sp, #32]
  4036e2:	9d01      	ldr	r5, [sp, #4]
  4036e4:	1b5e      	subs	r6, r3, r5
  4036e6:	2e00      	cmp	r6, #0
  4036e8:	f340 81e1 	ble.w	403aae <_vfiprintf_r+0x752>
  4036ec:	2e10      	cmp	r6, #16
  4036ee:	4d9a      	ldr	r5, [pc, #616]	; (403958 <_vfiprintf_r+0x5fc>)
  4036f0:	f340 8450 	ble.w	403f94 <_vfiprintf_r+0xc38>
  4036f4:	46d4      	mov	ip, sl
  4036f6:	2710      	movs	r7, #16
  4036f8:	46a2      	mov	sl, r4
  4036fa:	9c06      	ldr	r4, [sp, #24]
  4036fc:	e007      	b.n	40370e <_vfiprintf_r+0x3b2>
  4036fe:	f101 0e02 	add.w	lr, r1, #2
  403702:	f10c 0c08 	add.w	ip, ip, #8
  403706:	4601      	mov	r1, r0
  403708:	3e10      	subs	r6, #16
  40370a:	2e10      	cmp	r6, #16
  40370c:	dd11      	ble.n	403732 <_vfiprintf_r+0x3d6>
  40370e:	1c48      	adds	r0, r1, #1
  403710:	3210      	adds	r2, #16
  403712:	2807      	cmp	r0, #7
  403714:	9211      	str	r2, [sp, #68]	; 0x44
  403716:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40371a:	9010      	str	r0, [sp, #64]	; 0x40
  40371c:	ddef      	ble.n	4036fe <_vfiprintf_r+0x3a2>
  40371e:	2a00      	cmp	r2, #0
  403720:	f040 829d 	bne.w	403c5e <_vfiprintf_r+0x902>
  403724:	3e10      	subs	r6, #16
  403726:	2e10      	cmp	r6, #16
  403728:	f04f 0e01 	mov.w	lr, #1
  40372c:	4611      	mov	r1, r2
  40372e:	46cc      	mov	ip, r9
  403730:	dced      	bgt.n	40370e <_vfiprintf_r+0x3b2>
  403732:	4654      	mov	r4, sl
  403734:	46e2      	mov	sl, ip
  403736:	4432      	add	r2, r6
  403738:	f1be 0f07 	cmp.w	lr, #7
  40373c:	9211      	str	r2, [sp, #68]	; 0x44
  40373e:	e88a 0060 	stmia.w	sl, {r5, r6}
  403742:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403746:	f300 8369 	bgt.w	403e1c <_vfiprintf_r+0xac0>
  40374a:	f10a 0a08 	add.w	sl, sl, #8
  40374e:	f10e 0001 	add.w	r0, lr, #1
  403752:	4671      	mov	r1, lr
  403754:	e1ab      	b.n	403aae <_vfiprintf_r+0x752>
  403756:	9608      	str	r6, [sp, #32]
  403758:	f013 0220 	ands.w	r2, r3, #32
  40375c:	f040 838c 	bne.w	403e78 <_vfiprintf_r+0xb1c>
  403760:	f013 0110 	ands.w	r1, r3, #16
  403764:	f040 831a 	bne.w	403d9c <_vfiprintf_r+0xa40>
  403768:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40376c:	f000 8316 	beq.w	403d9c <_vfiprintf_r+0xa40>
  403770:	9807      	ldr	r0, [sp, #28]
  403772:	460a      	mov	r2, r1
  403774:	4601      	mov	r1, r0
  403776:	3104      	adds	r1, #4
  403778:	8806      	ldrh	r6, [r0, #0]
  40377a:	9107      	str	r1, [sp, #28]
  40377c:	2700      	movs	r7, #0
  40377e:	e720      	b.n	4035c2 <_vfiprintf_r+0x266>
  403780:	9608      	str	r6, [sp, #32]
  403782:	f043 0310 	orr.w	r3, r3, #16
  403786:	e7e7      	b.n	403758 <_vfiprintf_r+0x3fc>
  403788:	9608      	str	r6, [sp, #32]
  40378a:	f043 0310 	orr.w	r3, r3, #16
  40378e:	e708      	b.n	4035a2 <_vfiprintf_r+0x246>
  403790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403794:	f898 2000 	ldrb.w	r2, [r8]
  403798:	e652      	b.n	403440 <_vfiprintf_r+0xe4>
  40379a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40379e:	2600      	movs	r6, #0
  4037a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4037a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4037a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4037ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4037b0:	2909      	cmp	r1, #9
  4037b2:	d9f5      	bls.n	4037a0 <_vfiprintf_r+0x444>
  4037b4:	e646      	b.n	403444 <_vfiprintf_r+0xe8>
  4037b6:	9608      	str	r6, [sp, #32]
  4037b8:	2800      	cmp	r0, #0
  4037ba:	f040 8408 	bne.w	403fce <_vfiprintf_r+0xc72>
  4037be:	f043 0310 	orr.w	r3, r3, #16
  4037c2:	069e      	lsls	r6, r3, #26
  4037c4:	f100 834c 	bmi.w	403e60 <_vfiprintf_r+0xb04>
  4037c8:	06dd      	lsls	r5, r3, #27
  4037ca:	f100 82f3 	bmi.w	403db4 <_vfiprintf_r+0xa58>
  4037ce:	0658      	lsls	r0, r3, #25
  4037d0:	f140 82f0 	bpl.w	403db4 <_vfiprintf_r+0xa58>
  4037d4:	9d07      	ldr	r5, [sp, #28]
  4037d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4037da:	462a      	mov	r2, r5
  4037dc:	17f7      	asrs	r7, r6, #31
  4037de:	3204      	adds	r2, #4
  4037e0:	4630      	mov	r0, r6
  4037e2:	4639      	mov	r1, r7
  4037e4:	9207      	str	r2, [sp, #28]
  4037e6:	2800      	cmp	r0, #0
  4037e8:	f171 0200 	sbcs.w	r2, r1, #0
  4037ec:	f2c0 835d 	blt.w	403eaa <_vfiprintf_r+0xb4e>
  4037f0:	1c61      	adds	r1, r4, #1
  4037f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4037f6:	f04f 0201 	mov.w	r2, #1
  4037fa:	f47f aeea 	bne.w	4035d2 <_vfiprintf_r+0x276>
  4037fe:	ea56 0107 	orrs.w	r1, r6, r7
  403802:	f000 824d 	beq.w	403ca0 <_vfiprintf_r+0x944>
  403806:	9302      	str	r3, [sp, #8]
  403808:	2a01      	cmp	r2, #1
  40380a:	f000 828c 	beq.w	403d26 <_vfiprintf_r+0x9ca>
  40380e:	2a02      	cmp	r2, #2
  403810:	f040 825c 	bne.w	403ccc <_vfiprintf_r+0x970>
  403814:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403816:	46cb      	mov	fp, r9
  403818:	0933      	lsrs	r3, r6, #4
  40381a:	f006 010f 	and.w	r1, r6, #15
  40381e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403822:	093a      	lsrs	r2, r7, #4
  403824:	461e      	mov	r6, r3
  403826:	4617      	mov	r7, r2
  403828:	5c43      	ldrb	r3, [r0, r1]
  40382a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40382e:	ea56 0307 	orrs.w	r3, r6, r7
  403832:	d1f1      	bne.n	403818 <_vfiprintf_r+0x4bc>
  403834:	eba9 030b 	sub.w	r3, r9, fp
  403838:	9305      	str	r3, [sp, #20]
  40383a:	e6e1      	b.n	403600 <_vfiprintf_r+0x2a4>
  40383c:	2800      	cmp	r0, #0
  40383e:	f040 83c0 	bne.w	403fc2 <_vfiprintf_r+0xc66>
  403842:	0699      	lsls	r1, r3, #26
  403844:	f100 8367 	bmi.w	403f16 <_vfiprintf_r+0xbba>
  403848:	06da      	lsls	r2, r3, #27
  40384a:	f100 80f1 	bmi.w	403a30 <_vfiprintf_r+0x6d4>
  40384e:	065b      	lsls	r3, r3, #25
  403850:	f140 80ee 	bpl.w	403a30 <_vfiprintf_r+0x6d4>
  403854:	9a07      	ldr	r2, [sp, #28]
  403856:	6813      	ldr	r3, [r2, #0]
  403858:	3204      	adds	r2, #4
  40385a:	9207      	str	r2, [sp, #28]
  40385c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403860:	801a      	strh	r2, [r3, #0]
  403862:	e5b8      	b.n	4033d6 <_vfiprintf_r+0x7a>
  403864:	9807      	ldr	r0, [sp, #28]
  403866:	4a3d      	ldr	r2, [pc, #244]	; (40395c <_vfiprintf_r+0x600>)
  403868:	9608      	str	r6, [sp, #32]
  40386a:	920b      	str	r2, [sp, #44]	; 0x2c
  40386c:	6806      	ldr	r6, [r0, #0]
  40386e:	2278      	movs	r2, #120	; 0x78
  403870:	2130      	movs	r1, #48	; 0x30
  403872:	3004      	adds	r0, #4
  403874:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403878:	f043 0302 	orr.w	r3, r3, #2
  40387c:	9007      	str	r0, [sp, #28]
  40387e:	2700      	movs	r7, #0
  403880:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403884:	2202      	movs	r2, #2
  403886:	e69c      	b.n	4035c2 <_vfiprintf_r+0x266>
  403888:	9608      	str	r6, [sp, #32]
  40388a:	2800      	cmp	r0, #0
  40388c:	d099      	beq.n	4037c2 <_vfiprintf_r+0x466>
  40388e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403892:	e796      	b.n	4037c2 <_vfiprintf_r+0x466>
  403894:	f898 2000 	ldrb.w	r2, [r8]
  403898:	2d00      	cmp	r5, #0
  40389a:	f47f add1 	bne.w	403440 <_vfiprintf_r+0xe4>
  40389e:	2001      	movs	r0, #1
  4038a0:	2520      	movs	r5, #32
  4038a2:	e5cd      	b.n	403440 <_vfiprintf_r+0xe4>
  4038a4:	f043 0301 	orr.w	r3, r3, #1
  4038a8:	f898 2000 	ldrb.w	r2, [r8]
  4038ac:	e5c8      	b.n	403440 <_vfiprintf_r+0xe4>
  4038ae:	9608      	str	r6, [sp, #32]
  4038b0:	2800      	cmp	r0, #0
  4038b2:	f040 8393 	bne.w	403fdc <_vfiprintf_r+0xc80>
  4038b6:	4929      	ldr	r1, [pc, #164]	; (40395c <_vfiprintf_r+0x600>)
  4038b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4038ba:	069f      	lsls	r7, r3, #26
  4038bc:	f100 82e8 	bmi.w	403e90 <_vfiprintf_r+0xb34>
  4038c0:	9807      	ldr	r0, [sp, #28]
  4038c2:	06de      	lsls	r6, r3, #27
  4038c4:	4601      	mov	r1, r0
  4038c6:	f100 8270 	bmi.w	403daa <_vfiprintf_r+0xa4e>
  4038ca:	065d      	lsls	r5, r3, #25
  4038cc:	f140 826d 	bpl.w	403daa <_vfiprintf_r+0xa4e>
  4038d0:	3104      	adds	r1, #4
  4038d2:	8806      	ldrh	r6, [r0, #0]
  4038d4:	9107      	str	r1, [sp, #28]
  4038d6:	2700      	movs	r7, #0
  4038d8:	07d8      	lsls	r0, r3, #31
  4038da:	f140 8222 	bpl.w	403d22 <_vfiprintf_r+0x9c6>
  4038de:	ea56 0107 	orrs.w	r1, r6, r7
  4038e2:	f000 821e 	beq.w	403d22 <_vfiprintf_r+0x9c6>
  4038e6:	2130      	movs	r1, #48	; 0x30
  4038e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4038ec:	f043 0302 	orr.w	r3, r3, #2
  4038f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4038f4:	2202      	movs	r2, #2
  4038f6:	e664      	b.n	4035c2 <_vfiprintf_r+0x266>
  4038f8:	9608      	str	r6, [sp, #32]
  4038fa:	2800      	cmp	r0, #0
  4038fc:	f040 836b 	bne.w	403fd6 <_vfiprintf_r+0xc7a>
  403900:	4917      	ldr	r1, [pc, #92]	; (403960 <_vfiprintf_r+0x604>)
  403902:	910b      	str	r1, [sp, #44]	; 0x2c
  403904:	e7d9      	b.n	4038ba <_vfiprintf_r+0x55e>
  403906:	9907      	ldr	r1, [sp, #28]
  403908:	9608      	str	r6, [sp, #32]
  40390a:	680a      	ldr	r2, [r1, #0]
  40390c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403910:	f04f 0000 	mov.w	r0, #0
  403914:	460a      	mov	r2, r1
  403916:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40391a:	3204      	adds	r2, #4
  40391c:	2001      	movs	r0, #1
  40391e:	9001      	str	r0, [sp, #4]
  403920:	9207      	str	r2, [sp, #28]
  403922:	9005      	str	r0, [sp, #20]
  403924:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403928:	9302      	str	r3, [sp, #8]
  40392a:	2400      	movs	r4, #0
  40392c:	e670      	b.n	403610 <_vfiprintf_r+0x2b4>
  40392e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403932:	f898 2000 	ldrb.w	r2, [r8]
  403936:	e583      	b.n	403440 <_vfiprintf_r+0xe4>
  403938:	f898 2000 	ldrb.w	r2, [r8]
  40393c:	2a6c      	cmp	r2, #108	; 0x6c
  40393e:	bf03      	ittte	eq
  403940:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403944:	f043 0320 	orreq.w	r3, r3, #32
  403948:	f108 0801 	addeq.w	r8, r8, #1
  40394c:	f043 0310 	orrne.w	r3, r3, #16
  403950:	e576      	b.n	403440 <_vfiprintf_r+0xe4>
  403952:	bf00      	nop
  403954:	00405e9c 	.word	0x00405e9c
  403958:	00405eac 	.word	0x00405eac
  40395c:	00405e80 	.word	0x00405e80
  403960:	00405e6c 	.word	0x00405e6c
  403964:	9907      	ldr	r1, [sp, #28]
  403966:	680e      	ldr	r6, [r1, #0]
  403968:	460a      	mov	r2, r1
  40396a:	2e00      	cmp	r6, #0
  40396c:	f102 0204 	add.w	r2, r2, #4
  403970:	f6ff ae0f 	blt.w	403592 <_vfiprintf_r+0x236>
  403974:	9207      	str	r2, [sp, #28]
  403976:	f898 2000 	ldrb.w	r2, [r8]
  40397a:	e561      	b.n	403440 <_vfiprintf_r+0xe4>
  40397c:	f898 2000 	ldrb.w	r2, [r8]
  403980:	2001      	movs	r0, #1
  403982:	252b      	movs	r5, #43	; 0x2b
  403984:	e55c      	b.n	403440 <_vfiprintf_r+0xe4>
  403986:	9907      	ldr	r1, [sp, #28]
  403988:	9608      	str	r6, [sp, #32]
  40398a:	f8d1 b000 	ldr.w	fp, [r1]
  40398e:	f04f 0200 	mov.w	r2, #0
  403992:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403996:	1d0e      	adds	r6, r1, #4
  403998:	f1bb 0f00 	cmp.w	fp, #0
  40399c:	f000 82e5 	beq.w	403f6a <_vfiprintf_r+0xc0e>
  4039a0:	1c67      	adds	r7, r4, #1
  4039a2:	f000 82c4 	beq.w	403f2e <_vfiprintf_r+0xbd2>
  4039a6:	4622      	mov	r2, r4
  4039a8:	2100      	movs	r1, #0
  4039aa:	4658      	mov	r0, fp
  4039ac:	9301      	str	r3, [sp, #4]
  4039ae:	f001 fbd7 	bl	405160 <memchr>
  4039b2:	9b01      	ldr	r3, [sp, #4]
  4039b4:	2800      	cmp	r0, #0
  4039b6:	f000 82e5 	beq.w	403f84 <_vfiprintf_r+0xc28>
  4039ba:	eba0 020b 	sub.w	r2, r0, fp
  4039be:	9205      	str	r2, [sp, #20]
  4039c0:	9607      	str	r6, [sp, #28]
  4039c2:	9302      	str	r3, [sp, #8]
  4039c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4039c8:	2400      	movs	r4, #0
  4039ca:	e619      	b.n	403600 <_vfiprintf_r+0x2a4>
  4039cc:	f898 2000 	ldrb.w	r2, [r8]
  4039d0:	2a2a      	cmp	r2, #42	; 0x2a
  4039d2:	f108 0701 	add.w	r7, r8, #1
  4039d6:	f000 82e9 	beq.w	403fac <_vfiprintf_r+0xc50>
  4039da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4039de:	2909      	cmp	r1, #9
  4039e0:	46b8      	mov	r8, r7
  4039e2:	f04f 0400 	mov.w	r4, #0
  4039e6:	f63f ad2d 	bhi.w	403444 <_vfiprintf_r+0xe8>
  4039ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4039ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4039f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4039f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4039fa:	2909      	cmp	r1, #9
  4039fc:	d9f5      	bls.n	4039ea <_vfiprintf_r+0x68e>
  4039fe:	e521      	b.n	403444 <_vfiprintf_r+0xe8>
  403a00:	f043 0320 	orr.w	r3, r3, #32
  403a04:	f898 2000 	ldrb.w	r2, [r8]
  403a08:	e51a      	b.n	403440 <_vfiprintf_r+0xe4>
  403a0a:	9608      	str	r6, [sp, #32]
  403a0c:	2800      	cmp	r0, #0
  403a0e:	f040 82db 	bne.w	403fc8 <_vfiprintf_r+0xc6c>
  403a12:	2a00      	cmp	r2, #0
  403a14:	f000 80e7 	beq.w	403be6 <_vfiprintf_r+0x88a>
  403a18:	2101      	movs	r1, #1
  403a1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403a1e:	f04f 0200 	mov.w	r2, #0
  403a22:	9101      	str	r1, [sp, #4]
  403a24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403a28:	9105      	str	r1, [sp, #20]
  403a2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403a2e:	e77b      	b.n	403928 <_vfiprintf_r+0x5cc>
  403a30:	9a07      	ldr	r2, [sp, #28]
  403a32:	6813      	ldr	r3, [r2, #0]
  403a34:	3204      	adds	r2, #4
  403a36:	9207      	str	r2, [sp, #28]
  403a38:	9a03      	ldr	r2, [sp, #12]
  403a3a:	601a      	str	r2, [r3, #0]
  403a3c:	e4cb      	b.n	4033d6 <_vfiprintf_r+0x7a>
  403a3e:	aa0f      	add	r2, sp, #60	; 0x3c
  403a40:	9904      	ldr	r1, [sp, #16]
  403a42:	4620      	mov	r0, r4
  403a44:	f7ff fc4a 	bl	4032dc <__sprint_r.part.0>
  403a48:	2800      	cmp	r0, #0
  403a4a:	f040 8139 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403a4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a52:	f101 0c01 	add.w	ip, r1, #1
  403a56:	46ce      	mov	lr, r9
  403a58:	e5ff      	b.n	40365a <_vfiprintf_r+0x2fe>
  403a5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403a5e:	1c48      	adds	r0, r1, #1
  403a60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403a64:	2d00      	cmp	r5, #0
  403a66:	f43f ae22 	beq.w	4036ae <_vfiprintf_r+0x352>
  403a6a:	3201      	adds	r2, #1
  403a6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403a70:	2101      	movs	r1, #1
  403a72:	2807      	cmp	r0, #7
  403a74:	9211      	str	r2, [sp, #68]	; 0x44
  403a76:	9010      	str	r0, [sp, #64]	; 0x40
  403a78:	f8ca 5000 	str.w	r5, [sl]
  403a7c:	f8ca 1004 	str.w	r1, [sl, #4]
  403a80:	f340 8108 	ble.w	403c94 <_vfiprintf_r+0x938>
  403a84:	2a00      	cmp	r2, #0
  403a86:	f040 81bc 	bne.w	403e02 <_vfiprintf_r+0xaa6>
  403a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a8c:	2b00      	cmp	r3, #0
  403a8e:	f43f ae1f 	beq.w	4036d0 <_vfiprintf_r+0x374>
  403a92:	ab0e      	add	r3, sp, #56	; 0x38
  403a94:	2202      	movs	r2, #2
  403a96:	4608      	mov	r0, r1
  403a98:	931c      	str	r3, [sp, #112]	; 0x70
  403a9a:	921d      	str	r2, [sp, #116]	; 0x74
  403a9c:	46ca      	mov	sl, r9
  403a9e:	4601      	mov	r1, r0
  403aa0:	f10a 0a08 	add.w	sl, sl, #8
  403aa4:	3001      	adds	r0, #1
  403aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403aa8:	2b80      	cmp	r3, #128	; 0x80
  403aaa:	f43f ae19 	beq.w	4036e0 <_vfiprintf_r+0x384>
  403aae:	9b05      	ldr	r3, [sp, #20]
  403ab0:	1ae4      	subs	r4, r4, r3
  403ab2:	2c00      	cmp	r4, #0
  403ab4:	dd2e      	ble.n	403b14 <_vfiprintf_r+0x7b8>
  403ab6:	2c10      	cmp	r4, #16
  403ab8:	4db3      	ldr	r5, [pc, #716]	; (403d88 <_vfiprintf_r+0xa2c>)
  403aba:	dd1e      	ble.n	403afa <_vfiprintf_r+0x79e>
  403abc:	46d6      	mov	lr, sl
  403abe:	2610      	movs	r6, #16
  403ac0:	9f06      	ldr	r7, [sp, #24]
  403ac2:	f8dd a010 	ldr.w	sl, [sp, #16]
  403ac6:	e006      	b.n	403ad6 <_vfiprintf_r+0x77a>
  403ac8:	1c88      	adds	r0, r1, #2
  403aca:	f10e 0e08 	add.w	lr, lr, #8
  403ace:	4619      	mov	r1, r3
  403ad0:	3c10      	subs	r4, #16
  403ad2:	2c10      	cmp	r4, #16
  403ad4:	dd10      	ble.n	403af8 <_vfiprintf_r+0x79c>
  403ad6:	1c4b      	adds	r3, r1, #1
  403ad8:	3210      	adds	r2, #16
  403ada:	2b07      	cmp	r3, #7
  403adc:	9211      	str	r2, [sp, #68]	; 0x44
  403ade:	e88e 0060 	stmia.w	lr, {r5, r6}
  403ae2:	9310      	str	r3, [sp, #64]	; 0x40
  403ae4:	ddf0      	ble.n	403ac8 <_vfiprintf_r+0x76c>
  403ae6:	2a00      	cmp	r2, #0
  403ae8:	d165      	bne.n	403bb6 <_vfiprintf_r+0x85a>
  403aea:	3c10      	subs	r4, #16
  403aec:	2c10      	cmp	r4, #16
  403aee:	f04f 0001 	mov.w	r0, #1
  403af2:	4611      	mov	r1, r2
  403af4:	46ce      	mov	lr, r9
  403af6:	dcee      	bgt.n	403ad6 <_vfiprintf_r+0x77a>
  403af8:	46f2      	mov	sl, lr
  403afa:	4422      	add	r2, r4
  403afc:	2807      	cmp	r0, #7
  403afe:	9211      	str	r2, [sp, #68]	; 0x44
  403b00:	f8ca 5000 	str.w	r5, [sl]
  403b04:	f8ca 4004 	str.w	r4, [sl, #4]
  403b08:	9010      	str	r0, [sp, #64]	; 0x40
  403b0a:	f300 8085 	bgt.w	403c18 <_vfiprintf_r+0x8bc>
  403b0e:	f10a 0a08 	add.w	sl, sl, #8
  403b12:	3001      	adds	r0, #1
  403b14:	9905      	ldr	r1, [sp, #20]
  403b16:	f8ca b000 	str.w	fp, [sl]
  403b1a:	440a      	add	r2, r1
  403b1c:	2807      	cmp	r0, #7
  403b1e:	9211      	str	r2, [sp, #68]	; 0x44
  403b20:	f8ca 1004 	str.w	r1, [sl, #4]
  403b24:	9010      	str	r0, [sp, #64]	; 0x40
  403b26:	f340 8082 	ble.w	403c2e <_vfiprintf_r+0x8d2>
  403b2a:	2a00      	cmp	r2, #0
  403b2c:	f040 8118 	bne.w	403d60 <_vfiprintf_r+0xa04>
  403b30:	9b02      	ldr	r3, [sp, #8]
  403b32:	9210      	str	r2, [sp, #64]	; 0x40
  403b34:	0758      	lsls	r0, r3, #29
  403b36:	d535      	bpl.n	403ba4 <_vfiprintf_r+0x848>
  403b38:	9b08      	ldr	r3, [sp, #32]
  403b3a:	9901      	ldr	r1, [sp, #4]
  403b3c:	1a5c      	subs	r4, r3, r1
  403b3e:	2c00      	cmp	r4, #0
  403b40:	f340 80e7 	ble.w	403d12 <_vfiprintf_r+0x9b6>
  403b44:	46ca      	mov	sl, r9
  403b46:	2c10      	cmp	r4, #16
  403b48:	f340 8218 	ble.w	403f7c <_vfiprintf_r+0xc20>
  403b4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b4e:	4e8f      	ldr	r6, [pc, #572]	; (403d8c <_vfiprintf_r+0xa30>)
  403b50:	9f06      	ldr	r7, [sp, #24]
  403b52:	f8dd b010 	ldr.w	fp, [sp, #16]
  403b56:	2510      	movs	r5, #16
  403b58:	e006      	b.n	403b68 <_vfiprintf_r+0x80c>
  403b5a:	1c88      	adds	r0, r1, #2
  403b5c:	f10a 0a08 	add.w	sl, sl, #8
  403b60:	4619      	mov	r1, r3
  403b62:	3c10      	subs	r4, #16
  403b64:	2c10      	cmp	r4, #16
  403b66:	dd11      	ble.n	403b8c <_vfiprintf_r+0x830>
  403b68:	1c4b      	adds	r3, r1, #1
  403b6a:	3210      	adds	r2, #16
  403b6c:	2b07      	cmp	r3, #7
  403b6e:	9211      	str	r2, [sp, #68]	; 0x44
  403b70:	f8ca 6000 	str.w	r6, [sl]
  403b74:	f8ca 5004 	str.w	r5, [sl, #4]
  403b78:	9310      	str	r3, [sp, #64]	; 0x40
  403b7a:	ddee      	ble.n	403b5a <_vfiprintf_r+0x7fe>
  403b7c:	bb42      	cbnz	r2, 403bd0 <_vfiprintf_r+0x874>
  403b7e:	3c10      	subs	r4, #16
  403b80:	2c10      	cmp	r4, #16
  403b82:	f04f 0001 	mov.w	r0, #1
  403b86:	4611      	mov	r1, r2
  403b88:	46ca      	mov	sl, r9
  403b8a:	dced      	bgt.n	403b68 <_vfiprintf_r+0x80c>
  403b8c:	4422      	add	r2, r4
  403b8e:	2807      	cmp	r0, #7
  403b90:	9211      	str	r2, [sp, #68]	; 0x44
  403b92:	f8ca 6000 	str.w	r6, [sl]
  403b96:	f8ca 4004 	str.w	r4, [sl, #4]
  403b9a:	9010      	str	r0, [sp, #64]	; 0x40
  403b9c:	dd51      	ble.n	403c42 <_vfiprintf_r+0x8e6>
  403b9e:	2a00      	cmp	r2, #0
  403ba0:	f040 819b 	bne.w	403eda <_vfiprintf_r+0xb7e>
  403ba4:	9b03      	ldr	r3, [sp, #12]
  403ba6:	9a08      	ldr	r2, [sp, #32]
  403ba8:	9901      	ldr	r1, [sp, #4]
  403baa:	428a      	cmp	r2, r1
  403bac:	bfac      	ite	ge
  403bae:	189b      	addge	r3, r3, r2
  403bb0:	185b      	addlt	r3, r3, r1
  403bb2:	9303      	str	r3, [sp, #12]
  403bb4:	e04e      	b.n	403c54 <_vfiprintf_r+0x8f8>
  403bb6:	aa0f      	add	r2, sp, #60	; 0x3c
  403bb8:	4651      	mov	r1, sl
  403bba:	4638      	mov	r0, r7
  403bbc:	f7ff fb8e 	bl	4032dc <__sprint_r.part.0>
  403bc0:	2800      	cmp	r0, #0
  403bc2:	f040 813f 	bne.w	403e44 <_vfiprintf_r+0xae8>
  403bc6:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bca:	1c48      	adds	r0, r1, #1
  403bcc:	46ce      	mov	lr, r9
  403bce:	e77f      	b.n	403ad0 <_vfiprintf_r+0x774>
  403bd0:	aa0f      	add	r2, sp, #60	; 0x3c
  403bd2:	4659      	mov	r1, fp
  403bd4:	4638      	mov	r0, r7
  403bd6:	f7ff fb81 	bl	4032dc <__sprint_r.part.0>
  403bda:	b960      	cbnz	r0, 403bf6 <_vfiprintf_r+0x89a>
  403bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bde:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403be0:	1c48      	adds	r0, r1, #1
  403be2:	46ca      	mov	sl, r9
  403be4:	e7bd      	b.n	403b62 <_vfiprintf_r+0x806>
  403be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403be8:	f8dd b010 	ldr.w	fp, [sp, #16]
  403bec:	2b00      	cmp	r3, #0
  403bee:	f040 81d4 	bne.w	403f9a <_vfiprintf_r+0xc3e>
  403bf2:	2300      	movs	r3, #0
  403bf4:	9310      	str	r3, [sp, #64]	; 0x40
  403bf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403bfa:	f013 0f01 	tst.w	r3, #1
  403bfe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403c02:	d102      	bne.n	403c0a <_vfiprintf_r+0x8ae>
  403c04:	059a      	lsls	r2, r3, #22
  403c06:	f140 80de 	bpl.w	403dc6 <_vfiprintf_r+0xa6a>
  403c0a:	065b      	lsls	r3, r3, #25
  403c0c:	f53f acb2 	bmi.w	403574 <_vfiprintf_r+0x218>
  403c10:	9803      	ldr	r0, [sp, #12]
  403c12:	b02d      	add	sp, #180	; 0xb4
  403c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c18:	2a00      	cmp	r2, #0
  403c1a:	f040 8106 	bne.w	403e2a <_vfiprintf_r+0xace>
  403c1e:	9a05      	ldr	r2, [sp, #20]
  403c20:	921d      	str	r2, [sp, #116]	; 0x74
  403c22:	2301      	movs	r3, #1
  403c24:	9211      	str	r2, [sp, #68]	; 0x44
  403c26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403c2a:	9310      	str	r3, [sp, #64]	; 0x40
  403c2c:	46ca      	mov	sl, r9
  403c2e:	f10a 0a08 	add.w	sl, sl, #8
  403c32:	9b02      	ldr	r3, [sp, #8]
  403c34:	0759      	lsls	r1, r3, #29
  403c36:	d504      	bpl.n	403c42 <_vfiprintf_r+0x8e6>
  403c38:	9b08      	ldr	r3, [sp, #32]
  403c3a:	9901      	ldr	r1, [sp, #4]
  403c3c:	1a5c      	subs	r4, r3, r1
  403c3e:	2c00      	cmp	r4, #0
  403c40:	dc81      	bgt.n	403b46 <_vfiprintf_r+0x7ea>
  403c42:	9b03      	ldr	r3, [sp, #12]
  403c44:	9908      	ldr	r1, [sp, #32]
  403c46:	9801      	ldr	r0, [sp, #4]
  403c48:	4281      	cmp	r1, r0
  403c4a:	bfac      	ite	ge
  403c4c:	185b      	addge	r3, r3, r1
  403c4e:	181b      	addlt	r3, r3, r0
  403c50:	9303      	str	r3, [sp, #12]
  403c52:	bb72      	cbnz	r2, 403cb2 <_vfiprintf_r+0x956>
  403c54:	2300      	movs	r3, #0
  403c56:	9310      	str	r3, [sp, #64]	; 0x40
  403c58:	46ca      	mov	sl, r9
  403c5a:	f7ff bbbc 	b.w	4033d6 <_vfiprintf_r+0x7a>
  403c5e:	aa0f      	add	r2, sp, #60	; 0x3c
  403c60:	9904      	ldr	r1, [sp, #16]
  403c62:	4620      	mov	r0, r4
  403c64:	f7ff fb3a 	bl	4032dc <__sprint_r.part.0>
  403c68:	bb50      	cbnz	r0, 403cc0 <_vfiprintf_r+0x964>
  403c6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c6e:	f101 0e01 	add.w	lr, r1, #1
  403c72:	46cc      	mov	ip, r9
  403c74:	e548      	b.n	403708 <_vfiprintf_r+0x3ac>
  403c76:	2a00      	cmp	r2, #0
  403c78:	f040 8140 	bne.w	403efc <_vfiprintf_r+0xba0>
  403c7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403c80:	2900      	cmp	r1, #0
  403c82:	f000 811b 	beq.w	403ebc <_vfiprintf_r+0xb60>
  403c86:	2201      	movs	r2, #1
  403c88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403c8c:	4610      	mov	r0, r2
  403c8e:	921d      	str	r2, [sp, #116]	; 0x74
  403c90:	911c      	str	r1, [sp, #112]	; 0x70
  403c92:	46ca      	mov	sl, r9
  403c94:	4601      	mov	r1, r0
  403c96:	f10a 0a08 	add.w	sl, sl, #8
  403c9a:	3001      	adds	r0, #1
  403c9c:	e507      	b.n	4036ae <_vfiprintf_r+0x352>
  403c9e:	9b02      	ldr	r3, [sp, #8]
  403ca0:	2a01      	cmp	r2, #1
  403ca2:	f000 8098 	beq.w	403dd6 <_vfiprintf_r+0xa7a>
  403ca6:	2a02      	cmp	r2, #2
  403ca8:	d10d      	bne.n	403cc6 <_vfiprintf_r+0x96a>
  403caa:	9302      	str	r3, [sp, #8]
  403cac:	2600      	movs	r6, #0
  403cae:	2700      	movs	r7, #0
  403cb0:	e5b0      	b.n	403814 <_vfiprintf_r+0x4b8>
  403cb2:	aa0f      	add	r2, sp, #60	; 0x3c
  403cb4:	9904      	ldr	r1, [sp, #16]
  403cb6:	9806      	ldr	r0, [sp, #24]
  403cb8:	f7ff fb10 	bl	4032dc <__sprint_r.part.0>
  403cbc:	2800      	cmp	r0, #0
  403cbe:	d0c9      	beq.n	403c54 <_vfiprintf_r+0x8f8>
  403cc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  403cc4:	e797      	b.n	403bf6 <_vfiprintf_r+0x89a>
  403cc6:	9302      	str	r3, [sp, #8]
  403cc8:	2600      	movs	r6, #0
  403cca:	2700      	movs	r7, #0
  403ccc:	4649      	mov	r1, r9
  403cce:	e000      	b.n	403cd2 <_vfiprintf_r+0x976>
  403cd0:	4659      	mov	r1, fp
  403cd2:	08f2      	lsrs	r2, r6, #3
  403cd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403cd8:	08f8      	lsrs	r0, r7, #3
  403cda:	f006 0307 	and.w	r3, r6, #7
  403cde:	4607      	mov	r7, r0
  403ce0:	4616      	mov	r6, r2
  403ce2:	3330      	adds	r3, #48	; 0x30
  403ce4:	ea56 0207 	orrs.w	r2, r6, r7
  403ce8:	f801 3c01 	strb.w	r3, [r1, #-1]
  403cec:	f101 3bff 	add.w	fp, r1, #4294967295
  403cf0:	d1ee      	bne.n	403cd0 <_vfiprintf_r+0x974>
  403cf2:	9a02      	ldr	r2, [sp, #8]
  403cf4:	07d6      	lsls	r6, r2, #31
  403cf6:	f57f ad9d 	bpl.w	403834 <_vfiprintf_r+0x4d8>
  403cfa:	2b30      	cmp	r3, #48	; 0x30
  403cfc:	f43f ad9a 	beq.w	403834 <_vfiprintf_r+0x4d8>
  403d00:	3902      	subs	r1, #2
  403d02:	2330      	movs	r3, #48	; 0x30
  403d04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403d08:	eba9 0301 	sub.w	r3, r9, r1
  403d0c:	9305      	str	r3, [sp, #20]
  403d0e:	468b      	mov	fp, r1
  403d10:	e476      	b.n	403600 <_vfiprintf_r+0x2a4>
  403d12:	9b03      	ldr	r3, [sp, #12]
  403d14:	9a08      	ldr	r2, [sp, #32]
  403d16:	428a      	cmp	r2, r1
  403d18:	bfac      	ite	ge
  403d1a:	189b      	addge	r3, r3, r2
  403d1c:	185b      	addlt	r3, r3, r1
  403d1e:	9303      	str	r3, [sp, #12]
  403d20:	e798      	b.n	403c54 <_vfiprintf_r+0x8f8>
  403d22:	2202      	movs	r2, #2
  403d24:	e44d      	b.n	4035c2 <_vfiprintf_r+0x266>
  403d26:	2f00      	cmp	r7, #0
  403d28:	bf08      	it	eq
  403d2a:	2e0a      	cmpeq	r6, #10
  403d2c:	d352      	bcc.n	403dd4 <_vfiprintf_r+0xa78>
  403d2e:	46cb      	mov	fp, r9
  403d30:	4630      	mov	r0, r6
  403d32:	4639      	mov	r1, r7
  403d34:	220a      	movs	r2, #10
  403d36:	2300      	movs	r3, #0
  403d38:	f7fe fe60 	bl	4029fc <__aeabi_uldivmod>
  403d3c:	3230      	adds	r2, #48	; 0x30
  403d3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403d42:	4630      	mov	r0, r6
  403d44:	4639      	mov	r1, r7
  403d46:	2300      	movs	r3, #0
  403d48:	220a      	movs	r2, #10
  403d4a:	f7fe fe57 	bl	4029fc <__aeabi_uldivmod>
  403d4e:	4606      	mov	r6, r0
  403d50:	460f      	mov	r7, r1
  403d52:	ea56 0307 	orrs.w	r3, r6, r7
  403d56:	d1eb      	bne.n	403d30 <_vfiprintf_r+0x9d4>
  403d58:	e56c      	b.n	403834 <_vfiprintf_r+0x4d8>
  403d5a:	9405      	str	r4, [sp, #20]
  403d5c:	46cb      	mov	fp, r9
  403d5e:	e44f      	b.n	403600 <_vfiprintf_r+0x2a4>
  403d60:	aa0f      	add	r2, sp, #60	; 0x3c
  403d62:	9904      	ldr	r1, [sp, #16]
  403d64:	9806      	ldr	r0, [sp, #24]
  403d66:	f7ff fab9 	bl	4032dc <__sprint_r.part.0>
  403d6a:	2800      	cmp	r0, #0
  403d6c:	d1a8      	bne.n	403cc0 <_vfiprintf_r+0x964>
  403d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d70:	46ca      	mov	sl, r9
  403d72:	e75e      	b.n	403c32 <_vfiprintf_r+0x8d6>
  403d74:	aa0f      	add	r2, sp, #60	; 0x3c
  403d76:	9904      	ldr	r1, [sp, #16]
  403d78:	9806      	ldr	r0, [sp, #24]
  403d7a:	f7ff faaf 	bl	4032dc <__sprint_r.part.0>
  403d7e:	2800      	cmp	r0, #0
  403d80:	d19e      	bne.n	403cc0 <_vfiprintf_r+0x964>
  403d82:	46ca      	mov	sl, r9
  403d84:	f7ff bbc0 	b.w	403508 <_vfiprintf_r+0x1ac>
  403d88:	00405eac 	.word	0x00405eac
  403d8c:	00405e9c 	.word	0x00405e9c
  403d90:	3104      	adds	r1, #4
  403d92:	6816      	ldr	r6, [r2, #0]
  403d94:	9107      	str	r1, [sp, #28]
  403d96:	2201      	movs	r2, #1
  403d98:	2700      	movs	r7, #0
  403d9a:	e412      	b.n	4035c2 <_vfiprintf_r+0x266>
  403d9c:	9807      	ldr	r0, [sp, #28]
  403d9e:	4601      	mov	r1, r0
  403da0:	3104      	adds	r1, #4
  403da2:	6806      	ldr	r6, [r0, #0]
  403da4:	9107      	str	r1, [sp, #28]
  403da6:	2700      	movs	r7, #0
  403da8:	e40b      	b.n	4035c2 <_vfiprintf_r+0x266>
  403daa:	680e      	ldr	r6, [r1, #0]
  403dac:	3104      	adds	r1, #4
  403dae:	9107      	str	r1, [sp, #28]
  403db0:	2700      	movs	r7, #0
  403db2:	e591      	b.n	4038d8 <_vfiprintf_r+0x57c>
  403db4:	9907      	ldr	r1, [sp, #28]
  403db6:	680e      	ldr	r6, [r1, #0]
  403db8:	460a      	mov	r2, r1
  403dba:	17f7      	asrs	r7, r6, #31
  403dbc:	3204      	adds	r2, #4
  403dbe:	9207      	str	r2, [sp, #28]
  403dc0:	4630      	mov	r0, r6
  403dc2:	4639      	mov	r1, r7
  403dc4:	e50f      	b.n	4037e6 <_vfiprintf_r+0x48a>
  403dc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403dca:	f000 fe7f 	bl	404acc <__retarget_lock_release_recursive>
  403dce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403dd2:	e71a      	b.n	403c0a <_vfiprintf_r+0x8ae>
  403dd4:	9b02      	ldr	r3, [sp, #8]
  403dd6:	9302      	str	r3, [sp, #8]
  403dd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403ddc:	3630      	adds	r6, #48	; 0x30
  403dde:	2301      	movs	r3, #1
  403de0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403de4:	9305      	str	r3, [sp, #20]
  403de6:	e40b      	b.n	403600 <_vfiprintf_r+0x2a4>
  403de8:	aa0f      	add	r2, sp, #60	; 0x3c
  403dea:	9904      	ldr	r1, [sp, #16]
  403dec:	9806      	ldr	r0, [sp, #24]
  403dee:	f7ff fa75 	bl	4032dc <__sprint_r.part.0>
  403df2:	2800      	cmp	r0, #0
  403df4:	f47f af64 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403df8:	9910      	ldr	r1, [sp, #64]	; 0x40
  403dfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dfc:	1c48      	adds	r0, r1, #1
  403dfe:	46ca      	mov	sl, r9
  403e00:	e651      	b.n	403aa6 <_vfiprintf_r+0x74a>
  403e02:	aa0f      	add	r2, sp, #60	; 0x3c
  403e04:	9904      	ldr	r1, [sp, #16]
  403e06:	9806      	ldr	r0, [sp, #24]
  403e08:	f7ff fa68 	bl	4032dc <__sprint_r.part.0>
  403e0c:	2800      	cmp	r0, #0
  403e0e:	f47f af57 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403e12:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e16:	1c48      	adds	r0, r1, #1
  403e18:	46ca      	mov	sl, r9
  403e1a:	e448      	b.n	4036ae <_vfiprintf_r+0x352>
  403e1c:	2a00      	cmp	r2, #0
  403e1e:	f040 8091 	bne.w	403f44 <_vfiprintf_r+0xbe8>
  403e22:	2001      	movs	r0, #1
  403e24:	4611      	mov	r1, r2
  403e26:	46ca      	mov	sl, r9
  403e28:	e641      	b.n	403aae <_vfiprintf_r+0x752>
  403e2a:	aa0f      	add	r2, sp, #60	; 0x3c
  403e2c:	9904      	ldr	r1, [sp, #16]
  403e2e:	9806      	ldr	r0, [sp, #24]
  403e30:	f7ff fa54 	bl	4032dc <__sprint_r.part.0>
  403e34:	2800      	cmp	r0, #0
  403e36:	f47f af43 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403e3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  403e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e3e:	3001      	adds	r0, #1
  403e40:	46ca      	mov	sl, r9
  403e42:	e667      	b.n	403b14 <_vfiprintf_r+0x7b8>
  403e44:	46d3      	mov	fp, sl
  403e46:	e6d6      	b.n	403bf6 <_vfiprintf_r+0x89a>
  403e48:	9e07      	ldr	r6, [sp, #28]
  403e4a:	3607      	adds	r6, #7
  403e4c:	f026 0207 	bic.w	r2, r6, #7
  403e50:	f102 0108 	add.w	r1, r2, #8
  403e54:	e9d2 6700 	ldrd	r6, r7, [r2]
  403e58:	9107      	str	r1, [sp, #28]
  403e5a:	2201      	movs	r2, #1
  403e5c:	f7ff bbb1 	b.w	4035c2 <_vfiprintf_r+0x266>
  403e60:	9e07      	ldr	r6, [sp, #28]
  403e62:	3607      	adds	r6, #7
  403e64:	f026 0607 	bic.w	r6, r6, #7
  403e68:	e9d6 0100 	ldrd	r0, r1, [r6]
  403e6c:	f106 0208 	add.w	r2, r6, #8
  403e70:	9207      	str	r2, [sp, #28]
  403e72:	4606      	mov	r6, r0
  403e74:	460f      	mov	r7, r1
  403e76:	e4b6      	b.n	4037e6 <_vfiprintf_r+0x48a>
  403e78:	9e07      	ldr	r6, [sp, #28]
  403e7a:	3607      	adds	r6, #7
  403e7c:	f026 0207 	bic.w	r2, r6, #7
  403e80:	f102 0108 	add.w	r1, r2, #8
  403e84:	e9d2 6700 	ldrd	r6, r7, [r2]
  403e88:	9107      	str	r1, [sp, #28]
  403e8a:	2200      	movs	r2, #0
  403e8c:	f7ff bb99 	b.w	4035c2 <_vfiprintf_r+0x266>
  403e90:	9e07      	ldr	r6, [sp, #28]
  403e92:	3607      	adds	r6, #7
  403e94:	f026 0107 	bic.w	r1, r6, #7
  403e98:	f101 0008 	add.w	r0, r1, #8
  403e9c:	9007      	str	r0, [sp, #28]
  403e9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403ea2:	e519      	b.n	4038d8 <_vfiprintf_r+0x57c>
  403ea4:	46cb      	mov	fp, r9
  403ea6:	f7ff bbab 	b.w	403600 <_vfiprintf_r+0x2a4>
  403eaa:	252d      	movs	r5, #45	; 0x2d
  403eac:	4276      	negs	r6, r6
  403eae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403eb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403eb6:	2201      	movs	r2, #1
  403eb8:	f7ff bb88 	b.w	4035cc <_vfiprintf_r+0x270>
  403ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ebe:	b9b3      	cbnz	r3, 403eee <_vfiprintf_r+0xb92>
  403ec0:	4611      	mov	r1, r2
  403ec2:	2001      	movs	r0, #1
  403ec4:	46ca      	mov	sl, r9
  403ec6:	e5f2      	b.n	403aae <_vfiprintf_r+0x752>
  403ec8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403ecc:	f000 fdfe 	bl	404acc <__retarget_lock_release_recursive>
  403ed0:	f04f 33ff 	mov.w	r3, #4294967295
  403ed4:	9303      	str	r3, [sp, #12]
  403ed6:	f7ff bb50 	b.w	40357a <_vfiprintf_r+0x21e>
  403eda:	aa0f      	add	r2, sp, #60	; 0x3c
  403edc:	9904      	ldr	r1, [sp, #16]
  403ede:	9806      	ldr	r0, [sp, #24]
  403ee0:	f7ff f9fc 	bl	4032dc <__sprint_r.part.0>
  403ee4:	2800      	cmp	r0, #0
  403ee6:	f47f aeeb 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403eec:	e6a9      	b.n	403c42 <_vfiprintf_r+0x8e6>
  403eee:	ab0e      	add	r3, sp, #56	; 0x38
  403ef0:	2202      	movs	r2, #2
  403ef2:	931c      	str	r3, [sp, #112]	; 0x70
  403ef4:	921d      	str	r2, [sp, #116]	; 0x74
  403ef6:	2001      	movs	r0, #1
  403ef8:	46ca      	mov	sl, r9
  403efa:	e5d0      	b.n	403a9e <_vfiprintf_r+0x742>
  403efc:	aa0f      	add	r2, sp, #60	; 0x3c
  403efe:	9904      	ldr	r1, [sp, #16]
  403f00:	9806      	ldr	r0, [sp, #24]
  403f02:	f7ff f9eb 	bl	4032dc <__sprint_r.part.0>
  403f06:	2800      	cmp	r0, #0
  403f08:	f47f aeda 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f10:	1c48      	adds	r0, r1, #1
  403f12:	46ca      	mov	sl, r9
  403f14:	e5a4      	b.n	403a60 <_vfiprintf_r+0x704>
  403f16:	9a07      	ldr	r2, [sp, #28]
  403f18:	9903      	ldr	r1, [sp, #12]
  403f1a:	6813      	ldr	r3, [r2, #0]
  403f1c:	17cd      	asrs	r5, r1, #31
  403f1e:	4608      	mov	r0, r1
  403f20:	3204      	adds	r2, #4
  403f22:	4629      	mov	r1, r5
  403f24:	9207      	str	r2, [sp, #28]
  403f26:	e9c3 0100 	strd	r0, r1, [r3]
  403f2a:	f7ff ba54 	b.w	4033d6 <_vfiprintf_r+0x7a>
  403f2e:	4658      	mov	r0, fp
  403f30:	9607      	str	r6, [sp, #28]
  403f32:	9302      	str	r3, [sp, #8]
  403f34:	f7ff f964 	bl	403200 <strlen>
  403f38:	2400      	movs	r4, #0
  403f3a:	9005      	str	r0, [sp, #20]
  403f3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403f40:	f7ff bb5e 	b.w	403600 <_vfiprintf_r+0x2a4>
  403f44:	aa0f      	add	r2, sp, #60	; 0x3c
  403f46:	9904      	ldr	r1, [sp, #16]
  403f48:	9806      	ldr	r0, [sp, #24]
  403f4a:	f7ff f9c7 	bl	4032dc <__sprint_r.part.0>
  403f4e:	2800      	cmp	r0, #0
  403f50:	f47f aeb6 	bne.w	403cc0 <_vfiprintf_r+0x964>
  403f54:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f58:	1c48      	adds	r0, r1, #1
  403f5a:	46ca      	mov	sl, r9
  403f5c:	e5a7      	b.n	403aae <_vfiprintf_r+0x752>
  403f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f62:	4e20      	ldr	r6, [pc, #128]	; (403fe4 <_vfiprintf_r+0xc88>)
  403f64:	3101      	adds	r1, #1
  403f66:	f7ff bb90 	b.w	40368a <_vfiprintf_r+0x32e>
  403f6a:	2c06      	cmp	r4, #6
  403f6c:	bf28      	it	cs
  403f6e:	2406      	movcs	r4, #6
  403f70:	9405      	str	r4, [sp, #20]
  403f72:	9607      	str	r6, [sp, #28]
  403f74:	9401      	str	r4, [sp, #4]
  403f76:	f8df b070 	ldr.w	fp, [pc, #112]	; 403fe8 <_vfiprintf_r+0xc8c>
  403f7a:	e4d5      	b.n	403928 <_vfiprintf_r+0x5cc>
  403f7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  403f7e:	4e19      	ldr	r6, [pc, #100]	; (403fe4 <_vfiprintf_r+0xc88>)
  403f80:	3001      	adds	r0, #1
  403f82:	e603      	b.n	403b8c <_vfiprintf_r+0x830>
  403f84:	9405      	str	r4, [sp, #20]
  403f86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403f8a:	9607      	str	r6, [sp, #28]
  403f8c:	9302      	str	r3, [sp, #8]
  403f8e:	4604      	mov	r4, r0
  403f90:	f7ff bb36 	b.w	403600 <_vfiprintf_r+0x2a4>
  403f94:	4686      	mov	lr, r0
  403f96:	f7ff bbce 	b.w	403736 <_vfiprintf_r+0x3da>
  403f9a:	9806      	ldr	r0, [sp, #24]
  403f9c:	aa0f      	add	r2, sp, #60	; 0x3c
  403f9e:	4659      	mov	r1, fp
  403fa0:	f7ff f99c 	bl	4032dc <__sprint_r.part.0>
  403fa4:	2800      	cmp	r0, #0
  403fa6:	f43f ae24 	beq.w	403bf2 <_vfiprintf_r+0x896>
  403faa:	e624      	b.n	403bf6 <_vfiprintf_r+0x89a>
  403fac:	9907      	ldr	r1, [sp, #28]
  403fae:	f898 2001 	ldrb.w	r2, [r8, #1]
  403fb2:	680c      	ldr	r4, [r1, #0]
  403fb4:	3104      	adds	r1, #4
  403fb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403fba:	46b8      	mov	r8, r7
  403fbc:	9107      	str	r1, [sp, #28]
  403fbe:	f7ff ba3f 	b.w	403440 <_vfiprintf_r+0xe4>
  403fc2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403fc6:	e43c      	b.n	403842 <_vfiprintf_r+0x4e6>
  403fc8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403fcc:	e521      	b.n	403a12 <_vfiprintf_r+0x6b6>
  403fce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403fd2:	f7ff bbf4 	b.w	4037be <_vfiprintf_r+0x462>
  403fd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403fda:	e491      	b.n	403900 <_vfiprintf_r+0x5a4>
  403fdc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403fe0:	e469      	b.n	4038b6 <_vfiprintf_r+0x55a>
  403fe2:	bf00      	nop
  403fe4:	00405e9c 	.word	0x00405e9c
  403fe8:	00405e94 	.word	0x00405e94

00403fec <__sbprintf>:
  403fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ff0:	460c      	mov	r4, r1
  403ff2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403ff6:	8989      	ldrh	r1, [r1, #12]
  403ff8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403ffa:	89e5      	ldrh	r5, [r4, #14]
  403ffc:	9619      	str	r6, [sp, #100]	; 0x64
  403ffe:	f021 0102 	bic.w	r1, r1, #2
  404002:	4606      	mov	r6, r0
  404004:	69e0      	ldr	r0, [r4, #28]
  404006:	f8ad 100c 	strh.w	r1, [sp, #12]
  40400a:	4617      	mov	r7, r2
  40400c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404010:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404012:	f8ad 500e 	strh.w	r5, [sp, #14]
  404016:	4698      	mov	r8, r3
  404018:	ad1a      	add	r5, sp, #104	; 0x68
  40401a:	2300      	movs	r3, #0
  40401c:	9007      	str	r0, [sp, #28]
  40401e:	a816      	add	r0, sp, #88	; 0x58
  404020:	9209      	str	r2, [sp, #36]	; 0x24
  404022:	9306      	str	r3, [sp, #24]
  404024:	9500      	str	r5, [sp, #0]
  404026:	9504      	str	r5, [sp, #16]
  404028:	9102      	str	r1, [sp, #8]
  40402a:	9105      	str	r1, [sp, #20]
  40402c:	f000 fd48 	bl	404ac0 <__retarget_lock_init_recursive>
  404030:	4643      	mov	r3, r8
  404032:	463a      	mov	r2, r7
  404034:	4669      	mov	r1, sp
  404036:	4630      	mov	r0, r6
  404038:	f7ff f990 	bl	40335c <_vfiprintf_r>
  40403c:	1e05      	subs	r5, r0, #0
  40403e:	db07      	blt.n	404050 <__sbprintf+0x64>
  404040:	4630      	mov	r0, r6
  404042:	4669      	mov	r1, sp
  404044:	f000 f928 	bl	404298 <_fflush_r>
  404048:	2800      	cmp	r0, #0
  40404a:	bf18      	it	ne
  40404c:	f04f 35ff 	movne.w	r5, #4294967295
  404050:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404054:	065b      	lsls	r3, r3, #25
  404056:	d503      	bpl.n	404060 <__sbprintf+0x74>
  404058:	89a3      	ldrh	r3, [r4, #12]
  40405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40405e:	81a3      	strh	r3, [r4, #12]
  404060:	9816      	ldr	r0, [sp, #88]	; 0x58
  404062:	f000 fd2f 	bl	404ac4 <__retarget_lock_close_recursive>
  404066:	4628      	mov	r0, r5
  404068:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404070 <__swsetup_r>:
  404070:	b538      	push	{r3, r4, r5, lr}
  404072:	4b30      	ldr	r3, [pc, #192]	; (404134 <__swsetup_r+0xc4>)
  404074:	681b      	ldr	r3, [r3, #0]
  404076:	4605      	mov	r5, r0
  404078:	460c      	mov	r4, r1
  40407a:	b113      	cbz	r3, 404082 <__swsetup_r+0x12>
  40407c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40407e:	2a00      	cmp	r2, #0
  404080:	d038      	beq.n	4040f4 <__swsetup_r+0x84>
  404082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404086:	b293      	uxth	r3, r2
  404088:	0718      	lsls	r0, r3, #28
  40408a:	d50c      	bpl.n	4040a6 <__swsetup_r+0x36>
  40408c:	6920      	ldr	r0, [r4, #16]
  40408e:	b1a8      	cbz	r0, 4040bc <__swsetup_r+0x4c>
  404090:	f013 0201 	ands.w	r2, r3, #1
  404094:	d01e      	beq.n	4040d4 <__swsetup_r+0x64>
  404096:	6963      	ldr	r3, [r4, #20]
  404098:	2200      	movs	r2, #0
  40409a:	425b      	negs	r3, r3
  40409c:	61a3      	str	r3, [r4, #24]
  40409e:	60a2      	str	r2, [r4, #8]
  4040a0:	b1f0      	cbz	r0, 4040e0 <__swsetup_r+0x70>
  4040a2:	2000      	movs	r0, #0
  4040a4:	bd38      	pop	{r3, r4, r5, pc}
  4040a6:	06d9      	lsls	r1, r3, #27
  4040a8:	d53c      	bpl.n	404124 <__swsetup_r+0xb4>
  4040aa:	0758      	lsls	r0, r3, #29
  4040ac:	d426      	bmi.n	4040fc <__swsetup_r+0x8c>
  4040ae:	6920      	ldr	r0, [r4, #16]
  4040b0:	f042 0308 	orr.w	r3, r2, #8
  4040b4:	81a3      	strh	r3, [r4, #12]
  4040b6:	b29b      	uxth	r3, r3
  4040b8:	2800      	cmp	r0, #0
  4040ba:	d1e9      	bne.n	404090 <__swsetup_r+0x20>
  4040bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4040c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4040c4:	d0e4      	beq.n	404090 <__swsetup_r+0x20>
  4040c6:	4628      	mov	r0, r5
  4040c8:	4621      	mov	r1, r4
  4040ca:	f000 fd2f 	bl	404b2c <__smakebuf_r>
  4040ce:	89a3      	ldrh	r3, [r4, #12]
  4040d0:	6920      	ldr	r0, [r4, #16]
  4040d2:	e7dd      	b.n	404090 <__swsetup_r+0x20>
  4040d4:	0799      	lsls	r1, r3, #30
  4040d6:	bf58      	it	pl
  4040d8:	6962      	ldrpl	r2, [r4, #20]
  4040da:	60a2      	str	r2, [r4, #8]
  4040dc:	2800      	cmp	r0, #0
  4040de:	d1e0      	bne.n	4040a2 <__swsetup_r+0x32>
  4040e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040e4:	061a      	lsls	r2, r3, #24
  4040e6:	d5dd      	bpl.n	4040a4 <__swsetup_r+0x34>
  4040e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4040ec:	81a3      	strh	r3, [r4, #12]
  4040ee:	f04f 30ff 	mov.w	r0, #4294967295
  4040f2:	bd38      	pop	{r3, r4, r5, pc}
  4040f4:	4618      	mov	r0, r3
  4040f6:	f000 f927 	bl	404348 <__sinit>
  4040fa:	e7c2      	b.n	404082 <__swsetup_r+0x12>
  4040fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4040fe:	b151      	cbz	r1, 404116 <__swsetup_r+0xa6>
  404100:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404104:	4299      	cmp	r1, r3
  404106:	d004      	beq.n	404112 <__swsetup_r+0xa2>
  404108:	4628      	mov	r0, r5
  40410a:	f000 fa43 	bl	404594 <_free_r>
  40410e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404112:	2300      	movs	r3, #0
  404114:	6323      	str	r3, [r4, #48]	; 0x30
  404116:	2300      	movs	r3, #0
  404118:	6920      	ldr	r0, [r4, #16]
  40411a:	6063      	str	r3, [r4, #4]
  40411c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404120:	6020      	str	r0, [r4, #0]
  404122:	e7c5      	b.n	4040b0 <__swsetup_r+0x40>
  404124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404128:	2309      	movs	r3, #9
  40412a:	602b      	str	r3, [r5, #0]
  40412c:	f04f 30ff 	mov.w	r0, #4294967295
  404130:	81a2      	strh	r2, [r4, #12]
  404132:	bd38      	pop	{r3, r4, r5, pc}
  404134:	2040003c 	.word	0x2040003c

00404138 <register_fini>:
  404138:	4b02      	ldr	r3, [pc, #8]	; (404144 <register_fini+0xc>)
  40413a:	b113      	cbz	r3, 404142 <register_fini+0xa>
  40413c:	4802      	ldr	r0, [pc, #8]	; (404148 <register_fini+0x10>)
  40413e:	f000 b805 	b.w	40414c <atexit>
  404142:	4770      	bx	lr
  404144:	00000000 	.word	0x00000000
  404148:	004043b9 	.word	0x004043b9

0040414c <atexit>:
  40414c:	2300      	movs	r3, #0
  40414e:	4601      	mov	r1, r0
  404150:	461a      	mov	r2, r3
  404152:	4618      	mov	r0, r3
  404154:	f001 bb66 	b.w	405824 <__register_exitproc>

00404158 <__sflush_r>:
  404158:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40415c:	b29a      	uxth	r2, r3
  40415e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404162:	460d      	mov	r5, r1
  404164:	0711      	lsls	r1, r2, #28
  404166:	4680      	mov	r8, r0
  404168:	d43a      	bmi.n	4041e0 <__sflush_r+0x88>
  40416a:	686a      	ldr	r2, [r5, #4]
  40416c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404170:	2a00      	cmp	r2, #0
  404172:	81ab      	strh	r3, [r5, #12]
  404174:	dd6f      	ble.n	404256 <__sflush_r+0xfe>
  404176:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404178:	2c00      	cmp	r4, #0
  40417a:	d049      	beq.n	404210 <__sflush_r+0xb8>
  40417c:	2200      	movs	r2, #0
  40417e:	b29b      	uxth	r3, r3
  404180:	f8d8 6000 	ldr.w	r6, [r8]
  404184:	f8c8 2000 	str.w	r2, [r8]
  404188:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40418c:	d067      	beq.n	40425e <__sflush_r+0x106>
  40418e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404190:	075f      	lsls	r7, r3, #29
  404192:	d505      	bpl.n	4041a0 <__sflush_r+0x48>
  404194:	6869      	ldr	r1, [r5, #4]
  404196:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404198:	1a52      	subs	r2, r2, r1
  40419a:	b10b      	cbz	r3, 4041a0 <__sflush_r+0x48>
  40419c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40419e:	1ad2      	subs	r2, r2, r3
  4041a0:	2300      	movs	r3, #0
  4041a2:	69e9      	ldr	r1, [r5, #28]
  4041a4:	4640      	mov	r0, r8
  4041a6:	47a0      	blx	r4
  4041a8:	1c44      	adds	r4, r0, #1
  4041aa:	d03c      	beq.n	404226 <__sflush_r+0xce>
  4041ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4041b0:	692a      	ldr	r2, [r5, #16]
  4041b2:	602a      	str	r2, [r5, #0]
  4041b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4041b8:	2200      	movs	r2, #0
  4041ba:	81ab      	strh	r3, [r5, #12]
  4041bc:	04db      	lsls	r3, r3, #19
  4041be:	606a      	str	r2, [r5, #4]
  4041c0:	d447      	bmi.n	404252 <__sflush_r+0xfa>
  4041c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4041c4:	f8c8 6000 	str.w	r6, [r8]
  4041c8:	b311      	cbz	r1, 404210 <__sflush_r+0xb8>
  4041ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4041ce:	4299      	cmp	r1, r3
  4041d0:	d002      	beq.n	4041d8 <__sflush_r+0x80>
  4041d2:	4640      	mov	r0, r8
  4041d4:	f000 f9de 	bl	404594 <_free_r>
  4041d8:	2000      	movs	r0, #0
  4041da:	6328      	str	r0, [r5, #48]	; 0x30
  4041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041e0:	692e      	ldr	r6, [r5, #16]
  4041e2:	b1ae      	cbz	r6, 404210 <__sflush_r+0xb8>
  4041e4:	682c      	ldr	r4, [r5, #0]
  4041e6:	602e      	str	r6, [r5, #0]
  4041e8:	0791      	lsls	r1, r2, #30
  4041ea:	bf0c      	ite	eq
  4041ec:	696b      	ldreq	r3, [r5, #20]
  4041ee:	2300      	movne	r3, #0
  4041f0:	1ba4      	subs	r4, r4, r6
  4041f2:	60ab      	str	r3, [r5, #8]
  4041f4:	e00a      	b.n	40420c <__sflush_r+0xb4>
  4041f6:	4623      	mov	r3, r4
  4041f8:	4632      	mov	r2, r6
  4041fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4041fc:	69e9      	ldr	r1, [r5, #28]
  4041fe:	4640      	mov	r0, r8
  404200:	47b8      	blx	r7
  404202:	2800      	cmp	r0, #0
  404204:	eba4 0400 	sub.w	r4, r4, r0
  404208:	4406      	add	r6, r0
  40420a:	dd04      	ble.n	404216 <__sflush_r+0xbe>
  40420c:	2c00      	cmp	r4, #0
  40420e:	dcf2      	bgt.n	4041f6 <__sflush_r+0x9e>
  404210:	2000      	movs	r0, #0
  404212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404216:	89ab      	ldrh	r3, [r5, #12]
  404218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40421c:	81ab      	strh	r3, [r5, #12]
  40421e:	f04f 30ff 	mov.w	r0, #4294967295
  404222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404226:	f8d8 4000 	ldr.w	r4, [r8]
  40422a:	2c1d      	cmp	r4, #29
  40422c:	d8f3      	bhi.n	404216 <__sflush_r+0xbe>
  40422e:	4b19      	ldr	r3, [pc, #100]	; (404294 <__sflush_r+0x13c>)
  404230:	40e3      	lsrs	r3, r4
  404232:	43db      	mvns	r3, r3
  404234:	f013 0301 	ands.w	r3, r3, #1
  404238:	d1ed      	bne.n	404216 <__sflush_r+0xbe>
  40423a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40423e:	606b      	str	r3, [r5, #4]
  404240:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404244:	6929      	ldr	r1, [r5, #16]
  404246:	81ab      	strh	r3, [r5, #12]
  404248:	04da      	lsls	r2, r3, #19
  40424a:	6029      	str	r1, [r5, #0]
  40424c:	d5b9      	bpl.n	4041c2 <__sflush_r+0x6a>
  40424e:	2c00      	cmp	r4, #0
  404250:	d1b7      	bne.n	4041c2 <__sflush_r+0x6a>
  404252:	6528      	str	r0, [r5, #80]	; 0x50
  404254:	e7b5      	b.n	4041c2 <__sflush_r+0x6a>
  404256:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404258:	2a00      	cmp	r2, #0
  40425a:	dc8c      	bgt.n	404176 <__sflush_r+0x1e>
  40425c:	e7d8      	b.n	404210 <__sflush_r+0xb8>
  40425e:	2301      	movs	r3, #1
  404260:	69e9      	ldr	r1, [r5, #28]
  404262:	4640      	mov	r0, r8
  404264:	47a0      	blx	r4
  404266:	1c43      	adds	r3, r0, #1
  404268:	4602      	mov	r2, r0
  40426a:	d002      	beq.n	404272 <__sflush_r+0x11a>
  40426c:	89ab      	ldrh	r3, [r5, #12]
  40426e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404270:	e78e      	b.n	404190 <__sflush_r+0x38>
  404272:	f8d8 3000 	ldr.w	r3, [r8]
  404276:	2b00      	cmp	r3, #0
  404278:	d0f8      	beq.n	40426c <__sflush_r+0x114>
  40427a:	2b1d      	cmp	r3, #29
  40427c:	d001      	beq.n	404282 <__sflush_r+0x12a>
  40427e:	2b16      	cmp	r3, #22
  404280:	d102      	bne.n	404288 <__sflush_r+0x130>
  404282:	f8c8 6000 	str.w	r6, [r8]
  404286:	e7c3      	b.n	404210 <__sflush_r+0xb8>
  404288:	89ab      	ldrh	r3, [r5, #12]
  40428a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40428e:	81ab      	strh	r3, [r5, #12]
  404290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404294:	20400001 	.word	0x20400001

00404298 <_fflush_r>:
  404298:	b538      	push	{r3, r4, r5, lr}
  40429a:	460d      	mov	r5, r1
  40429c:	4604      	mov	r4, r0
  40429e:	b108      	cbz	r0, 4042a4 <_fflush_r+0xc>
  4042a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4042a2:	b1bb      	cbz	r3, 4042d4 <_fflush_r+0x3c>
  4042a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4042a8:	b188      	cbz	r0, 4042ce <_fflush_r+0x36>
  4042aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4042ac:	07db      	lsls	r3, r3, #31
  4042ae:	d401      	bmi.n	4042b4 <_fflush_r+0x1c>
  4042b0:	0581      	lsls	r1, r0, #22
  4042b2:	d517      	bpl.n	4042e4 <_fflush_r+0x4c>
  4042b4:	4620      	mov	r0, r4
  4042b6:	4629      	mov	r1, r5
  4042b8:	f7ff ff4e 	bl	404158 <__sflush_r>
  4042bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4042be:	07da      	lsls	r2, r3, #31
  4042c0:	4604      	mov	r4, r0
  4042c2:	d402      	bmi.n	4042ca <_fflush_r+0x32>
  4042c4:	89ab      	ldrh	r3, [r5, #12]
  4042c6:	059b      	lsls	r3, r3, #22
  4042c8:	d507      	bpl.n	4042da <_fflush_r+0x42>
  4042ca:	4620      	mov	r0, r4
  4042cc:	bd38      	pop	{r3, r4, r5, pc}
  4042ce:	4604      	mov	r4, r0
  4042d0:	4620      	mov	r0, r4
  4042d2:	bd38      	pop	{r3, r4, r5, pc}
  4042d4:	f000 f838 	bl	404348 <__sinit>
  4042d8:	e7e4      	b.n	4042a4 <_fflush_r+0xc>
  4042da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4042dc:	f000 fbf6 	bl	404acc <__retarget_lock_release_recursive>
  4042e0:	4620      	mov	r0, r4
  4042e2:	bd38      	pop	{r3, r4, r5, pc}
  4042e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4042e6:	f000 fbef 	bl	404ac8 <__retarget_lock_acquire_recursive>
  4042ea:	e7e3      	b.n	4042b4 <_fflush_r+0x1c>

004042ec <_cleanup_r>:
  4042ec:	4901      	ldr	r1, [pc, #4]	; (4042f4 <_cleanup_r+0x8>)
  4042ee:	f000 bbaf 	b.w	404a50 <_fwalk_reent>
  4042f2:	bf00      	nop
  4042f4:	0040590d 	.word	0x0040590d

004042f8 <std.isra.0>:
  4042f8:	b510      	push	{r4, lr}
  4042fa:	2300      	movs	r3, #0
  4042fc:	4604      	mov	r4, r0
  4042fe:	8181      	strh	r1, [r0, #12]
  404300:	81c2      	strh	r2, [r0, #14]
  404302:	6003      	str	r3, [r0, #0]
  404304:	6043      	str	r3, [r0, #4]
  404306:	6083      	str	r3, [r0, #8]
  404308:	6643      	str	r3, [r0, #100]	; 0x64
  40430a:	6103      	str	r3, [r0, #16]
  40430c:	6143      	str	r3, [r0, #20]
  40430e:	6183      	str	r3, [r0, #24]
  404310:	4619      	mov	r1, r3
  404312:	2208      	movs	r2, #8
  404314:	305c      	adds	r0, #92	; 0x5c
  404316:	f7fe fdff 	bl	402f18 <memset>
  40431a:	4807      	ldr	r0, [pc, #28]	; (404338 <std.isra.0+0x40>)
  40431c:	4907      	ldr	r1, [pc, #28]	; (40433c <std.isra.0+0x44>)
  40431e:	4a08      	ldr	r2, [pc, #32]	; (404340 <std.isra.0+0x48>)
  404320:	4b08      	ldr	r3, [pc, #32]	; (404344 <std.isra.0+0x4c>)
  404322:	6220      	str	r0, [r4, #32]
  404324:	61e4      	str	r4, [r4, #28]
  404326:	6261      	str	r1, [r4, #36]	; 0x24
  404328:	62a2      	str	r2, [r4, #40]	; 0x28
  40432a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40432c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404334:	f000 bbc4 	b.w	404ac0 <__retarget_lock_init_recursive>
  404338:	00405651 	.word	0x00405651
  40433c:	00405675 	.word	0x00405675
  404340:	004056b1 	.word	0x004056b1
  404344:	004056d1 	.word	0x004056d1

00404348 <__sinit>:
  404348:	b510      	push	{r4, lr}
  40434a:	4604      	mov	r4, r0
  40434c:	4812      	ldr	r0, [pc, #72]	; (404398 <__sinit+0x50>)
  40434e:	f000 fbbb 	bl	404ac8 <__retarget_lock_acquire_recursive>
  404352:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404354:	b9d2      	cbnz	r2, 40438c <__sinit+0x44>
  404356:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40435a:	4810      	ldr	r0, [pc, #64]	; (40439c <__sinit+0x54>)
  40435c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404360:	2103      	movs	r1, #3
  404362:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404366:	63e0      	str	r0, [r4, #60]	; 0x3c
  404368:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40436c:	6860      	ldr	r0, [r4, #4]
  40436e:	2104      	movs	r1, #4
  404370:	f7ff ffc2 	bl	4042f8 <std.isra.0>
  404374:	2201      	movs	r2, #1
  404376:	2109      	movs	r1, #9
  404378:	68a0      	ldr	r0, [r4, #8]
  40437a:	f7ff ffbd 	bl	4042f8 <std.isra.0>
  40437e:	2202      	movs	r2, #2
  404380:	2112      	movs	r1, #18
  404382:	68e0      	ldr	r0, [r4, #12]
  404384:	f7ff ffb8 	bl	4042f8 <std.isra.0>
  404388:	2301      	movs	r3, #1
  40438a:	63a3      	str	r3, [r4, #56]	; 0x38
  40438c:	4802      	ldr	r0, [pc, #8]	; (404398 <__sinit+0x50>)
  40438e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404392:	f000 bb9b 	b.w	404acc <__retarget_lock_release_recursive>
  404396:	bf00      	nop
  404398:	204084f8 	.word	0x204084f8
  40439c:	004042ed 	.word	0x004042ed

004043a0 <__sfp_lock_acquire>:
  4043a0:	4801      	ldr	r0, [pc, #4]	; (4043a8 <__sfp_lock_acquire+0x8>)
  4043a2:	f000 bb91 	b.w	404ac8 <__retarget_lock_acquire_recursive>
  4043a6:	bf00      	nop
  4043a8:	2040850c 	.word	0x2040850c

004043ac <__sfp_lock_release>:
  4043ac:	4801      	ldr	r0, [pc, #4]	; (4043b4 <__sfp_lock_release+0x8>)
  4043ae:	f000 bb8d 	b.w	404acc <__retarget_lock_release_recursive>
  4043b2:	bf00      	nop
  4043b4:	2040850c 	.word	0x2040850c

004043b8 <__libc_fini_array>:
  4043b8:	b538      	push	{r3, r4, r5, lr}
  4043ba:	4c0a      	ldr	r4, [pc, #40]	; (4043e4 <__libc_fini_array+0x2c>)
  4043bc:	4d0a      	ldr	r5, [pc, #40]	; (4043e8 <__libc_fini_array+0x30>)
  4043be:	1b64      	subs	r4, r4, r5
  4043c0:	10a4      	asrs	r4, r4, #2
  4043c2:	d00a      	beq.n	4043da <__libc_fini_array+0x22>
  4043c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4043c8:	3b01      	subs	r3, #1
  4043ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4043ce:	3c01      	subs	r4, #1
  4043d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4043d4:	4798      	blx	r3
  4043d6:	2c00      	cmp	r4, #0
  4043d8:	d1f9      	bne.n	4043ce <__libc_fini_array+0x16>
  4043da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4043de:	f001 be01 	b.w	405fe4 <_fini>
  4043e2:	bf00      	nop
  4043e4:	00405ff4 	.word	0x00405ff4
  4043e8:	00405ff0 	.word	0x00405ff0

004043ec <__fputwc>:
  4043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4043f0:	b082      	sub	sp, #8
  4043f2:	4680      	mov	r8, r0
  4043f4:	4689      	mov	r9, r1
  4043f6:	4614      	mov	r4, r2
  4043f8:	f000 fb54 	bl	404aa4 <__locale_mb_cur_max>
  4043fc:	2801      	cmp	r0, #1
  4043fe:	d036      	beq.n	40446e <__fputwc+0x82>
  404400:	464a      	mov	r2, r9
  404402:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404406:	a901      	add	r1, sp, #4
  404408:	4640      	mov	r0, r8
  40440a:	f001 f9bd 	bl	405788 <_wcrtomb_r>
  40440e:	1c42      	adds	r2, r0, #1
  404410:	4606      	mov	r6, r0
  404412:	d025      	beq.n	404460 <__fputwc+0x74>
  404414:	b3a8      	cbz	r0, 404482 <__fputwc+0x96>
  404416:	f89d e004 	ldrb.w	lr, [sp, #4]
  40441a:	2500      	movs	r5, #0
  40441c:	f10d 0a04 	add.w	sl, sp, #4
  404420:	e009      	b.n	404436 <__fputwc+0x4a>
  404422:	6823      	ldr	r3, [r4, #0]
  404424:	1c5a      	adds	r2, r3, #1
  404426:	6022      	str	r2, [r4, #0]
  404428:	f883 e000 	strb.w	lr, [r3]
  40442c:	3501      	adds	r5, #1
  40442e:	42b5      	cmp	r5, r6
  404430:	d227      	bcs.n	404482 <__fputwc+0x96>
  404432:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404436:	68a3      	ldr	r3, [r4, #8]
  404438:	3b01      	subs	r3, #1
  40443a:	2b00      	cmp	r3, #0
  40443c:	60a3      	str	r3, [r4, #8]
  40443e:	daf0      	bge.n	404422 <__fputwc+0x36>
  404440:	69a7      	ldr	r7, [r4, #24]
  404442:	42bb      	cmp	r3, r7
  404444:	4671      	mov	r1, lr
  404446:	4622      	mov	r2, r4
  404448:	4640      	mov	r0, r8
  40444a:	db02      	blt.n	404452 <__fputwc+0x66>
  40444c:	f1be 0f0a 	cmp.w	lr, #10
  404450:	d1e7      	bne.n	404422 <__fputwc+0x36>
  404452:	f001 f941 	bl	4056d8 <__swbuf_r>
  404456:	1c43      	adds	r3, r0, #1
  404458:	d1e8      	bne.n	40442c <__fputwc+0x40>
  40445a:	b002      	add	sp, #8
  40445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404460:	89a3      	ldrh	r3, [r4, #12]
  404462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404466:	81a3      	strh	r3, [r4, #12]
  404468:	b002      	add	sp, #8
  40446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40446e:	f109 33ff 	add.w	r3, r9, #4294967295
  404472:	2bfe      	cmp	r3, #254	; 0xfe
  404474:	d8c4      	bhi.n	404400 <__fputwc+0x14>
  404476:	fa5f fe89 	uxtb.w	lr, r9
  40447a:	4606      	mov	r6, r0
  40447c:	f88d e004 	strb.w	lr, [sp, #4]
  404480:	e7cb      	b.n	40441a <__fputwc+0x2e>
  404482:	4648      	mov	r0, r9
  404484:	b002      	add	sp, #8
  404486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40448a:	bf00      	nop

0040448c <_fputwc_r>:
  40448c:	b530      	push	{r4, r5, lr}
  40448e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404490:	f013 0f01 	tst.w	r3, #1
  404494:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404498:	4614      	mov	r4, r2
  40449a:	b083      	sub	sp, #12
  40449c:	4605      	mov	r5, r0
  40449e:	b29a      	uxth	r2, r3
  4044a0:	d101      	bne.n	4044a6 <_fputwc_r+0x1a>
  4044a2:	0590      	lsls	r0, r2, #22
  4044a4:	d51c      	bpl.n	4044e0 <_fputwc_r+0x54>
  4044a6:	0490      	lsls	r0, r2, #18
  4044a8:	d406      	bmi.n	4044b8 <_fputwc_r+0x2c>
  4044aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4044ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4044b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4044b4:	81a3      	strh	r3, [r4, #12]
  4044b6:	6662      	str	r2, [r4, #100]	; 0x64
  4044b8:	4628      	mov	r0, r5
  4044ba:	4622      	mov	r2, r4
  4044bc:	f7ff ff96 	bl	4043ec <__fputwc>
  4044c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4044c2:	07da      	lsls	r2, r3, #31
  4044c4:	4605      	mov	r5, r0
  4044c6:	d402      	bmi.n	4044ce <_fputwc_r+0x42>
  4044c8:	89a3      	ldrh	r3, [r4, #12]
  4044ca:	059b      	lsls	r3, r3, #22
  4044cc:	d502      	bpl.n	4044d4 <_fputwc_r+0x48>
  4044ce:	4628      	mov	r0, r5
  4044d0:	b003      	add	sp, #12
  4044d2:	bd30      	pop	{r4, r5, pc}
  4044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044d6:	f000 faf9 	bl	404acc <__retarget_lock_release_recursive>
  4044da:	4628      	mov	r0, r5
  4044dc:	b003      	add	sp, #12
  4044de:	bd30      	pop	{r4, r5, pc}
  4044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044e2:	9101      	str	r1, [sp, #4]
  4044e4:	f000 faf0 	bl	404ac8 <__retarget_lock_acquire_recursive>
  4044e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044ec:	9901      	ldr	r1, [sp, #4]
  4044ee:	b29a      	uxth	r2, r3
  4044f0:	e7d9      	b.n	4044a6 <_fputwc_r+0x1a>
  4044f2:	bf00      	nop

004044f4 <_malloc_trim_r>:
  4044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4044f6:	4f24      	ldr	r7, [pc, #144]	; (404588 <_malloc_trim_r+0x94>)
  4044f8:	460c      	mov	r4, r1
  4044fa:	4606      	mov	r6, r0
  4044fc:	f000 fee4 	bl	4052c8 <__malloc_lock>
  404500:	68bb      	ldr	r3, [r7, #8]
  404502:	685d      	ldr	r5, [r3, #4]
  404504:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404508:	310f      	adds	r1, #15
  40450a:	f025 0503 	bic.w	r5, r5, #3
  40450e:	4429      	add	r1, r5
  404510:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404514:	f021 010f 	bic.w	r1, r1, #15
  404518:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40451c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404520:	db07      	blt.n	404532 <_malloc_trim_r+0x3e>
  404522:	2100      	movs	r1, #0
  404524:	4630      	mov	r0, r6
  404526:	f001 f881 	bl	40562c <_sbrk_r>
  40452a:	68bb      	ldr	r3, [r7, #8]
  40452c:	442b      	add	r3, r5
  40452e:	4298      	cmp	r0, r3
  404530:	d004      	beq.n	40453c <_malloc_trim_r+0x48>
  404532:	4630      	mov	r0, r6
  404534:	f000 fece 	bl	4052d4 <__malloc_unlock>
  404538:	2000      	movs	r0, #0
  40453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40453c:	4261      	negs	r1, r4
  40453e:	4630      	mov	r0, r6
  404540:	f001 f874 	bl	40562c <_sbrk_r>
  404544:	3001      	adds	r0, #1
  404546:	d00d      	beq.n	404564 <_malloc_trim_r+0x70>
  404548:	4b10      	ldr	r3, [pc, #64]	; (40458c <_malloc_trim_r+0x98>)
  40454a:	68ba      	ldr	r2, [r7, #8]
  40454c:	6819      	ldr	r1, [r3, #0]
  40454e:	1b2d      	subs	r5, r5, r4
  404550:	f045 0501 	orr.w	r5, r5, #1
  404554:	4630      	mov	r0, r6
  404556:	1b09      	subs	r1, r1, r4
  404558:	6055      	str	r5, [r2, #4]
  40455a:	6019      	str	r1, [r3, #0]
  40455c:	f000 feba 	bl	4052d4 <__malloc_unlock>
  404560:	2001      	movs	r0, #1
  404562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404564:	2100      	movs	r1, #0
  404566:	4630      	mov	r0, r6
  404568:	f001 f860 	bl	40562c <_sbrk_r>
  40456c:	68ba      	ldr	r2, [r7, #8]
  40456e:	1a83      	subs	r3, r0, r2
  404570:	2b0f      	cmp	r3, #15
  404572:	ddde      	ble.n	404532 <_malloc_trim_r+0x3e>
  404574:	4c06      	ldr	r4, [pc, #24]	; (404590 <_malloc_trim_r+0x9c>)
  404576:	4905      	ldr	r1, [pc, #20]	; (40458c <_malloc_trim_r+0x98>)
  404578:	6824      	ldr	r4, [r4, #0]
  40457a:	f043 0301 	orr.w	r3, r3, #1
  40457e:	1b00      	subs	r0, r0, r4
  404580:	6053      	str	r3, [r2, #4]
  404582:	6008      	str	r0, [r1, #0]
  404584:	e7d5      	b.n	404532 <_malloc_trim_r+0x3e>
  404586:	bf00      	nop
  404588:	204005d8 	.word	0x204005d8
  40458c:	204072b4 	.word	0x204072b4
  404590:	204009e0 	.word	0x204009e0

00404594 <_free_r>:
  404594:	2900      	cmp	r1, #0
  404596:	d044      	beq.n	404622 <_free_r+0x8e>
  404598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40459c:	460d      	mov	r5, r1
  40459e:	4680      	mov	r8, r0
  4045a0:	f000 fe92 	bl	4052c8 <__malloc_lock>
  4045a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4045a8:	4969      	ldr	r1, [pc, #420]	; (404750 <_free_r+0x1bc>)
  4045aa:	f027 0301 	bic.w	r3, r7, #1
  4045ae:	f1a5 0408 	sub.w	r4, r5, #8
  4045b2:	18e2      	adds	r2, r4, r3
  4045b4:	688e      	ldr	r6, [r1, #8]
  4045b6:	6850      	ldr	r0, [r2, #4]
  4045b8:	42b2      	cmp	r2, r6
  4045ba:	f020 0003 	bic.w	r0, r0, #3
  4045be:	d05e      	beq.n	40467e <_free_r+0xea>
  4045c0:	07fe      	lsls	r6, r7, #31
  4045c2:	6050      	str	r0, [r2, #4]
  4045c4:	d40b      	bmi.n	4045de <_free_r+0x4a>
  4045c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4045ca:	1be4      	subs	r4, r4, r7
  4045cc:	f101 0e08 	add.w	lr, r1, #8
  4045d0:	68a5      	ldr	r5, [r4, #8]
  4045d2:	4575      	cmp	r5, lr
  4045d4:	443b      	add	r3, r7
  4045d6:	d06d      	beq.n	4046b4 <_free_r+0x120>
  4045d8:	68e7      	ldr	r7, [r4, #12]
  4045da:	60ef      	str	r7, [r5, #12]
  4045dc:	60bd      	str	r5, [r7, #8]
  4045de:	1815      	adds	r5, r2, r0
  4045e0:	686d      	ldr	r5, [r5, #4]
  4045e2:	07ed      	lsls	r5, r5, #31
  4045e4:	d53e      	bpl.n	404664 <_free_r+0xd0>
  4045e6:	f043 0201 	orr.w	r2, r3, #1
  4045ea:	6062      	str	r2, [r4, #4]
  4045ec:	50e3      	str	r3, [r4, r3]
  4045ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4045f2:	d217      	bcs.n	404624 <_free_r+0x90>
  4045f4:	08db      	lsrs	r3, r3, #3
  4045f6:	1c58      	adds	r0, r3, #1
  4045f8:	109a      	asrs	r2, r3, #2
  4045fa:	684d      	ldr	r5, [r1, #4]
  4045fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404600:	60a7      	str	r7, [r4, #8]
  404602:	2301      	movs	r3, #1
  404604:	4093      	lsls	r3, r2
  404606:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40460a:	432b      	orrs	r3, r5
  40460c:	3a08      	subs	r2, #8
  40460e:	60e2      	str	r2, [r4, #12]
  404610:	604b      	str	r3, [r1, #4]
  404612:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404616:	60fc      	str	r4, [r7, #12]
  404618:	4640      	mov	r0, r8
  40461a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40461e:	f000 be59 	b.w	4052d4 <__malloc_unlock>
  404622:	4770      	bx	lr
  404624:	0a5a      	lsrs	r2, r3, #9
  404626:	2a04      	cmp	r2, #4
  404628:	d852      	bhi.n	4046d0 <_free_r+0x13c>
  40462a:	099a      	lsrs	r2, r3, #6
  40462c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404630:	00ff      	lsls	r7, r7, #3
  404632:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404636:	19c8      	adds	r0, r1, r7
  404638:	59ca      	ldr	r2, [r1, r7]
  40463a:	3808      	subs	r0, #8
  40463c:	4290      	cmp	r0, r2
  40463e:	d04f      	beq.n	4046e0 <_free_r+0x14c>
  404640:	6851      	ldr	r1, [r2, #4]
  404642:	f021 0103 	bic.w	r1, r1, #3
  404646:	428b      	cmp	r3, r1
  404648:	d232      	bcs.n	4046b0 <_free_r+0x11c>
  40464a:	6892      	ldr	r2, [r2, #8]
  40464c:	4290      	cmp	r0, r2
  40464e:	d1f7      	bne.n	404640 <_free_r+0xac>
  404650:	68c3      	ldr	r3, [r0, #12]
  404652:	60a0      	str	r0, [r4, #8]
  404654:	60e3      	str	r3, [r4, #12]
  404656:	609c      	str	r4, [r3, #8]
  404658:	60c4      	str	r4, [r0, #12]
  40465a:	4640      	mov	r0, r8
  40465c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404660:	f000 be38 	b.w	4052d4 <__malloc_unlock>
  404664:	6895      	ldr	r5, [r2, #8]
  404666:	4f3b      	ldr	r7, [pc, #236]	; (404754 <_free_r+0x1c0>)
  404668:	42bd      	cmp	r5, r7
  40466a:	4403      	add	r3, r0
  40466c:	d040      	beq.n	4046f0 <_free_r+0x15c>
  40466e:	68d0      	ldr	r0, [r2, #12]
  404670:	60e8      	str	r0, [r5, #12]
  404672:	f043 0201 	orr.w	r2, r3, #1
  404676:	6085      	str	r5, [r0, #8]
  404678:	6062      	str	r2, [r4, #4]
  40467a:	50e3      	str	r3, [r4, r3]
  40467c:	e7b7      	b.n	4045ee <_free_r+0x5a>
  40467e:	07ff      	lsls	r7, r7, #31
  404680:	4403      	add	r3, r0
  404682:	d407      	bmi.n	404694 <_free_r+0x100>
  404684:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404688:	1aa4      	subs	r4, r4, r2
  40468a:	4413      	add	r3, r2
  40468c:	68a0      	ldr	r0, [r4, #8]
  40468e:	68e2      	ldr	r2, [r4, #12]
  404690:	60c2      	str	r2, [r0, #12]
  404692:	6090      	str	r0, [r2, #8]
  404694:	4a30      	ldr	r2, [pc, #192]	; (404758 <_free_r+0x1c4>)
  404696:	6812      	ldr	r2, [r2, #0]
  404698:	f043 0001 	orr.w	r0, r3, #1
  40469c:	4293      	cmp	r3, r2
  40469e:	6060      	str	r0, [r4, #4]
  4046a0:	608c      	str	r4, [r1, #8]
  4046a2:	d3b9      	bcc.n	404618 <_free_r+0x84>
  4046a4:	4b2d      	ldr	r3, [pc, #180]	; (40475c <_free_r+0x1c8>)
  4046a6:	4640      	mov	r0, r8
  4046a8:	6819      	ldr	r1, [r3, #0]
  4046aa:	f7ff ff23 	bl	4044f4 <_malloc_trim_r>
  4046ae:	e7b3      	b.n	404618 <_free_r+0x84>
  4046b0:	4610      	mov	r0, r2
  4046b2:	e7cd      	b.n	404650 <_free_r+0xbc>
  4046b4:	1811      	adds	r1, r2, r0
  4046b6:	6849      	ldr	r1, [r1, #4]
  4046b8:	07c9      	lsls	r1, r1, #31
  4046ba:	d444      	bmi.n	404746 <_free_r+0x1b2>
  4046bc:	6891      	ldr	r1, [r2, #8]
  4046be:	68d2      	ldr	r2, [r2, #12]
  4046c0:	60ca      	str	r2, [r1, #12]
  4046c2:	4403      	add	r3, r0
  4046c4:	f043 0001 	orr.w	r0, r3, #1
  4046c8:	6091      	str	r1, [r2, #8]
  4046ca:	6060      	str	r0, [r4, #4]
  4046cc:	50e3      	str	r3, [r4, r3]
  4046ce:	e7a3      	b.n	404618 <_free_r+0x84>
  4046d0:	2a14      	cmp	r2, #20
  4046d2:	d816      	bhi.n	404702 <_free_r+0x16e>
  4046d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4046d8:	00ff      	lsls	r7, r7, #3
  4046da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4046de:	e7aa      	b.n	404636 <_free_r+0xa2>
  4046e0:	10aa      	asrs	r2, r5, #2
  4046e2:	2301      	movs	r3, #1
  4046e4:	684d      	ldr	r5, [r1, #4]
  4046e6:	4093      	lsls	r3, r2
  4046e8:	432b      	orrs	r3, r5
  4046ea:	604b      	str	r3, [r1, #4]
  4046ec:	4603      	mov	r3, r0
  4046ee:	e7b0      	b.n	404652 <_free_r+0xbe>
  4046f0:	f043 0201 	orr.w	r2, r3, #1
  4046f4:	614c      	str	r4, [r1, #20]
  4046f6:	610c      	str	r4, [r1, #16]
  4046f8:	60e5      	str	r5, [r4, #12]
  4046fa:	60a5      	str	r5, [r4, #8]
  4046fc:	6062      	str	r2, [r4, #4]
  4046fe:	50e3      	str	r3, [r4, r3]
  404700:	e78a      	b.n	404618 <_free_r+0x84>
  404702:	2a54      	cmp	r2, #84	; 0x54
  404704:	d806      	bhi.n	404714 <_free_r+0x180>
  404706:	0b1a      	lsrs	r2, r3, #12
  404708:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40470c:	00ff      	lsls	r7, r7, #3
  40470e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404712:	e790      	b.n	404636 <_free_r+0xa2>
  404714:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404718:	d806      	bhi.n	404728 <_free_r+0x194>
  40471a:	0bda      	lsrs	r2, r3, #15
  40471c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404720:	00ff      	lsls	r7, r7, #3
  404722:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404726:	e786      	b.n	404636 <_free_r+0xa2>
  404728:	f240 5054 	movw	r0, #1364	; 0x554
  40472c:	4282      	cmp	r2, r0
  40472e:	d806      	bhi.n	40473e <_free_r+0x1aa>
  404730:	0c9a      	lsrs	r2, r3, #18
  404732:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404736:	00ff      	lsls	r7, r7, #3
  404738:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40473c:	e77b      	b.n	404636 <_free_r+0xa2>
  40473e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404742:	257e      	movs	r5, #126	; 0x7e
  404744:	e777      	b.n	404636 <_free_r+0xa2>
  404746:	f043 0101 	orr.w	r1, r3, #1
  40474a:	6061      	str	r1, [r4, #4]
  40474c:	6013      	str	r3, [r2, #0]
  40474e:	e763      	b.n	404618 <_free_r+0x84>
  404750:	204005d8 	.word	0x204005d8
  404754:	204005e0 	.word	0x204005e0
  404758:	204009e4 	.word	0x204009e4
  40475c:	204072e4 	.word	0x204072e4

00404760 <__sfvwrite_r>:
  404760:	6893      	ldr	r3, [r2, #8]
  404762:	2b00      	cmp	r3, #0
  404764:	d073      	beq.n	40484e <__sfvwrite_r+0xee>
  404766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40476a:	898b      	ldrh	r3, [r1, #12]
  40476c:	b083      	sub	sp, #12
  40476e:	460c      	mov	r4, r1
  404770:	0719      	lsls	r1, r3, #28
  404772:	9000      	str	r0, [sp, #0]
  404774:	4616      	mov	r6, r2
  404776:	d526      	bpl.n	4047c6 <__sfvwrite_r+0x66>
  404778:	6922      	ldr	r2, [r4, #16]
  40477a:	b322      	cbz	r2, 4047c6 <__sfvwrite_r+0x66>
  40477c:	f013 0002 	ands.w	r0, r3, #2
  404780:	6835      	ldr	r5, [r6, #0]
  404782:	d02c      	beq.n	4047de <__sfvwrite_r+0x7e>
  404784:	f04f 0900 	mov.w	r9, #0
  404788:	4fb0      	ldr	r7, [pc, #704]	; (404a4c <__sfvwrite_r+0x2ec>)
  40478a:	46c8      	mov	r8, r9
  40478c:	46b2      	mov	sl, r6
  40478e:	45b8      	cmp	r8, r7
  404790:	4643      	mov	r3, r8
  404792:	464a      	mov	r2, r9
  404794:	bf28      	it	cs
  404796:	463b      	movcs	r3, r7
  404798:	9800      	ldr	r0, [sp, #0]
  40479a:	f1b8 0f00 	cmp.w	r8, #0
  40479e:	d050      	beq.n	404842 <__sfvwrite_r+0xe2>
  4047a0:	69e1      	ldr	r1, [r4, #28]
  4047a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4047a4:	47b0      	blx	r6
  4047a6:	2800      	cmp	r0, #0
  4047a8:	dd58      	ble.n	40485c <__sfvwrite_r+0xfc>
  4047aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4047ae:	1a1b      	subs	r3, r3, r0
  4047b0:	4481      	add	r9, r0
  4047b2:	eba8 0800 	sub.w	r8, r8, r0
  4047b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	d1e7      	bne.n	40478e <__sfvwrite_r+0x2e>
  4047be:	2000      	movs	r0, #0
  4047c0:	b003      	add	sp, #12
  4047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047c6:	4621      	mov	r1, r4
  4047c8:	9800      	ldr	r0, [sp, #0]
  4047ca:	f7ff fc51 	bl	404070 <__swsetup_r>
  4047ce:	2800      	cmp	r0, #0
  4047d0:	f040 8133 	bne.w	404a3a <__sfvwrite_r+0x2da>
  4047d4:	89a3      	ldrh	r3, [r4, #12]
  4047d6:	6835      	ldr	r5, [r6, #0]
  4047d8:	f013 0002 	ands.w	r0, r3, #2
  4047dc:	d1d2      	bne.n	404784 <__sfvwrite_r+0x24>
  4047de:	f013 0901 	ands.w	r9, r3, #1
  4047e2:	d145      	bne.n	404870 <__sfvwrite_r+0x110>
  4047e4:	464f      	mov	r7, r9
  4047e6:	9601      	str	r6, [sp, #4]
  4047e8:	b337      	cbz	r7, 404838 <__sfvwrite_r+0xd8>
  4047ea:	059a      	lsls	r2, r3, #22
  4047ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4047f0:	f140 8083 	bpl.w	4048fa <__sfvwrite_r+0x19a>
  4047f4:	4547      	cmp	r7, r8
  4047f6:	46c3      	mov	fp, r8
  4047f8:	f0c0 80ab 	bcc.w	404952 <__sfvwrite_r+0x1f2>
  4047fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404800:	f040 80ac 	bne.w	40495c <__sfvwrite_r+0x1fc>
  404804:	6820      	ldr	r0, [r4, #0]
  404806:	46ba      	mov	sl, r7
  404808:	465a      	mov	r2, fp
  40480a:	4649      	mov	r1, r9
  40480c:	f000 fcf8 	bl	405200 <memmove>
  404810:	68a2      	ldr	r2, [r4, #8]
  404812:	6823      	ldr	r3, [r4, #0]
  404814:	eba2 0208 	sub.w	r2, r2, r8
  404818:	445b      	add	r3, fp
  40481a:	60a2      	str	r2, [r4, #8]
  40481c:	6023      	str	r3, [r4, #0]
  40481e:	9a01      	ldr	r2, [sp, #4]
  404820:	6893      	ldr	r3, [r2, #8]
  404822:	eba3 030a 	sub.w	r3, r3, sl
  404826:	44d1      	add	r9, sl
  404828:	eba7 070a 	sub.w	r7, r7, sl
  40482c:	6093      	str	r3, [r2, #8]
  40482e:	2b00      	cmp	r3, #0
  404830:	d0c5      	beq.n	4047be <__sfvwrite_r+0x5e>
  404832:	89a3      	ldrh	r3, [r4, #12]
  404834:	2f00      	cmp	r7, #0
  404836:	d1d8      	bne.n	4047ea <__sfvwrite_r+0x8a>
  404838:	f8d5 9000 	ldr.w	r9, [r5]
  40483c:	686f      	ldr	r7, [r5, #4]
  40483e:	3508      	adds	r5, #8
  404840:	e7d2      	b.n	4047e8 <__sfvwrite_r+0x88>
  404842:	f8d5 9000 	ldr.w	r9, [r5]
  404846:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40484a:	3508      	adds	r5, #8
  40484c:	e79f      	b.n	40478e <__sfvwrite_r+0x2e>
  40484e:	2000      	movs	r0, #0
  404850:	4770      	bx	lr
  404852:	4621      	mov	r1, r4
  404854:	9800      	ldr	r0, [sp, #0]
  404856:	f7ff fd1f 	bl	404298 <_fflush_r>
  40485a:	b370      	cbz	r0, 4048ba <__sfvwrite_r+0x15a>
  40485c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404864:	f04f 30ff 	mov.w	r0, #4294967295
  404868:	81a3      	strh	r3, [r4, #12]
  40486a:	b003      	add	sp, #12
  40486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404870:	4681      	mov	r9, r0
  404872:	4633      	mov	r3, r6
  404874:	464e      	mov	r6, r9
  404876:	46a8      	mov	r8, r5
  404878:	469a      	mov	sl, r3
  40487a:	464d      	mov	r5, r9
  40487c:	b34e      	cbz	r6, 4048d2 <__sfvwrite_r+0x172>
  40487e:	b380      	cbz	r0, 4048e2 <__sfvwrite_r+0x182>
  404880:	6820      	ldr	r0, [r4, #0]
  404882:	6923      	ldr	r3, [r4, #16]
  404884:	6962      	ldr	r2, [r4, #20]
  404886:	45b1      	cmp	r9, r6
  404888:	46cb      	mov	fp, r9
  40488a:	bf28      	it	cs
  40488c:	46b3      	movcs	fp, r6
  40488e:	4298      	cmp	r0, r3
  404890:	465f      	mov	r7, fp
  404892:	d904      	bls.n	40489e <__sfvwrite_r+0x13e>
  404894:	68a3      	ldr	r3, [r4, #8]
  404896:	4413      	add	r3, r2
  404898:	459b      	cmp	fp, r3
  40489a:	f300 80a6 	bgt.w	4049ea <__sfvwrite_r+0x28a>
  40489e:	4593      	cmp	fp, r2
  4048a0:	db4b      	blt.n	40493a <__sfvwrite_r+0x1da>
  4048a2:	4613      	mov	r3, r2
  4048a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4048a6:	69e1      	ldr	r1, [r4, #28]
  4048a8:	9800      	ldr	r0, [sp, #0]
  4048aa:	462a      	mov	r2, r5
  4048ac:	47b8      	blx	r7
  4048ae:	1e07      	subs	r7, r0, #0
  4048b0:	ddd4      	ble.n	40485c <__sfvwrite_r+0xfc>
  4048b2:	ebb9 0907 	subs.w	r9, r9, r7
  4048b6:	d0cc      	beq.n	404852 <__sfvwrite_r+0xf2>
  4048b8:	2001      	movs	r0, #1
  4048ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4048be:	1bdb      	subs	r3, r3, r7
  4048c0:	443d      	add	r5, r7
  4048c2:	1bf6      	subs	r6, r6, r7
  4048c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4048c8:	2b00      	cmp	r3, #0
  4048ca:	f43f af78 	beq.w	4047be <__sfvwrite_r+0x5e>
  4048ce:	2e00      	cmp	r6, #0
  4048d0:	d1d5      	bne.n	40487e <__sfvwrite_r+0x11e>
  4048d2:	f108 0308 	add.w	r3, r8, #8
  4048d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4048da:	4698      	mov	r8, r3
  4048dc:	3308      	adds	r3, #8
  4048de:	2e00      	cmp	r6, #0
  4048e0:	d0f9      	beq.n	4048d6 <__sfvwrite_r+0x176>
  4048e2:	4632      	mov	r2, r6
  4048e4:	210a      	movs	r1, #10
  4048e6:	4628      	mov	r0, r5
  4048e8:	f000 fc3a 	bl	405160 <memchr>
  4048ec:	2800      	cmp	r0, #0
  4048ee:	f000 80a1 	beq.w	404a34 <__sfvwrite_r+0x2d4>
  4048f2:	3001      	adds	r0, #1
  4048f4:	eba0 0905 	sub.w	r9, r0, r5
  4048f8:	e7c2      	b.n	404880 <__sfvwrite_r+0x120>
  4048fa:	6820      	ldr	r0, [r4, #0]
  4048fc:	6923      	ldr	r3, [r4, #16]
  4048fe:	4298      	cmp	r0, r3
  404900:	d802      	bhi.n	404908 <__sfvwrite_r+0x1a8>
  404902:	6963      	ldr	r3, [r4, #20]
  404904:	429f      	cmp	r7, r3
  404906:	d25d      	bcs.n	4049c4 <__sfvwrite_r+0x264>
  404908:	45b8      	cmp	r8, r7
  40490a:	bf28      	it	cs
  40490c:	46b8      	movcs	r8, r7
  40490e:	4642      	mov	r2, r8
  404910:	4649      	mov	r1, r9
  404912:	f000 fc75 	bl	405200 <memmove>
  404916:	68a3      	ldr	r3, [r4, #8]
  404918:	6822      	ldr	r2, [r4, #0]
  40491a:	eba3 0308 	sub.w	r3, r3, r8
  40491e:	4442      	add	r2, r8
  404920:	60a3      	str	r3, [r4, #8]
  404922:	6022      	str	r2, [r4, #0]
  404924:	b10b      	cbz	r3, 40492a <__sfvwrite_r+0x1ca>
  404926:	46c2      	mov	sl, r8
  404928:	e779      	b.n	40481e <__sfvwrite_r+0xbe>
  40492a:	4621      	mov	r1, r4
  40492c:	9800      	ldr	r0, [sp, #0]
  40492e:	f7ff fcb3 	bl	404298 <_fflush_r>
  404932:	2800      	cmp	r0, #0
  404934:	d192      	bne.n	40485c <__sfvwrite_r+0xfc>
  404936:	46c2      	mov	sl, r8
  404938:	e771      	b.n	40481e <__sfvwrite_r+0xbe>
  40493a:	465a      	mov	r2, fp
  40493c:	4629      	mov	r1, r5
  40493e:	f000 fc5f 	bl	405200 <memmove>
  404942:	68a2      	ldr	r2, [r4, #8]
  404944:	6823      	ldr	r3, [r4, #0]
  404946:	eba2 020b 	sub.w	r2, r2, fp
  40494a:	445b      	add	r3, fp
  40494c:	60a2      	str	r2, [r4, #8]
  40494e:	6023      	str	r3, [r4, #0]
  404950:	e7af      	b.n	4048b2 <__sfvwrite_r+0x152>
  404952:	6820      	ldr	r0, [r4, #0]
  404954:	46b8      	mov	r8, r7
  404956:	46ba      	mov	sl, r7
  404958:	46bb      	mov	fp, r7
  40495a:	e755      	b.n	404808 <__sfvwrite_r+0xa8>
  40495c:	6962      	ldr	r2, [r4, #20]
  40495e:	6820      	ldr	r0, [r4, #0]
  404960:	6921      	ldr	r1, [r4, #16]
  404962:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404966:	eba0 0a01 	sub.w	sl, r0, r1
  40496a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40496e:	f10a 0001 	add.w	r0, sl, #1
  404972:	ea4f 0868 	mov.w	r8, r8, asr #1
  404976:	4438      	add	r0, r7
  404978:	4540      	cmp	r0, r8
  40497a:	4642      	mov	r2, r8
  40497c:	bf84      	itt	hi
  40497e:	4680      	movhi	r8, r0
  404980:	4642      	movhi	r2, r8
  404982:	055b      	lsls	r3, r3, #21
  404984:	d544      	bpl.n	404a10 <__sfvwrite_r+0x2b0>
  404986:	4611      	mov	r1, r2
  404988:	9800      	ldr	r0, [sp, #0]
  40498a:	f000 f921 	bl	404bd0 <_malloc_r>
  40498e:	4683      	mov	fp, r0
  404990:	2800      	cmp	r0, #0
  404992:	d055      	beq.n	404a40 <__sfvwrite_r+0x2e0>
  404994:	4652      	mov	r2, sl
  404996:	6921      	ldr	r1, [r4, #16]
  404998:	f7fe fa24 	bl	402de4 <memcpy>
  40499c:	89a3      	ldrh	r3, [r4, #12]
  40499e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4049a6:	81a3      	strh	r3, [r4, #12]
  4049a8:	eb0b 000a 	add.w	r0, fp, sl
  4049ac:	eba8 030a 	sub.w	r3, r8, sl
  4049b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4049b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4049b8:	6020      	str	r0, [r4, #0]
  4049ba:	60a3      	str	r3, [r4, #8]
  4049bc:	46b8      	mov	r8, r7
  4049be:	46ba      	mov	sl, r7
  4049c0:	46bb      	mov	fp, r7
  4049c2:	e721      	b.n	404808 <__sfvwrite_r+0xa8>
  4049c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4049c8:	42b9      	cmp	r1, r7
  4049ca:	bf28      	it	cs
  4049cc:	4639      	movcs	r1, r7
  4049ce:	464a      	mov	r2, r9
  4049d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4049d4:	9800      	ldr	r0, [sp, #0]
  4049d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4049d8:	fb03 f301 	mul.w	r3, r3, r1
  4049dc:	69e1      	ldr	r1, [r4, #28]
  4049de:	47b0      	blx	r6
  4049e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4049e4:	f73f af1b 	bgt.w	40481e <__sfvwrite_r+0xbe>
  4049e8:	e738      	b.n	40485c <__sfvwrite_r+0xfc>
  4049ea:	461a      	mov	r2, r3
  4049ec:	4629      	mov	r1, r5
  4049ee:	9301      	str	r3, [sp, #4]
  4049f0:	f000 fc06 	bl	405200 <memmove>
  4049f4:	6822      	ldr	r2, [r4, #0]
  4049f6:	9b01      	ldr	r3, [sp, #4]
  4049f8:	9800      	ldr	r0, [sp, #0]
  4049fa:	441a      	add	r2, r3
  4049fc:	6022      	str	r2, [r4, #0]
  4049fe:	4621      	mov	r1, r4
  404a00:	f7ff fc4a 	bl	404298 <_fflush_r>
  404a04:	9b01      	ldr	r3, [sp, #4]
  404a06:	2800      	cmp	r0, #0
  404a08:	f47f af28 	bne.w	40485c <__sfvwrite_r+0xfc>
  404a0c:	461f      	mov	r7, r3
  404a0e:	e750      	b.n	4048b2 <__sfvwrite_r+0x152>
  404a10:	9800      	ldr	r0, [sp, #0]
  404a12:	f000 fc65 	bl	4052e0 <_realloc_r>
  404a16:	4683      	mov	fp, r0
  404a18:	2800      	cmp	r0, #0
  404a1a:	d1c5      	bne.n	4049a8 <__sfvwrite_r+0x248>
  404a1c:	9d00      	ldr	r5, [sp, #0]
  404a1e:	6921      	ldr	r1, [r4, #16]
  404a20:	4628      	mov	r0, r5
  404a22:	f7ff fdb7 	bl	404594 <_free_r>
  404a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a2a:	220c      	movs	r2, #12
  404a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404a30:	602a      	str	r2, [r5, #0]
  404a32:	e715      	b.n	404860 <__sfvwrite_r+0x100>
  404a34:	f106 0901 	add.w	r9, r6, #1
  404a38:	e722      	b.n	404880 <__sfvwrite_r+0x120>
  404a3a:	f04f 30ff 	mov.w	r0, #4294967295
  404a3e:	e6bf      	b.n	4047c0 <__sfvwrite_r+0x60>
  404a40:	9a00      	ldr	r2, [sp, #0]
  404a42:	230c      	movs	r3, #12
  404a44:	6013      	str	r3, [r2, #0]
  404a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a4a:	e709      	b.n	404860 <__sfvwrite_r+0x100>
  404a4c:	7ffffc00 	.word	0x7ffffc00

00404a50 <_fwalk_reent>:
  404a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404a54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404a58:	d01f      	beq.n	404a9a <_fwalk_reent+0x4a>
  404a5a:	4688      	mov	r8, r1
  404a5c:	4606      	mov	r6, r0
  404a5e:	f04f 0900 	mov.w	r9, #0
  404a62:	687d      	ldr	r5, [r7, #4]
  404a64:	68bc      	ldr	r4, [r7, #8]
  404a66:	3d01      	subs	r5, #1
  404a68:	d411      	bmi.n	404a8e <_fwalk_reent+0x3e>
  404a6a:	89a3      	ldrh	r3, [r4, #12]
  404a6c:	2b01      	cmp	r3, #1
  404a6e:	f105 35ff 	add.w	r5, r5, #4294967295
  404a72:	d908      	bls.n	404a86 <_fwalk_reent+0x36>
  404a74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404a78:	3301      	adds	r3, #1
  404a7a:	4621      	mov	r1, r4
  404a7c:	4630      	mov	r0, r6
  404a7e:	d002      	beq.n	404a86 <_fwalk_reent+0x36>
  404a80:	47c0      	blx	r8
  404a82:	ea49 0900 	orr.w	r9, r9, r0
  404a86:	1c6b      	adds	r3, r5, #1
  404a88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404a8c:	d1ed      	bne.n	404a6a <_fwalk_reent+0x1a>
  404a8e:	683f      	ldr	r7, [r7, #0]
  404a90:	2f00      	cmp	r7, #0
  404a92:	d1e6      	bne.n	404a62 <_fwalk_reent+0x12>
  404a94:	4648      	mov	r0, r9
  404a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a9a:	46b9      	mov	r9, r7
  404a9c:	4648      	mov	r0, r9
  404a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404aa2:	bf00      	nop

00404aa4 <__locale_mb_cur_max>:
  404aa4:	4b04      	ldr	r3, [pc, #16]	; (404ab8 <__locale_mb_cur_max+0x14>)
  404aa6:	4a05      	ldr	r2, [pc, #20]	; (404abc <__locale_mb_cur_max+0x18>)
  404aa8:	681b      	ldr	r3, [r3, #0]
  404aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404aac:	2b00      	cmp	r3, #0
  404aae:	bf08      	it	eq
  404ab0:	4613      	moveq	r3, r2
  404ab2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404ab6:	4770      	bx	lr
  404ab8:	2040003c 	.word	0x2040003c
  404abc:	2040046c 	.word	0x2040046c

00404ac0 <__retarget_lock_init_recursive>:
  404ac0:	4770      	bx	lr
  404ac2:	bf00      	nop

00404ac4 <__retarget_lock_close_recursive>:
  404ac4:	4770      	bx	lr
  404ac6:	bf00      	nop

00404ac8 <__retarget_lock_acquire_recursive>:
  404ac8:	4770      	bx	lr
  404aca:	bf00      	nop

00404acc <__retarget_lock_release_recursive>:
  404acc:	4770      	bx	lr
  404ace:	bf00      	nop

00404ad0 <__swhatbuf_r>:
  404ad0:	b570      	push	{r4, r5, r6, lr}
  404ad2:	460c      	mov	r4, r1
  404ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ad8:	2900      	cmp	r1, #0
  404ada:	b090      	sub	sp, #64	; 0x40
  404adc:	4615      	mov	r5, r2
  404ade:	461e      	mov	r6, r3
  404ae0:	db14      	blt.n	404b0c <__swhatbuf_r+0x3c>
  404ae2:	aa01      	add	r2, sp, #4
  404ae4:	f000 ff74 	bl	4059d0 <_fstat_r>
  404ae8:	2800      	cmp	r0, #0
  404aea:	db0f      	blt.n	404b0c <__swhatbuf_r+0x3c>
  404aec:	9a02      	ldr	r2, [sp, #8]
  404aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404af2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404af6:	fab2 f282 	clz	r2, r2
  404afa:	0952      	lsrs	r2, r2, #5
  404afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404b00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404b04:	6032      	str	r2, [r6, #0]
  404b06:	602b      	str	r3, [r5, #0]
  404b08:	b010      	add	sp, #64	; 0x40
  404b0a:	bd70      	pop	{r4, r5, r6, pc}
  404b0c:	89a2      	ldrh	r2, [r4, #12]
  404b0e:	2300      	movs	r3, #0
  404b10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404b14:	6033      	str	r3, [r6, #0]
  404b16:	d004      	beq.n	404b22 <__swhatbuf_r+0x52>
  404b18:	2240      	movs	r2, #64	; 0x40
  404b1a:	4618      	mov	r0, r3
  404b1c:	602a      	str	r2, [r5, #0]
  404b1e:	b010      	add	sp, #64	; 0x40
  404b20:	bd70      	pop	{r4, r5, r6, pc}
  404b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404b26:	602b      	str	r3, [r5, #0]
  404b28:	b010      	add	sp, #64	; 0x40
  404b2a:	bd70      	pop	{r4, r5, r6, pc}

00404b2c <__smakebuf_r>:
  404b2c:	898a      	ldrh	r2, [r1, #12]
  404b2e:	0792      	lsls	r2, r2, #30
  404b30:	460b      	mov	r3, r1
  404b32:	d506      	bpl.n	404b42 <__smakebuf_r+0x16>
  404b34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404b38:	2101      	movs	r1, #1
  404b3a:	601a      	str	r2, [r3, #0]
  404b3c:	611a      	str	r2, [r3, #16]
  404b3e:	6159      	str	r1, [r3, #20]
  404b40:	4770      	bx	lr
  404b42:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b44:	b083      	sub	sp, #12
  404b46:	ab01      	add	r3, sp, #4
  404b48:	466a      	mov	r2, sp
  404b4a:	460c      	mov	r4, r1
  404b4c:	4606      	mov	r6, r0
  404b4e:	f7ff ffbf 	bl	404ad0 <__swhatbuf_r>
  404b52:	9900      	ldr	r1, [sp, #0]
  404b54:	4605      	mov	r5, r0
  404b56:	4630      	mov	r0, r6
  404b58:	f000 f83a 	bl	404bd0 <_malloc_r>
  404b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b60:	b1d8      	cbz	r0, 404b9a <__smakebuf_r+0x6e>
  404b62:	9a01      	ldr	r2, [sp, #4]
  404b64:	4f15      	ldr	r7, [pc, #84]	; (404bbc <__smakebuf_r+0x90>)
  404b66:	9900      	ldr	r1, [sp, #0]
  404b68:	63f7      	str	r7, [r6, #60]	; 0x3c
  404b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404b6e:	81a3      	strh	r3, [r4, #12]
  404b70:	6020      	str	r0, [r4, #0]
  404b72:	6120      	str	r0, [r4, #16]
  404b74:	6161      	str	r1, [r4, #20]
  404b76:	b91a      	cbnz	r2, 404b80 <__smakebuf_r+0x54>
  404b78:	432b      	orrs	r3, r5
  404b7a:	81a3      	strh	r3, [r4, #12]
  404b7c:	b003      	add	sp, #12
  404b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b80:	4630      	mov	r0, r6
  404b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404b86:	f000 ff37 	bl	4059f8 <_isatty_r>
  404b8a:	b1a0      	cbz	r0, 404bb6 <__smakebuf_r+0x8a>
  404b8c:	89a3      	ldrh	r3, [r4, #12]
  404b8e:	f023 0303 	bic.w	r3, r3, #3
  404b92:	f043 0301 	orr.w	r3, r3, #1
  404b96:	b21b      	sxth	r3, r3
  404b98:	e7ee      	b.n	404b78 <__smakebuf_r+0x4c>
  404b9a:	059a      	lsls	r2, r3, #22
  404b9c:	d4ee      	bmi.n	404b7c <__smakebuf_r+0x50>
  404b9e:	f023 0303 	bic.w	r3, r3, #3
  404ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404ba6:	f043 0302 	orr.w	r3, r3, #2
  404baa:	2101      	movs	r1, #1
  404bac:	81a3      	strh	r3, [r4, #12]
  404bae:	6022      	str	r2, [r4, #0]
  404bb0:	6122      	str	r2, [r4, #16]
  404bb2:	6161      	str	r1, [r4, #20]
  404bb4:	e7e2      	b.n	404b7c <__smakebuf_r+0x50>
  404bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bba:	e7dd      	b.n	404b78 <__smakebuf_r+0x4c>
  404bbc:	004042ed 	.word	0x004042ed

00404bc0 <malloc>:
  404bc0:	4b02      	ldr	r3, [pc, #8]	; (404bcc <malloc+0xc>)
  404bc2:	4601      	mov	r1, r0
  404bc4:	6818      	ldr	r0, [r3, #0]
  404bc6:	f000 b803 	b.w	404bd0 <_malloc_r>
  404bca:	bf00      	nop
  404bcc:	2040003c 	.word	0x2040003c

00404bd0 <_malloc_r>:
  404bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bd4:	f101 060b 	add.w	r6, r1, #11
  404bd8:	2e16      	cmp	r6, #22
  404bda:	b083      	sub	sp, #12
  404bdc:	4605      	mov	r5, r0
  404bde:	f240 809e 	bls.w	404d1e <_malloc_r+0x14e>
  404be2:	f036 0607 	bics.w	r6, r6, #7
  404be6:	f100 80bd 	bmi.w	404d64 <_malloc_r+0x194>
  404bea:	42b1      	cmp	r1, r6
  404bec:	f200 80ba 	bhi.w	404d64 <_malloc_r+0x194>
  404bf0:	f000 fb6a 	bl	4052c8 <__malloc_lock>
  404bf4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404bf8:	f0c0 8293 	bcc.w	405122 <_malloc_r+0x552>
  404bfc:	0a73      	lsrs	r3, r6, #9
  404bfe:	f000 80b8 	beq.w	404d72 <_malloc_r+0x1a2>
  404c02:	2b04      	cmp	r3, #4
  404c04:	f200 8179 	bhi.w	404efa <_malloc_r+0x32a>
  404c08:	09b3      	lsrs	r3, r6, #6
  404c0a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404c0e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404c12:	00c3      	lsls	r3, r0, #3
  404c14:	4fbf      	ldr	r7, [pc, #764]	; (404f14 <_malloc_r+0x344>)
  404c16:	443b      	add	r3, r7
  404c18:	f1a3 0108 	sub.w	r1, r3, #8
  404c1c:	685c      	ldr	r4, [r3, #4]
  404c1e:	42a1      	cmp	r1, r4
  404c20:	d106      	bne.n	404c30 <_malloc_r+0x60>
  404c22:	e00c      	b.n	404c3e <_malloc_r+0x6e>
  404c24:	2a00      	cmp	r2, #0
  404c26:	f280 80aa 	bge.w	404d7e <_malloc_r+0x1ae>
  404c2a:	68e4      	ldr	r4, [r4, #12]
  404c2c:	42a1      	cmp	r1, r4
  404c2e:	d006      	beq.n	404c3e <_malloc_r+0x6e>
  404c30:	6863      	ldr	r3, [r4, #4]
  404c32:	f023 0303 	bic.w	r3, r3, #3
  404c36:	1b9a      	subs	r2, r3, r6
  404c38:	2a0f      	cmp	r2, #15
  404c3a:	ddf3      	ble.n	404c24 <_malloc_r+0x54>
  404c3c:	4670      	mov	r0, lr
  404c3e:	693c      	ldr	r4, [r7, #16]
  404c40:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404f28 <_malloc_r+0x358>
  404c44:	4574      	cmp	r4, lr
  404c46:	f000 81ab 	beq.w	404fa0 <_malloc_r+0x3d0>
  404c4a:	6863      	ldr	r3, [r4, #4]
  404c4c:	f023 0303 	bic.w	r3, r3, #3
  404c50:	1b9a      	subs	r2, r3, r6
  404c52:	2a0f      	cmp	r2, #15
  404c54:	f300 8190 	bgt.w	404f78 <_malloc_r+0x3a8>
  404c58:	2a00      	cmp	r2, #0
  404c5a:	f8c7 e014 	str.w	lr, [r7, #20]
  404c5e:	f8c7 e010 	str.w	lr, [r7, #16]
  404c62:	f280 809d 	bge.w	404da0 <_malloc_r+0x1d0>
  404c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404c6a:	f080 8161 	bcs.w	404f30 <_malloc_r+0x360>
  404c6e:	08db      	lsrs	r3, r3, #3
  404c70:	f103 0c01 	add.w	ip, r3, #1
  404c74:	1099      	asrs	r1, r3, #2
  404c76:	687a      	ldr	r2, [r7, #4]
  404c78:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404c7c:	f8c4 8008 	str.w	r8, [r4, #8]
  404c80:	2301      	movs	r3, #1
  404c82:	408b      	lsls	r3, r1
  404c84:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404c88:	4313      	orrs	r3, r2
  404c8a:	3908      	subs	r1, #8
  404c8c:	60e1      	str	r1, [r4, #12]
  404c8e:	607b      	str	r3, [r7, #4]
  404c90:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404c94:	f8c8 400c 	str.w	r4, [r8, #12]
  404c98:	1082      	asrs	r2, r0, #2
  404c9a:	2401      	movs	r4, #1
  404c9c:	4094      	lsls	r4, r2
  404c9e:	429c      	cmp	r4, r3
  404ca0:	f200 808b 	bhi.w	404dba <_malloc_r+0x1ea>
  404ca4:	421c      	tst	r4, r3
  404ca6:	d106      	bne.n	404cb6 <_malloc_r+0xe6>
  404ca8:	f020 0003 	bic.w	r0, r0, #3
  404cac:	0064      	lsls	r4, r4, #1
  404cae:	421c      	tst	r4, r3
  404cb0:	f100 0004 	add.w	r0, r0, #4
  404cb4:	d0fa      	beq.n	404cac <_malloc_r+0xdc>
  404cb6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404cba:	46cc      	mov	ip, r9
  404cbc:	4680      	mov	r8, r0
  404cbe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404cc2:	459c      	cmp	ip, r3
  404cc4:	d107      	bne.n	404cd6 <_malloc_r+0x106>
  404cc6:	e16d      	b.n	404fa4 <_malloc_r+0x3d4>
  404cc8:	2a00      	cmp	r2, #0
  404cca:	f280 817b 	bge.w	404fc4 <_malloc_r+0x3f4>
  404cce:	68db      	ldr	r3, [r3, #12]
  404cd0:	459c      	cmp	ip, r3
  404cd2:	f000 8167 	beq.w	404fa4 <_malloc_r+0x3d4>
  404cd6:	6859      	ldr	r1, [r3, #4]
  404cd8:	f021 0103 	bic.w	r1, r1, #3
  404cdc:	1b8a      	subs	r2, r1, r6
  404cde:	2a0f      	cmp	r2, #15
  404ce0:	ddf2      	ble.n	404cc8 <_malloc_r+0xf8>
  404ce2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404ce6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404cea:	9300      	str	r3, [sp, #0]
  404cec:	199c      	adds	r4, r3, r6
  404cee:	4628      	mov	r0, r5
  404cf0:	f046 0601 	orr.w	r6, r6, #1
  404cf4:	f042 0501 	orr.w	r5, r2, #1
  404cf8:	605e      	str	r6, [r3, #4]
  404cfa:	f8c8 c00c 	str.w	ip, [r8, #12]
  404cfe:	f8cc 8008 	str.w	r8, [ip, #8]
  404d02:	617c      	str	r4, [r7, #20]
  404d04:	613c      	str	r4, [r7, #16]
  404d06:	f8c4 e00c 	str.w	lr, [r4, #12]
  404d0a:	f8c4 e008 	str.w	lr, [r4, #8]
  404d0e:	6065      	str	r5, [r4, #4]
  404d10:	505a      	str	r2, [r3, r1]
  404d12:	f000 fadf 	bl	4052d4 <__malloc_unlock>
  404d16:	9b00      	ldr	r3, [sp, #0]
  404d18:	f103 0408 	add.w	r4, r3, #8
  404d1c:	e01e      	b.n	404d5c <_malloc_r+0x18c>
  404d1e:	2910      	cmp	r1, #16
  404d20:	d820      	bhi.n	404d64 <_malloc_r+0x194>
  404d22:	f000 fad1 	bl	4052c8 <__malloc_lock>
  404d26:	2610      	movs	r6, #16
  404d28:	2318      	movs	r3, #24
  404d2a:	2002      	movs	r0, #2
  404d2c:	4f79      	ldr	r7, [pc, #484]	; (404f14 <_malloc_r+0x344>)
  404d2e:	443b      	add	r3, r7
  404d30:	f1a3 0208 	sub.w	r2, r3, #8
  404d34:	685c      	ldr	r4, [r3, #4]
  404d36:	4294      	cmp	r4, r2
  404d38:	f000 813d 	beq.w	404fb6 <_malloc_r+0x3e6>
  404d3c:	6863      	ldr	r3, [r4, #4]
  404d3e:	68e1      	ldr	r1, [r4, #12]
  404d40:	68a6      	ldr	r6, [r4, #8]
  404d42:	f023 0303 	bic.w	r3, r3, #3
  404d46:	4423      	add	r3, r4
  404d48:	4628      	mov	r0, r5
  404d4a:	685a      	ldr	r2, [r3, #4]
  404d4c:	60f1      	str	r1, [r6, #12]
  404d4e:	f042 0201 	orr.w	r2, r2, #1
  404d52:	608e      	str	r6, [r1, #8]
  404d54:	605a      	str	r2, [r3, #4]
  404d56:	f000 fabd 	bl	4052d4 <__malloc_unlock>
  404d5a:	3408      	adds	r4, #8
  404d5c:	4620      	mov	r0, r4
  404d5e:	b003      	add	sp, #12
  404d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d64:	2400      	movs	r4, #0
  404d66:	230c      	movs	r3, #12
  404d68:	4620      	mov	r0, r4
  404d6a:	602b      	str	r3, [r5, #0]
  404d6c:	b003      	add	sp, #12
  404d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d72:	2040      	movs	r0, #64	; 0x40
  404d74:	f44f 7300 	mov.w	r3, #512	; 0x200
  404d78:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404d7c:	e74a      	b.n	404c14 <_malloc_r+0x44>
  404d7e:	4423      	add	r3, r4
  404d80:	68e1      	ldr	r1, [r4, #12]
  404d82:	685a      	ldr	r2, [r3, #4]
  404d84:	68a6      	ldr	r6, [r4, #8]
  404d86:	f042 0201 	orr.w	r2, r2, #1
  404d8a:	60f1      	str	r1, [r6, #12]
  404d8c:	4628      	mov	r0, r5
  404d8e:	608e      	str	r6, [r1, #8]
  404d90:	605a      	str	r2, [r3, #4]
  404d92:	f000 fa9f 	bl	4052d4 <__malloc_unlock>
  404d96:	3408      	adds	r4, #8
  404d98:	4620      	mov	r0, r4
  404d9a:	b003      	add	sp, #12
  404d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404da0:	4423      	add	r3, r4
  404da2:	4628      	mov	r0, r5
  404da4:	685a      	ldr	r2, [r3, #4]
  404da6:	f042 0201 	orr.w	r2, r2, #1
  404daa:	605a      	str	r2, [r3, #4]
  404dac:	f000 fa92 	bl	4052d4 <__malloc_unlock>
  404db0:	3408      	adds	r4, #8
  404db2:	4620      	mov	r0, r4
  404db4:	b003      	add	sp, #12
  404db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dba:	68bc      	ldr	r4, [r7, #8]
  404dbc:	6863      	ldr	r3, [r4, #4]
  404dbe:	f023 0803 	bic.w	r8, r3, #3
  404dc2:	45b0      	cmp	r8, r6
  404dc4:	d304      	bcc.n	404dd0 <_malloc_r+0x200>
  404dc6:	eba8 0306 	sub.w	r3, r8, r6
  404dca:	2b0f      	cmp	r3, #15
  404dcc:	f300 8085 	bgt.w	404eda <_malloc_r+0x30a>
  404dd0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404f2c <_malloc_r+0x35c>
  404dd4:	4b50      	ldr	r3, [pc, #320]	; (404f18 <_malloc_r+0x348>)
  404dd6:	f8d9 2000 	ldr.w	r2, [r9]
  404dda:	681b      	ldr	r3, [r3, #0]
  404ddc:	3201      	adds	r2, #1
  404dde:	4433      	add	r3, r6
  404de0:	eb04 0a08 	add.w	sl, r4, r8
  404de4:	f000 8155 	beq.w	405092 <_malloc_r+0x4c2>
  404de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404dec:	330f      	adds	r3, #15
  404dee:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404df2:	f02b 0b0f 	bic.w	fp, fp, #15
  404df6:	4659      	mov	r1, fp
  404df8:	4628      	mov	r0, r5
  404dfa:	f000 fc17 	bl	40562c <_sbrk_r>
  404dfe:	1c41      	adds	r1, r0, #1
  404e00:	4602      	mov	r2, r0
  404e02:	f000 80fc 	beq.w	404ffe <_malloc_r+0x42e>
  404e06:	4582      	cmp	sl, r0
  404e08:	f200 80f7 	bhi.w	404ffa <_malloc_r+0x42a>
  404e0c:	4b43      	ldr	r3, [pc, #268]	; (404f1c <_malloc_r+0x34c>)
  404e0e:	6819      	ldr	r1, [r3, #0]
  404e10:	4459      	add	r1, fp
  404e12:	6019      	str	r1, [r3, #0]
  404e14:	f000 814d 	beq.w	4050b2 <_malloc_r+0x4e2>
  404e18:	f8d9 0000 	ldr.w	r0, [r9]
  404e1c:	3001      	adds	r0, #1
  404e1e:	bf1b      	ittet	ne
  404e20:	eba2 0a0a 	subne.w	sl, r2, sl
  404e24:	4451      	addne	r1, sl
  404e26:	f8c9 2000 	streq.w	r2, [r9]
  404e2a:	6019      	strne	r1, [r3, #0]
  404e2c:	f012 0107 	ands.w	r1, r2, #7
  404e30:	f000 8115 	beq.w	40505e <_malloc_r+0x48e>
  404e34:	f1c1 0008 	rsb	r0, r1, #8
  404e38:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404e3c:	4402      	add	r2, r0
  404e3e:	3108      	adds	r1, #8
  404e40:	eb02 090b 	add.w	r9, r2, fp
  404e44:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404e48:	eba1 0909 	sub.w	r9, r1, r9
  404e4c:	4649      	mov	r1, r9
  404e4e:	4628      	mov	r0, r5
  404e50:	9301      	str	r3, [sp, #4]
  404e52:	9200      	str	r2, [sp, #0]
  404e54:	f000 fbea 	bl	40562c <_sbrk_r>
  404e58:	1c43      	adds	r3, r0, #1
  404e5a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404e5e:	f000 8143 	beq.w	4050e8 <_malloc_r+0x518>
  404e62:	1a80      	subs	r0, r0, r2
  404e64:	4448      	add	r0, r9
  404e66:	f040 0001 	orr.w	r0, r0, #1
  404e6a:	6819      	ldr	r1, [r3, #0]
  404e6c:	60ba      	str	r2, [r7, #8]
  404e6e:	4449      	add	r1, r9
  404e70:	42bc      	cmp	r4, r7
  404e72:	6050      	str	r0, [r2, #4]
  404e74:	6019      	str	r1, [r3, #0]
  404e76:	d017      	beq.n	404ea8 <_malloc_r+0x2d8>
  404e78:	f1b8 0f0f 	cmp.w	r8, #15
  404e7c:	f240 80fb 	bls.w	405076 <_malloc_r+0x4a6>
  404e80:	6860      	ldr	r0, [r4, #4]
  404e82:	f1a8 020c 	sub.w	r2, r8, #12
  404e86:	f022 0207 	bic.w	r2, r2, #7
  404e8a:	eb04 0e02 	add.w	lr, r4, r2
  404e8e:	f000 0001 	and.w	r0, r0, #1
  404e92:	f04f 0c05 	mov.w	ip, #5
  404e96:	4310      	orrs	r0, r2
  404e98:	2a0f      	cmp	r2, #15
  404e9a:	6060      	str	r0, [r4, #4]
  404e9c:	f8ce c004 	str.w	ip, [lr, #4]
  404ea0:	f8ce c008 	str.w	ip, [lr, #8]
  404ea4:	f200 8117 	bhi.w	4050d6 <_malloc_r+0x506>
  404ea8:	4b1d      	ldr	r3, [pc, #116]	; (404f20 <_malloc_r+0x350>)
  404eaa:	68bc      	ldr	r4, [r7, #8]
  404eac:	681a      	ldr	r2, [r3, #0]
  404eae:	4291      	cmp	r1, r2
  404eb0:	bf88      	it	hi
  404eb2:	6019      	strhi	r1, [r3, #0]
  404eb4:	4b1b      	ldr	r3, [pc, #108]	; (404f24 <_malloc_r+0x354>)
  404eb6:	681a      	ldr	r2, [r3, #0]
  404eb8:	4291      	cmp	r1, r2
  404eba:	6862      	ldr	r2, [r4, #4]
  404ebc:	bf88      	it	hi
  404ebe:	6019      	strhi	r1, [r3, #0]
  404ec0:	f022 0203 	bic.w	r2, r2, #3
  404ec4:	4296      	cmp	r6, r2
  404ec6:	eba2 0306 	sub.w	r3, r2, r6
  404eca:	d801      	bhi.n	404ed0 <_malloc_r+0x300>
  404ecc:	2b0f      	cmp	r3, #15
  404ece:	dc04      	bgt.n	404eda <_malloc_r+0x30a>
  404ed0:	4628      	mov	r0, r5
  404ed2:	f000 f9ff 	bl	4052d4 <__malloc_unlock>
  404ed6:	2400      	movs	r4, #0
  404ed8:	e740      	b.n	404d5c <_malloc_r+0x18c>
  404eda:	19a2      	adds	r2, r4, r6
  404edc:	f043 0301 	orr.w	r3, r3, #1
  404ee0:	f046 0601 	orr.w	r6, r6, #1
  404ee4:	6066      	str	r6, [r4, #4]
  404ee6:	4628      	mov	r0, r5
  404ee8:	60ba      	str	r2, [r7, #8]
  404eea:	6053      	str	r3, [r2, #4]
  404eec:	f000 f9f2 	bl	4052d4 <__malloc_unlock>
  404ef0:	3408      	adds	r4, #8
  404ef2:	4620      	mov	r0, r4
  404ef4:	b003      	add	sp, #12
  404ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404efa:	2b14      	cmp	r3, #20
  404efc:	d971      	bls.n	404fe2 <_malloc_r+0x412>
  404efe:	2b54      	cmp	r3, #84	; 0x54
  404f00:	f200 80a3 	bhi.w	40504a <_malloc_r+0x47a>
  404f04:	0b33      	lsrs	r3, r6, #12
  404f06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404f0a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404f0e:	00c3      	lsls	r3, r0, #3
  404f10:	e680      	b.n	404c14 <_malloc_r+0x44>
  404f12:	bf00      	nop
  404f14:	204005d8 	.word	0x204005d8
  404f18:	204072e4 	.word	0x204072e4
  404f1c:	204072b4 	.word	0x204072b4
  404f20:	204072dc 	.word	0x204072dc
  404f24:	204072e0 	.word	0x204072e0
  404f28:	204005e0 	.word	0x204005e0
  404f2c:	204009e0 	.word	0x204009e0
  404f30:	0a5a      	lsrs	r2, r3, #9
  404f32:	2a04      	cmp	r2, #4
  404f34:	d95b      	bls.n	404fee <_malloc_r+0x41e>
  404f36:	2a14      	cmp	r2, #20
  404f38:	f200 80ae 	bhi.w	405098 <_malloc_r+0x4c8>
  404f3c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404f40:	00c9      	lsls	r1, r1, #3
  404f42:	325b      	adds	r2, #91	; 0x5b
  404f44:	eb07 0c01 	add.w	ip, r7, r1
  404f48:	5879      	ldr	r1, [r7, r1]
  404f4a:	f1ac 0c08 	sub.w	ip, ip, #8
  404f4e:	458c      	cmp	ip, r1
  404f50:	f000 8088 	beq.w	405064 <_malloc_r+0x494>
  404f54:	684a      	ldr	r2, [r1, #4]
  404f56:	f022 0203 	bic.w	r2, r2, #3
  404f5a:	4293      	cmp	r3, r2
  404f5c:	d273      	bcs.n	405046 <_malloc_r+0x476>
  404f5e:	6889      	ldr	r1, [r1, #8]
  404f60:	458c      	cmp	ip, r1
  404f62:	d1f7      	bne.n	404f54 <_malloc_r+0x384>
  404f64:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404f68:	687b      	ldr	r3, [r7, #4]
  404f6a:	60e2      	str	r2, [r4, #12]
  404f6c:	f8c4 c008 	str.w	ip, [r4, #8]
  404f70:	6094      	str	r4, [r2, #8]
  404f72:	f8cc 400c 	str.w	r4, [ip, #12]
  404f76:	e68f      	b.n	404c98 <_malloc_r+0xc8>
  404f78:	19a1      	adds	r1, r4, r6
  404f7a:	f046 0c01 	orr.w	ip, r6, #1
  404f7e:	f042 0601 	orr.w	r6, r2, #1
  404f82:	f8c4 c004 	str.w	ip, [r4, #4]
  404f86:	4628      	mov	r0, r5
  404f88:	6179      	str	r1, [r7, #20]
  404f8a:	6139      	str	r1, [r7, #16]
  404f8c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404f90:	f8c1 e008 	str.w	lr, [r1, #8]
  404f94:	604e      	str	r6, [r1, #4]
  404f96:	50e2      	str	r2, [r4, r3]
  404f98:	f000 f99c 	bl	4052d4 <__malloc_unlock>
  404f9c:	3408      	adds	r4, #8
  404f9e:	e6dd      	b.n	404d5c <_malloc_r+0x18c>
  404fa0:	687b      	ldr	r3, [r7, #4]
  404fa2:	e679      	b.n	404c98 <_malloc_r+0xc8>
  404fa4:	f108 0801 	add.w	r8, r8, #1
  404fa8:	f018 0f03 	tst.w	r8, #3
  404fac:	f10c 0c08 	add.w	ip, ip, #8
  404fb0:	f47f ae85 	bne.w	404cbe <_malloc_r+0xee>
  404fb4:	e02d      	b.n	405012 <_malloc_r+0x442>
  404fb6:	68dc      	ldr	r4, [r3, #12]
  404fb8:	42a3      	cmp	r3, r4
  404fba:	bf08      	it	eq
  404fbc:	3002      	addeq	r0, #2
  404fbe:	f43f ae3e 	beq.w	404c3e <_malloc_r+0x6e>
  404fc2:	e6bb      	b.n	404d3c <_malloc_r+0x16c>
  404fc4:	4419      	add	r1, r3
  404fc6:	461c      	mov	r4, r3
  404fc8:	684a      	ldr	r2, [r1, #4]
  404fca:	68db      	ldr	r3, [r3, #12]
  404fcc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404fd0:	f042 0201 	orr.w	r2, r2, #1
  404fd4:	604a      	str	r2, [r1, #4]
  404fd6:	4628      	mov	r0, r5
  404fd8:	60f3      	str	r3, [r6, #12]
  404fda:	609e      	str	r6, [r3, #8]
  404fdc:	f000 f97a 	bl	4052d4 <__malloc_unlock>
  404fe0:	e6bc      	b.n	404d5c <_malloc_r+0x18c>
  404fe2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404fe6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404fea:	00c3      	lsls	r3, r0, #3
  404fec:	e612      	b.n	404c14 <_malloc_r+0x44>
  404fee:	099a      	lsrs	r2, r3, #6
  404ff0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404ff4:	00c9      	lsls	r1, r1, #3
  404ff6:	3238      	adds	r2, #56	; 0x38
  404ff8:	e7a4      	b.n	404f44 <_malloc_r+0x374>
  404ffa:	42bc      	cmp	r4, r7
  404ffc:	d054      	beq.n	4050a8 <_malloc_r+0x4d8>
  404ffe:	68bc      	ldr	r4, [r7, #8]
  405000:	6862      	ldr	r2, [r4, #4]
  405002:	f022 0203 	bic.w	r2, r2, #3
  405006:	e75d      	b.n	404ec4 <_malloc_r+0x2f4>
  405008:	f859 3908 	ldr.w	r3, [r9], #-8
  40500c:	4599      	cmp	r9, r3
  40500e:	f040 8086 	bne.w	40511e <_malloc_r+0x54e>
  405012:	f010 0f03 	tst.w	r0, #3
  405016:	f100 30ff 	add.w	r0, r0, #4294967295
  40501a:	d1f5      	bne.n	405008 <_malloc_r+0x438>
  40501c:	687b      	ldr	r3, [r7, #4]
  40501e:	ea23 0304 	bic.w	r3, r3, r4
  405022:	607b      	str	r3, [r7, #4]
  405024:	0064      	lsls	r4, r4, #1
  405026:	429c      	cmp	r4, r3
  405028:	f63f aec7 	bhi.w	404dba <_malloc_r+0x1ea>
  40502c:	2c00      	cmp	r4, #0
  40502e:	f43f aec4 	beq.w	404dba <_malloc_r+0x1ea>
  405032:	421c      	tst	r4, r3
  405034:	4640      	mov	r0, r8
  405036:	f47f ae3e 	bne.w	404cb6 <_malloc_r+0xe6>
  40503a:	0064      	lsls	r4, r4, #1
  40503c:	421c      	tst	r4, r3
  40503e:	f100 0004 	add.w	r0, r0, #4
  405042:	d0fa      	beq.n	40503a <_malloc_r+0x46a>
  405044:	e637      	b.n	404cb6 <_malloc_r+0xe6>
  405046:	468c      	mov	ip, r1
  405048:	e78c      	b.n	404f64 <_malloc_r+0x394>
  40504a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40504e:	d815      	bhi.n	40507c <_malloc_r+0x4ac>
  405050:	0bf3      	lsrs	r3, r6, #15
  405052:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405056:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40505a:	00c3      	lsls	r3, r0, #3
  40505c:	e5da      	b.n	404c14 <_malloc_r+0x44>
  40505e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405062:	e6ed      	b.n	404e40 <_malloc_r+0x270>
  405064:	687b      	ldr	r3, [r7, #4]
  405066:	1092      	asrs	r2, r2, #2
  405068:	2101      	movs	r1, #1
  40506a:	fa01 f202 	lsl.w	r2, r1, r2
  40506e:	4313      	orrs	r3, r2
  405070:	607b      	str	r3, [r7, #4]
  405072:	4662      	mov	r2, ip
  405074:	e779      	b.n	404f6a <_malloc_r+0x39a>
  405076:	2301      	movs	r3, #1
  405078:	6053      	str	r3, [r2, #4]
  40507a:	e729      	b.n	404ed0 <_malloc_r+0x300>
  40507c:	f240 5254 	movw	r2, #1364	; 0x554
  405080:	4293      	cmp	r3, r2
  405082:	d822      	bhi.n	4050ca <_malloc_r+0x4fa>
  405084:	0cb3      	lsrs	r3, r6, #18
  405086:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40508a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40508e:	00c3      	lsls	r3, r0, #3
  405090:	e5c0      	b.n	404c14 <_malloc_r+0x44>
  405092:	f103 0b10 	add.w	fp, r3, #16
  405096:	e6ae      	b.n	404df6 <_malloc_r+0x226>
  405098:	2a54      	cmp	r2, #84	; 0x54
  40509a:	d829      	bhi.n	4050f0 <_malloc_r+0x520>
  40509c:	0b1a      	lsrs	r2, r3, #12
  40509e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4050a2:	00c9      	lsls	r1, r1, #3
  4050a4:	326e      	adds	r2, #110	; 0x6e
  4050a6:	e74d      	b.n	404f44 <_malloc_r+0x374>
  4050a8:	4b20      	ldr	r3, [pc, #128]	; (40512c <_malloc_r+0x55c>)
  4050aa:	6819      	ldr	r1, [r3, #0]
  4050ac:	4459      	add	r1, fp
  4050ae:	6019      	str	r1, [r3, #0]
  4050b0:	e6b2      	b.n	404e18 <_malloc_r+0x248>
  4050b2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4050b6:	2800      	cmp	r0, #0
  4050b8:	f47f aeae 	bne.w	404e18 <_malloc_r+0x248>
  4050bc:	eb08 030b 	add.w	r3, r8, fp
  4050c0:	68ba      	ldr	r2, [r7, #8]
  4050c2:	f043 0301 	orr.w	r3, r3, #1
  4050c6:	6053      	str	r3, [r2, #4]
  4050c8:	e6ee      	b.n	404ea8 <_malloc_r+0x2d8>
  4050ca:	207f      	movs	r0, #127	; 0x7f
  4050cc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4050d0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4050d4:	e59e      	b.n	404c14 <_malloc_r+0x44>
  4050d6:	f104 0108 	add.w	r1, r4, #8
  4050da:	4628      	mov	r0, r5
  4050dc:	9300      	str	r3, [sp, #0]
  4050de:	f7ff fa59 	bl	404594 <_free_r>
  4050e2:	9b00      	ldr	r3, [sp, #0]
  4050e4:	6819      	ldr	r1, [r3, #0]
  4050e6:	e6df      	b.n	404ea8 <_malloc_r+0x2d8>
  4050e8:	2001      	movs	r0, #1
  4050ea:	f04f 0900 	mov.w	r9, #0
  4050ee:	e6bc      	b.n	404e6a <_malloc_r+0x29a>
  4050f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4050f4:	d805      	bhi.n	405102 <_malloc_r+0x532>
  4050f6:	0bda      	lsrs	r2, r3, #15
  4050f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4050fc:	00c9      	lsls	r1, r1, #3
  4050fe:	3277      	adds	r2, #119	; 0x77
  405100:	e720      	b.n	404f44 <_malloc_r+0x374>
  405102:	f240 5154 	movw	r1, #1364	; 0x554
  405106:	428a      	cmp	r2, r1
  405108:	d805      	bhi.n	405116 <_malloc_r+0x546>
  40510a:	0c9a      	lsrs	r2, r3, #18
  40510c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405110:	00c9      	lsls	r1, r1, #3
  405112:	327c      	adds	r2, #124	; 0x7c
  405114:	e716      	b.n	404f44 <_malloc_r+0x374>
  405116:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40511a:	227e      	movs	r2, #126	; 0x7e
  40511c:	e712      	b.n	404f44 <_malloc_r+0x374>
  40511e:	687b      	ldr	r3, [r7, #4]
  405120:	e780      	b.n	405024 <_malloc_r+0x454>
  405122:	08f0      	lsrs	r0, r6, #3
  405124:	f106 0308 	add.w	r3, r6, #8
  405128:	e600      	b.n	404d2c <_malloc_r+0x15c>
  40512a:	bf00      	nop
  40512c:	204072b4 	.word	0x204072b4

00405130 <__ascii_mbtowc>:
  405130:	b082      	sub	sp, #8
  405132:	b149      	cbz	r1, 405148 <__ascii_mbtowc+0x18>
  405134:	b15a      	cbz	r2, 40514e <__ascii_mbtowc+0x1e>
  405136:	b16b      	cbz	r3, 405154 <__ascii_mbtowc+0x24>
  405138:	7813      	ldrb	r3, [r2, #0]
  40513a:	600b      	str	r3, [r1, #0]
  40513c:	7812      	ldrb	r2, [r2, #0]
  40513e:	1c10      	adds	r0, r2, #0
  405140:	bf18      	it	ne
  405142:	2001      	movne	r0, #1
  405144:	b002      	add	sp, #8
  405146:	4770      	bx	lr
  405148:	a901      	add	r1, sp, #4
  40514a:	2a00      	cmp	r2, #0
  40514c:	d1f3      	bne.n	405136 <__ascii_mbtowc+0x6>
  40514e:	4610      	mov	r0, r2
  405150:	b002      	add	sp, #8
  405152:	4770      	bx	lr
  405154:	f06f 0001 	mvn.w	r0, #1
  405158:	e7f4      	b.n	405144 <__ascii_mbtowc+0x14>
  40515a:	bf00      	nop
  40515c:	0000      	movs	r0, r0
	...

00405160 <memchr>:
  405160:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405164:	2a10      	cmp	r2, #16
  405166:	db2b      	blt.n	4051c0 <memchr+0x60>
  405168:	f010 0f07 	tst.w	r0, #7
  40516c:	d008      	beq.n	405180 <memchr+0x20>
  40516e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405172:	3a01      	subs	r2, #1
  405174:	428b      	cmp	r3, r1
  405176:	d02d      	beq.n	4051d4 <memchr+0x74>
  405178:	f010 0f07 	tst.w	r0, #7
  40517c:	b342      	cbz	r2, 4051d0 <memchr+0x70>
  40517e:	d1f6      	bne.n	40516e <memchr+0xe>
  405180:	b4f0      	push	{r4, r5, r6, r7}
  405182:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405186:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40518a:	f022 0407 	bic.w	r4, r2, #7
  40518e:	f07f 0700 	mvns.w	r7, #0
  405192:	2300      	movs	r3, #0
  405194:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405198:	3c08      	subs	r4, #8
  40519a:	ea85 0501 	eor.w	r5, r5, r1
  40519e:	ea86 0601 	eor.w	r6, r6, r1
  4051a2:	fa85 f547 	uadd8	r5, r5, r7
  4051a6:	faa3 f587 	sel	r5, r3, r7
  4051aa:	fa86 f647 	uadd8	r6, r6, r7
  4051ae:	faa5 f687 	sel	r6, r5, r7
  4051b2:	b98e      	cbnz	r6, 4051d8 <memchr+0x78>
  4051b4:	d1ee      	bne.n	405194 <memchr+0x34>
  4051b6:	bcf0      	pop	{r4, r5, r6, r7}
  4051b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4051bc:	f002 0207 	and.w	r2, r2, #7
  4051c0:	b132      	cbz	r2, 4051d0 <memchr+0x70>
  4051c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4051c6:	3a01      	subs	r2, #1
  4051c8:	ea83 0301 	eor.w	r3, r3, r1
  4051cc:	b113      	cbz	r3, 4051d4 <memchr+0x74>
  4051ce:	d1f8      	bne.n	4051c2 <memchr+0x62>
  4051d0:	2000      	movs	r0, #0
  4051d2:	4770      	bx	lr
  4051d4:	3801      	subs	r0, #1
  4051d6:	4770      	bx	lr
  4051d8:	2d00      	cmp	r5, #0
  4051da:	bf06      	itte	eq
  4051dc:	4635      	moveq	r5, r6
  4051de:	3803      	subeq	r0, #3
  4051e0:	3807      	subne	r0, #7
  4051e2:	f015 0f01 	tst.w	r5, #1
  4051e6:	d107      	bne.n	4051f8 <memchr+0x98>
  4051e8:	3001      	adds	r0, #1
  4051ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4051ee:	bf02      	ittt	eq
  4051f0:	3001      	addeq	r0, #1
  4051f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4051f6:	3001      	addeq	r0, #1
  4051f8:	bcf0      	pop	{r4, r5, r6, r7}
  4051fa:	3801      	subs	r0, #1
  4051fc:	4770      	bx	lr
  4051fe:	bf00      	nop

00405200 <memmove>:
  405200:	4288      	cmp	r0, r1
  405202:	b5f0      	push	{r4, r5, r6, r7, lr}
  405204:	d90d      	bls.n	405222 <memmove+0x22>
  405206:	188b      	adds	r3, r1, r2
  405208:	4298      	cmp	r0, r3
  40520a:	d20a      	bcs.n	405222 <memmove+0x22>
  40520c:	1884      	adds	r4, r0, r2
  40520e:	2a00      	cmp	r2, #0
  405210:	d051      	beq.n	4052b6 <memmove+0xb6>
  405212:	4622      	mov	r2, r4
  405214:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405218:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40521c:	4299      	cmp	r1, r3
  40521e:	d1f9      	bne.n	405214 <memmove+0x14>
  405220:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405222:	2a0f      	cmp	r2, #15
  405224:	d948      	bls.n	4052b8 <memmove+0xb8>
  405226:	ea41 0300 	orr.w	r3, r1, r0
  40522a:	079b      	lsls	r3, r3, #30
  40522c:	d146      	bne.n	4052bc <memmove+0xbc>
  40522e:	f100 0410 	add.w	r4, r0, #16
  405232:	f101 0310 	add.w	r3, r1, #16
  405236:	4615      	mov	r5, r2
  405238:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40523c:	f844 6c10 	str.w	r6, [r4, #-16]
  405240:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405244:	f844 6c0c 	str.w	r6, [r4, #-12]
  405248:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40524c:	f844 6c08 	str.w	r6, [r4, #-8]
  405250:	3d10      	subs	r5, #16
  405252:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405256:	f844 6c04 	str.w	r6, [r4, #-4]
  40525a:	2d0f      	cmp	r5, #15
  40525c:	f103 0310 	add.w	r3, r3, #16
  405260:	f104 0410 	add.w	r4, r4, #16
  405264:	d8e8      	bhi.n	405238 <memmove+0x38>
  405266:	f1a2 0310 	sub.w	r3, r2, #16
  40526a:	f023 030f 	bic.w	r3, r3, #15
  40526e:	f002 0e0f 	and.w	lr, r2, #15
  405272:	3310      	adds	r3, #16
  405274:	f1be 0f03 	cmp.w	lr, #3
  405278:	4419      	add	r1, r3
  40527a:	4403      	add	r3, r0
  40527c:	d921      	bls.n	4052c2 <memmove+0xc2>
  40527e:	1f1e      	subs	r6, r3, #4
  405280:	460d      	mov	r5, r1
  405282:	4674      	mov	r4, lr
  405284:	3c04      	subs	r4, #4
  405286:	f855 7b04 	ldr.w	r7, [r5], #4
  40528a:	f846 7f04 	str.w	r7, [r6, #4]!
  40528e:	2c03      	cmp	r4, #3
  405290:	d8f8      	bhi.n	405284 <memmove+0x84>
  405292:	f1ae 0404 	sub.w	r4, lr, #4
  405296:	f024 0403 	bic.w	r4, r4, #3
  40529a:	3404      	adds	r4, #4
  40529c:	4421      	add	r1, r4
  40529e:	4423      	add	r3, r4
  4052a0:	f002 0203 	and.w	r2, r2, #3
  4052a4:	b162      	cbz	r2, 4052c0 <memmove+0xc0>
  4052a6:	3b01      	subs	r3, #1
  4052a8:	440a      	add	r2, r1
  4052aa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4052ae:	f803 4f01 	strb.w	r4, [r3, #1]!
  4052b2:	428a      	cmp	r2, r1
  4052b4:	d1f9      	bne.n	4052aa <memmove+0xaa>
  4052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4052b8:	4603      	mov	r3, r0
  4052ba:	e7f3      	b.n	4052a4 <memmove+0xa4>
  4052bc:	4603      	mov	r3, r0
  4052be:	e7f2      	b.n	4052a6 <memmove+0xa6>
  4052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4052c2:	4672      	mov	r2, lr
  4052c4:	e7ee      	b.n	4052a4 <memmove+0xa4>
  4052c6:	bf00      	nop

004052c8 <__malloc_lock>:
  4052c8:	4801      	ldr	r0, [pc, #4]	; (4052d0 <__malloc_lock+0x8>)
  4052ca:	f7ff bbfd 	b.w	404ac8 <__retarget_lock_acquire_recursive>
  4052ce:	bf00      	nop
  4052d0:	204084fc 	.word	0x204084fc

004052d4 <__malloc_unlock>:
  4052d4:	4801      	ldr	r0, [pc, #4]	; (4052dc <__malloc_unlock+0x8>)
  4052d6:	f7ff bbf9 	b.w	404acc <__retarget_lock_release_recursive>
  4052da:	bf00      	nop
  4052dc:	204084fc 	.word	0x204084fc

004052e0 <_realloc_r>:
  4052e0:	2900      	cmp	r1, #0
  4052e2:	f000 8095 	beq.w	405410 <_realloc_r+0x130>
  4052e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052ea:	460d      	mov	r5, r1
  4052ec:	4616      	mov	r6, r2
  4052ee:	b083      	sub	sp, #12
  4052f0:	4680      	mov	r8, r0
  4052f2:	f106 070b 	add.w	r7, r6, #11
  4052f6:	f7ff ffe7 	bl	4052c8 <__malloc_lock>
  4052fa:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4052fe:	2f16      	cmp	r7, #22
  405300:	f02e 0403 	bic.w	r4, lr, #3
  405304:	f1a5 0908 	sub.w	r9, r5, #8
  405308:	d83c      	bhi.n	405384 <_realloc_r+0xa4>
  40530a:	2210      	movs	r2, #16
  40530c:	4617      	mov	r7, r2
  40530e:	42be      	cmp	r6, r7
  405310:	d83d      	bhi.n	40538e <_realloc_r+0xae>
  405312:	4294      	cmp	r4, r2
  405314:	da43      	bge.n	40539e <_realloc_r+0xbe>
  405316:	4bc4      	ldr	r3, [pc, #784]	; (405628 <_realloc_r+0x348>)
  405318:	6899      	ldr	r1, [r3, #8]
  40531a:	eb09 0004 	add.w	r0, r9, r4
  40531e:	4288      	cmp	r0, r1
  405320:	f000 80b4 	beq.w	40548c <_realloc_r+0x1ac>
  405324:	6843      	ldr	r3, [r0, #4]
  405326:	f023 0101 	bic.w	r1, r3, #1
  40532a:	4401      	add	r1, r0
  40532c:	6849      	ldr	r1, [r1, #4]
  40532e:	07c9      	lsls	r1, r1, #31
  405330:	d54c      	bpl.n	4053cc <_realloc_r+0xec>
  405332:	f01e 0f01 	tst.w	lr, #1
  405336:	f000 809b 	beq.w	405470 <_realloc_r+0x190>
  40533a:	4631      	mov	r1, r6
  40533c:	4640      	mov	r0, r8
  40533e:	f7ff fc47 	bl	404bd0 <_malloc_r>
  405342:	4606      	mov	r6, r0
  405344:	2800      	cmp	r0, #0
  405346:	d03a      	beq.n	4053be <_realloc_r+0xde>
  405348:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40534c:	f023 0301 	bic.w	r3, r3, #1
  405350:	444b      	add	r3, r9
  405352:	f1a0 0208 	sub.w	r2, r0, #8
  405356:	429a      	cmp	r2, r3
  405358:	f000 8121 	beq.w	40559e <_realloc_r+0x2be>
  40535c:	1f22      	subs	r2, r4, #4
  40535e:	2a24      	cmp	r2, #36	; 0x24
  405360:	f200 8107 	bhi.w	405572 <_realloc_r+0x292>
  405364:	2a13      	cmp	r2, #19
  405366:	f200 80db 	bhi.w	405520 <_realloc_r+0x240>
  40536a:	4603      	mov	r3, r0
  40536c:	462a      	mov	r2, r5
  40536e:	6811      	ldr	r1, [r2, #0]
  405370:	6019      	str	r1, [r3, #0]
  405372:	6851      	ldr	r1, [r2, #4]
  405374:	6059      	str	r1, [r3, #4]
  405376:	6892      	ldr	r2, [r2, #8]
  405378:	609a      	str	r2, [r3, #8]
  40537a:	4629      	mov	r1, r5
  40537c:	4640      	mov	r0, r8
  40537e:	f7ff f909 	bl	404594 <_free_r>
  405382:	e01c      	b.n	4053be <_realloc_r+0xde>
  405384:	f027 0707 	bic.w	r7, r7, #7
  405388:	2f00      	cmp	r7, #0
  40538a:	463a      	mov	r2, r7
  40538c:	dabf      	bge.n	40530e <_realloc_r+0x2e>
  40538e:	2600      	movs	r6, #0
  405390:	230c      	movs	r3, #12
  405392:	4630      	mov	r0, r6
  405394:	f8c8 3000 	str.w	r3, [r8]
  405398:	b003      	add	sp, #12
  40539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40539e:	462e      	mov	r6, r5
  4053a0:	1be3      	subs	r3, r4, r7
  4053a2:	2b0f      	cmp	r3, #15
  4053a4:	d81e      	bhi.n	4053e4 <_realloc_r+0x104>
  4053a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4053aa:	f003 0301 	and.w	r3, r3, #1
  4053ae:	4323      	orrs	r3, r4
  4053b0:	444c      	add	r4, r9
  4053b2:	f8c9 3004 	str.w	r3, [r9, #4]
  4053b6:	6863      	ldr	r3, [r4, #4]
  4053b8:	f043 0301 	orr.w	r3, r3, #1
  4053bc:	6063      	str	r3, [r4, #4]
  4053be:	4640      	mov	r0, r8
  4053c0:	f7ff ff88 	bl	4052d4 <__malloc_unlock>
  4053c4:	4630      	mov	r0, r6
  4053c6:	b003      	add	sp, #12
  4053c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053cc:	f023 0303 	bic.w	r3, r3, #3
  4053d0:	18e1      	adds	r1, r4, r3
  4053d2:	4291      	cmp	r1, r2
  4053d4:	db1f      	blt.n	405416 <_realloc_r+0x136>
  4053d6:	68c3      	ldr	r3, [r0, #12]
  4053d8:	6882      	ldr	r2, [r0, #8]
  4053da:	462e      	mov	r6, r5
  4053dc:	60d3      	str	r3, [r2, #12]
  4053de:	460c      	mov	r4, r1
  4053e0:	609a      	str	r2, [r3, #8]
  4053e2:	e7dd      	b.n	4053a0 <_realloc_r+0xc0>
  4053e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4053e8:	eb09 0107 	add.w	r1, r9, r7
  4053ec:	f002 0201 	and.w	r2, r2, #1
  4053f0:	444c      	add	r4, r9
  4053f2:	f043 0301 	orr.w	r3, r3, #1
  4053f6:	4317      	orrs	r7, r2
  4053f8:	f8c9 7004 	str.w	r7, [r9, #4]
  4053fc:	604b      	str	r3, [r1, #4]
  4053fe:	6863      	ldr	r3, [r4, #4]
  405400:	f043 0301 	orr.w	r3, r3, #1
  405404:	3108      	adds	r1, #8
  405406:	6063      	str	r3, [r4, #4]
  405408:	4640      	mov	r0, r8
  40540a:	f7ff f8c3 	bl	404594 <_free_r>
  40540e:	e7d6      	b.n	4053be <_realloc_r+0xde>
  405410:	4611      	mov	r1, r2
  405412:	f7ff bbdd 	b.w	404bd0 <_malloc_r>
  405416:	f01e 0f01 	tst.w	lr, #1
  40541a:	d18e      	bne.n	40533a <_realloc_r+0x5a>
  40541c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405420:	eba9 0a01 	sub.w	sl, r9, r1
  405424:	f8da 1004 	ldr.w	r1, [sl, #4]
  405428:	f021 0103 	bic.w	r1, r1, #3
  40542c:	440b      	add	r3, r1
  40542e:	4423      	add	r3, r4
  405430:	4293      	cmp	r3, r2
  405432:	db25      	blt.n	405480 <_realloc_r+0x1a0>
  405434:	68c2      	ldr	r2, [r0, #12]
  405436:	6881      	ldr	r1, [r0, #8]
  405438:	4656      	mov	r6, sl
  40543a:	60ca      	str	r2, [r1, #12]
  40543c:	6091      	str	r1, [r2, #8]
  40543e:	f8da 100c 	ldr.w	r1, [sl, #12]
  405442:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405446:	1f22      	subs	r2, r4, #4
  405448:	2a24      	cmp	r2, #36	; 0x24
  40544a:	60c1      	str	r1, [r0, #12]
  40544c:	6088      	str	r0, [r1, #8]
  40544e:	f200 8094 	bhi.w	40557a <_realloc_r+0x29a>
  405452:	2a13      	cmp	r2, #19
  405454:	d96f      	bls.n	405536 <_realloc_r+0x256>
  405456:	6829      	ldr	r1, [r5, #0]
  405458:	f8ca 1008 	str.w	r1, [sl, #8]
  40545c:	6869      	ldr	r1, [r5, #4]
  40545e:	f8ca 100c 	str.w	r1, [sl, #12]
  405462:	2a1b      	cmp	r2, #27
  405464:	f200 80a2 	bhi.w	4055ac <_realloc_r+0x2cc>
  405468:	3508      	adds	r5, #8
  40546a:	f10a 0210 	add.w	r2, sl, #16
  40546e:	e063      	b.n	405538 <_realloc_r+0x258>
  405470:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405474:	eba9 0a03 	sub.w	sl, r9, r3
  405478:	f8da 1004 	ldr.w	r1, [sl, #4]
  40547c:	f021 0103 	bic.w	r1, r1, #3
  405480:	1863      	adds	r3, r4, r1
  405482:	4293      	cmp	r3, r2
  405484:	f6ff af59 	blt.w	40533a <_realloc_r+0x5a>
  405488:	4656      	mov	r6, sl
  40548a:	e7d8      	b.n	40543e <_realloc_r+0x15e>
  40548c:	6841      	ldr	r1, [r0, #4]
  40548e:	f021 0b03 	bic.w	fp, r1, #3
  405492:	44a3      	add	fp, r4
  405494:	f107 0010 	add.w	r0, r7, #16
  405498:	4583      	cmp	fp, r0
  40549a:	da56      	bge.n	40554a <_realloc_r+0x26a>
  40549c:	f01e 0f01 	tst.w	lr, #1
  4054a0:	f47f af4b 	bne.w	40533a <_realloc_r+0x5a>
  4054a4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4054a8:	eba9 0a01 	sub.w	sl, r9, r1
  4054ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4054b0:	f021 0103 	bic.w	r1, r1, #3
  4054b4:	448b      	add	fp, r1
  4054b6:	4558      	cmp	r0, fp
  4054b8:	dce2      	bgt.n	405480 <_realloc_r+0x1a0>
  4054ba:	4656      	mov	r6, sl
  4054bc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4054c0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4054c4:	1f22      	subs	r2, r4, #4
  4054c6:	2a24      	cmp	r2, #36	; 0x24
  4054c8:	60c1      	str	r1, [r0, #12]
  4054ca:	6088      	str	r0, [r1, #8]
  4054cc:	f200 808f 	bhi.w	4055ee <_realloc_r+0x30e>
  4054d0:	2a13      	cmp	r2, #19
  4054d2:	f240 808a 	bls.w	4055ea <_realloc_r+0x30a>
  4054d6:	6829      	ldr	r1, [r5, #0]
  4054d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4054dc:	6869      	ldr	r1, [r5, #4]
  4054de:	f8ca 100c 	str.w	r1, [sl, #12]
  4054e2:	2a1b      	cmp	r2, #27
  4054e4:	f200 808a 	bhi.w	4055fc <_realloc_r+0x31c>
  4054e8:	3508      	adds	r5, #8
  4054ea:	f10a 0210 	add.w	r2, sl, #16
  4054ee:	6829      	ldr	r1, [r5, #0]
  4054f0:	6011      	str	r1, [r2, #0]
  4054f2:	6869      	ldr	r1, [r5, #4]
  4054f4:	6051      	str	r1, [r2, #4]
  4054f6:	68a9      	ldr	r1, [r5, #8]
  4054f8:	6091      	str	r1, [r2, #8]
  4054fa:	eb0a 0107 	add.w	r1, sl, r7
  4054fe:	ebab 0207 	sub.w	r2, fp, r7
  405502:	f042 0201 	orr.w	r2, r2, #1
  405506:	6099      	str	r1, [r3, #8]
  405508:	604a      	str	r2, [r1, #4]
  40550a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40550e:	f003 0301 	and.w	r3, r3, #1
  405512:	431f      	orrs	r7, r3
  405514:	4640      	mov	r0, r8
  405516:	f8ca 7004 	str.w	r7, [sl, #4]
  40551a:	f7ff fedb 	bl	4052d4 <__malloc_unlock>
  40551e:	e751      	b.n	4053c4 <_realloc_r+0xe4>
  405520:	682b      	ldr	r3, [r5, #0]
  405522:	6003      	str	r3, [r0, #0]
  405524:	686b      	ldr	r3, [r5, #4]
  405526:	6043      	str	r3, [r0, #4]
  405528:	2a1b      	cmp	r2, #27
  40552a:	d82d      	bhi.n	405588 <_realloc_r+0x2a8>
  40552c:	f100 0308 	add.w	r3, r0, #8
  405530:	f105 0208 	add.w	r2, r5, #8
  405534:	e71b      	b.n	40536e <_realloc_r+0x8e>
  405536:	4632      	mov	r2, r6
  405538:	6829      	ldr	r1, [r5, #0]
  40553a:	6011      	str	r1, [r2, #0]
  40553c:	6869      	ldr	r1, [r5, #4]
  40553e:	6051      	str	r1, [r2, #4]
  405540:	68a9      	ldr	r1, [r5, #8]
  405542:	6091      	str	r1, [r2, #8]
  405544:	461c      	mov	r4, r3
  405546:	46d1      	mov	r9, sl
  405548:	e72a      	b.n	4053a0 <_realloc_r+0xc0>
  40554a:	eb09 0107 	add.w	r1, r9, r7
  40554e:	ebab 0b07 	sub.w	fp, fp, r7
  405552:	f04b 0201 	orr.w	r2, fp, #1
  405556:	6099      	str	r1, [r3, #8]
  405558:	604a      	str	r2, [r1, #4]
  40555a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40555e:	f003 0301 	and.w	r3, r3, #1
  405562:	431f      	orrs	r7, r3
  405564:	4640      	mov	r0, r8
  405566:	f845 7c04 	str.w	r7, [r5, #-4]
  40556a:	f7ff feb3 	bl	4052d4 <__malloc_unlock>
  40556e:	462e      	mov	r6, r5
  405570:	e728      	b.n	4053c4 <_realloc_r+0xe4>
  405572:	4629      	mov	r1, r5
  405574:	f7ff fe44 	bl	405200 <memmove>
  405578:	e6ff      	b.n	40537a <_realloc_r+0x9a>
  40557a:	4629      	mov	r1, r5
  40557c:	4630      	mov	r0, r6
  40557e:	461c      	mov	r4, r3
  405580:	46d1      	mov	r9, sl
  405582:	f7ff fe3d 	bl	405200 <memmove>
  405586:	e70b      	b.n	4053a0 <_realloc_r+0xc0>
  405588:	68ab      	ldr	r3, [r5, #8]
  40558a:	6083      	str	r3, [r0, #8]
  40558c:	68eb      	ldr	r3, [r5, #12]
  40558e:	60c3      	str	r3, [r0, #12]
  405590:	2a24      	cmp	r2, #36	; 0x24
  405592:	d017      	beq.n	4055c4 <_realloc_r+0x2e4>
  405594:	f100 0310 	add.w	r3, r0, #16
  405598:	f105 0210 	add.w	r2, r5, #16
  40559c:	e6e7      	b.n	40536e <_realloc_r+0x8e>
  40559e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4055a2:	f023 0303 	bic.w	r3, r3, #3
  4055a6:	441c      	add	r4, r3
  4055a8:	462e      	mov	r6, r5
  4055aa:	e6f9      	b.n	4053a0 <_realloc_r+0xc0>
  4055ac:	68a9      	ldr	r1, [r5, #8]
  4055ae:	f8ca 1010 	str.w	r1, [sl, #16]
  4055b2:	68e9      	ldr	r1, [r5, #12]
  4055b4:	f8ca 1014 	str.w	r1, [sl, #20]
  4055b8:	2a24      	cmp	r2, #36	; 0x24
  4055ba:	d00c      	beq.n	4055d6 <_realloc_r+0x2f6>
  4055bc:	3510      	adds	r5, #16
  4055be:	f10a 0218 	add.w	r2, sl, #24
  4055c2:	e7b9      	b.n	405538 <_realloc_r+0x258>
  4055c4:	692b      	ldr	r3, [r5, #16]
  4055c6:	6103      	str	r3, [r0, #16]
  4055c8:	696b      	ldr	r3, [r5, #20]
  4055ca:	6143      	str	r3, [r0, #20]
  4055cc:	f105 0218 	add.w	r2, r5, #24
  4055d0:	f100 0318 	add.w	r3, r0, #24
  4055d4:	e6cb      	b.n	40536e <_realloc_r+0x8e>
  4055d6:	692a      	ldr	r2, [r5, #16]
  4055d8:	f8ca 2018 	str.w	r2, [sl, #24]
  4055dc:	696a      	ldr	r2, [r5, #20]
  4055de:	f8ca 201c 	str.w	r2, [sl, #28]
  4055e2:	3518      	adds	r5, #24
  4055e4:	f10a 0220 	add.w	r2, sl, #32
  4055e8:	e7a6      	b.n	405538 <_realloc_r+0x258>
  4055ea:	4632      	mov	r2, r6
  4055ec:	e77f      	b.n	4054ee <_realloc_r+0x20e>
  4055ee:	4629      	mov	r1, r5
  4055f0:	4630      	mov	r0, r6
  4055f2:	9301      	str	r3, [sp, #4]
  4055f4:	f7ff fe04 	bl	405200 <memmove>
  4055f8:	9b01      	ldr	r3, [sp, #4]
  4055fa:	e77e      	b.n	4054fa <_realloc_r+0x21a>
  4055fc:	68a9      	ldr	r1, [r5, #8]
  4055fe:	f8ca 1010 	str.w	r1, [sl, #16]
  405602:	68e9      	ldr	r1, [r5, #12]
  405604:	f8ca 1014 	str.w	r1, [sl, #20]
  405608:	2a24      	cmp	r2, #36	; 0x24
  40560a:	d003      	beq.n	405614 <_realloc_r+0x334>
  40560c:	3510      	adds	r5, #16
  40560e:	f10a 0218 	add.w	r2, sl, #24
  405612:	e76c      	b.n	4054ee <_realloc_r+0x20e>
  405614:	692a      	ldr	r2, [r5, #16]
  405616:	f8ca 2018 	str.w	r2, [sl, #24]
  40561a:	696a      	ldr	r2, [r5, #20]
  40561c:	f8ca 201c 	str.w	r2, [sl, #28]
  405620:	3518      	adds	r5, #24
  405622:	f10a 0220 	add.w	r2, sl, #32
  405626:	e762      	b.n	4054ee <_realloc_r+0x20e>
  405628:	204005d8 	.word	0x204005d8

0040562c <_sbrk_r>:
  40562c:	b538      	push	{r3, r4, r5, lr}
  40562e:	4c07      	ldr	r4, [pc, #28]	; (40564c <_sbrk_r+0x20>)
  405630:	2300      	movs	r3, #0
  405632:	4605      	mov	r5, r0
  405634:	4608      	mov	r0, r1
  405636:	6023      	str	r3, [r4, #0]
  405638:	f7fc fe74 	bl	402324 <_sbrk>
  40563c:	1c43      	adds	r3, r0, #1
  40563e:	d000      	beq.n	405642 <_sbrk_r+0x16>
  405640:	bd38      	pop	{r3, r4, r5, pc}
  405642:	6823      	ldr	r3, [r4, #0]
  405644:	2b00      	cmp	r3, #0
  405646:	d0fb      	beq.n	405640 <_sbrk_r+0x14>
  405648:	602b      	str	r3, [r5, #0]
  40564a:	bd38      	pop	{r3, r4, r5, pc}
  40564c:	20408510 	.word	0x20408510

00405650 <__sread>:
  405650:	b510      	push	{r4, lr}
  405652:	460c      	mov	r4, r1
  405654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405658:	f000 f9f6 	bl	405a48 <_read_r>
  40565c:	2800      	cmp	r0, #0
  40565e:	db03      	blt.n	405668 <__sread+0x18>
  405660:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405662:	4403      	add	r3, r0
  405664:	6523      	str	r3, [r4, #80]	; 0x50
  405666:	bd10      	pop	{r4, pc}
  405668:	89a3      	ldrh	r3, [r4, #12]
  40566a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40566e:	81a3      	strh	r3, [r4, #12]
  405670:	bd10      	pop	{r4, pc}
  405672:	bf00      	nop

00405674 <__swrite>:
  405674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405678:	4616      	mov	r6, r2
  40567a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40567e:	461f      	mov	r7, r3
  405680:	05d3      	lsls	r3, r2, #23
  405682:	460c      	mov	r4, r1
  405684:	4605      	mov	r5, r0
  405686:	d507      	bpl.n	405698 <__swrite+0x24>
  405688:	2200      	movs	r2, #0
  40568a:	2302      	movs	r3, #2
  40568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405690:	f000 f9c4 	bl	405a1c <_lseek_r>
  405694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40569c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4056a0:	81a2      	strh	r2, [r4, #12]
  4056a2:	463b      	mov	r3, r7
  4056a4:	4632      	mov	r2, r6
  4056a6:	4628      	mov	r0, r5
  4056a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4056ac:	f000 b8a4 	b.w	4057f8 <_write_r>

004056b0 <__sseek>:
  4056b0:	b510      	push	{r4, lr}
  4056b2:	460c      	mov	r4, r1
  4056b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4056b8:	f000 f9b0 	bl	405a1c <_lseek_r>
  4056bc:	89a3      	ldrh	r3, [r4, #12]
  4056be:	1c42      	adds	r2, r0, #1
  4056c0:	bf0e      	itee	eq
  4056c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4056c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4056ca:	6520      	strne	r0, [r4, #80]	; 0x50
  4056cc:	81a3      	strh	r3, [r4, #12]
  4056ce:	bd10      	pop	{r4, pc}

004056d0 <__sclose>:
  4056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4056d4:	f000 b908 	b.w	4058e8 <_close_r>

004056d8 <__swbuf_r>:
  4056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056da:	460d      	mov	r5, r1
  4056dc:	4614      	mov	r4, r2
  4056de:	4606      	mov	r6, r0
  4056e0:	b110      	cbz	r0, 4056e8 <__swbuf_r+0x10>
  4056e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	d04b      	beq.n	405780 <__swbuf_r+0xa8>
  4056e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4056ec:	69a3      	ldr	r3, [r4, #24]
  4056ee:	60a3      	str	r3, [r4, #8]
  4056f0:	b291      	uxth	r1, r2
  4056f2:	0708      	lsls	r0, r1, #28
  4056f4:	d539      	bpl.n	40576a <__swbuf_r+0x92>
  4056f6:	6923      	ldr	r3, [r4, #16]
  4056f8:	2b00      	cmp	r3, #0
  4056fa:	d036      	beq.n	40576a <__swbuf_r+0x92>
  4056fc:	b2ed      	uxtb	r5, r5
  4056fe:	0489      	lsls	r1, r1, #18
  405700:	462f      	mov	r7, r5
  405702:	d515      	bpl.n	405730 <__swbuf_r+0x58>
  405704:	6822      	ldr	r2, [r4, #0]
  405706:	6961      	ldr	r1, [r4, #20]
  405708:	1ad3      	subs	r3, r2, r3
  40570a:	428b      	cmp	r3, r1
  40570c:	da1c      	bge.n	405748 <__swbuf_r+0x70>
  40570e:	3301      	adds	r3, #1
  405710:	68a1      	ldr	r1, [r4, #8]
  405712:	1c50      	adds	r0, r2, #1
  405714:	3901      	subs	r1, #1
  405716:	60a1      	str	r1, [r4, #8]
  405718:	6020      	str	r0, [r4, #0]
  40571a:	7015      	strb	r5, [r2, #0]
  40571c:	6962      	ldr	r2, [r4, #20]
  40571e:	429a      	cmp	r2, r3
  405720:	d01a      	beq.n	405758 <__swbuf_r+0x80>
  405722:	89a3      	ldrh	r3, [r4, #12]
  405724:	07db      	lsls	r3, r3, #31
  405726:	d501      	bpl.n	40572c <__swbuf_r+0x54>
  405728:	2d0a      	cmp	r5, #10
  40572a:	d015      	beq.n	405758 <__swbuf_r+0x80>
  40572c:	4638      	mov	r0, r7
  40572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405730:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405736:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40573a:	81a2      	strh	r2, [r4, #12]
  40573c:	6822      	ldr	r2, [r4, #0]
  40573e:	6661      	str	r1, [r4, #100]	; 0x64
  405740:	6961      	ldr	r1, [r4, #20]
  405742:	1ad3      	subs	r3, r2, r3
  405744:	428b      	cmp	r3, r1
  405746:	dbe2      	blt.n	40570e <__swbuf_r+0x36>
  405748:	4621      	mov	r1, r4
  40574a:	4630      	mov	r0, r6
  40574c:	f7fe fda4 	bl	404298 <_fflush_r>
  405750:	b940      	cbnz	r0, 405764 <__swbuf_r+0x8c>
  405752:	6822      	ldr	r2, [r4, #0]
  405754:	2301      	movs	r3, #1
  405756:	e7db      	b.n	405710 <__swbuf_r+0x38>
  405758:	4621      	mov	r1, r4
  40575a:	4630      	mov	r0, r6
  40575c:	f7fe fd9c 	bl	404298 <_fflush_r>
  405760:	2800      	cmp	r0, #0
  405762:	d0e3      	beq.n	40572c <__swbuf_r+0x54>
  405764:	f04f 37ff 	mov.w	r7, #4294967295
  405768:	e7e0      	b.n	40572c <__swbuf_r+0x54>
  40576a:	4621      	mov	r1, r4
  40576c:	4630      	mov	r0, r6
  40576e:	f7fe fc7f 	bl	404070 <__swsetup_r>
  405772:	2800      	cmp	r0, #0
  405774:	d1f6      	bne.n	405764 <__swbuf_r+0x8c>
  405776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40577a:	6923      	ldr	r3, [r4, #16]
  40577c:	b291      	uxth	r1, r2
  40577e:	e7bd      	b.n	4056fc <__swbuf_r+0x24>
  405780:	f7fe fde2 	bl	404348 <__sinit>
  405784:	e7b0      	b.n	4056e8 <__swbuf_r+0x10>
  405786:	bf00      	nop

00405788 <_wcrtomb_r>:
  405788:	b5f0      	push	{r4, r5, r6, r7, lr}
  40578a:	4606      	mov	r6, r0
  40578c:	b085      	sub	sp, #20
  40578e:	461f      	mov	r7, r3
  405790:	b189      	cbz	r1, 4057b6 <_wcrtomb_r+0x2e>
  405792:	4c10      	ldr	r4, [pc, #64]	; (4057d4 <_wcrtomb_r+0x4c>)
  405794:	4d10      	ldr	r5, [pc, #64]	; (4057d8 <_wcrtomb_r+0x50>)
  405796:	6824      	ldr	r4, [r4, #0]
  405798:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40579a:	2c00      	cmp	r4, #0
  40579c:	bf08      	it	eq
  40579e:	462c      	moveq	r4, r5
  4057a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4057a4:	47a0      	blx	r4
  4057a6:	1c43      	adds	r3, r0, #1
  4057a8:	d103      	bne.n	4057b2 <_wcrtomb_r+0x2a>
  4057aa:	2200      	movs	r2, #0
  4057ac:	238a      	movs	r3, #138	; 0x8a
  4057ae:	603a      	str	r2, [r7, #0]
  4057b0:	6033      	str	r3, [r6, #0]
  4057b2:	b005      	add	sp, #20
  4057b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4057b6:	460c      	mov	r4, r1
  4057b8:	4906      	ldr	r1, [pc, #24]	; (4057d4 <_wcrtomb_r+0x4c>)
  4057ba:	4a07      	ldr	r2, [pc, #28]	; (4057d8 <_wcrtomb_r+0x50>)
  4057bc:	6809      	ldr	r1, [r1, #0]
  4057be:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4057c0:	2900      	cmp	r1, #0
  4057c2:	bf08      	it	eq
  4057c4:	4611      	moveq	r1, r2
  4057c6:	4622      	mov	r2, r4
  4057c8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4057cc:	a901      	add	r1, sp, #4
  4057ce:	47a0      	blx	r4
  4057d0:	e7e9      	b.n	4057a6 <_wcrtomb_r+0x1e>
  4057d2:	bf00      	nop
  4057d4:	2040003c 	.word	0x2040003c
  4057d8:	2040046c 	.word	0x2040046c

004057dc <__ascii_wctomb>:
  4057dc:	b121      	cbz	r1, 4057e8 <__ascii_wctomb+0xc>
  4057de:	2aff      	cmp	r2, #255	; 0xff
  4057e0:	d804      	bhi.n	4057ec <__ascii_wctomb+0x10>
  4057e2:	700a      	strb	r2, [r1, #0]
  4057e4:	2001      	movs	r0, #1
  4057e6:	4770      	bx	lr
  4057e8:	4608      	mov	r0, r1
  4057ea:	4770      	bx	lr
  4057ec:	238a      	movs	r3, #138	; 0x8a
  4057ee:	6003      	str	r3, [r0, #0]
  4057f0:	f04f 30ff 	mov.w	r0, #4294967295
  4057f4:	4770      	bx	lr
  4057f6:	bf00      	nop

004057f8 <_write_r>:
  4057f8:	b570      	push	{r4, r5, r6, lr}
  4057fa:	460d      	mov	r5, r1
  4057fc:	4c08      	ldr	r4, [pc, #32]	; (405820 <_write_r+0x28>)
  4057fe:	4611      	mov	r1, r2
  405800:	4606      	mov	r6, r0
  405802:	461a      	mov	r2, r3
  405804:	4628      	mov	r0, r5
  405806:	2300      	movs	r3, #0
  405808:	6023      	str	r3, [r4, #0]
  40580a:	f7fb feff 	bl	40160c <_write>
  40580e:	1c43      	adds	r3, r0, #1
  405810:	d000      	beq.n	405814 <_write_r+0x1c>
  405812:	bd70      	pop	{r4, r5, r6, pc}
  405814:	6823      	ldr	r3, [r4, #0]
  405816:	2b00      	cmp	r3, #0
  405818:	d0fb      	beq.n	405812 <_write_r+0x1a>
  40581a:	6033      	str	r3, [r6, #0]
  40581c:	bd70      	pop	{r4, r5, r6, pc}
  40581e:	bf00      	nop
  405820:	20408510 	.word	0x20408510

00405824 <__register_exitproc>:
  405824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405828:	4d2c      	ldr	r5, [pc, #176]	; (4058dc <__register_exitproc+0xb8>)
  40582a:	4606      	mov	r6, r0
  40582c:	6828      	ldr	r0, [r5, #0]
  40582e:	4698      	mov	r8, r3
  405830:	460f      	mov	r7, r1
  405832:	4691      	mov	r9, r2
  405834:	f7ff f948 	bl	404ac8 <__retarget_lock_acquire_recursive>
  405838:	4b29      	ldr	r3, [pc, #164]	; (4058e0 <__register_exitproc+0xbc>)
  40583a:	681c      	ldr	r4, [r3, #0]
  40583c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405840:	2b00      	cmp	r3, #0
  405842:	d03e      	beq.n	4058c2 <__register_exitproc+0x9e>
  405844:	685a      	ldr	r2, [r3, #4]
  405846:	2a1f      	cmp	r2, #31
  405848:	dc1c      	bgt.n	405884 <__register_exitproc+0x60>
  40584a:	f102 0e01 	add.w	lr, r2, #1
  40584e:	b176      	cbz	r6, 40586e <__register_exitproc+0x4a>
  405850:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405854:	2401      	movs	r4, #1
  405856:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40585a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40585e:	4094      	lsls	r4, r2
  405860:	4320      	orrs	r0, r4
  405862:	2e02      	cmp	r6, #2
  405864:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405868:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40586c:	d023      	beq.n	4058b6 <__register_exitproc+0x92>
  40586e:	3202      	adds	r2, #2
  405870:	f8c3 e004 	str.w	lr, [r3, #4]
  405874:	6828      	ldr	r0, [r5, #0]
  405876:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40587a:	f7ff f927 	bl	404acc <__retarget_lock_release_recursive>
  40587e:	2000      	movs	r0, #0
  405880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405884:	4b17      	ldr	r3, [pc, #92]	; (4058e4 <__register_exitproc+0xc0>)
  405886:	b30b      	cbz	r3, 4058cc <__register_exitproc+0xa8>
  405888:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40588c:	f7ff f998 	bl	404bc0 <malloc>
  405890:	4603      	mov	r3, r0
  405892:	b1d8      	cbz	r0, 4058cc <__register_exitproc+0xa8>
  405894:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405898:	6002      	str	r2, [r0, #0]
  40589a:	2100      	movs	r1, #0
  40589c:	6041      	str	r1, [r0, #4]
  40589e:	460a      	mov	r2, r1
  4058a0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4058a4:	f04f 0e01 	mov.w	lr, #1
  4058a8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4058ac:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4058b0:	2e00      	cmp	r6, #0
  4058b2:	d0dc      	beq.n	40586e <__register_exitproc+0x4a>
  4058b4:	e7cc      	b.n	405850 <__register_exitproc+0x2c>
  4058b6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4058ba:	430c      	orrs	r4, r1
  4058bc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4058c0:	e7d5      	b.n	40586e <__register_exitproc+0x4a>
  4058c2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4058c6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4058ca:	e7bb      	b.n	405844 <__register_exitproc+0x20>
  4058cc:	6828      	ldr	r0, [r5, #0]
  4058ce:	f7ff f8fd 	bl	404acc <__retarget_lock_release_recursive>
  4058d2:	f04f 30ff 	mov.w	r0, #4294967295
  4058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4058da:	bf00      	nop
  4058dc:	20400468 	.word	0x20400468
  4058e0:	00405e68 	.word	0x00405e68
  4058e4:	00404bc1 	.word	0x00404bc1

004058e8 <_close_r>:
  4058e8:	b538      	push	{r3, r4, r5, lr}
  4058ea:	4c07      	ldr	r4, [pc, #28]	; (405908 <_close_r+0x20>)
  4058ec:	2300      	movs	r3, #0
  4058ee:	4605      	mov	r5, r0
  4058f0:	4608      	mov	r0, r1
  4058f2:	6023      	str	r3, [r4, #0]
  4058f4:	f7fc fd32 	bl	40235c <_close>
  4058f8:	1c43      	adds	r3, r0, #1
  4058fa:	d000      	beq.n	4058fe <_close_r+0x16>
  4058fc:	bd38      	pop	{r3, r4, r5, pc}
  4058fe:	6823      	ldr	r3, [r4, #0]
  405900:	2b00      	cmp	r3, #0
  405902:	d0fb      	beq.n	4058fc <_close_r+0x14>
  405904:	602b      	str	r3, [r5, #0]
  405906:	bd38      	pop	{r3, r4, r5, pc}
  405908:	20408510 	.word	0x20408510

0040590c <_fclose_r>:
  40590c:	b570      	push	{r4, r5, r6, lr}
  40590e:	b159      	cbz	r1, 405928 <_fclose_r+0x1c>
  405910:	4605      	mov	r5, r0
  405912:	460c      	mov	r4, r1
  405914:	b110      	cbz	r0, 40591c <_fclose_r+0x10>
  405916:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405918:	2b00      	cmp	r3, #0
  40591a:	d03c      	beq.n	405996 <_fclose_r+0x8a>
  40591c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40591e:	07d8      	lsls	r0, r3, #31
  405920:	d505      	bpl.n	40592e <_fclose_r+0x22>
  405922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405926:	b92b      	cbnz	r3, 405934 <_fclose_r+0x28>
  405928:	2600      	movs	r6, #0
  40592a:	4630      	mov	r0, r6
  40592c:	bd70      	pop	{r4, r5, r6, pc}
  40592e:	89a3      	ldrh	r3, [r4, #12]
  405930:	0599      	lsls	r1, r3, #22
  405932:	d53c      	bpl.n	4059ae <_fclose_r+0xa2>
  405934:	4621      	mov	r1, r4
  405936:	4628      	mov	r0, r5
  405938:	f7fe fc0e 	bl	404158 <__sflush_r>
  40593c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40593e:	4606      	mov	r6, r0
  405940:	b133      	cbz	r3, 405950 <_fclose_r+0x44>
  405942:	69e1      	ldr	r1, [r4, #28]
  405944:	4628      	mov	r0, r5
  405946:	4798      	blx	r3
  405948:	2800      	cmp	r0, #0
  40594a:	bfb8      	it	lt
  40594c:	f04f 36ff 	movlt.w	r6, #4294967295
  405950:	89a3      	ldrh	r3, [r4, #12]
  405952:	061a      	lsls	r2, r3, #24
  405954:	d422      	bmi.n	40599c <_fclose_r+0x90>
  405956:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405958:	b141      	cbz	r1, 40596c <_fclose_r+0x60>
  40595a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40595e:	4299      	cmp	r1, r3
  405960:	d002      	beq.n	405968 <_fclose_r+0x5c>
  405962:	4628      	mov	r0, r5
  405964:	f7fe fe16 	bl	404594 <_free_r>
  405968:	2300      	movs	r3, #0
  40596a:	6323      	str	r3, [r4, #48]	; 0x30
  40596c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40596e:	b121      	cbz	r1, 40597a <_fclose_r+0x6e>
  405970:	4628      	mov	r0, r5
  405972:	f7fe fe0f 	bl	404594 <_free_r>
  405976:	2300      	movs	r3, #0
  405978:	6463      	str	r3, [r4, #68]	; 0x44
  40597a:	f7fe fd11 	bl	4043a0 <__sfp_lock_acquire>
  40597e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405980:	2200      	movs	r2, #0
  405982:	07db      	lsls	r3, r3, #31
  405984:	81a2      	strh	r2, [r4, #12]
  405986:	d50e      	bpl.n	4059a6 <_fclose_r+0x9a>
  405988:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40598a:	f7ff f89b 	bl	404ac4 <__retarget_lock_close_recursive>
  40598e:	f7fe fd0d 	bl	4043ac <__sfp_lock_release>
  405992:	4630      	mov	r0, r6
  405994:	bd70      	pop	{r4, r5, r6, pc}
  405996:	f7fe fcd7 	bl	404348 <__sinit>
  40599a:	e7bf      	b.n	40591c <_fclose_r+0x10>
  40599c:	6921      	ldr	r1, [r4, #16]
  40599e:	4628      	mov	r0, r5
  4059a0:	f7fe fdf8 	bl	404594 <_free_r>
  4059a4:	e7d7      	b.n	405956 <_fclose_r+0x4a>
  4059a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4059a8:	f7ff f890 	bl	404acc <__retarget_lock_release_recursive>
  4059ac:	e7ec      	b.n	405988 <_fclose_r+0x7c>
  4059ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4059b0:	f7ff f88a 	bl	404ac8 <__retarget_lock_acquire_recursive>
  4059b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059b8:	2b00      	cmp	r3, #0
  4059ba:	d1bb      	bne.n	405934 <_fclose_r+0x28>
  4059bc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4059be:	f016 0601 	ands.w	r6, r6, #1
  4059c2:	d1b1      	bne.n	405928 <_fclose_r+0x1c>
  4059c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4059c6:	f7ff f881 	bl	404acc <__retarget_lock_release_recursive>
  4059ca:	4630      	mov	r0, r6
  4059cc:	bd70      	pop	{r4, r5, r6, pc}
  4059ce:	bf00      	nop

004059d0 <_fstat_r>:
  4059d0:	b538      	push	{r3, r4, r5, lr}
  4059d2:	460b      	mov	r3, r1
  4059d4:	4c07      	ldr	r4, [pc, #28]	; (4059f4 <_fstat_r+0x24>)
  4059d6:	4605      	mov	r5, r0
  4059d8:	4611      	mov	r1, r2
  4059da:	4618      	mov	r0, r3
  4059dc:	2300      	movs	r3, #0
  4059de:	6023      	str	r3, [r4, #0]
  4059e0:	f7fc fcbf 	bl	402362 <_fstat>
  4059e4:	1c43      	adds	r3, r0, #1
  4059e6:	d000      	beq.n	4059ea <_fstat_r+0x1a>
  4059e8:	bd38      	pop	{r3, r4, r5, pc}
  4059ea:	6823      	ldr	r3, [r4, #0]
  4059ec:	2b00      	cmp	r3, #0
  4059ee:	d0fb      	beq.n	4059e8 <_fstat_r+0x18>
  4059f0:	602b      	str	r3, [r5, #0]
  4059f2:	bd38      	pop	{r3, r4, r5, pc}
  4059f4:	20408510 	.word	0x20408510

004059f8 <_isatty_r>:
  4059f8:	b538      	push	{r3, r4, r5, lr}
  4059fa:	4c07      	ldr	r4, [pc, #28]	; (405a18 <_isatty_r+0x20>)
  4059fc:	2300      	movs	r3, #0
  4059fe:	4605      	mov	r5, r0
  405a00:	4608      	mov	r0, r1
  405a02:	6023      	str	r3, [r4, #0]
  405a04:	f7fc fcb2 	bl	40236c <_isatty>
  405a08:	1c43      	adds	r3, r0, #1
  405a0a:	d000      	beq.n	405a0e <_isatty_r+0x16>
  405a0c:	bd38      	pop	{r3, r4, r5, pc}
  405a0e:	6823      	ldr	r3, [r4, #0]
  405a10:	2b00      	cmp	r3, #0
  405a12:	d0fb      	beq.n	405a0c <_isatty_r+0x14>
  405a14:	602b      	str	r3, [r5, #0]
  405a16:	bd38      	pop	{r3, r4, r5, pc}
  405a18:	20408510 	.word	0x20408510

00405a1c <_lseek_r>:
  405a1c:	b570      	push	{r4, r5, r6, lr}
  405a1e:	460d      	mov	r5, r1
  405a20:	4c08      	ldr	r4, [pc, #32]	; (405a44 <_lseek_r+0x28>)
  405a22:	4611      	mov	r1, r2
  405a24:	4606      	mov	r6, r0
  405a26:	461a      	mov	r2, r3
  405a28:	4628      	mov	r0, r5
  405a2a:	2300      	movs	r3, #0
  405a2c:	6023      	str	r3, [r4, #0]
  405a2e:	f7fc fc9f 	bl	402370 <_lseek>
  405a32:	1c43      	adds	r3, r0, #1
  405a34:	d000      	beq.n	405a38 <_lseek_r+0x1c>
  405a36:	bd70      	pop	{r4, r5, r6, pc}
  405a38:	6823      	ldr	r3, [r4, #0]
  405a3a:	2b00      	cmp	r3, #0
  405a3c:	d0fb      	beq.n	405a36 <_lseek_r+0x1a>
  405a3e:	6033      	str	r3, [r6, #0]
  405a40:	bd70      	pop	{r4, r5, r6, pc}
  405a42:	bf00      	nop
  405a44:	20408510 	.word	0x20408510

00405a48 <_read_r>:
  405a48:	b570      	push	{r4, r5, r6, lr}
  405a4a:	460d      	mov	r5, r1
  405a4c:	4c08      	ldr	r4, [pc, #32]	; (405a70 <_read_r+0x28>)
  405a4e:	4611      	mov	r1, r2
  405a50:	4606      	mov	r6, r0
  405a52:	461a      	mov	r2, r3
  405a54:	4628      	mov	r0, r5
  405a56:	2300      	movs	r3, #0
  405a58:	6023      	str	r3, [r4, #0]
  405a5a:	f7fa fbbb 	bl	4001d4 <_read>
  405a5e:	1c43      	adds	r3, r0, #1
  405a60:	d000      	beq.n	405a64 <_read_r+0x1c>
  405a62:	bd70      	pop	{r4, r5, r6, pc}
  405a64:	6823      	ldr	r3, [r4, #0]
  405a66:	2b00      	cmp	r3, #0
  405a68:	d0fb      	beq.n	405a62 <_read_r+0x1a>
  405a6a:	6033      	str	r3, [r6, #0]
  405a6c:	bd70      	pop	{r4, r5, r6, pc}
  405a6e:	bf00      	nop
  405a70:	20408510 	.word	0x20408510
  405a74:	20594850 	.word	0x20594850
  405a78:	74696e49 	.word	0x74696e49
  405a7c:	696c6169 	.word	0x696c6169
  405a80:	4520657a 	.word	0x4520657a
  405a84:	524f5252 	.word	0x524f5252
  405a88:	00000d21 	.word	0x00000d21
  405a8c:	6f747541 	.word	0x6f747541
  405a90:	67654e20 	.word	0x67654e20
  405a94:	6169746f 	.word	0x6169746f
  405a98:	45206574 	.word	0x45206574
  405a9c:	524f5252 	.word	0x524f5252
  405aa0:	00000d21 	.word	0x00000d21
  405aa4:	20746553 	.word	0x20746553
  405aa8:	6b6e696c 	.word	0x6b6e696c
  405aac:	52524520 	.word	0x52524520
  405ab0:	0d21524f 	.word	0x0d21524f
  405ab4:	00000000 	.word	0x00000000
  405ab8:	00007350 	.word	0x00007350
  405abc:	20495053 	.word	0x20495053
  405ac0:	65657053 	.word	0x65657053
  405ac4:	3d200964 	.word	0x3d200964
  405ac8:	646c2520 	.word	0x646c2520
  405acc:	7a484d20 	.word	0x7a484d20
  405ad0:	00000a0d 	.word	0x00000a0d
  405ad4:	54415453 	.word	0x54415453
  405ad8:	09095355 	.word	0x09095355
  405adc:	30203d20 	.word	0x30203d20
  405ae0:	32302578 	.word	0x32302578
  405ae4:	58522078 	.word	0x58522078
  405ae8:	3d52445f 	.word	0x3d52445f
  405aec:	54207825 	.word	0x54207825
  405af0:	53445f58 	.word	0x53445f58
  405af4:	2078253d 	.word	0x2078253d
  405af8:	5f58414d 	.word	0x5f58414d
  405afc:	253d5452 	.word	0x253d5452
  405b00:	58522078 	.word	0x58522078
  405b04:	4e5f505f 	.word	0x4e5f505f
  405b08:	78253d4f 	.word	0x78253d4f
  405b0c:	5f585420 	.word	0x5f585420
  405b10:	4c4c5546 	.word	0x4c4c5546
  405b14:	0d78253d 	.word	0x0d78253d
  405b18:	0000000a 	.word	0x0000000a
  405b1c:	415f5852 	.word	0x415f5852
  405b20:	5f524444 	.word	0x5f524444
  405b24:	312d3050 	.word	0x312d3050
  405b28:	00000000 	.word	0x00000000
  405b2c:	415f5852 	.word	0x415f5852
  405b30:	5f524444 	.word	0x5f524444
  405b34:	352d3250 	.word	0x352d3250
  405b38:	00000000 	.word	0x00000000
  405b3c:	415f5854 	.word	0x415f5854
  405b40:	09524444 	.word	0x09524444
  405b44:	00000000 	.word	0x00000000
  405b48:	505f5852 	.word	0x505f5852
  405b4c:	30505f57 	.word	0x30505f57
  405b50:	0000352d 	.word	0x0000352d
  405b54:	55544553 	.word	0x55544553
  405b58:	57415f50 	.word	0x57415f50
  405b5c:	00000000 	.word	0x00000000
  405b60:	415f4e45 	.word	0x415f4e45
  405b64:	00000941 	.word	0x00000941
  405b68:	525f4e45 	.word	0x525f4e45
  405b6c:	44444158 	.word	0x44444158
  405b70:	00000052 	.word	0x00000052
  405b74:	435f4652 	.word	0x435f4652
  405b78:	00000948 	.word	0x00000948
  405b7c:	535f4652 	.word	0x535f4652
  405b80:	50555445 	.word	0x50555445
  405b84:	00000000 	.word	0x00000000
  405b88:	464e4f43 	.word	0x464e4f43
  405b8c:	00094749 	.word	0x00094749
  405b90:	504e5944 	.word	0x504e5944
  405b94:	45462f44 	.word	0x45462f44
  405b98:	52555441 	.word	0x52555441
  405b9c:	00000045 	.word	0x00000045
  405ba0:	61746144 	.word	0x61746144
  405ba4:	74615220 	.word	0x74615220
  405ba8:	3d200965 	.word	0x3d200965
  405bac:	0d732520 	.word	0x0d732520
  405bb0:	0000000a 	.word	0x0000000a
  405bb4:	65646f4d 	.word	0x65646f4d
  405bb8:	2009096c 	.word	0x2009096c
  405bbc:	7325203d 	.word	0x7325203d
  405bc0:	00000a0d 	.word	0x00000a0d
  405bc4:	20435243 	.word	0x20435243
  405bc8:	676e654c 	.word	0x676e654c
  405bcc:	20096874 	.word	0x20096874
  405bd0:	7325203d 	.word	0x7325203d
  405bd4:	00000a0d 	.word	0x00000a0d
  405bd8:	50204150 	.word	0x50204150
  405bdc:	7265776f 	.word	0x7265776f
  405be0:	203d2009 	.word	0x203d2009
  405be4:	0a0d7325 	.word	0x0a0d7325
  405be8:	00000000 	.word	0x00000000
  405bec:	00097325 	.word	0x00097325
  405bf0:	00783020 	.word	0x00783020
  405bf4:	78323025 	.word	0x78323025
  405bf8:	00000000 	.word	0x00000000
  405bfc:	25783020 	.word	0x25783020
  405c00:	00783230 	.word	0x00783230

00405c04 <rf24_crclength_e_str_0>:
  405c04:	61736944 64656c62 00000000              Disabled....

00405c10 <rf24_crclength_e_str_1>:
  405c10:	69622038 00007374                       8 bits..

00405c18 <rf24_crclength_e_str_2>:
  405c18:	62203631 00737469                       16 bits.

00405c20 <rf24_crclength_e_str_P>:
  405c20:	00405c04 00405c10 00405c18              .\@..\@..\@.

00405c2c <rf24_datarate_e_str_0>:
  405c2c:	50424d31 00000053                       1MBPS...

00405c34 <rf24_datarate_e_str_1>:
  405c34:	50424d32 00000053                       2MBPS...

00405c3c <rf24_datarate_e_str_2>:
  405c3c:	4b303532 00535042                       250KBPS.

00405c44 <rf24_datarate_e_str_P>:
  405c44:	00405c2c 00405c34 00405c3c              ,\@.4\@.<\@.

00405c50 <rf24_model_e_str_1>:
  405c50:	3246526e 31304c34 0000002b              nRF24L01+...

00405c5c <rf24_pa_dbm_e_str_0>:
  405c5c:	4d5f4150 00004e49                       PA_MIN..

00405c64 <rf24_pa_dbm_e_str_1>:
  405c64:	4c5f4150 0000574f                       PA_LOW..

00405c6c <rf24_pa_dbm_e_str_2>:
  405c6c:	485f4150 00484749                       PA_HIGH.

00405c74 <rf24_pa_dbm_e_str_3>:
  405c74:	4d5f4150 00005841                       PA_MAX..

00405c7c <rf24_pa_dbm_e_str_P>:
  405c7c:	00405c5c 00405c64 00405c6c 00405c74     \\@.d\@.l\@.t\@.
  405c8c:	2d747241 0074654e 00000000 746e6f43     Art-Net.....Cont
  405c9c:	206c6f72 65646f6e 00000000 65746e49     rol node....Inte
  405cac:	74636172 20657669 74737953 4d206d65     ractive System M
  405cbc:	65747361 6f432072 6f72746e 6f4e206c     aster Control No
  405ccc:	28206564 52202963 6962626f 6d532065     de (c) Robbie Sm
  405cdc:	73746465 00000000 55203a4d 0a0d5044     edts....M: UDP..
  405cec:	00000000 44203a4d 0a0d584d 00000000     ....M: DMX......
  405cfc:	41203a4d 6f507472 0a0d6c6c 00000000     M: ArtPoll......
  405d0c:	203d3d3d 61666544 20746c75 6b705f77     === Default w_pk
  405d1c:	6f665f74 74616d72 7830203d 3d3d5825     t_format= 0x%X==
  405d2c:	000d0a3d                                =...

00405d30 <listeningPipes>:
  405d30:	3a3a3aa1 3a3a3ab1 3a3a3ac1 3a3a3ad1     .:::.:::.:::.:::
  405d40:	3a3a3ae1 3a3a3a0a 4d202d2d 65747361     .:::.:::-- Maste
  405d50:	646f4e72 65525f65 312d3076 0d2d2d20     rNode_Rev0-1 --.
  405d60:	202d2d0a 454d4153 582d3037 20444c50     .-- SAME70-XPLD 
  405d70:	0a0d2d2d 43202d2d 69706d6f 3a64656c     --..-- Compiled:
  405d80:	79614d20 20322020 31323032 3a383120      May  2 2021 18:
  405d90:	323a3530 2d2d2030 0000000d 4d202d2d     05:20 --....-- M
  405da0:	25204341 78253a78 3a78253a 253a7825     AC %x:%x:%x:%x:%
  405db0:	78253a78 00000d0a 49202d2d 25202050     x:%x....-- IP  %
  405dc0:	64252e64 2e64252e 0d0a6425 00000000     d.%d.%d.%d......
  405dd0:	6b6e696c 74656420 65746365 00000d64     link detected...
  405de0:	65646f4e 20642520 5348207c 64252056     Node %d | HSV %d
  405df0:	6425202c 6425202c 00000a0d 6e617274     , %d, %d....tran
  405e00:	73696d73 6e6f6973 69616620 0a64656c     smission failed.
  405e10:	0000000d 61736964 20656c62 736e6573     ....disable sens
  405e20:	6e20726f 2065646f 0a0d6425 00000000     or node %d......
  405e30:	736e6553 6120726f 76697463 75685f65     Sensor active_hu
  405e40:	6f6e2065 25206564 000a0d64 736e6553     e node %d...Sens
  405e50:	6120726f 76697463 61735f65 6f6e2074     or active_sat no
  405e60:	25206564 000a0d64                       de %d...

00405e68 <_global_impure_ptr>:
  405e68:	20400040 33323130 37363534 42413938     @.@ 0123456789AB
  405e78:	46454443 00000000 33323130 37363534     CDEF....01234567
  405e88:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405e98:	0000296c                                l)..

00405e9c <blanks.7217>:
  405e9c:	20202020 20202020 20202020 20202020                     

00405eac <zeroes.7218>:
  405eac:	30303030 30303030 30303030 30303030     0000000000000000
  405ebc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405ecc <_ctype_>:
  405ecc:	20202000 20202020 28282020 20282828     .         ((((( 
  405edc:	20202020 20202020 20202020 20202020                     
  405eec:	10108820 10101010 10101010 10101010      ...............
  405efc:	04040410 04040404 10040404 10101010     ................
  405f0c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405f1c:	01010101 01010101 01010101 10101010     ................
  405f2c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405f3c:	02020202 02020202 02020202 10101010     ................
  405f4c:	00000020 00000000 00000000 00000000      ...............
	...

00405fd0 <_init>:
  405fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fd2:	bf00      	nop
  405fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fd6:	bc08      	pop	{r3}
  405fd8:	469e      	mov	lr, r3
  405fda:	4770      	bx	lr

00405fdc <__init_array_start>:
  405fdc:	00404139 	.word	0x00404139

00405fe0 <__frame_dummy_init_array_entry>:
  405fe0:	0040018d                                ..@.

00405fe4 <_fini>:
  405fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fe6:	bf00      	nop
  405fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fea:	bc08      	pop	{r3}
  405fec:	469e      	mov	lr, r3
  405fee:	4770      	bx	lr

00405ff0 <__fini_array_start>:
  405ff0:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <gs_uc_ip_address>:
2040000c:	0202 0b02                                   ....

20400010 <gs_uc_mac_address>:
20400010:	0400 1c25 02a0                              ..%...

20400016 <payload_size>:
20400016:	0020                                         .

20400018 <gs_ul_spi_clock>:
20400018:	4b40 004c                                   @KL.

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <factory_broadcastIp>:
20400024:	ff02 ffff                                   ....

20400028 <factory_gateway>:
20400028:	0202 fe02                                   ....

2040002c <factory_localIp>:
2040002c:	0202 0b02                                   ....

20400030 <factory_mac>:
20400030:	0400 1c25 02a0 0000                         ..%.....

20400038 <factory_subnetMask>:
20400038:	00ff 0000                                   ....

2040003c <_impure_ptr>:
2040003c:	0040 2040                                   @.@ 

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__atexit_recursive_mutex>:
20400468:	84ec 2040                                   ..@ 

2040046c <__global_locale>:
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	57dd 0040 5131 0040 0000 0000 5ecc 0040     .W@.1Q@......^@.
2040055c:	5ec8 0040 5b44 0040 5b44 0040 5b44 0040     .^@.D[@.D[@.D[@.
2040056c:	5b44 0040 5b44 0040 5b44 0040 5b44 0040     D[@.D[@.D[@.D[@.
2040057c:	5b44 0040 5b44 0040 ffff ffff ffff ffff     D[@.D[@.........
2040058c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005d8 <__malloc_av_>:
	...
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 

204009e0 <__malloc_sbrk_base>:
204009e0:	ffff ffff                                   ....

204009e4 <__malloc_trim_threshold>:
204009e4:	0000 0002                                   ....
