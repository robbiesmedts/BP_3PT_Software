
MasterNode_Rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000098cc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004098cc  004098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  004098d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00007b2c  204009e8  0040a2c0  000209e8  2**3
                  ALLOC
  4 .stack        00002004  20408514  00411dec  000209e8  2**0
                  ALLOC
  5 .heap         00000200  2040a518  00413df0  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025242  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000467a  00000000  00000000  00045cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009686  00000000  00000000  0004a32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d38  00000000  00000000  000539b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e90  00000000  00000000  000546e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e433  00000000  00000000  00055579  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000115e5  00000000  00000000  000639ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4c50  00000000  00000000  00074f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032e0  00000000  00000000  00119be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 a5 40 20 45 21 40 00 41 21 40 00 41 21 40 00     ..@ E!@.A!@.A!@.
  400010:	41 21 40 00 41 21 40 00 41 21 40 00 00 00 00 00     A!@.A!@.A!@.....
	...
  40002c:	41 21 40 00 41 21 40 00 00 00 00 00 41 21 40 00     A!@.A!@.....A!@.
  40003c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40004c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40005c:	41 21 40 00 41 21 40 00 00 00 00 00 9d 1f 40 00     A!@.A!@.......@.
  40006c:	b1 1f 40 00 c5 1f 40 00 41 21 40 00 41 21 40 00     ..@...@.A!@.A!@.
  40007c:	41 21 40 00 d9 1f 40 00 ed 1f 40 00 41 21 40 00     A!@...@...@.A!@.
  40008c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40009c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  4000ac:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  4000bc:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  4000cc:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  4000dc:	d5 0d 40 00 41 21 40 00 41 21 40 00 41 21 40 00     ..@.A!@.A!@.A!@.
  4000ec:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  4000fc:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40010c:	41 21 40 00 41 21 40 00 00 00 00 00 00 00 00 00     A!@.A!@.........
  40011c:	00 00 00 00 41 21 40 00 41 21 40 00 41 21 40 00     ....A!@.A!@.A!@.
  40012c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40013c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40014c:	41 21 40 00 41 21 40 00 41 21 40 00 41 21 40 00     A!@.A!@.A!@.A!@.
  40015c:	41 21 40 00 41 21 40 00 41 21 40 00                 A!@.A!@.A!@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009e8 	.word	0x204009e8
  400184:	00000000 	.word	0x00000000
  400188:	004098d4 	.word	0x004098d4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004098d4 	.word	0x004098d4
  4001c8:	204009ec 	.word	0x204009ec
  4001cc:	004098d4 	.word	0x004098d4
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20408300 	.word	0x20408300
  40020c:	204072e8 	.word	0x204072e8

00400210 <circ_inc>:
#endif

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
  400210:	8803      	ldrh	r3, [r0, #0]
  400212:	3301      	adds	r3, #1
  400214:	b29b      	uxth	r3, r3
        if((*headortail) >= size) {
            (*headortail) = 0;
  400216:	428b      	cmp	r3, r1
  400218:	bf28      	it	cs
  40021a:	2300      	movcs	r3, #0
  40021c:	8003      	strh	r3, [r0, #0]
  40021e:	4770      	bx	lr

00400220 <gmac_reset_tx_mem>:
 *
 * \param p_dev Pointer to GMAC driver instance.
 *
 */
static void gmac_reset_tx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400220:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400222:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_tx_buff = p_dev->gmac_queue_list[queue_idx].p_tx_buffer;
  400226:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40022a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40022e:	685a      	ldr	r2, [r3, #4]
	gmac_tx_descriptor_t *p_td = p_dev->gmac_queue_list[queue_idx].p_tx_dscr;
  400230:	691e      	ldr	r6, [r3, #16]
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400232:	f8de 4000 	ldr.w	r4, [lr]
  400236:	f024 0408 	bic.w	r4, r4, #8
  40023a:	f8ce 4000 	str.w	r4, [lr]

	/* Disable TX */
	gmac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->gmac_queue_list[queue_idx].us_tx_head, p_dev->gmac_queue_list[queue_idx].us_tx_tail);
  40023e:	2400      	movs	r4, #0
  400240:	851c      	strh	r4, [r3, #40]	; 0x28
  400242:	84dc      	strh	r4, [r3, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400244:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400246:	b1fb      	cbz	r3, 400288 <gmac_reset_tx_mem+0x68>
  400248:	4634      	mov	r4, r6
  40024a:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * GMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40024c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400250:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400254:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		p_td[ul_index].addr = ul_address;
  400258:	f846 2033 	str.w	r2, [r6, r3, lsl #3]
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40025c:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  40025e:	3301      	adds	r3, #1
  400260:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  400262:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
  400266:	3408      	adds	r4, #8
  400268:	429d      	cmp	r5, r3
  40026a:	d8f5      	bhi.n	400258 <gmac_reset_tx_mem+0x38>
	}
	p_td[p_dev->gmac_queue_list[queue_idx].us_tx_list_size - 1].status.val =
  40026c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  400270:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  400274:	f845 3c04 	str.w	r3, [r5, #-4]
			GMAC_TXD_USED | GMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  400278:	b141      	cbz	r1, 40028c <gmac_reset_tx_mem+0x6c>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40027a:	f026 0603 	bic.w	r6, r6, #3
  40027e:	f201 110f 	addw	r1, r1, #271	; 0x10f
  400282:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400288:	2500      	movs	r5, #0
  40028a:	e7ef      	b.n	40026c <gmac_reset_tx_mem+0x4c>
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40028c:	f026 0603 	bic.w	r6, r6, #3
  400290:	f8ce 601c 	str.w	r6, [lr, #28]
  400294:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400296 <gmac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_dev Pointer to GMAC Driver instance.
 */
static void gmac_reset_rx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400296:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400298:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_rx_buff = p_dev->gmac_queue_list[queue_idx].p_rx_buffer;
  40029c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4002a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4002a4:	689a      	ldr	r2, [r3, #8]
	gmac_rx_descriptor_t *pRd = p_dev->gmac_queue_list[queue_idx].p_rx_dscr;
  4002a6:	68de      	ldr	r6, [r3, #12]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  4002a8:	f8de 4000 	ldr.w	r4, [lr]
  4002ac:	f024 0404 	bic.w	r4, r4, #4
  4002b0:	f8ce 4000 	str.w	r4, [lr]

	/* Disable RX */
	gmac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->gmac_queue_list[queue_idx].us_rx_idx = 0;
  4002b4:	2400      	movs	r4, #0
  4002b6:	845c      	strh	r4, [r3, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002b8:	8c1b      	ldrh	r3, [r3, #32]
  4002ba:	b313      	cbz	r3, 400302 <gmac_reset_rx_mem+0x6c>
  4002bc:	4634      	mov	r4, r6
  4002be:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * GMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
  4002c0:	461f      	mov	r7, r3
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002c2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  4002c6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
  4002ca:	f022 0503 	bic.w	r5, r2, #3
  4002ce:	f846 5033 	str.w	r5, [r6, r3, lsl #3]
		pRd[ul_index].status.val = 0;
  4002d2:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4002d4:	3301      	adds	r3, #1
  4002d6:	8c05      	ldrh	r5, [r0, #32]
  4002d8:	3280      	adds	r2, #128	; 0x80
  4002da:	3408      	adds	r4, #8
  4002dc:	429d      	cmp	r5, r3
  4002de:	d8f4      	bhi.n	4002ca <gmac_reset_rx_mem+0x34>
	}
	pRd[p_dev->gmac_queue_list[queue_idx].us_rx_list_size - 1].addr.val |= GMAC_RXD_WRAP;
  4002e0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  4002e4:	442b      	add	r3, r5
  4002e6:	f856 2033 	ldr.w	r2, [r6, r3, lsl #3]
  4002ea:	f042 0202 	orr.w	r2, r2, #2
  4002ee:	f846 2033 	str.w	r2, [r6, r3, lsl #3]

	/* Set receive buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  4002f2:	b141      	cbz	r1, 400306 <gmac_reset_rx_mem+0x70>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  4002f4:	f026 0603 	bic.w	r6, r6, #3
  4002f8:	f201 111f 	addw	r1, r1, #287	; 0x11f
  4002fc:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400302:	2500      	movs	r5, #0
  400304:	e7ec      	b.n	4002e0 <gmac_reset_rx_mem+0x4a>
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  400306:	f026 0603 	bic.w	r6, r6, #3
  40030a:	f8ce 6018 	str.w	r6, [lr, #24]
  40030e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400310 <gmac_dev_init>:
 * \param p_gmac_dev Pointer to the GMAC device instance.
 * \param p_opt GMAC configure options.
 */
void gmac_dev_init(Gmac* p_gmac, gmac_device_t* p_gmac_dev,
		gmac_options_t* p_opt)
{
  400310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400312:	4604      	mov	r4, r0
  400314:	460e      	mov	r6, r1
  400316:	4615      	mov	r5, r2
	p_gmac->GMAC_NCR = ul_ncr;
  400318:	2300      	movs	r3, #0
  40031a:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_IDR = ul_source;
  40031c:	f04f 33ff 	mov.w	r3, #4294967295
  400320:	62c3      	str	r3, [r0, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  400322:	6803      	ldr	r3, [r0, #0]
  400324:	f043 0320 	orr.w	r3, r3, #32
  400328:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_RSR = ul_status;
  40032a:	230f      	movs	r3, #15
  40032c:	6203      	str	r3, [r0, #32]
	p_gmac->GMAC_TSR = ul_status;
  40032e:	f240 133f 	movw	r3, #319	; 0x13f
  400332:	6143      	str	r3, [r0, #20]
	return p_gmac->GMAC_NCFGR;
  400334:	6842      	ldr	r2, [r0, #4]
	gmac_clear_tx_status(p_gmac, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
            | GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP | GMAC_TSR_HRESP );

	/* Enable the copy of data into the buffers
	   ignore broadcasts, enable Receive checksum and not copy FCS. */
	gmac_set_config(p_gmac, gmac_get_config(p_gmac) |
  400336:	4b45      	ldr	r3, [pc, #276]	; (40044c <gmac_dev_init+0x13c>)
  400338:	4313      	orrs	r3, r2
	p_gmac->GMAC_NCFGR = ul_cfg;
  40033a:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40033c:	782b      	ldrb	r3, [r5, #0]
  40033e:	2b00      	cmp	r3, #0
  400340:	d079      	beq.n	400436 <gmac_dev_init+0x126>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  400342:	6843      	ldr	r3, [r0, #4]
  400344:	f043 0310 	orr.w	r3, r3, #16
  400348:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40034a:	786b      	ldrb	r3, [r5, #1]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d177      	bne.n	400440 <gmac_dev_init+0x130>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  400350:	6863      	ldr	r3, [r4, #4]
  400352:	f023 0320 	bic.w	r3, r3, #32
  400356:	6063      	str	r3, [r4, #4]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  400358:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  40035c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  400360:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  400364:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  400368:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40036c:	4b38      	ldr	r3, [pc, #224]	; (400450 <gmac_dev_init+0x140>)
  40036e:	f04f 32ff 	mov.w	r2, #4294967295
  400372:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  400374:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  400378:	605a      	str	r2, [r3, #4]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40037a:	f023 0303 	bic.w	r3, r3, #3
  40037e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  400382:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  400386:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  40038a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  40038e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  400392:	4b30      	ldr	r3, [pc, #192]	; (400454 <gmac_dev_init+0x144>)
  400394:	f06f 0201 	mvn.w	r2, #1
  400398:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  40039a:	2700      	movs	r7, #0
  40039c:	605f      	str	r7, [r3, #4]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  40039e:	f023 0303 	bic.w	r3, r3, #3
  4003a2:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  4003a6:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  4003aa:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  4003ae:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  4003b2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	return p_gmac->GMAC_ISR;
  4003b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
  4003b8:	4b27      	ldr	r3, [pc, #156]	; (400458 <gmac_dev_init+0x148>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
  4003ba:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_buffer =
  4003be:	60b3      	str	r3, [r6, #8]
			(gmac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr
  4003c0:	4b26      	ldr	r3, [pc, #152]	; (40045c <gmac_dev_init+0x14c>)
			& 0xFFFFFFF8);
  4003c2:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_dscr =
  4003c6:	60f3      	str	r3, [r6, #12]
	p_gmac_queue->us_rx_list_size = p_dev_mm->us_rx_size;
  4003c8:	2210      	movs	r2, #16
  4003ca:	8432      	strh	r2, [r6, #32]
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
  4003cc:	4b24      	ldr	r3, [pc, #144]	; (400460 <gmac_dev_init+0x150>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
  4003ce:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_buffer =
  4003d2:	6073      	str	r3, [r6, #4]
			(gmac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr
  4003d4:	4b23      	ldr	r3, [pc, #140]	; (400464 <gmac_dev_init+0x154>)
			& 0xFFFFFFF8);
  4003d6:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_dscr =
  4003da:	6133      	str	r3, [r6, #16]
	p_gmac_queue->us_tx_list_size = p_dev_mm->us_tx_size;
  4003dc:	84b2      	strh	r2, [r6, #36]	; 0x24
	p_gmac_queue->func_tx_cb_list = p_tx_cb;
  4003de:	4b22      	ldr	r3, [pc, #136]	; (400468 <gmac_dev_init+0x158>)
  4003e0:	61f3      	str	r3, [r6, #28]
	gmac_reset_rx_mem(p_gmac_dev, queue_idx);
  4003e2:	4639      	mov	r1, r7
  4003e4:	4630      	mov	r0, r6
  4003e6:	4b21      	ldr	r3, [pc, #132]	; (40046c <gmac_dev_init+0x15c>)
  4003e8:	4798      	blx	r3
	gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  4003ea:	4639      	mov	r1, r7
  4003ec:	4630      	mov	r0, r6
  4003ee:	4b20      	ldr	r3, [pc, #128]	; (400470 <gmac_dev_init+0x160>)
  4003f0:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4003f2:	6823      	ldr	r3, [r4, #0]
  4003f4:	f043 0308 	orr.w	r3, r3, #8
  4003f8:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4003fa:	6823      	ldr	r3, [r4, #0]
  4003fc:	f043 0304 	orr.w	r3, r3, #4
  400400:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  400402:	6823      	ldr	r3, [r4, #0]
  400404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400408:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  40040a:	f643 43f6 	movw	r3, #15606	; 0x3cf6
  40040e:	62a3      	str	r3, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400410:	796a      	ldrb	r2, [r5, #5]
			| (p_mac_addr[2] << 16)
  400412:	792b      	ldrb	r3, [r5, #4]
  400414:	041b      	lsls	r3, r3, #16
  400416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  40041a:	78aa      	ldrb	r2, [r5, #2]
  40041c:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  40041e:	78ea      	ldrb	r2, [r5, #3]
			| (p_mac_addr[0]);
  400420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400424:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400428:	79ea      	ldrb	r2, [r5, #7]
			| (p_mac_addr[4]);
  40042a:	79ab      	ldrb	r3, [r5, #6]
  40042c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400430:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  400434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  400436:	6843      	ldr	r3, [r0, #4]
  400438:	f023 0310 	bic.w	r3, r3, #16
  40043c:	6043      	str	r3, [r0, #4]
  40043e:	e784      	b.n	40034a <gmac_dev_init+0x3a>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  400440:	6863      	ldr	r3, [r4, #4]
  400442:	f043 0320 	orr.w	r3, r3, #32
  400446:	6063      	str	r3, [r4, #4]
  400448:	e786      	b.n	400358 <gmac_dev_init+0x48>
  40044a:	bf00      	nop
  40044c:	00022102 	.word	0x00022102
  400450:	20400b50 	.word	0x20400b50
  400454:	20400a88 	.word	0x20400a88
  400458:	20400b58 	.word	0x20400b58
  40045c:	20400a08 	.word	0x20400a08
  400460:	20401358 	.word	0x20401358
  400464:	20400ad0 	.word	0x20400ad0
  400468:	20400a90 	.word	0x20400a90
  40046c:	00400297 	.word	0x00400297
  400470:	00400221 	.word	0x00400221

00400474 <gmac_dev_read>:
 *
 * \return GMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t gmac_dev_read(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
  400474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400478:	b087      	sub	sp, #28
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  40047a:	9102      	str	r1, [sp, #8]
	uint16_t us_tmp_idx = p_gmac_queue->us_rx_idx;
  40047c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  400480:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  400484:	8c66      	ldrh	r6, [r4, #34]	; 0x22
  400486:	f8ad 6016 	strh.w	r6, [sp, #22]
	gmac_rx_descriptor_t *p_rx_td =
			&p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
  40048a:	2a00      	cmp	r2, #0
  40048c:	f000 80cb 	beq.w	400626 <gmac_dev_read+0x1b2>
  400490:	468e      	mov	lr, r1
  400492:	4615      	mov	r5, r2
	gmac_rx_descriptor_t *p_rx_td =
  400494:	68e2      	ldr	r2, [r4, #12]
  400496:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
		return GMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
  40049a:	f04f 0c00 	mov.w	ip, #0
  40049e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  4004a0:	f8c7 c000 	str.w	ip, [r7]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4004a4:	f852 2036 	ldr.w	r2, [r2, r6, lsl #3]
  4004a8:	f012 0f01 	tst.w	r2, #1
  4004ac:	f000 80bd 	beq.w	40062a <gmac_dev_read+0x1b6>
  4004b0:	9501      	str	r5, [sp, #4]
  4004b2:	469b      	mov	fp, r3
  4004b4:	9103      	str	r1, [sp, #12]
  4004b6:	4605      	mov	r5, r0
			/* Skip previous fragment */
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);

				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4004b8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4004bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4004c0:	3322      	adds	r3, #34	; 0x22
  4004c2:	9300      	str	r3, [sp, #0]
  4004c4:	46e0      	mov	r8, ip
  4004c6:	46e1      	mov	r9, ip
  4004c8:	4667      	mov	r7, ip
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			/* A complete turn has been made but no EOF found */
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  4004ca:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  4004ce:	00f6      	lsls	r6, r6, #3
  4004d0:	e01c      	b.n	40050c <gmac_dev_read+0x98>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  4004d2:	19ab      	adds	r3, r5, r6
  4004d4:	8c19      	ldrh	r1, [r3, #32]
  4004d6:	f10d 0016 	add.w	r0, sp, #22
  4004da:	4b55      	ldr	r3, [pc, #340]	; (400630 <gmac_dev_read+0x1bc>)
  4004dc:	4798      	blx	r3
		if (c_is_frame) {
  4004de:	f1b8 0f00 	cmp.w	r8, #0
  4004e2:	d13a      	bne.n	40055a <gmac_dev_read+0xe6>
				return GMAC_OK;
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4004e4:	6823      	ldr	r3, [r4, #0]
  4004e6:	f023 0301 	bic.w	r3, r3, #1
  4004ea:	6023      	str	r3, [r4, #0]
			p_gmac_queue->us_rx_idx = us_tmp_idx;
  4004ec:	19ab      	adds	r3, r5, r6
  4004ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4004f2:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_gmac_queue->p_rx_dscr[us_tmp_idx];
  4004f4:	19ab      	adds	r3, r5, r6
  4004f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4004fa:	68db      	ldr	r3, [r3, #12]
  4004fc:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  400500:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400504:	f013 0f01 	tst.w	r3, #1
  400508:	f000 8089 	beq.w	40061e <gmac_dev_read+0x1aa>
		if ((p_rx_td->status.val & GMAC_RXD_SOF) == GMAC_RXD_SOF) {
  40050c:	6863      	ldr	r3, [r4, #4]
  40050e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400512:	d0de      	beq.n	4004d2 <gmac_dev_read+0x5e>
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400514:	19ab      	adds	r3, r5, r6
  400516:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400518:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40051c:	429a      	cmp	r2, r3
  40051e:	d013      	beq.n	400548 <gmac_dev_read+0xd4>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400520:	19af      	adds	r7, r5, r6
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400522:	f8df 810c 	ldr.w	r8, [pc, #268]	; 400630 <gmac_dev_read+0x1bc>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400526:	68fa      	ldr	r2, [r7, #12]
  400528:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40052c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
  400530:	f021 0101 	bic.w	r1, r1, #1
  400534:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400538:	8c39      	ldrh	r1, [r7, #32]
  40053a:	9800      	ldr	r0, [sp, #0]
  40053c:	47c0      	blx	r8
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  40053e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  400540:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400544:	429a      	cmp	r2, r3
  400546:	d1ee      	bne.n	400526 <gmac_dev_read+0xb2>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  400548:	19ab      	adds	r3, r5, r6
  40054a:	8c19      	ldrh	r1, [r3, #32]
  40054c:	f10d 0016 	add.w	r0, sp, #22
  400550:	4b37      	ldr	r3, [pc, #220]	; (400630 <gmac_dev_read+0x1bc>)
  400552:	4798      	blx	r3
  400554:	f8dd 9004 	ldr.w	r9, [sp, #4]
  400558:	2700      	movs	r7, #0
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  40055a:	f8bd a016 	ldrh.w	sl, [sp, #22]
  40055e:	19ab      	adds	r3, r5, r6
  400560:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400562:	4553      	cmp	r3, sl
  400564:	d008      	beq.n	400578 <gmac_dev_read+0x104>
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
  400566:	f107 0380 	add.w	r3, r7, #128	; 0x80
  40056a:	455b      	cmp	r3, fp
  40056c:	d91d      	bls.n	4005aa <gmac_dev_read+0x136>
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
  40056e:	ebab 0807 	sub.w	r8, fp, r7
  400572:	fa1f f888 	uxth.w	r8, r8
  400576:	e01a      	b.n	4005ae <gmac_dev_read+0x13a>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400578:	9b02      	ldr	r3, [sp, #8]
  40057a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40057e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400582:	4c2b      	ldr	r4, [pc, #172]	; (400630 <gmac_dev_read+0x1bc>)
  400584:	9e00      	ldr	r6, [sp, #0]
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400586:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  400588:	68ea      	ldr	r2, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40058a:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  40058e:	f023 0301 	bic.w	r3, r3, #1
  400592:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400596:	8c29      	ldrh	r1, [r5, #32]
  400598:	4630      	mov	r0, r6
  40059a:	47a0      	blx	r4
				} while (us_tmp_idx != p_gmac_queue->us_rx_idx);
  40059c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  40059e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4005a2:	429a      	cmp	r2, r3
  4005a4:	d1ef      	bne.n	400586 <gmac_dev_read+0x112>
				return GMAC_RX_ERROR;
  4005a6:	2003      	movs	r0, #3
  4005a8:	e03a      	b.n	400620 <gmac_dev_read+0x1ac>
			us_buffer_length = GMAC_RX_UNITSIZE;
  4005aa:	f04f 0880 	mov.w	r8, #128	; 0x80
					(void *)(p_rx_td->addr.val & GMAC_RXD_ADDR_MASK),
  4005ae:	6821      	ldr	r1, [r4, #0]
			memcpy(p_tmp_frame,
  4005b0:	4642      	mov	r2, r8
  4005b2:	f021 0103 	bic.w	r1, r1, #3
  4005b6:	4648      	mov	r0, r9
  4005b8:	4b1e      	ldr	r3, [pc, #120]	; (400634 <gmac_dev_read+0x1c0>)
  4005ba:	4798      	blx	r3
			p_tmp_frame += us_buffer_length;
  4005bc:	44c1      	add	r9, r8
			tmp_ul_frame_size += us_buffer_length;
  4005be:	4447      	add	r7, r8
			if ((p_rx_td->status.val & GMAC_RXD_EOF) == GMAC_RXD_EOF) {
  4005c0:	6863      	ldr	r3, [r4, #4]
  4005c2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4005c6:	d102      	bne.n	4005ce <gmac_dev_read+0x15a>
  4005c8:	f04f 0801 	mov.w	r8, #1
  4005cc:	e792      	b.n	4004f4 <gmac_dev_read+0x80>
				*p_rcv_size = (p_rx_td->status.val & GMAC_RXD_LEN_MASK);
  4005ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4005d4:	6013      	str	r3, [r2, #0]
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  4005d6:	9b03      	ldr	r3, [sp, #12]
  4005d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4005dc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4005e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  4005e2:	459a      	cmp	sl, r3
  4005e4:	d014      	beq.n	400610 <gmac_dev_read+0x19c>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4005e6:	9a02      	ldr	r2, [sp, #8]
  4005e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4005ec:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4005f0:	4c0f      	ldr	r4, [pc, #60]	; (400630 <gmac_dev_read+0x1bc>)
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4005f2:	68e9      	ldr	r1, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4005f4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  4005f8:	f022 0201 	bic.w	r2, r2, #1
  4005fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400600:	8c29      	ldrh	r1, [r5, #32]
  400602:	9800      	ldr	r0, [sp, #0]
  400604:	47a0      	blx	r4
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400606:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  400608:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40060c:	429a      	cmp	r2, r3
  40060e:	d1f0      	bne.n	4005f2 <gmac_dev_read+0x17e>
				if (tmp_ul_frame_size < *p_rcv_size) {
  400610:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400612:	6818      	ldr	r0, [r3, #0]
				return GMAC_OK;
  400614:	4287      	cmp	r7, r0
  400616:	bf34      	ite	cc
  400618:	2005      	movcc	r0, #5
  40061a:	2000      	movcs	r0, #0
  40061c:	e000      	b.n	400620 <gmac_dev_read+0x1ac>
	}

	return GMAC_RX_NO_DATA;
  40061e:	2004      	movs	r0, #4
}
  400620:	b007      	add	sp, #28
  400622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return GMAC_PARAM;
  400626:	2006      	movs	r0, #6
  400628:	e7fa      	b.n	400620 <gmac_dev_read+0x1ac>
	return GMAC_RX_NO_DATA;
  40062a:	2004      	movs	r0, #4
  40062c:	e7f8      	b.n	400620 <gmac_dev_read+0x1ac>
  40062e:	bf00      	nop
  400630:	00400211 	.word	0x00400211
  400634:	00403031 	.word	0x00403031

00400638 <gmac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t gmac_dev_write(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, void *p_buffer,
		uint32_t ul_size, gmac_dev_tx_cb_t func_tx_cb)
{
  400638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	Gmac *p_hw = p_gmac_dev->p_hw;
	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];

	/* Check parameter */
	if (ul_size > GMAC_TX_UNITSIZE) {
  40063c:	f240 56ee 	movw	r6, #1518	; 0x5ee
  400640:	42b3      	cmp	r3, r6
  400642:	d902      	bls.n	40064a <gmac_dev_write+0x12>
		return GMAC_PARAM;
  400644:	2006      	movs	r0, #6
  400646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_head];
  40064a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  40064e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
  400652:	8cef      	ldrh	r7, [r5, #38]	; 0x26
  400654:	00fe      	lsls	r6, r7, #3
  400656:	f8d5 e010 	ldr.w	lr, [r5, #16]
  40065a:	eb0e 0806 	add.w	r8, lr, r6

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  40065e:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
  400660:	f107 0c01 	add.w	ip, r7, #1
  400664:	eba4 040c 	sub.w	r4, r4, ip
  400668:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
  40066c:	fb94 f5fc 	sdiv	r5, r4, ip
  400670:	fb0c 4415 	mls	r4, ip, r5, r4
  400674:	b91c      	cbnz	r4, 40067e <gmac_dev_write+0x46>
					p_gmac_queue->us_tx_list_size) == 0) {
		if (p_tx_td[p_gmac_queue->us_tx_head].status.val & GMAC_TXD_USED)
  400676:	4446      	add	r6, r8
  400678:	6874      	ldr	r4, [r6, #4]
  40067a:	2c00      	cmp	r4, #0
  40067c:	db41      	blt.n	400702 <gmac_dev_write+0xca>
  40067e:	461e      	mov	r6, r3
  400680:	4694      	mov	ip, r2
  400682:	460c      	mov	r4, r1
  400684:	4605      	mov	r5, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  400686:	f8d0 9000 	ldr.w	r9, [r0]
			return GMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_head];
  40068a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40068e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400692:	f8d3 a01c 	ldr.w	sl, [r3, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
  400696:	b102      	cbz	r2, 40069a <gmac_dev_write+0x62>
  400698:	bb2e      	cbnz	r6, 4006e6 <gmac_dev_write+0xae>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
  40069a:	9b08      	ldr	r3, [sp, #32]
  40069c:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_gmac_queue->us_tx_head == p_gmac_queue->us_tx_list_size - 1) {
  4006a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4006a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4006a8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  4006aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4006ac:	3b01      	subs	r3, #1
  4006ae:	429a      	cmp	r2, r3
  4006b0:	d020      	beq.n	4006f4 <gmac_dev_write+0xbc>
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
				| GMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST;
  4006b2:	f3c6 030c 	ubfx	r3, r6, #0, #13
  4006b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		p_tx_td->status.val =
  4006ba:	f8c8 3004 	str.w	r3, [r8, #4]
	}

	circ_inc(&p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_list_size);
  4006be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4006c2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4006c6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  4006c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
  4006cc:	4b0e      	ldr	r3, [pc, #56]	; (400708 <gmac_dev_write+0xd0>)
  4006ce:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4006d0:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  4006d4:	f8d9 3000 	ldr.w	r3, [r9]
  4006d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4006dc:	f8c9 3000 	str.w	r3, [r9]

	/* Now start to transmit if it is still not done */
	gmac_start_transmission(p_hw);

	return GMAC_OK;
  4006e0:	2000      	movs	r0, #0
  4006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
  4006e6:	f85e 0037 	ldr.w	r0, [lr, r7, lsl #3]
  4006ea:	4632      	mov	r2, r6
  4006ec:	4661      	mov	r1, ip
  4006ee:	4b07      	ldr	r3, [pc, #28]	; (40070c <gmac_dev_write+0xd4>)
  4006f0:	4798      	blx	r3
  4006f2:	e7d2      	b.n	40069a <gmac_dev_write+0x62>
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
  4006f4:	f3c6 030c 	ubfx	r3, r6, #0, #13
				| GMAC_TXD_WRAP;
  4006f8:	4a05      	ldr	r2, [pc, #20]	; (400710 <gmac_dev_write+0xd8>)
  4006fa:	431a      	orrs	r2, r3
		p_tx_td->status.val =
  4006fc:	f8c8 2004 	str.w	r2, [r8, #4]
  400700:	e7dd      	b.n	4006be <gmac_dev_write+0x86>
			return GMAC_TX_BUSY;
  400702:	2002      	movs	r0, #2
}
  400704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400708:	00400211 	.word	0x00400211
  40070c:	00403031 	.word	0x00403031
  400710:	40008000 	.word	0x40008000

00400714 <gmac_handler>:
 * \brief GMAC Interrupt handler.
 *
 * \param p_gmac_dev   Pointer to GMAC device instance.
 */
void gmac_handler(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx)
{
  400714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400718:	b085      	sub	sp, #20
  40071a:	4607      	mov	r7, r0
  40071c:	460d      	mov	r5, r1
	Gmac *p_hw = p_gmac_dev->p_hw;
  40071e:	6806      	ldr	r6, [r0, #0]
	uint32_t ul_tx_status_flag;
#ifdef FREERTOS_USED
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
#endif

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  400720:	460c      	mov	r4, r1

	if(queue_idx == GMAC_QUE_0) {
  400722:	2900      	cmp	r1, #0
  400724:	d153      	bne.n	4007ce <gmac_handler+0xba>
	return p_gmac->GMAC_ISR;
  400726:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ul_isr = gmac_get_interrupt_status(p_hw);
  400728:	9303      	str	r3, [sp, #12]
	return p_gmac->GMAC_RSR;
  40072a:	6a33      	ldr	r3, [r6, #32]
	} else {
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
	}
	ul_rsr = gmac_get_rx_status(p_hw);
  40072c:	9302      	str	r3, [sp, #8]
	return p_gmac->GMAC_TSR;
  40072e:	6973      	ldr	r3, [r6, #20]
	ul_tsr = gmac_get_tx_status(p_hw);
  400730:	9301      	str	r3, [sp, #4]
	return p_gmac->GMAC_IMR;
  400732:	6b31      	ldr	r1, [r6, #48]	; 0x30

	ul_isr &= ~(gmac_get_interrupt_mask(p_hw) | 0xF8030300);
  400734:	9b03      	ldr	r3, [sp, #12]
  400736:	4a49      	ldr	r2, [pc, #292]	; (40085c <gmac_handler+0x148>)
  400738:	430a      	orrs	r2, r1
  40073a:	ea23 0302 	bic.w	r3, r3, r2
  40073e:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & GMAC_ISR_RCOMP) || (ul_rsr & GMAC_RSR_REC)) {
  400740:	9b03      	ldr	r3, [sp, #12]
  400742:	f013 0f02 	tst.w	r3, #2
  400746:	d103      	bne.n	400750 <gmac_handler+0x3c>
  400748:	9b02      	ldr	r3, [sp, #8]
  40074a:	f013 0f02 	tst.w	r3, #2
  40074e:	d014      	beq.n	40077a <gmac_handler+0x66>
		ul_rx_status_flag = GMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & GMAC_RSR_RXOVR) {
  400750:	9b02      	ldr	r3, [sp, #8]
  400752:	f003 0304 	and.w	r3, r3, #4
			ul_rx_status_flag |= GMAC_RSR_RXOVR;
  400756:	2b00      	cmp	r3, #0
  400758:	bf0c      	ite	eq
  40075a:	2002      	moveq	r0, #2
  40075c:	2006      	movne	r0, #6
		}
		/* Check BNA */
		if (ul_rsr & GMAC_RSR_BNA) {
  40075e:	9b02      	ldr	r3, [sp, #8]
  400760:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= GMAC_RSR_BNA;
  400764:	bf18      	it	ne
  400766:	f040 0001 	orrne.w	r0, r0, #1
	p_gmac->GMAC_RSR = ul_status;
  40076a:	6230      	str	r0, [r6, #32]
		}
		/* Clear status */
		gmac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_gmac_queue->func_rx_cb) {
  40076c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400770:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400774:	695b      	ldr	r3, [r3, #20]
  400776:	b103      	cbz	r3, 40077a <gmac_handler+0x66>
			p_gmac_queue->func_rx_cb(ul_rx_status_flag);
  400778:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & GMAC_ISR_TCOMP) || (ul_tsr & GMAC_TSR_TXCOMP)) {
  40077a:	9b03      	ldr	r3, [sp, #12]
  40077c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400780:	d103      	bne.n	40078a <gmac_handler+0x76>
  400782:	9b01      	ldr	r3, [sp, #4]
  400784:	f013 0f20 	tst.w	r3, #32
  400788:	d065      	beq.n	400856 <gmac_handler+0x142>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;

		/* Check RLE */
		if (ul_tsr & GMAC_TSR_RLE) {
  40078a:	9b01      	ldr	r3, [sp, #4]
  40078c:	f013 0f04 	tst.w	r3, #4
  400790:	d123      	bne.n	4007da <gmac_handler+0xc6>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;
  400792:	f04f 0920 	mov.w	r9, #32
			p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
			gmac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & GMAC_TSR_COL) {
  400796:	9b01      	ldr	r3, [sp, #4]
  400798:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= GMAC_TSR_COL;
  40079c:	bf18      	it	ne
  40079e:	f049 0902 	orrne.w	r9, r9, #2
	p_gmac->GMAC_TSR = ul_status;
  4007a2:	f8c6 9014 	str.w	r9, [r6, #20]
		}

		/* Clear status */
		gmac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail)) {
  4007a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  4007aa:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  4007ae:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  4007b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4007b2:	429a      	cmp	r2, r3
  4007b4:	d037      	beq.n	400826 <gmac_handler+0x112>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007b6:	1c6e      	adds	r6, r5, #1
  4007b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4007bc:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  4007c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4007c4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007c8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 400864 <gmac_handler+0x150>
  4007cc:	e01c      	b.n	400808 <gmac_handler+0xf4>
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  4007ce:	f101 03ff 	add.w	r3, r1, #255	; 0xff
  4007d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
  4007d6:	9303      	str	r3, [sp, #12]
  4007d8:	e7a7      	b.n	40072a <gmac_handler+0x16>
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  4007da:	4629      	mov	r1, r5
  4007dc:	4638      	mov	r0, r7
  4007de:	4b20      	ldr	r3, [pc, #128]	; (400860 <gmac_handler+0x14c>)
  4007e0:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4007e2:	6833      	ldr	r3, [r6, #0]
  4007e4:	f043 0308 	orr.w	r3, r3, #8
  4007e8:	6033      	str	r3, [r6, #0]
			ul_tx_status_flag = GMAC_TSR_RLE;
  4007ea:	f04f 0904 	mov.w	r9, #4
  4007ee:	e7d2      	b.n	400796 <gmac_handler+0x82>
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  4007f0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  4007f2:	4630      	mov	r0, r6
  4007f4:	47c0      	blx	r8
			} while (CIRC_CNT(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  4007f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  4007f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  4007fa:	1a9b      	subs	r3, r3, r2
  4007fc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  4007fe:	fb93 f2f1 	sdiv	r2, r3, r1
  400802:	fb01 3312 	mls	r3, r1, r2, r3
  400806:	b173      	cbz	r3, 400826 <gmac_handler+0x112>
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400808:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
  40080a:	69e1      	ldr	r1, [r4, #28]
				if ((p_tx_td->status.val & GMAC_TXD_USED) == 0) {
  40080c:	6923      	ldr	r3, [r4, #16]
  40080e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  400812:	685b      	ldr	r3, [r3, #4]
  400814:	2b00      	cmp	r3, #0
  400816:	da06      	bge.n	400826 <gmac_handler+0x112>
				if (*p_tx_cb) {
  400818:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
  40081c:	2b00      	cmp	r3, #0
  40081e:	d0e7      	beq.n	4007f0 <gmac_handler+0xdc>
					(*p_tx_cb) (ul_tx_status_flag);
  400820:	4648      	mov	r0, r9
  400822:	4798      	blx	r3
  400824:	e7e4      	b.n	4007f0 <gmac_handler+0xdc>
							p_gmac_queue->us_tx_list_size));
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400826:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  40082a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  40082e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  400830:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
  400832:	3101      	adds	r1, #1
  400834:	1a52      	subs	r2, r2, r1
  400836:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  400838:	fb92 f1f0 	sdiv	r1, r2, r0
  40083c:	fb00 2211 	mls	r2, r0, r1, r2
				p_gmac_queue->us_tx_list_size) >= p_gmac_queue->uc_wakeup_threshold)
  400840:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400844:	429a      	cmp	r2, r3
  400846:	db06      	blt.n	400856 <gmac_handler+0x142>
				&& p_gmac_queue->func_wakeup_cb) {
  400848:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40084c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  400850:	69ab      	ldr	r3, [r5, #24]
  400852:	b103      	cbz	r3, 400856 <gmac_handler+0x142>
			p_gmac_queue->func_wakeup_cb();
  400854:	4798      	blx	r3
		/* the complete IP stack. */
		xSemaphoreGiveFromISR(netif_notification_semaphore,
				&xHigherPriorityTaskWoken);
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
}
  400856:	b005      	add	sp, #20
  400858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40085c:	f8030300 	.word	0xf8030300
  400860:	00400221 	.word	0x00400221
  400864:	00400211 	.word	0x00400211

00400868 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400868:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40086a:	4b07      	ldr	r3, [pc, #28]	; (400888 <spi_enable_clock+0x20>)
  40086c:	4298      	cmp	r0, r3
  40086e:	d003      	beq.n	400878 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400870:	4b06      	ldr	r3, [pc, #24]	; (40088c <spi_enable_clock+0x24>)
  400872:	4298      	cmp	r0, r3
  400874:	d004      	beq.n	400880 <spi_enable_clock+0x18>
  400876:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400878:	2015      	movs	r0, #21
  40087a:	4b05      	ldr	r3, [pc, #20]	; (400890 <spi_enable_clock+0x28>)
  40087c:	4798      	blx	r3
  40087e:	bd08      	pop	{r3, pc}
  400880:	202a      	movs	r0, #42	; 0x2a
  400882:	4b03      	ldr	r3, [pc, #12]	; (400890 <spi_enable_clock+0x28>)
  400884:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400886:	e7f6      	b.n	400876 <spi_enable_clock+0xe>
  400888:	40008000 	.word	0x40008000
  40088c:	40058000 	.word	0x40058000
  400890:	00402121 	.word	0x00402121

00400894 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400894:	6843      	ldr	r3, [r0, #4]
  400896:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40089a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40089c:	6843      	ldr	r3, [r0, #4]
  40089e:	0409      	lsls	r1, r1, #16
  4008a0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4008a4:	4319      	orrs	r1, r3
  4008a6:	6041      	str	r1, [r0, #4]
  4008a8:	4770      	bx	lr

004008aa <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4008aa:	6843      	ldr	r3, [r0, #4]
  4008ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4008b0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4008b2:	6843      	ldr	r3, [r0, #4]
  4008b4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4008b8:	6041      	str	r1, [r0, #4]
  4008ba:	4770      	bx	lr

004008bc <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4008bc:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4008be:	f643 2399 	movw	r3, #15001	; 0x3a99
  4008c2:	6904      	ldr	r4, [r0, #16]
  4008c4:	f014 0f01 	tst.w	r4, #1
  4008c8:	d103      	bne.n	4008d2 <spi_read+0x16>
		if (!timeout--) {
  4008ca:	3b01      	subs	r3, #1
  4008cc:	d1f9      	bne.n	4008c2 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4008ce:	2001      	movs	r0, #1
  4008d0:	e009      	b.n	4008e6 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4008d2:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4008d4:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4008d6:	f010 0f02 	tst.w	r0, #2
  4008da:	d002      	beq.n	4008e2 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4008dc:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4008e0:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4008e2:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4008e4:	2000      	movs	r0, #0
}
  4008e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ea:	4770      	bx	lr

004008ec <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4008ec:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4008ee:	f643 2499 	movw	r4, #15001	; 0x3a99
  4008f2:	6905      	ldr	r5, [r0, #16]
  4008f4:	f015 0f02 	tst.w	r5, #2
  4008f8:	d103      	bne.n	400902 <spi_write+0x16>
		if (!timeout--) {
  4008fa:	3c01      	subs	r4, #1
  4008fc:	d1f9      	bne.n	4008f2 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4008fe:	2001      	movs	r0, #1
  400900:	e00c      	b.n	40091c <spi_write+0x30>
  400902:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400904:	f014 0f02 	tst.w	r4, #2
  400908:	d006      	beq.n	400918 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40090a:	0412      	lsls	r2, r2, #16
  40090c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400910:	4311      	orrs	r1, r2
		if (uc_last) {
  400912:	b10b      	cbz	r3, 400918 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400914:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400918:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40091a:	2000      	movs	r0, #0
}
  40091c:	bc30      	pop	{r4, r5}
  40091e:	4770      	bx	lr

00400920 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400920:	b932      	cbnz	r2, 400930 <spi_set_clock_polarity+0x10>
  400922:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400926:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400928:	f023 0301 	bic.w	r3, r3, #1
  40092c:	6303      	str	r3, [r0, #48]	; 0x30
  40092e:	4770      	bx	lr
  400930:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400934:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400936:	f043 0301 	orr.w	r3, r3, #1
  40093a:	6303      	str	r3, [r0, #48]	; 0x30
  40093c:	4770      	bx	lr

0040093e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40093e:	b932      	cbnz	r2, 40094e <spi_set_clock_phase+0x10>
  400940:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400944:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400946:	f023 0302 	bic.w	r3, r3, #2
  40094a:	6303      	str	r3, [r0, #48]	; 0x30
  40094c:	4770      	bx	lr
  40094e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400952:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400954:	f043 0302 	orr.w	r3, r3, #2
  400958:	6303      	str	r3, [r0, #48]	; 0x30
  40095a:	4770      	bx	lr

0040095c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40095c:	2a04      	cmp	r2, #4
  40095e:	d003      	beq.n	400968 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400960:	b16a      	cbz	r2, 40097e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400962:	2a08      	cmp	r2, #8
  400964:	d016      	beq.n	400994 <spi_configure_cs_behavior+0x38>
  400966:	4770      	bx	lr
  400968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40096c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40096e:	f023 0308 	bic.w	r3, r3, #8
  400972:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400974:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400976:	f043 0304 	orr.w	r3, r3, #4
  40097a:	6303      	str	r3, [r0, #48]	; 0x30
  40097c:	4770      	bx	lr
  40097e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400982:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400984:	f023 0308 	bic.w	r3, r3, #8
  400988:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40098a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40098c:	f023 0304 	bic.w	r3, r3, #4
  400990:	6303      	str	r3, [r0, #48]	; 0x30
  400992:	4770      	bx	lr
  400994:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400998:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40099a:	f043 0308 	orr.w	r3, r3, #8
  40099e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4009a0:	e7e1      	b.n	400966 <spi_configure_cs_behavior+0xa>

004009a2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4009a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4009a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4009ac:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4009ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009b0:	431a      	orrs	r2, r3
  4009b2:	630a      	str	r2, [r1, #48]	; 0x30
  4009b4:	4770      	bx	lr

004009b6 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4009b6:	b17a      	cbz	r2, 4009d8 <spi_set_baudrate_div+0x22>
{
  4009b8:	b410      	push	{r4}
  4009ba:	4614      	mov	r4, r2
  4009bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4009c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4009c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4009c6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4009c8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4009ca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4009ce:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4009d0:	2000      	movs	r0, #0
}
  4009d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009d6:	4770      	bx	lr
        return -1;
  4009d8:	f04f 30ff 	mov.w	r0, #4294967295
  4009dc:	4770      	bx	lr

004009de <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4009de:	b410      	push	{r4}
  4009e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4009e4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4009e6:	b280      	uxth	r0, r0
  4009e8:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4009ea:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4009ec:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4009f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4009f4:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4009f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009fa:	4770      	bx	lr

004009fc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4009fc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009fe:	010b      	lsls	r3, r1, #4
  400a00:	4293      	cmp	r3, r2
  400a02:	d914      	bls.n	400a2e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a04:	00c9      	lsls	r1, r1, #3
  400a06:	084b      	lsrs	r3, r1, #1
  400a08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a0c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a10:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a12:	1e5c      	subs	r4, r3, #1
  400a14:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a18:	428c      	cmp	r4, r1
  400a1a:	d901      	bls.n	400a20 <usart_set_async_baudrate+0x24>
		return 1;
  400a1c:	2001      	movs	r0, #1
  400a1e:	e017      	b.n	400a50 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a20:	6841      	ldr	r1, [r0, #4]
  400a22:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a26:	6041      	str	r1, [r0, #4]
  400a28:	e00c      	b.n	400a44 <usart_set_async_baudrate+0x48>
		return 1;
  400a2a:	2001      	movs	r0, #1
  400a2c:	e010      	b.n	400a50 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a2e:	0859      	lsrs	r1, r3, #1
  400a30:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400a34:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400a38:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a3a:	1e5c      	subs	r4, r3, #1
  400a3c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a40:	428c      	cmp	r4, r1
  400a42:	d8f2      	bhi.n	400a2a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a44:	0412      	lsls	r2, r2, #16
  400a46:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a4a:	431a      	orrs	r2, r3
  400a4c:	6202      	str	r2, [r0, #32]

	return 0;
  400a4e:	2000      	movs	r0, #0
}
  400a50:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a54:	4770      	bx	lr
	...

00400a58 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a58:	4b08      	ldr	r3, [pc, #32]	; (400a7c <usart_reset+0x24>)
  400a5a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400a5e:	2300      	movs	r3, #0
  400a60:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400a62:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a64:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a66:	2388      	movs	r3, #136	; 0x88
  400a68:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a6a:	2324      	movs	r3, #36	; 0x24
  400a6c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400a72:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400a74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400a78:	6003      	str	r3, [r0, #0]
  400a7a:	4770      	bx	lr
  400a7c:	55534100 	.word	0x55534100

00400a80 <usart_init_rs232>:
{
  400a80:	b570      	push	{r4, r5, r6, lr}
  400a82:	4605      	mov	r5, r0
  400a84:	460c      	mov	r4, r1
  400a86:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400a88:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <usart_init_rs232+0x48>)
  400a8a:	4798      	blx	r3
	ul_reg_val = 0;
  400a8c:	2200      	movs	r2, #0
  400a8e:	4b0f      	ldr	r3, [pc, #60]	; (400acc <usart_init_rs232+0x4c>)
  400a90:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a92:	b1a4      	cbz	r4, 400abe <usart_init_rs232+0x3e>
  400a94:	4632      	mov	r2, r6
  400a96:	6821      	ldr	r1, [r4, #0]
  400a98:	4628      	mov	r0, r5
  400a9a:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <usart_init_rs232+0x50>)
  400a9c:	4798      	blx	r3
  400a9e:	4602      	mov	r2, r0
  400aa0:	b978      	cbnz	r0, 400ac2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400aa2:	6863      	ldr	r3, [r4, #4]
  400aa4:	68a1      	ldr	r1, [r4, #8]
  400aa6:	430b      	orrs	r3, r1
  400aa8:	6921      	ldr	r1, [r4, #16]
  400aaa:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400aac:	68e1      	ldr	r1, [r4, #12]
  400aae:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ab0:	4906      	ldr	r1, [pc, #24]	; (400acc <usart_init_rs232+0x4c>)
  400ab2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400ab4:	6869      	ldr	r1, [r5, #4]
  400ab6:	430b      	orrs	r3, r1
  400ab8:	606b      	str	r3, [r5, #4]
}
  400aba:	4610      	mov	r0, r2
  400abc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400abe:	2201      	movs	r2, #1
  400ac0:	e7fb      	b.n	400aba <usart_init_rs232+0x3a>
  400ac2:	2201      	movs	r2, #1
  400ac4:	e7f9      	b.n	400aba <usart_init_rs232+0x3a>
  400ac6:	bf00      	nop
  400ac8:	00400a59 	.word	0x00400a59
  400acc:	20407238 	.word	0x20407238
  400ad0:	004009fd 	.word	0x004009fd

00400ad4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400ad4:	2340      	movs	r3, #64	; 0x40
  400ad6:	6003      	str	r3, [r0, #0]
  400ad8:	4770      	bx	lr

00400ada <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400ada:	2310      	movs	r3, #16
  400adc:	6003      	str	r3, [r0, #0]
  400ade:	4770      	bx	lr

00400ae0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ae0:	6943      	ldr	r3, [r0, #20]
  400ae2:	f013 0f02 	tst.w	r3, #2
  400ae6:	d004      	beq.n	400af2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ae8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400aec:	61c1      	str	r1, [r0, #28]
	return 0;
  400aee:	2000      	movs	r0, #0
  400af0:	4770      	bx	lr
		return 1;
  400af2:	2001      	movs	r0, #1
}
  400af4:	4770      	bx	lr

00400af6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400af6:	6943      	ldr	r3, [r0, #20]
  400af8:	f013 0f01 	tst.w	r3, #1
  400afc:	d005      	beq.n	400b0a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400afe:	6983      	ldr	r3, [r0, #24]
  400b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b04:	600b      	str	r3, [r1, #0]
	return 0;
  400b06:	2000      	movs	r0, #0
  400b08:	4770      	bx	lr
		return 1;
  400b0a:	2001      	movs	r0, #1
}
  400b0c:	4770      	bx	lr
	...

00400b10 <read_dev_gmac>:

#include "GMAC_Artnet.h"
#include "softLib/ArtNet/Art-Net.h"

uint32_t read_dev_gmac(void)
{
  400b10:	b510      	push	{r4, lr}
  400b12:	b082      	sub	sp, #8
	return gmac_dev_read(&gs_gmac_dev, GMAC_QUE_0, (uint8_t *) gs_uc_eth_buffer_rx, sizeof(gs_uc_eth_buffer_rx), &ul_frm_size_rx);
  400b14:	4b05      	ldr	r3, [pc, #20]	; (400b2c <read_dev_gmac+0x1c>)
  400b16:	9300      	str	r3, [sp, #0]
  400b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  400b1c:	4a04      	ldr	r2, [pc, #16]	; (400b30 <read_dev_gmac+0x20>)
  400b1e:	2100      	movs	r1, #0
  400b20:	4804      	ldr	r0, [pc, #16]	; (400b34 <read_dev_gmac+0x24>)
  400b22:	4c05      	ldr	r4, [pc, #20]	; (400b38 <read_dev_gmac+0x28>)
  400b24:	47a0      	blx	r4
}
  400b26:	b002      	add	sp, #8
  400b28:	bd10      	pop	{r4, pc}
  400b2a:	bf00      	nop
  400b2c:	204082e0 	.word	0x204082e0
  400b30:	204075e4 	.word	0x204075e4
  400b34:	204074ec 	.word	0x204074ec
  400b38:	00400475 	.word	0x00400475

00400b3c <init_gmac_ethernet>:

	return (uint16_t) (~ul_tmp);
}

bool init_gmac_ethernet(void)
{
  400b3c:	b538      	push	{r3, r4, r5, lr}
	at24mac_get_mac_address();
	#endif


	// Wait for PHY to be ready (CAT811: Max400ms)
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  400b3e:	4a27      	ldr	r2, [pc, #156]	; (400bdc <init_gmac_ethernet+0xa0>)
  400b40:	4b27      	ldr	r3, [pc, #156]	; (400be0 <init_gmac_ethernet+0xa4>)
  400b42:	601a      	str	r2, [r3, #0]
	while (ul_delay--);
  400b44:	461a      	mov	r2, r3
  400b46:	6813      	ldr	r3, [r2, #0]
  400b48:	1e59      	subs	r1, r3, #1
  400b4a:	6011      	str	r1, [r2, #0]
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d1fa      	bne.n	400b46 <init_gmac_ethernet+0xa>

	// Enable GMAC clock
	pmc_enable_periph_clk(ID_GMAC);
  400b50:	2027      	movs	r0, #39	; 0x27
  400b52:	4b24      	ldr	r3, [pc, #144]	; (400be4 <init_gmac_ethernet+0xa8>)
  400b54:	4798      	blx	r3

	// Fill in GMAC options
	gmac_option.uc_copy_all_frame = 0;
  400b56:	4a24      	ldr	r2, [pc, #144]	; (400be8 <init_gmac_ethernet+0xac>)
  400b58:	2500      	movs	r5, #0
  400b5a:	7015      	strb	r5, [r2, #0]
	gmac_option.uc_no_boardcast = 0;
  400b5c:	7055      	strb	r5, [r2, #1]

	memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
  400b5e:	4b23      	ldr	r3, [pc, #140]	; (400bec <init_gmac_ethernet+0xb0>)
  400b60:	6818      	ldr	r0, [r3, #0]
  400b62:	f8c2 0002 	str.w	r0, [r2, #2]
  400b66:	889b      	ldrh	r3, [r3, #4]
  400b68:	80d3      	strh	r3, [r2, #6]

	gs_gmac_dev.p_hw = GMAC;
  400b6a:	4921      	ldr	r1, [pc, #132]	; (400bf0 <init_gmac_ethernet+0xb4>)
  400b6c:	4c21      	ldr	r4, [pc, #132]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b6e:	600c      	str	r4, [r1, #0]

	// Init GMAC driver structure
	gmac_dev_init(GMAC, &gs_gmac_dev, &gmac_option);
  400b70:	4620      	mov	r0, r4
  400b72:	4b21      	ldr	r3, [pc, #132]	; (400bf8 <init_gmac_ethernet+0xbc>)
  400b74:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b76:	2280      	movs	r2, #128	; 0x80
  400b78:	4b20      	ldr	r3, [pc, #128]	; (400bfc <init_gmac_ethernet+0xc0>)
  400b7a:	605a      	str	r2, [r3, #4]

	// Enable Interrupt
	NVIC_EnableIRQ(GMAC_IRQn);

	// Init MAC PHY driver
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz())
  400b7c:	4a20      	ldr	r2, [pc, #128]	; (400c00 <init_gmac_ethernet+0xc4>)
  400b7e:	4629      	mov	r1, r5
  400b80:	4620      	mov	r0, r4
  400b82:	4b20      	ldr	r3, [pc, #128]	; (400c04 <init_gmac_ethernet+0xc8>)
  400b84:	4798      	blx	r3
  400b86:	b9c8      	cbnz	r0, 400bbc <init_gmac_ethernet+0x80>
		puts("PHY Initialize ERROR!\r");
		return 0;
	}

	// Auto Negotiate, work in RMII mode
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  400b88:	2100      	movs	r1, #0
  400b8a:	481a      	ldr	r0, [pc, #104]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b8c:	4b1e      	ldr	r3, [pc, #120]	; (400c08 <init_gmac_ethernet+0xcc>)
  400b8e:	4798      	blx	r3
  400b90:	b9c8      	cbnz	r0, 400bc6 <init_gmac_ethernet+0x8a>
		puts("Auto Negotiate ERROR!\r");
		return 0;
	}

	// Establish ethernet link
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  400b92:	2201      	movs	r2, #1
  400b94:	2100      	movs	r1, #0
  400b96:	4817      	ldr	r0, [pc, #92]	; (400bf4 <init_gmac_ethernet+0xb8>)
  400b98:	4b1c      	ldr	r3, [pc, #112]	; (400c0c <init_gmac_ethernet+0xd0>)
  400b9a:	4798      	blx	r3
  400b9c:	b9c0      	cbnz	r0, 400bd0 <init_gmac_ethernet+0x94>
		puts("Set link ERROR!\r");
		return 0;
	}
	
	for(uint8_t i = 0; i<4; i++)
		p_artAddr.IP[i] = gs_uc_ip_address[i];
  400b9e:	4b1c      	ldr	r3, [pc, #112]	; (400c10 <init_gmac_ethernet+0xd4>)
  400ba0:	4a1c      	ldr	r2, [pc, #112]	; (400c14 <init_gmac_ethernet+0xd8>)
  400ba2:	7811      	ldrb	r1, [r2, #0]
  400ba4:	7019      	strb	r1, [r3, #0]
  400ba6:	7851      	ldrb	r1, [r2, #1]
  400ba8:	7059      	strb	r1, [r3, #1]
  400baa:	7891      	ldrb	r1, [r2, #2]
  400bac:	7099      	strb	r1, [r3, #2]
  400bae:	78d2      	ldrb	r2, [r2, #3]
  400bb0:	70da      	strb	r2, [r3, #3]
	
	p_artAddr.Port = 0x6391;
  400bb2:	f246 3291 	movw	r2, #25489	; 0x6391
  400bb6:	809a      	strh	r2, [r3, #4]
	
	return 1;
  400bb8:	2001      	movs	r0, #1
}
  400bba:	bd38      	pop	{r3, r4, r5, pc}
		puts("PHY Initialize ERROR!\r");
  400bbc:	4816      	ldr	r0, [pc, #88]	; (400c18 <init_gmac_ethernet+0xdc>)
  400bbe:	4b17      	ldr	r3, [pc, #92]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bc0:	4798      	blx	r3
		return 0;
  400bc2:	4628      	mov	r0, r5
  400bc4:	bd38      	pop	{r3, r4, r5, pc}
		puts("Auto Negotiate ERROR!\r");
  400bc6:	4816      	ldr	r0, [pc, #88]	; (400c20 <init_gmac_ethernet+0xe4>)
  400bc8:	4b14      	ldr	r3, [pc, #80]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bca:	4798      	blx	r3
		return 0;
  400bcc:	2000      	movs	r0, #0
  400bce:	bd38      	pop	{r3, r4, r5, pc}
		puts("Set link ERROR!\r");
  400bd0:	4814      	ldr	r0, [pc, #80]	; (400c24 <init_gmac_ethernet+0xe8>)
  400bd2:	4b12      	ldr	r3, [pc, #72]	; (400c1c <init_gmac_ethernet+0xe0>)
  400bd4:	4798      	blx	r3
		return 0;
  400bd6:	2000      	movs	r0, #0
  400bd8:	bd38      	pop	{r3, r4, r5, pc}
  400bda:	bf00      	nop
  400bdc:	02625a00 	.word	0x02625a00
  400be0:	204075e0 	.word	0x204075e0
  400be4:	00402121 	.word	0x00402121
  400be8:	20407be4 	.word	0x20407be4
  400bec:	20400010 	.word	0x20400010
  400bf0:	204074ec 	.word	0x204074ec
  400bf4:	40050000 	.word	0x40050000
  400bf8:	00400311 	.word	0x00400311
  400bfc:	e000e100 	.word	0xe000e100
  400c00:	11e1a300 	.word	0x11e1a300
  400c04:	004019cd 	.word	0x004019cd
  400c08:	004017d1 	.word	0x004017d1
  400c0c:	004016dd 	.word	0x004016dd
  400c10:	204082e4 	.word	0x204082e4
  400c14:	2040000c 	.word	0x2040000c
  400c18:	004091f0 	.word	0x004091f0
  400c1c:	0040329d 	.word	0x0040329d
  400c20:	00409208 	.word	0x00409208
  400c24:	00409220 	.word	0x00409220

00400c28 <gmac_process_arp_packet>:

void gmac_process_arp_packet(uint8_t *p_uc_data, uint32_t ul_size)
{
  400c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c2a:	b085      	sub	sp, #20
	uint8_t ul_rc = GMAC_OK;

	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_arp_header_t p_arp = (p_arp_header_t) (p_uc_data + ETH_HEADER_SIZE);

	if (SWAP16(p_arp->ar_op) == ARP_REQUEST) {
  400c2c:	8a85      	ldrh	r5, [r0, #20]
  400c2e:	022a      	lsls	r2, r5, #8
  400c30:	b292      	uxth	r2, r2
  400c32:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
  400c36:	2a01      	cmp	r2, #1
  400c38:	d001      	beq.n	400c3e <gmac_process_arp_packet+0x16>

		if (ul_rc != GMAC_OK) {
			printf("E: ARP Send - 0x%x\n\r", ul_rc);
		}
	}
}
  400c3a:	b005      	add	sp, #20
  400c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400c3e:	460e      	mov	r6, r1
  400c40:	4604      	mov	r4, r0
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  400c42:	7883      	ldrb	r3, [r0, #2]
  400c44:	7842      	ldrb	r2, [r0, #1]
  400c46:	7801      	ldrb	r1, [r0, #0]
  400c48:	4f21      	ldr	r7, [pc, #132]	; (400cd0 <gmac_process_arp_packet+0xa8>)
  400c4a:	7940      	ldrb	r0, [r0, #5]
  400c4c:	9002      	str	r0, [sp, #8]
  400c4e:	7920      	ldrb	r0, [r4, #4]
  400c50:	9001      	str	r0, [sp, #4]
  400c52:	78e0      	ldrb	r0, [r4, #3]
  400c54:	9000      	str	r0, [sp, #0]
  400c56:	4638      	mov	r0, r7
  400c58:	4d1e      	ldr	r5, [pc, #120]	; (400cd4 <gmac_process_arp_packet+0xac>)
  400c5a:	47a8      	blx	r5
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  400c5c:	7a23      	ldrb	r3, [r4, #8]
  400c5e:	79e2      	ldrb	r2, [r4, #7]
  400c60:	79a1      	ldrb	r1, [r4, #6]
  400c62:	7ae0      	ldrb	r0, [r4, #11]
  400c64:	9002      	str	r0, [sp, #8]
  400c66:	7aa0      	ldrb	r0, [r4, #10]
  400c68:	9001      	str	r0, [sp, #4]
  400c6a:	7a60      	ldrb	r0, [r4, #9]
  400c6c:	9000      	str	r0, [sp, #0]
  400c6e:	4638      	mov	r0, r7
  400c70:	47a8      	blx	r5
		p_arp->ar_op = SWAP16(ARP_REPLY);
  400c72:	2300      	movs	r3, #0
  400c74:	7523      	strb	r3, [r4, #20]
  400c76:	2302      	movs	r3, #2
  400c78:	7563      	strb	r3, [r4, #21]
  400c7a:	1e63      	subs	r3, r4, #1
  400c7c:	4816      	ldr	r0, [pc, #88]	; (400cd8 <gmac_process_arp_packet+0xb0>)
  400c7e:	1d61      	adds	r1, r4, #5
			p_eth->et_dest[i] = p_eth->et_src[i];
  400c80:	79da      	ldrb	r2, [r3, #7]
  400c82:	f803 2f01 	strb.w	r2, [r3, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  400c86:	f810 2b01 	ldrb.w	r2, [r0], #1
  400c8a:	719a      	strb	r2, [r3, #6]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
  400c8c:	7d9d      	ldrb	r5, [r3, #22]
  400c8e:	f883 5020 	strb.w	r5, [r3, #32]
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
  400c92:	759a      	strb	r2, [r3, #22]
		for (i = 0; i < 6; i++) {
  400c94:	428b      	cmp	r3, r1
  400c96:	d1f3      	bne.n	400c80 <gmac_process_arp_packet+0x58>
  400c98:	f104 031b 	add.w	r3, r4, #27
  400c9c:	4a0f      	ldr	r2, [pc, #60]	; (400cdc <gmac_process_arp_packet+0xb4>)
  400c9e:	f104 001f 	add.w	r0, r4, #31
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
  400ca2:	7859      	ldrb	r1, [r3, #1]
  400ca4:	72d9      	strb	r1, [r3, #11]
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
  400ca6:	f812 1b01 	ldrb.w	r1, [r2], #1
  400caa:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  400cae:	4283      	cmp	r3, r0
  400cb0:	d1f7      	bne.n	400ca2 <gmac_process_arp_packet+0x7a>
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data, ul_size, NULL);
  400cb2:	2100      	movs	r1, #0
  400cb4:	9100      	str	r1, [sp, #0]
  400cb6:	4633      	mov	r3, r6
  400cb8:	4622      	mov	r2, r4
  400cba:	4809      	ldr	r0, [pc, #36]	; (400ce0 <gmac_process_arp_packet+0xb8>)
  400cbc:	4c09      	ldr	r4, [pc, #36]	; (400ce4 <gmac_process_arp_packet+0xbc>)
  400cbe:	47a0      	blx	r4
		if (ul_rc != GMAC_OK) {
  400cc0:	f010 0fff 	tst.w	r0, #255	; 0xff
  400cc4:	d0b9      	beq.n	400c3a <gmac_process_arp_packet+0x12>
			printf("E: ARP Send - 0x%x\n\r", ul_rc);
  400cc6:	b2c1      	uxtb	r1, r0
  400cc8:	4807      	ldr	r0, [pc, #28]	; (400ce8 <gmac_process_arp_packet+0xc0>)
  400cca:	4b02      	ldr	r3, [pc, #8]	; (400cd4 <gmac_process_arp_packet+0xac>)
  400ccc:	4798      	blx	r3
}
  400cce:	e7b4      	b.n	400c3a <gmac_process_arp_packet+0x12>
  400cd0:	004091bc 	.word	0x004091bc
  400cd4:	00402fa9 	.word	0x00402fa9
  400cd8:	20400010 	.word	0x20400010
  400cdc:	2040000c 	.word	0x2040000c
  400ce0:	204074ec 	.word	0x204074ec
  400ce4:	00400639 	.word	0x00400639
  400ce8:	004091d8 	.word	0x004091d8

00400cec <gmac_process_ICMP_packet>:
	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_ip_header_t p_ip_header = (p_ip_header_t) (p_uc_data + ETH_HEADER_SIZE);

	p_icmp_echo_header_t p_icmp_echo = (p_icmp_echo_header_t) ((int8_t *) p_ip_header + ETH_IP_HEADER_SIZE);
		
	if (p_icmp_echo->type == ICMP_ECHO_REQUEST) {
  400cec:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  400cf0:	2b08      	cmp	r3, #8
  400cf2:	d000      	beq.n	400cf6 <gmac_process_ICMP_packet+0xa>
  400cf4:	4770      	bx	lr
{
  400cf6:	b570      	push	{r4, r5, r6, lr}
  400cf8:	b082      	sub	sp, #8
	p_icmp_echo_header_t p_icmp_echo = (p_icmp_echo_header_t) ((int8_t *) p_ip_header + ETH_IP_HEADER_SIZE);
  400cfa:	f100 0622 	add.w	r6, r0, #34	; 0x22
		p_icmp_echo->type = ICMP_ECHO_REPLY;
  400cfe:	2300      	movs	r3, #0
  400d00:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
		p_icmp_echo->code = 0;
  400d04:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		p_icmp_echo->cksum = 0;
  400d08:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  400d0c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

		/* Checksum of the ICMP message */
		ul_icmp_len = (SWAP16(p_ip_header->ip_len) - ETH_IP_HEADER_SIZE);
  400d10:	8a02      	ldrh	r2, [r0, #16]
  400d12:	0213      	lsls	r3, r2, #8
  400d14:	b29b      	uxth	r3, r3
  400d16:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  400d1a:	f1a3 0214 	sub.w	r2, r3, #20
		if (ul_icmp_len % 2) {
  400d1e:	f012 0f01 	tst.w	r2, #1
  400d22:	d003      	beq.n	400d2c <gmac_process_ICMP_packet+0x40>
			*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
  400d24:	2100      	movs	r1, #0
  400d26:	54b1      	strb	r1, [r6, r2]
			ul_icmp_len++;
  400d28:	f1a3 0213 	sub.w	r2, r3, #19
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400d2c:	0852      	lsrs	r2, r2, #1
  400d2e:	d03e      	beq.n	400dae <gmac_process_ICMP_packet+0xc2>
  400d30:	2100      	movs	r1, #0
  400d32:	460d      	mov	r5, r1
		ul_tmp += SWAP16(*p_buff);
  400d34:	f836 4b02 	ldrh.w	r4, [r6], #2
  400d38:	0223      	lsls	r3, r4, #8
  400d3a:	b29b      	uxth	r3, r3
  400d3c:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
  400d40:	441d      	add	r5, r3
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400d42:	3101      	adds	r1, #1
  400d44:	428a      	cmp	r2, r1
  400d46:	d1f5      	bne.n	400d34 <gmac_process_ICMP_packet+0x48>
	ul_tmp = (ul_tmp & 0xffff) + (ul_tmp >> 16);
  400d48:	0c2b      	lsrs	r3, r5, #16
  400d4a:	fa13 f585 	uxtah	r5, r3, r5
	return (uint16_t) (~ul_tmp);
  400d4e:	43ed      	mvns	r5, r5
  400d50:	b2ad      	uxth	r5, r5
		}
		ul_icmp_len = ul_icmp_len / sizeof(uint16_t);

		p_icmp_echo->cksum = SWAP16(
  400d52:	0a2b      	lsrs	r3, r5, #8
  400d54:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  400d58:	8485      	strh	r5, [r0, #36]	; 0x24
  400d5a:	f100 0319 	add.w	r3, r0, #25
  400d5e:	4a17      	ldr	r2, [pc, #92]	; (400dbc <gmac_process_ICMP_packet+0xd0>)
  400d60:	f100 041d 	add.w	r4, r0, #29
		gmac_icmp_checksum((uint16_t *)p_icmp_echo, ul_icmp_len));
		/* Swap the IP destination  address and the IP source address */
		for (i = 0; i < 4; i++) {
			p_ip_header->ip_dst[i] =
  400d64:	7859      	ldrb	r1, [r3, #1]
  400d66:	7159      	strb	r1, [r3, #5]
			p_ip_header->ip_src[i];
			p_ip_header->ip_src[i] = gs_uc_ip_address[i];
  400d68:	f812 1b01 	ldrb.w	r1, [r2], #1
  400d6c:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  400d70:	42a3      	cmp	r3, r4
  400d72:	d1f7      	bne.n	400d64 <gmac_process_ICMP_packet+0x78>
  400d74:	1e42      	subs	r2, r0, #1
  400d76:	4912      	ldr	r1, [pc, #72]	; (400dc0 <gmac_process_ICMP_packet+0xd4>)
  400d78:	1d45      	adds	r5, r0, #5
  400d7a:	462b      	mov	r3, r5
		}
		/* Swap ethernet destination address and ethernet source address */
		for (i = 0; i < 6; i++) {
			/* Swap ethernet destination address and ethernet source address */
			p_eth->et_dest[i] = p_eth->et_src[i];
  400d7c:	785c      	ldrb	r4, [r3, #1]
  400d7e:	f802 4f01 	strb.w	r4, [r2, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  400d82:	f811 4b01 	ldrb.w	r4, [r1], #1
  400d86:	f803 4f01 	strb.w	r4, [r3, #1]!
		for (i = 0; i < 6; i++) {
  400d8a:	42aa      	cmp	r2, r5
  400d8c:	d1f6      	bne.n	400d7c <gmac_process_ICMP_packet+0x90>
  400d8e:	4602      	mov	r2, r0
		#if (SAM4E)
		ul_rc = gmac_dev_write(&gs_gmac_dev, p_uc_data,
		SWAP16(p_ip_header->ip_len) + 14, NULL);
		#else
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
		SWAP16(p_ip_header->ip_len) + 14, NULL);
  400d90:	8a01      	ldrh	r1, [r0, #16]
  400d92:	020b      	lsls	r3, r1, #8
  400d94:	b29b      	uxth	r3, r3
  400d96:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
  400d9a:	2100      	movs	r1, #0
  400d9c:	9100      	str	r1, [sp, #0]
  400d9e:	330e      	adds	r3, #14
  400da0:	4808      	ldr	r0, [pc, #32]	; (400dc4 <gmac_process_ICMP_packet+0xd8>)
  400da2:	4c09      	ldr	r4, [pc, #36]	; (400dc8 <gmac_process_ICMP_packet+0xdc>)
  400da4:	47a0      	blx	r4
		#endif
		if (ul_rc != GMAC_OK) {
  400da6:	4601      	mov	r1, r0
  400da8:	b918      	cbnz	r0, 400db2 <gmac_process_ICMP_packet+0xc6>
			printf("E: ICMP Send - 0x%x\n\r", ul_rc);
		}
	}
}
  400daa:	b002      	add	sp, #8
  400dac:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  400dae:	4615      	mov	r5, r2
  400db0:	e7ca      	b.n	400d48 <gmac_process_ICMP_packet+0x5c>
			printf("E: ICMP Send - 0x%x\n\r", ul_rc);
  400db2:	4806      	ldr	r0, [pc, #24]	; (400dcc <gmac_process_ICMP_packet+0xe0>)
  400db4:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <gmac_process_ICMP_packet+0xe4>)
  400db6:	4798      	blx	r3
}
  400db8:	e7f7      	b.n	400daa <gmac_process_ICMP_packet+0xbe>
  400dba:	bf00      	nop
  400dbc:	2040000c 	.word	0x2040000c
  400dc0:	20400010 	.word	0x20400010
  400dc4:	204074ec 	.word	0x204074ec
  400dc8:	00400639 	.word	0x00400639
  400dcc:	004091a4 	.word	0x004091a4
  400dd0:	00402fa9 	.word	0x00402fa9

00400dd4 <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  400dd4:	b508      	push	{r3, lr}
	gmac_handler(&gs_gmac_dev, GMAC_QUE_0);
  400dd6:	2100      	movs	r1, #0
  400dd8:	4801      	ldr	r0, [pc, #4]	; (400de0 <GMAC_Handler+0xc>)
  400dda:	4b02      	ldr	r3, [pc, #8]	; (400de4 <GMAC_Handler+0x10>)
  400ddc:	4798      	blx	r3
  400dde:	bd08      	pop	{r3, pc}
  400de0:	204074ec 	.word	0x204074ec
  400de4:	00400715 	.word	0x00400715

00400de8 <print_address_register>:
{
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
}

static void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  400de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400dec:	b083      	sub	sp, #12
  400dee:	af00      	add	r7, sp, #0
  400df0:	460e      	mov	r6, r1
  400df2:	4614      	mov	r4, r2
	printf("%s\t", name);
  400df4:	4601      	mov	r1, r0
  400df6:	4829      	ldr	r0, [pc, #164]	; (400e9c <print_address_register+0xb4>)
  400df8:	4b29      	ldr	r3, [pc, #164]	; (400ea0 <print_address_register+0xb8>)
  400dfa:	4798      	blx	r3
	while(qty--){
  400dfc:	2c00      	cmp	r4, #0
  400dfe:	d045      	beq.n	400e8c <print_address_register+0xa4>
  400e00:	4434      	add	r4, r6
  400e02:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  400e06:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 400eb0 <print_address_register+0xc8>
	while(qty--){
  400e0a:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  400e0e:	f89b 4000 	ldrb.w	r4, [fp]
  400e12:	1de3      	adds	r3, r4, #7
  400e14:	f023 0307 	bic.w	r3, r3, #7
  400e18:	ebad 0d03 	sub.w	sp, sp, r3
  400e1c:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  400e1e:	f106 0901 	add.w	r9, r6, #1
  400e22:	fa5f f989 	uxtb.w	r9, r9
{
  400e26:	f8c7 d000 	str.w	sp, [r7]
	uint8_t status[len+1];
  400e2a:	f104 0308 	add.w	r3, r4, #8
  400e2e:	f023 0307 	bic.w	r3, r3, #7
  400e32:	ebad 0d03 	sub.w	sp, sp, r3
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  400e36:	f006 061f 	and.w	r6, r6, #31
  400e3a:	f88d 6000 	strb.w	r6, [sp]
	spi_master_transfer(&status, sizeof(status));
  400e3e:	1c61      	adds	r1, r4, #1
  400e40:	4668      	mov	r0, sp
  400e42:	4b18      	ldr	r3, [pc, #96]	; (400ea4 <print_address_register+0xbc>)
  400e44:	4798      	blx	r3
	for (uint8_t i = 0; i< len; i++)
  400e46:	b15c      	cbz	r4, 400e60 <print_address_register+0x78>
  400e48:	f10d 0801 	add.w	r8, sp, #1
  400e4c:	1e6b      	subs	r3, r5, #1
  400e4e:	1e61      	subs	r1, r4, #1
  400e50:	fa55 f181 	uxtab	r1, r5, r1
		buf[i] = status[i+1];
  400e54:	f818 2b01 	ldrb.w	r2, [r8], #1
  400e58:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  400e5c:	428b      	cmp	r3, r1
  400e5e:	d1f9      	bne.n	400e54 <print_address_register+0x6c>
  400e60:	f8d7 d000 	ldr.w	sp, [r7]
		
		printf(" 0x");
  400e64:	4810      	ldr	r0, [pc, #64]	; (400ea8 <print_address_register+0xc0>)
  400e66:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <print_address_register+0xb8>)
  400e68:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  400e6a:	3c01      	subs	r4, #1
  400e6c:	192c      	adds	r4, r5, r4
  400e6e:	d208      	bcs.n	400e82 <print_address_register+0x9a>
			printf("%02x", *bufptr);
  400e70:	f8df 8040 	ldr.w	r8, [pc, #64]	; 400eb4 <print_address_register+0xcc>
  400e74:	4e0a      	ldr	r6, [pc, #40]	; (400ea0 <print_address_register+0xb8>)
  400e76:	f814 1901 	ldrb.w	r1, [r4], #-1
  400e7a:	4640      	mov	r0, r8
  400e7c:	47b0      	blx	r6
		while(--bufptr >= buffer){
  400e7e:	42a5      	cmp	r5, r4
  400e80:	d9f9      	bls.n	400e76 <print_address_register+0x8e>
  400e82:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  400e86:	464e      	mov	r6, r9
	while(qty--){
  400e88:	45d1      	cmp	r9, sl
  400e8a:	d1be      	bne.n	400e0a <print_address_register+0x22>
		}
	}
	printf("\r\n");
  400e8c:	4807      	ldr	r0, [pc, #28]	; (400eac <print_address_register+0xc4>)
  400e8e:	4b04      	ldr	r3, [pc, #16]	; (400ea0 <print_address_register+0xb8>)
  400e90:	4798      	blx	r3
}
  400e92:	370c      	adds	r7, #12
  400e94:	46bd      	mov	sp, r7
  400e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e9a:	bf00      	nop
  400e9c:	00409368 	.word	0x00409368
  400ea0:	00402fa9 	.word	0x00402fa9
  400ea4:	0040162d 	.word	0x0040162d
  400ea8:	0040936c 	.word	0x0040936c
  400eac:	004095f8 	.word	0x004095f8
  400eb0:	204082ec 	.word	0x204082ec
  400eb4:	00409370 	.word	0x00409370

00400eb8 <writeRegister>:
{
  400eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400eba:	af00      	add	r7, sp, #0
	uint8_t p_buf[length+1];
  400ebc:	1c56      	adds	r6, r2, #1
  400ebe:	f102 0308 	add.w	r3, r2, #8
  400ec2:	f023 0307 	bic.w	r3, r3, #7
  400ec6:	ebad 0d03 	sub.w	sp, sp, r3
  400eca:	466d      	mov	r5, sp
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400ecc:	f000 001f 	and.w	r0, r0, #31
  400ed0:	f040 0020 	orr.w	r0, r0, #32
  400ed4:	f88d 0000 	strb.w	r0, [sp]
	for (uint8_t i = 0; i < length; i++)
  400ed8:	b152      	cbz	r2, 400ef0 <writeRegister+0x38>
  400eda:	1e4b      	subs	r3, r1, #1
  400edc:	1c68      	adds	r0, r5, #1
  400ede:	3a01      	subs	r2, #1
  400ee0:	fa51 f482 	uxtab	r4, r1, r2
		p_buf[i+1] = (*buf++);
  400ee4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  400ee8:	f800 2b01 	strb.w	r2, [r0], #1
	for (uint8_t i = 0; i < length; i++)
  400eec:	42a3      	cmp	r3, r4
  400eee:	d1f9      	bne.n	400ee4 <writeRegister+0x2c>
	spi_master_transfer(p_buf, sizeof(p_buf));
  400ef0:	4631      	mov	r1, r6
  400ef2:	4628      	mov	r0, r5
  400ef4:	4b02      	ldr	r3, [pc, #8]	; (400f00 <writeRegister+0x48>)
  400ef6:	4798      	blx	r3
}
  400ef8:	7828      	ldrb	r0, [r5, #0]
  400efa:	46bd      	mov	sp, r7
  400efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400efe:	bf00      	nop
  400f00:	0040162d 	.word	0x0040162d

00400f04 <nRF24_readRegister>:
{
  400f04:	b500      	push	{lr}
  400f06:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  400f08:	f000 001f 	and.w	r0, r0, #31
  400f0c:	f88d 0004 	strb.w	r0, [sp, #4]
  400f10:	23ff      	movs	r3, #255	; 0xff
  400f12:	f88d 3005 	strb.w	r3, [sp, #5]
	spi_master_transfer(&cmd, sizeof(cmd));
  400f16:	2102      	movs	r1, #2
  400f18:	a801      	add	r0, sp, #4
  400f1a:	4b03      	ldr	r3, [pc, #12]	; (400f28 <nRF24_readRegister+0x24>)
  400f1c:	4798      	blx	r3
}
  400f1e:	f89d 0005 	ldrb.w	r0, [sp, #5]
  400f22:	b003      	add	sp, #12
  400f24:	f85d fb04 	ldr.w	pc, [sp], #4
  400f28:	0040162d 	.word	0x0040162d

00400f2c <print_byte_register>:

static void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  400f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f30:	460d      	mov	r5, r1
  400f32:	4616      	mov	r6, r2
	printf("%s\t", name);
  400f34:	4601      	mov	r1, r0
  400f36:	480d      	ldr	r0, [pc, #52]	; (400f6c <print_byte_register+0x40>)
  400f38:	4b0d      	ldr	r3, [pc, #52]	; (400f70 <print_byte_register+0x44>)
  400f3a:	4798      	blx	r3
	while (qty--)
  400f3c:	b186      	cbz	r6, 400f60 <print_byte_register+0x34>
  400f3e:	442e      	add	r6, r5
  400f40:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  400f42:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400f78 <print_byte_register+0x4c>
  400f46:	f8df 8034 	ldr.w	r8, [pc, #52]	; 400f7c <print_byte_register+0x50>
  400f4a:	4f09      	ldr	r7, [pc, #36]	; (400f70 <print_byte_register+0x44>)
  400f4c:	1c6c      	adds	r4, r5, #1
  400f4e:	b2e4      	uxtb	r4, r4
  400f50:	4628      	mov	r0, r5
  400f52:	47c8      	blx	r9
  400f54:	4601      	mov	r1, r0
  400f56:	4640      	mov	r0, r8
  400f58:	47b8      	blx	r7
  400f5a:	4625      	mov	r5, r4
	while (qty--)
  400f5c:	42a6      	cmp	r6, r4
  400f5e:	d1f5      	bne.n	400f4c <print_byte_register+0x20>
	}
	printf("\r\n");
  400f60:	4804      	ldr	r0, [pc, #16]	; (400f74 <print_byte_register+0x48>)
  400f62:	4b03      	ldr	r3, [pc, #12]	; (400f70 <print_byte_register+0x44>)
  400f64:	4798      	blx	r3
  400f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f6a:	bf00      	nop
  400f6c:	00409368 	.word	0x00409368
  400f70:	00402fa9 	.word	0x00402fa9
  400f74:	004095f8 	.word	0x004095f8
  400f78:	00400f05 	.word	0x00400f05
  400f7c:	00409378 	.word	0x00409378

00400f80 <nRF24_writeRegister>:
{
  400f80:	b500      	push	{lr}
  400f82:	b083      	sub	sp, #12
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  400f84:	f000 001f 	and.w	r0, r0, #31
  400f88:	f040 0020 	orr.w	r0, r0, #32
  400f8c:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  400f90:	f88d 1005 	strb.w	r1, [sp, #5]
	spi_master_transfer(p_buf, sizeof(p_buf));
  400f94:	2102      	movs	r1, #2
  400f96:	a801      	add	r0, sp, #4
  400f98:	4b03      	ldr	r3, [pc, #12]	; (400fa8 <nRF24_writeRegister+0x28>)
  400f9a:	4798      	blx	r3
}
  400f9c:	f89d 0004 	ldrb.w	r0, [sp, #4]
  400fa0:	b003      	add	sp, #12
  400fa2:	f85d fb04 	ldr.w	pc, [sp], #4
  400fa6:	bf00      	nop
  400fa8:	0040162d 	.word	0x0040162d

00400fac <nRF24_FlushRx>:
{
  400fac:	b500      	push	{lr}
  400fae:	b083      	sub	sp, #12
	cmd = FLUSH_RX;
  400fb0:	a802      	add	r0, sp, #8
  400fb2:	23e2      	movs	r3, #226	; 0xe2
  400fb4:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400fb8:	2101      	movs	r1, #1
  400fba:	4b03      	ldr	r3, [pc, #12]	; (400fc8 <nRF24_FlushRx+0x1c>)
  400fbc:	4798      	blx	r3
}
  400fbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400fc2:	b003      	add	sp, #12
  400fc4:	f85d fb04 	ldr.w	pc, [sp], #4
  400fc8:	0040162d 	.word	0x0040162d

00400fcc <nRF24_FlushTx>:
{
  400fcc:	b500      	push	{lr}
  400fce:	b083      	sub	sp, #12
	cmd = FLUSH_TX;
  400fd0:	a802      	add	r0, sp, #8
  400fd2:	23e1      	movs	r3, #225	; 0xe1
  400fd4:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400fd8:	2101      	movs	r1, #1
  400fda:	4b03      	ldr	r3, [pc, #12]	; (400fe8 <nRF24_FlushTx+0x1c>)
  400fdc:	4798      	blx	r3
}
  400fde:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400fe2:	b003      	add	sp, #12
  400fe4:	f85d fb04 	ldr.w	pc, [sp], #4
  400fe8:	0040162d 	.word	0x0040162d

00400fec <nRF24_getStatus>:
{
  400fec:	b500      	push	{lr}
  400fee:	b083      	sub	sp, #12
	cmd = RF24_NOP;
  400ff0:	a802      	add	r0, sp, #8
  400ff2:	23ff      	movs	r3, #255	; 0xff
  400ff4:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  400ff8:	2101      	movs	r1, #1
  400ffa:	4b03      	ldr	r3, [pc, #12]	; (401008 <nRF24_getStatus+0x1c>)
  400ffc:	4798      	blx	r3
}
  400ffe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  401002:	b003      	add	sp, #12
  401004:	f85d fb04 	ldr.w	pc, [sp], #4
  401008:	0040162d 	.word	0x0040162d

0040100c <nRF24_setDataRate>:
{
  40100c:	b538      	push	{r3, r4, r5, lr}
  40100e:	4605      	mov	r5, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  401010:	2006      	movs	r0, #6
  401012:	4b0c      	ldr	r3, [pc, #48]	; (401044 <nRF24_setDataRate+0x38>)
  401014:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  401016:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	if (speed == RF24_2MBPS) {
  40101a:	2d01      	cmp	r5, #1
  40101c:	d00b      	beq.n	401036 <nRF24_setDataRate+0x2a>
	nRF24_writeRegister(RF_SETUP, setup);
  40101e:	4621      	mov	r1, r4
  401020:	2006      	movs	r0, #6
  401022:	4b09      	ldr	r3, [pc, #36]	; (401048 <nRF24_setDataRate+0x3c>)
  401024:	4798      	blx	r3
	if(nRF24_readRegister(RF_SETUP) == setup)
  401026:	2006      	movs	r0, #6
  401028:	4b06      	ldr	r3, [pc, #24]	; (401044 <nRF24_setDataRate+0x38>)
  40102a:	4798      	blx	r3
}
  40102c:	4284      	cmp	r4, r0
  40102e:	bf14      	ite	ne
  401030:	2000      	movne	r0, #0
  401032:	2001      	moveq	r0, #1
  401034:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  401036:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  40103a:	2241      	movs	r2, #65	; 0x41
  40103c:	4b03      	ldr	r3, [pc, #12]	; (40104c <nRF24_setDataRate+0x40>)
  40103e:	601a      	str	r2, [r3, #0]
  401040:	e7ed      	b.n	40101e <nRF24_setDataRate+0x12>
  401042:	bf00      	nop
  401044:	00400f05 	.word	0x00400f05
  401048:	00400f81 	.word	0x00400f81
  40104c:	204082f8 	.word	0x204082f8

00401050 <getDataRate>:
{
  401050:	b508      	push	{r3, lr}
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  401052:	2006      	movs	r0, #6
  401054:	4b04      	ldr	r3, [pc, #16]	; (401068 <getDataRate+0x18>)
  401056:	4798      	blx	r3
	if (dr == (1<<RF_DR_HIGH)) {
  401058:	f000 0028 	and.w	r0, r0, #40	; 0x28
}
  40105c:	2808      	cmp	r0, #8
  40105e:	bf14      	ite	ne
  401060:	2000      	movne	r0, #0
  401062:	2001      	moveq	r0, #1
  401064:	bd08      	pop	{r3, pc}
  401066:	bf00      	nop
  401068:	00400f05 	.word	0x00400f05

0040106c <nRF24_setCRCLength>:
{
  40106c:	b510      	push	{r4, lr}
  40106e:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  401070:	2000      	movs	r0, #0
  401072:	4b07      	ldr	r3, [pc, #28]	; (401090 <nRF24_setCRCLength+0x24>)
  401074:	4798      	blx	r3
  401076:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	if (length == RF24_CRC_DISABLED){
  40107a:	b12c      	cbz	r4, 401088 <nRF24_setCRCLength+0x1c>
	else if (length == RF24_CRC_8){
  40107c:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  40107e:	bf0c      	ite	eq
  401080:	f041 0108 	orreq.w	r1, r1, #8
		config |= (1<<CRCO);
  401084:	f041 010c 	orrne.w	r1, r1, #12
	nRF24_writeRegister(NRF_CONFIG, config);
  401088:	2000      	movs	r0, #0
  40108a:	4b02      	ldr	r3, [pc, #8]	; (401094 <nRF24_setCRCLength+0x28>)
  40108c:	4798      	blx	r3
  40108e:	bd10      	pop	{r4, pc}
  401090:	00400f05 	.word	0x00400f05
  401094:	00400f81 	.word	0x00400f81

00401098 <getCRCLength>:
{
  401098:	b538      	push	{r3, r4, r5, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  40109a:	2000      	movs	r0, #0
  40109c:	4d08      	ldr	r5, [pc, #32]	; (4010c0 <getCRCLength+0x28>)
  40109e:	47a8      	blx	r5
  4010a0:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  4010a2:	2001      	movs	r0, #1
  4010a4:	47a8      	blx	r5
    if (config & (1<<EN_CRC) || AA) {
  4010a6:	f014 0f08 	tst.w	r4, #8
  4010aa:	d102      	bne.n	4010b2 <getCRCLength+0x1a>
  4010ac:	b908      	cbnz	r0, 4010b2 <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  4010ae:	2000      	movs	r0, #0
}
  4010b0:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  4010b2:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  4010b6:	2c00      	cmp	r4, #0
  4010b8:	bf14      	ite	ne
  4010ba:	2002      	movne	r0, #2
  4010bc:	2001      	moveq	r0, #1
  4010be:	bd38      	pop	{r3, r4, r5, pc}
  4010c0:	00400f05 	.word	0x00400f05

004010c4 <nRF24_setPALevel>:
{
  4010c4:	b510      	push	{r4, lr}
  4010c6:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  4010c8:	2006      	movs	r0, #6
  4010ca:	4b08      	ldr	r3, [pc, #32]	; (4010ec <nRF24_setPALevel+0x28>)
  4010cc:	4798      	blx	r3
  4010ce:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	if (level > 3) {
  4010d2:	2c03      	cmp	r4, #3
  4010d4:	d808      	bhi.n	4010e8 <nRF24_setPALevel+0x24>
		level = (level << 1) + 1;
  4010d6:	0064      	lsls	r4, r4, #1
  4010d8:	3401      	adds	r4, #1
  4010da:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	nRF24_writeRegister(RF_SETUP, setup |= level);
  4010de:	4321      	orrs	r1, r4
  4010e0:	2006      	movs	r0, #6
  4010e2:	4b03      	ldr	r3, [pc, #12]	; (4010f0 <nRF24_setPALevel+0x2c>)
  4010e4:	4798      	blx	r3
  4010e6:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  4010e8:	2407      	movs	r4, #7
  4010ea:	e7f8      	b.n	4010de <nRF24_setPALevel+0x1a>
  4010ec:	00400f05 	.word	0x00400f05
  4010f0:	00400f81 	.word	0x00400f81

004010f4 <nRF24_getPALevel>:
{
  4010f4:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  4010f6:	2006      	movs	r0, #6
  4010f8:	4b02      	ldr	r3, [pc, #8]	; (401104 <nRF24_getPALevel+0x10>)
  4010fa:	4798      	blx	r3
}
  4010fc:	f3c0 0041 	ubfx	r0, r0, #1, #2
  401100:	bd08      	pop	{r3, pc}
  401102:	bf00      	nop
  401104:	00400f05 	.word	0x00400f05

00401108 <printDetails>:
}

void printDetails(void)
{
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	b084      	sub	sp, #16
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  40110c:	4b31      	ldr	r3, [pc, #196]	; (4011d4 <printDetails+0xcc>)
  40110e:	6819      	ldr	r1, [r3, #0]
  401110:	4b31      	ldr	r3, [pc, #196]	; (4011d8 <printDetails+0xd0>)
  401112:	fba3 3101 	umull	r3, r1, r3, r1
  401116:	0c89      	lsrs	r1, r1, #18
  401118:	4830      	ldr	r0, [pc, #192]	; (4011dc <printDetails+0xd4>)
  40111a:	4d31      	ldr	r5, [pc, #196]	; (4011e0 <printDetails+0xd8>)
  40111c:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  40111e:	4b31      	ldr	r3, [pc, #196]	; (4011e4 <printDetails+0xdc>)
  401120:	4798      	blx	r3
  401122:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  401124:	f000 0301 	and.w	r3, r0, #1
  401128:	9302      	str	r3, [sp, #8]
  40112a:	f3c0 0340 	ubfx	r3, r0, #1, #1
  40112e:	9301      	str	r3, [sp, #4]
  401130:	f3c0 1300 	ubfx	r3, r0, #4, #1
  401134:	9300      	str	r3, [sp, #0]
  401136:	f3c0 1340 	ubfx	r3, r0, #5, #1
  40113a:	f3c0 1280 	ubfx	r2, r0, #6, #1
  40113e:	482a      	ldr	r0, [pc, #168]	; (4011e8 <printDetails+0xe0>)
  401140:	47a8      	blx	r5
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  401142:	2202      	movs	r2, #2
  401144:	210a      	movs	r1, #10
  401146:	4829      	ldr	r0, [pc, #164]	; (4011ec <printDetails+0xe4>)
  401148:	4e29      	ldr	r6, [pc, #164]	; (4011f0 <printDetails+0xe8>)
  40114a:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  40114c:	2204      	movs	r2, #4
  40114e:	210c      	movs	r1, #12
  401150:	4828      	ldr	r0, [pc, #160]	; (4011f4 <printDetails+0xec>)
  401152:	4c29      	ldr	r4, [pc, #164]	; (4011f8 <printDetails+0xf0>)
  401154:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  401156:	2201      	movs	r2, #1
  401158:	2110      	movs	r1, #16
  40115a:	4828      	ldr	r0, [pc, #160]	; (4011fc <printDetails+0xf4>)
  40115c:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  40115e:	2206      	movs	r2, #6
  401160:	2111      	movs	r1, #17
  401162:	4827      	ldr	r0, [pc, #156]	; (401200 <printDetails+0xf8>)
  401164:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  401166:	2201      	movs	r2, #1
  401168:	2103      	movs	r1, #3
  40116a:	4826      	ldr	r0, [pc, #152]	; (401204 <printDetails+0xfc>)
  40116c:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  40116e:	2201      	movs	r2, #1
  401170:	4611      	mov	r1, r2
  401172:	4825      	ldr	r0, [pc, #148]	; (401208 <printDetails+0x100>)
  401174:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  401176:	2201      	movs	r2, #1
  401178:	2102      	movs	r1, #2
  40117a:	4824      	ldr	r0, [pc, #144]	; (40120c <printDetails+0x104>)
  40117c:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  40117e:	2201      	movs	r2, #1
  401180:	2105      	movs	r1, #5
  401182:	4823      	ldr	r0, [pc, #140]	; (401210 <printDetails+0x108>)
  401184:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  401186:	2201      	movs	r2, #1
  401188:	2106      	movs	r1, #6
  40118a:	4822      	ldr	r0, [pc, #136]	; (401214 <printDetails+0x10c>)
  40118c:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  40118e:	2201      	movs	r2, #1
  401190:	2100      	movs	r1, #0
  401192:	4821      	ldr	r0, [pc, #132]	; (401218 <printDetails+0x110>)
  401194:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  401196:	2202      	movs	r2, #2
  401198:	211c      	movs	r1, #28
  40119a:	4820      	ldr	r0, [pc, #128]	; (40121c <printDetails+0x114>)
  40119c:	47a0      	blx	r4
	
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  40119e:	4b20      	ldr	r3, [pc, #128]	; (401220 <printDetails+0x118>)
  4011a0:	4798      	blx	r3
  4011a2:	4b20      	ldr	r3, [pc, #128]	; (401224 <printDetails+0x11c>)
  4011a4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011a8:	481f      	ldr	r0, [pc, #124]	; (401228 <printDetails+0x120>)
  4011aa:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  4011ac:	491f      	ldr	r1, [pc, #124]	; (40122c <printDetails+0x124>)
  4011ae:	4820      	ldr	r0, [pc, #128]	; (401230 <printDetails+0x128>)
  4011b0:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  4011b2:	4b20      	ldr	r3, [pc, #128]	; (401234 <printDetails+0x12c>)
  4011b4:	4798      	blx	r3
  4011b6:	4b20      	ldr	r3, [pc, #128]	; (401238 <printDetails+0x130>)
  4011b8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011bc:	481f      	ldr	r0, [pc, #124]	; (40123c <printDetails+0x134>)
  4011be:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  4011c0:	4b1f      	ldr	r3, [pc, #124]	; (401240 <printDetails+0x138>)
  4011c2:	4798      	blx	r3
  4011c4:	4b1f      	ldr	r3, [pc, #124]	; (401244 <printDetails+0x13c>)
  4011c6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4011ca:	481f      	ldr	r0, [pc, #124]	; (401248 <printDetails+0x140>)
  4011cc:	47a8      	blx	r5
}
  4011ce:	b004      	add	sp, #16
  4011d0:	bd70      	pop	{r4, r5, r6, pc}
  4011d2:	bf00      	nop
  4011d4:	20400018 	.word	0x20400018
  4011d8:	431bde83 	.word	0x431bde83
  4011dc:	00409238 	.word	0x00409238
  4011e0:	00402fa9 	.word	0x00402fa9
  4011e4:	00400fed 	.word	0x00400fed
  4011e8:	00409250 	.word	0x00409250
  4011ec:	00409298 	.word	0x00409298
  4011f0:	00400de9 	.word	0x00400de9
  4011f4:	004092a8 	.word	0x004092a8
  4011f8:	00400f2d 	.word	0x00400f2d
  4011fc:	004092b8 	.word	0x004092b8
  401200:	004092c4 	.word	0x004092c4
  401204:	004092d0 	.word	0x004092d0
  401208:	004092dc 	.word	0x004092dc
  40120c:	004092e4 	.word	0x004092e4
  401210:	004092f0 	.word	0x004092f0
  401214:	004092f8 	.word	0x004092f8
  401218:	00409304 	.word	0x00409304
  40121c:	0040930c 	.word	0x0040930c
  401220:	00401051 	.word	0x00401051
  401224:	004093c0 	.word	0x004093c0
  401228:	0040931c 	.word	0x0040931c
  40122c:	004093cc 	.word	0x004093cc
  401230:	00409330 	.word	0x00409330
  401234:	00401099 	.word	0x00401099
  401238:	0040939c 	.word	0x0040939c
  40123c:	00409340 	.word	0x00409340
  401240:	004010f5 	.word	0x004010f5
  401244:	004093f8 	.word	0x004093f8
  401248:	00409354 	.word	0x00409354

0040124c <nRF24_setAddressWidth>:
 * 
 * \param width address width
 *
 */
void nRF24_setAddressWidth(uint8_t width)
{
  40124c:	b510      	push	{r4, lr}
	if (width -= 2){
  40124e:	3802      	subs	r0, #2
  401250:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  401254:	d107      	bne.n	401266 <nRF24_setAddressWidth+0x1a>
		nRF24_writeRegister(SETUP_AW, width % 4);
		addr_width = (width % 4) + 2;
		} else {
		nRF24_writeRegister(SETUP_AW, 0);
  401256:	2100      	movs	r1, #0
  401258:	2003      	movs	r0, #3
  40125a:	4b08      	ldr	r3, [pc, #32]	; (40127c <nRF24_setAddressWidth+0x30>)
  40125c:	4798      	blx	r3
		addr_width = 2;
  40125e:	2202      	movs	r2, #2
  401260:	4b07      	ldr	r3, [pc, #28]	; (401280 <nRF24_setAddressWidth+0x34>)
  401262:	701a      	strb	r2, [r3, #0]
  401264:	bd10      	pop	{r4, pc}
		nRF24_writeRegister(SETUP_AW, width % 4);
  401266:	f000 0403 	and.w	r4, r0, #3
  40126a:	4621      	mov	r1, r4
  40126c:	2003      	movs	r0, #3
  40126e:	4b03      	ldr	r3, [pc, #12]	; (40127c <nRF24_setAddressWidth+0x30>)
  401270:	4798      	blx	r3
		addr_width = (width % 4) + 2;
  401272:	1ca0      	adds	r0, r4, #2
  401274:	4b02      	ldr	r3, [pc, #8]	; (401280 <nRF24_setAddressWidth+0x34>)
  401276:	7018      	strb	r0, [r3, #0]
  401278:	bd10      	pop	{r4, pc}
  40127a:	bf00      	nop
  40127c:	00400f81 	.word	0x00400f81
  401280:	204082ec 	.word	0x204082ec

00401284 <toggle_features>:
/**
 * \brief toggels ACK features
 *
 */
void toggle_features(void)
{
  401284:	b500      	push	{lr}
  401286:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  401288:	4b05      	ldr	r3, [pc, #20]	; (4012a0 <toggle_features+0x1c>)
  40128a:	881b      	ldrh	r3, [r3, #0]
  40128c:	a802      	add	r0, sp, #8
  40128e:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  401292:	2102      	movs	r1, #2
  401294:	4b03      	ldr	r3, [pc, #12]	; (4012a4 <toggle_features+0x20>)
  401296:	4798      	blx	r3
}
  401298:	b003      	add	sp, #12
  40129a:	f85d fb04 	ldr.w	pc, [sp], #4
  40129e:	bf00      	nop
  4012a0:	00409234 	.word	0x00409234
  4012a4:	0040162d 	.word	0x0040162d

004012a8 <nRF24_setChannel>:
 * 
 * \param channel ferquency channel used
 *
 */
void nRF24_setChannel(uint8_t channel)
{
  4012a8:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  4012aa:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  4012ac:	bf8c      	ite	hi
  4012ae:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  4012b0:	4601      	movls	r1, r0
  4012b2:	2005      	movs	r0, #5
  4012b4:	4b01      	ldr	r3, [pc, #4]	; (4012bc <nRF24_setChannel+0x14>)
  4012b6:	4798      	blx	r3
  4012b8:	bd08      	pop	{r3, pc}
  4012ba:	bf00      	nop
  4012bc:	00400f81 	.word	0x00400f81

004012c0 <nRF24_powerUp>:
/**
 * \brief power up the internal logic of the nRF24 chip
 * 
 */
void nRF24_powerUp(void)
{
  4012c0:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  4012c2:	2000      	movs	r0, #0
  4012c4:	4b07      	ldr	r3, [pc, #28]	; (4012e4 <nRF24_powerUp+0x24>)
  4012c6:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  4012c8:	f010 0f02 	tst.w	r0, #2
  4012cc:	d000      	beq.n	4012d0 <nRF24_powerUp+0x10>
  4012ce:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  4012d0:	f040 0102 	orr.w	r1, r0, #2
  4012d4:	b2c9      	uxtb	r1, r1
  4012d6:	2000      	movs	r0, #0
  4012d8:	4b03      	ldr	r3, [pc, #12]	; (4012e8 <nRF24_powerUp+0x28>)
  4012da:	4798      	blx	r3
		delay_ms(5);
  4012dc:	4803      	ldr	r0, [pc, #12]	; (4012ec <nRF24_powerUp+0x2c>)
  4012de:	4b04      	ldr	r3, [pc, #16]	; (4012f0 <nRF24_powerUp+0x30>)
  4012e0:	4798      	blx	r3
	}
}
  4012e2:	e7f4      	b.n	4012ce <nRF24_powerUp+0xe>
  4012e4:	00400f05 	.word	0x00400f05
  4012e8:	00400f81 	.word	0x00400f81
  4012ec:	0003dbc2 	.word	0x0003dbc2
  4012f0:	20400001 	.word	0x20400001

004012f4 <nRF24_stopListening>:
/**
 * \brief use the nRF24 module as transmitter
 *
 */
void nRF24_stopListening(void)
{
  4012f4:	b538      	push	{r3, r4, r5, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4012f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012fa:	4b21      	ldr	r3, [pc, #132]	; (401380 <nRF24_stopListening+0x8c>)
  4012fc:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	
	delay_us(txDelay);
  4012fe:	4b21      	ldr	r3, [pc, #132]	; (401384 <nRF24_stopListening+0x90>)
  401300:	6819      	ldr	r1, [r3, #0]
  401302:	2900      	cmp	r1, #0
  401304:	d034      	beq.n	401370 <nRF24_stopListening+0x7c>
  401306:	4a20      	ldr	r2, [pc, #128]	; (401388 <nRF24_stopListening+0x94>)
  401308:	2300      	movs	r3, #0
  40130a:	4c20      	ldr	r4, [pc, #128]	; (40138c <nRF24_stopListening+0x98>)
  40130c:	2500      	movs	r5, #0
  40130e:	4820      	ldr	r0, [pc, #128]	; (401390 <nRF24_stopListening+0x9c>)
  401310:	fbe0 4501 	umlal	r4, r5, r0, r1
  401314:	4620      	mov	r0, r4
  401316:	4629      	mov	r1, r5
  401318:	4c1e      	ldr	r4, [pc, #120]	; (401394 <nRF24_stopListening+0xa0>)
  40131a:	47a0      	blx	r4
  40131c:	4b1e      	ldr	r3, [pc, #120]	; (401398 <nRF24_stopListening+0xa4>)
  40131e:	4798      	blx	r3
	if (nRF24_readRegister(FEATURE) & 1<<(EN_ACK_PAY))
  401320:	201d      	movs	r0, #29
  401322:	4b1e      	ldr	r3, [pc, #120]	; (40139c <nRF24_stopListening+0xa8>)
  401324:	4798      	blx	r3
  401326:	f010 0f02 	tst.w	r0, #2
  40132a:	d011      	beq.n	401350 <nRF24_stopListening+0x5c>
	{
		delay_us(txDelay);
  40132c:	4b15      	ldr	r3, [pc, #84]	; (401384 <nRF24_stopListening+0x90>)
  40132e:	6819      	ldr	r1, [r3, #0]
  401330:	b311      	cbz	r1, 401378 <nRF24_stopListening+0x84>
  401332:	4a15      	ldr	r2, [pc, #84]	; (401388 <nRF24_stopListening+0x94>)
  401334:	2300      	movs	r3, #0
  401336:	4c15      	ldr	r4, [pc, #84]	; (40138c <nRF24_stopListening+0x98>)
  401338:	2500      	movs	r5, #0
  40133a:	4815      	ldr	r0, [pc, #84]	; (401390 <nRF24_stopListening+0x9c>)
  40133c:	fbe0 4501 	umlal	r4, r5, r0, r1
  401340:	4620      	mov	r0, r4
  401342:	4629      	mov	r1, r5
  401344:	4c13      	ldr	r4, [pc, #76]	; (401394 <nRF24_stopListening+0xa0>)
  401346:	47a0      	blx	r4
  401348:	4b13      	ldr	r3, [pc, #76]	; (401398 <nRF24_stopListening+0xa4>)
  40134a:	4798      	blx	r3
		nRF24_FlushTx();
  40134c:	4b14      	ldr	r3, [pc, #80]	; (4013a0 <nRF24_stopListening+0xac>)
  40134e:	4798      	blx	r3
	}
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  401350:	2000      	movs	r0, #0
  401352:	4d12      	ldr	r5, [pc, #72]	; (40139c <nRF24_stopListening+0xa8>)
  401354:	47a8      	blx	r5
  401356:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  40135a:	2000      	movs	r0, #0
  40135c:	4c11      	ldr	r4, [pc, #68]	; (4013a4 <nRF24_stopListening+0xb0>)
  40135e:	47a0      	blx	r4
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
  401360:	2002      	movs	r0, #2
  401362:	47a8      	blx	r5
  401364:	f040 0101 	orr.w	r1, r0, #1
  401368:	b2c9      	uxtb	r1, r1
  40136a:	2002      	movs	r0, #2
  40136c:	47a0      	blx	r4
  40136e:	bd38      	pop	{r3, r4, r5, pc}
	delay_us(txDelay);
  401370:	2033      	movs	r0, #51	; 0x33
  401372:	4b09      	ldr	r3, [pc, #36]	; (401398 <nRF24_stopListening+0xa4>)
  401374:	4798      	blx	r3
  401376:	e7d3      	b.n	401320 <nRF24_stopListening+0x2c>
		delay_us(txDelay);
  401378:	2033      	movs	r0, #51	; 0x33
  40137a:	4b07      	ldr	r3, [pc, #28]	; (401398 <nRF24_stopListening+0xa4>)
  40137c:	4798      	blx	r3
  40137e:	e7e5      	b.n	40134c <nRF24_stopListening+0x58>
  401380:	400e1200 	.word	0x400e1200
  401384:	204082f8 	.word	0x204082f8
  401388:	005a83e0 	.word	0x005a83e0
  40138c:	005a83df 	.word	0x005a83df
  401390:	11e1a300 	.word	0x11e1a300
  401394:	00402c49 	.word	0x00402c49
  401398:	20400001 	.word	0x20400001
  40139c:	00400f05 	.word	0x00400f05
  4013a0:	00400fcd 	.word	0x00400fcd
  4013a4:	00400f81 	.word	0x00400f81

004013a8 <nRF24_begin>:
 * address width: 32 bit / 4 bytes
 * 
 * \return 1 if nRF24 module reacts to data
 */
bool nRF24_begin(void)
{
  4013a8:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4013aa:	4b1a      	ldr	r3, [pc, #104]	; (401414 <nRF24_begin+0x6c>)
  4013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
  4013b0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013b6:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  4013b8:	210c      	movs	r1, #12
  4013ba:	2000      	movs	r0, #0
  4013bc:	4c16      	ldr	r4, [pc, #88]	; (401418 <nRF24_begin+0x70>)
  4013be:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  4013c0:	215f      	movs	r1, #95	; 0x5f
  4013c2:	2004      	movs	r0, #4
  4013c4:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  4013c6:	2000      	movs	r0, #0
  4013c8:	4b14      	ldr	r3, [pc, #80]	; (40141c <nRF24_begin+0x74>)
  4013ca:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  4013cc:	2002      	movs	r0, #2
  4013ce:	4b14      	ldr	r3, [pc, #80]	; (401420 <nRF24_begin+0x78>)
  4013d0:	4798      	blx	r3
	toggle_features();
  4013d2:	4b14      	ldr	r3, [pc, #80]	; (401424 <nRF24_begin+0x7c>)
  4013d4:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4013d6:	2170      	movs	r1, #112	; 0x70
  4013d8:	2007      	movs	r0, #7
  4013da:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  4013dc:	204c      	movs	r0, #76	; 0x4c
  4013de:	4b12      	ldr	r3, [pc, #72]	; (401428 <nRF24_begin+0x80>)
  4013e0:	4798      	blx	r3
	nRF24_setAddressWidth(ADDR_4bytes);
  4013e2:	2004      	movs	r0, #4
  4013e4:	4b11      	ldr	r3, [pc, #68]	; (40142c <nRF24_begin+0x84>)
  4013e6:	4798      	blx	r3
	
	nRF24_FlushRx();
  4013e8:	4b11      	ldr	r3, [pc, #68]	; (401430 <nRF24_begin+0x88>)
  4013ea:	4798      	blx	r3
	nRF24_FlushTx();
  4013ec:	4b11      	ldr	r3, [pc, #68]	; (401434 <nRF24_begin+0x8c>)
  4013ee:	4798      	blx	r3
	
	nRF24_powerUp();
  4013f0:	4b11      	ldr	r3, [pc, #68]	; (401438 <nRF24_begin+0x90>)
  4013f2:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4013f4:	2000      	movs	r0, #0
  4013f6:	4d11      	ldr	r5, [pc, #68]	; (40143c <nRF24_begin+0x94>)
  4013f8:	47a8      	blx	r5
  4013fa:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4013fe:	2000      	movs	r0, #0
  401400:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  401402:	2006      	movs	r0, #6
  401404:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  401406:	3801      	subs	r0, #1
  401408:	b2c0      	uxtb	r0, r0
}
  40140a:	28fd      	cmp	r0, #253	; 0xfd
  40140c:	bf8c      	ite	hi
  40140e:	2000      	movhi	r0, #0
  401410:	2001      	movls	r0, #1
  401412:	bd38      	pop	{r3, r4, r5, pc}
  401414:	400e1200 	.word	0x400e1200
  401418:	00400f81 	.word	0x00400f81
  40141c:	0040100d 	.word	0x0040100d
  401420:	0040106d 	.word	0x0040106d
  401424:	00401285 	.word	0x00401285
  401428:	004012a9 	.word	0x004012a9
  40142c:	0040124d 	.word	0x0040124d
  401430:	00400fad 	.word	0x00400fad
  401434:	00400fcd 	.word	0x00400fcd
  401438:	004012c1 	.word	0x004012c1
  40143c:	00400f05 	.word	0x00400f05

00401440 <nRF24_openWritingPipe>:
 * 
 * \param address address of the receiving module
 *
 */
void nRF24_openWritingPipe(uint64_t address)
{
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	b082      	sub	sp, #8
  401444:	ac02      	add	r4, sp, #8
  401446:	e964 0102 	strd	r0, r1, [r4, #-8]!
	writeRegister(RX_ADDR_P0, (uint8_t *)(&address), addr_width);
  40144a:	4e08      	ldr	r6, [pc, #32]	; (40146c <nRF24_openWritingPipe+0x2c>)
  40144c:	7832      	ldrb	r2, [r6, #0]
  40144e:	4621      	mov	r1, r4
  401450:	200a      	movs	r0, #10
  401452:	4d07      	ldr	r5, [pc, #28]	; (401470 <nRF24_openWritingPipe+0x30>)
  401454:	47a8      	blx	r5
	writeRegister(TX_ADDR, (uint8_t *)(&address), addr_width);
  401456:	7832      	ldrb	r2, [r6, #0]
  401458:	4621      	mov	r1, r4
  40145a:	2010      	movs	r0, #16
  40145c:	47a8      	blx	r5
	
	nRF24_writeRegister(RX_PW_P0, payload_size);
  40145e:	4b05      	ldr	r3, [pc, #20]	; (401474 <nRF24_openWritingPipe+0x34>)
  401460:	7819      	ldrb	r1, [r3, #0]
  401462:	2011      	movs	r0, #17
  401464:	4b04      	ldr	r3, [pc, #16]	; (401478 <nRF24_openWritingPipe+0x38>)
  401466:	4798      	blx	r3
}
  401468:	b002      	add	sp, #8
  40146a:	bd70      	pop	{r4, r5, r6, pc}
  40146c:	204082ec 	.word	0x204082ec
  401470:	00400eb9 	.word	0x00400eb9
  401474:	20400016 	.word	0x20400016
  401478:	00400f81 	.word	0x00400f81

0040147c <nRF24_write>:
 * \param buf: pointer to the data buffer
 * \param len: length of the payload to be written
 *
 */
bool nRF24_write(const void* buf, uint8_t len)
{
  40147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40147e:	af00      	add	r7, sp, #0
{
  401480:	466e      	mov	r6, sp
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  401482:	4b24      	ldr	r3, [pc, #144]	; (401514 <nRF24_write+0x98>)
  401484:	781b      	ldrb	r3, [r3, #0]
  401486:	bb53      	cbnz	r3, 4014de <nRF24_write+0x62>
  401488:	4b23      	ldr	r3, [pc, #140]	; (401518 <nRF24_write+0x9c>)
  40148a:	781b      	ldrb	r3, [r3, #0]
  40148c:	1a5b      	subs	r3, r3, r1
  40148e:	b2db      	uxtb	r3, r3
	uint8_t size = data_len + blanklen + 1;
  401490:	3101      	adds	r1, #1
  401492:	4419      	add	r1, r3
  401494:	b2c9      	uxtb	r1, r1
	uint8_t s_buff[size];
  401496:	1dcb      	adds	r3, r1, #7
  401498:	f023 0307 	bic.w	r3, r3, #7
  40149c:	ebad 0d03 	sub.w	sp, sp, r3
  4014a0:	46ee      	mov	lr, sp
	s_buff[0] = writeType;
  4014a2:	23a0      	movs	r3, #160	; 0xa0
  4014a4:	f88d 3000 	strb.w	r3, [sp]
	for (uint8_t i = 1; i< size; i++)
  4014a8:	2901      	cmp	r1, #1
  4014aa:	d90b      	bls.n	4014c4 <nRF24_write+0x48>
  4014ac:	1e43      	subs	r3, r0, #1
  4014ae:	f10d 0201 	add.w	r2, sp, #1
  4014b2:	1e8d      	subs	r5, r1, #2
  4014b4:	fa50 f585 	uxtab	r5, r0, r5
		s_buff[i] = current[i-1];
  4014b8:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  4014bc:	f802 4b01 	strb.w	r4, [r2], #1
	for (uint8_t i = 1; i< size; i++)
  4014c0:	42ab      	cmp	r3, r5
  4014c2:	d1f9      	bne.n	4014b8 <nRF24_write+0x3c>
	spi_master_transfer(s_buff, size);
  4014c4:	4670      	mov	r0, lr
  4014c6:	4b15      	ldr	r3, [pc, #84]	; (40151c <nRF24_write+0xa0>)
  4014c8:	4798      	blx	r3
  4014ca:	46b5      	mov	sp, r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4014d0:	4b13      	ldr	r3, [pc, #76]	; (401520 <nRF24_write+0xa4>)
  4014d2:	631a      	str	r2, [r3, #48]	; 0x30
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  4014d4:	4c13      	ldr	r4, [pc, #76]	; (401524 <nRF24_write+0xa8>)
		delay_us(100);
  4014d6:	f241 36c2 	movw	r6, #5058	; 0x13c2
  4014da:	4d13      	ldr	r5, [pc, #76]	; (401528 <nRF24_write+0xac>)
  4014dc:	e003      	b.n	4014e6 <nRF24_write+0x6a>
	uint8_t blanklen = dynamic_payloads_enabled ? 0 : payload_size - data_len;
  4014de:	2300      	movs	r3, #0
  4014e0:	e7d6      	b.n	401490 <nRF24_write+0x14>
		delay_us(100);
  4014e2:	4630      	mov	r0, r6
  4014e4:	47a8      	blx	r5
	while(!(nRF24_getStatus() & ((1<<TX_DS) | (1<<MAX_RT))))
  4014e6:	47a0      	blx	r4
  4014e8:	f010 0f30 	tst.w	r0, #48	; 0x30
  4014ec:	d0f9      	beq.n	4014e2 <nRF24_write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  4014f2:	4b0b      	ldr	r3, [pc, #44]	; (401520 <nRF24_write+0xa4>)
  4014f4:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t status = nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4014f6:	2170      	movs	r1, #112	; 0x70
  4014f8:	2007      	movs	r0, #7
  4014fa:	4b0c      	ldr	r3, [pc, #48]	; (40152c <nRF24_write+0xb0>)
  4014fc:	4798      	blx	r3
	if(status & (1<<MAX_RT)){
  4014fe:	f010 0f10 	tst.w	r0, #16
  401502:	d102      	bne.n	40150a <nRF24_write+0x8e>
	return 1;
  401504:	2001      	movs	r0, #1
	return nRFwrite(buf, len, 0);
  401506:	46bd      	mov	sp, r7
  401508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nRF24_FlushTx();
  40150a:	4b09      	ldr	r3, [pc, #36]	; (401530 <nRF24_write+0xb4>)
  40150c:	4798      	blx	r3
		return 0;
  40150e:	2000      	movs	r0, #0
  401510:	e7f9      	b.n	401506 <nRF24_write+0x8a>
  401512:	bf00      	nop
  401514:	2040723c 	.word	0x2040723c
  401518:	20400016 	.word	0x20400016
  40151c:	0040162d 	.word	0x0040162d
  401520:	400e1200 	.word	0x400e1200
  401524:	00400fed 	.word	0x00400fed
  401528:	20400001 	.word	0x20400001
  40152c:	00400f81 	.word	0x00400f81
  401530:	00400fcd 	.word	0x00400fcd

00401534 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
void spi_master_initialize(void)
{	
  401534:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401536:	4b2c      	ldr	r3, [pc, #176]	; (4015e8 <spi_master_initialize+0xb4>)
  401538:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40153c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401548:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40154c:	2500      	movs	r5, #0
  40154e:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401552:	601a      	str	r2, [r3, #0]
	printf("Setting SPI clock %lu Hz\n\r", (unsigned long)gs_ul_spi_clock);
  401554:	4e25      	ldr	r6, [pc, #148]	; (4015ec <spi_master_initialize+0xb8>)
  401556:	6831      	ldr	r1, [r6, #0]
  401558:	4825      	ldr	r0, [pc, #148]	; (4015f0 <spi_master_initialize+0xbc>)
  40155a:	4b26      	ldr	r3, [pc, #152]	; (4015f4 <spi_master_initialize+0xc0>)
  40155c:	4798      	blx	r3
	spi_set_clock_configuration(gs_ul_spi_clock);
	puts("-I- Initialize SPI as master\r");
  40155e:	4826      	ldr	r0, [pc, #152]	; (4015f8 <spi_master_initialize+0xc4>)
  401560:	4b26      	ldr	r3, [pc, #152]	; (4015fc <spi_master_initialize+0xc8>)
  401562:	4798      	blx	r3
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
  401564:	4c26      	ldr	r4, [pc, #152]	; (401600 <spi_master_initialize+0xcc>)
  401566:	4620      	mov	r0, r4
  401568:	4b26      	ldr	r3, [pc, #152]	; (401604 <spi_master_initialize+0xd0>)
  40156a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40156c:	2302      	movs	r3, #2
  40156e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401570:	2380      	movs	r3, #128	; 0x80
  401572:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401578:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40157a:	6863      	ldr	r3, [r4, #4]
  40157c:	f043 0301 	orr.w	r3, r3, #1
  401580:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401582:	6863      	ldr	r3, [r4, #4]
  401584:	f043 0310 	orr.w	r3, r3, #16
  401588:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_PCS);
  40158a:	210d      	movs	r1, #13
  40158c:	4620      	mov	r0, r4
  40158e:	4b1e      	ldr	r3, [pc, #120]	; (401608 <spi_master_initialize+0xd4>)
  401590:	4798      	blx	r3
	spi_configure_cs_behavior(SPI0, SPI_CHIP_SEL, SPI_CS_RISE_NO_TX);
  401592:	462a      	mov	r2, r5
  401594:	2101      	movs	r1, #1
  401596:	4620      	mov	r0, r4
  401598:	4b1c      	ldr	r3, [pc, #112]	; (40160c <spi_master_initialize+0xd8>)
  40159a:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI0, SPI_DLYBCS);
  40159c:	2105      	movs	r1, #5
  40159e:	4620      	mov	r0, r4
  4015a0:	4b1b      	ldr	r3, [pc, #108]	; (401610 <spi_master_initialize+0xdc>)
  4015a2:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4015a4:	462a      	mov	r2, r5
  4015a6:	2101      	movs	r1, #1
  4015a8:	4620      	mov	r0, r4
  4015aa:	4b1a      	ldr	r3, [pc, #104]	; (401614 <spi_master_initialize+0xe0>)
  4015ac:	4798      	blx	r3
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
  4015ae:	2201      	movs	r2, #1
  4015b0:	4611      	mov	r1, r2
  4015b2:	4620      	mov	r0, r4
  4015b4:	4b18      	ldr	r3, [pc, #96]	; (401618 <spi_master_initialize+0xe4>)
  4015b6:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  4015b8:	462a      	mov	r2, r5
  4015ba:	2101      	movs	r1, #1
  4015bc:	4620      	mov	r0, r4
  4015be:	4b17      	ldr	r3, [pc, #92]	; (40161c <spi_master_initialize+0xe8>)
  4015c0:	4798      	blx	r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL, (sysclk_get_peripheral_hz() / gs_ul_spi_clock));
  4015c2:	6833      	ldr	r3, [r6, #0]
  4015c4:	4a16      	ldr	r2, [pc, #88]	; (401620 <spi_master_initialize+0xec>)
  4015c6:	fbb2 f2f3 	udiv	r2, r2, r3
  4015ca:	b2d2      	uxtb	r2, r2
  4015cc:	2101      	movs	r1, #1
  4015ce:	4620      	mov	r0, r4
  4015d0:	4b14      	ldr	r3, [pc, #80]	; (401624 <spi_master_initialize+0xf0>)
  4015d2:	4798      	blx	r3
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
  4015d4:	2308      	movs	r3, #8
  4015d6:	2220      	movs	r2, #32
  4015d8:	2101      	movs	r1, #1
  4015da:	4620      	mov	r0, r4
  4015dc:	4d12      	ldr	r5, [pc, #72]	; (401628 <spi_master_initialize+0xf4>)
  4015de:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4015e0:	2301      	movs	r3, #1
  4015e2:	6023      	str	r3, [r4, #0]
  4015e4:	bd70      	pop	{r4, r5, r6, pc}
  4015e6:	bf00      	nop
  4015e8:	e000e100 	.word	0xe000e100
  4015ec:	20400018 	.word	0x20400018
  4015f0:	00409408 	.word	0x00409408
  4015f4:	00402fa9 	.word	0x00402fa9
  4015f8:	00409424 	.word	0x00409424
  4015fc:	0040329d 	.word	0x0040329d
  401600:	40008000 	.word	0x40008000
  401604:	00400869 	.word	0x00400869
  401608:	00400895 	.word	0x00400895
  40160c:	0040095d 	.word	0x0040095d
  401610:	004008ab 	.word	0x004008ab
  401614:	00400921 	.word	0x00400921
  401618:	0040093f 	.word	0x0040093f
  40161c:	004009a3 	.word	0x004009a3
  401620:	08f0d180 	.word	0x08f0d180
  401624:	004009b7 	.word	0x004009b7
  401628:	004009df 	.word	0x004009df

0040162c <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
  40162c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401630:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  401632:	b1d9      	cbz	r1, 40166c <spi_master_transfer+0x40>
  401634:	4688      	mov	r8, r1
  401636:	4605      	mov	r5, r0
  401638:	4480      	add	r8, r0
		if (i != size)
		{
			spi_write(SPI0, p_buffer[i], 0, 0);
  40163a:	4c0f      	ldr	r4, [pc, #60]	; (401678 <spi_master_transfer+0x4c>)
  40163c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401688 <spi_master_transfer+0x5c>
		{
			spi_write(SPI0, p_buffer[i], 0, 1);
		}
		/* Wait transfer done. */
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
		spi_read(SPI0, &data, &uc_pcs);
  401640:	4e0e      	ldr	r6, [pc, #56]	; (40167c <spi_master_transfer+0x50>)
  401642:	462f      	mov	r7, r5
			spi_write(SPI0, p_buffer[i], 0, 0);
  401644:	2300      	movs	r3, #0
  401646:	461a      	mov	r2, r3
  401648:	7829      	ldrb	r1, [r5, #0]
  40164a:	4620      	mov	r0, r4
  40164c:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  40164e:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
  401650:	f013 0f01 	tst.w	r3, #1
  401654:	d0fb      	beq.n	40164e <spi_master_transfer+0x22>
		spi_read(SPI0, &data, &uc_pcs);
  401656:	f10d 0207 	add.w	r2, sp, #7
  40165a:	4631      	mov	r1, r6
  40165c:	4620      	mov	r0, r4
  40165e:	4b08      	ldr	r3, [pc, #32]	; (401680 <spi_master_transfer+0x54>)
  401660:	4798      	blx	r3
		p_buffer[i] = data;
  401662:	8833      	ldrh	r3, [r6, #0]
  401664:	703b      	strb	r3, [r7, #0]
  401666:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  401668:	4545      	cmp	r5, r8
  40166a:	d1ea      	bne.n	401642 <spi_master_transfer+0x16>
	}
	delay_us(2);
  40166c:	2066      	movs	r0, #102	; 0x66
  40166e:	4b05      	ldr	r3, [pc, #20]	; (401684 <spi_master_transfer+0x58>)
  401670:	4798      	blx	r3
  401672:	b003      	add	sp, #12
  401674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401678:	40008000 	.word	0x40008000
  40167c:	2040723e 	.word	0x2040723e
  401680:	004008bd 	.word	0x004008bd
  401684:	20400001 	.word	0x20400001
  401688:	004008ed 	.word	0x004008ed

0040168c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40168c:	3801      	subs	r0, #1
  40168e:	2802      	cmp	r0, #2
  401690:	d815      	bhi.n	4016be <_write+0x32>
{
  401692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401696:	460e      	mov	r6, r1
  401698:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40169a:	b19a      	cbz	r2, 4016c4 <_write+0x38>
  40169c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40169e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4016d8 <_write+0x4c>
  4016a2:	4f0c      	ldr	r7, [pc, #48]	; (4016d4 <_write+0x48>)
  4016a4:	f8d8 0000 	ldr.w	r0, [r8]
  4016a8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4016ac:	683b      	ldr	r3, [r7, #0]
  4016ae:	4798      	blx	r3
  4016b0:	2800      	cmp	r0, #0
  4016b2:	db0a      	blt.n	4016ca <_write+0x3e>
  4016b4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4016b6:	3c01      	subs	r4, #1
  4016b8:	d1f4      	bne.n	4016a4 <_write+0x18>
  4016ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4016be:	f04f 30ff 	mov.w	r0, #4294967295
  4016c2:	4770      	bx	lr
	for (; len != 0; --len) {
  4016c4:	4610      	mov	r0, r2
  4016c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4016ca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016d2:	bf00      	nop
  4016d4:	204082fc 	.word	0x204082fc
  4016d8:	20408300 	.word	0x20408300

004016dc <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016de:	b083      	sub	sp, #12
  4016e0:	4604      	mov	r4, r0
  4016e2:	460f      	mov	r7, r1
  4016e4:	4616      	mov	r6, r2
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4016e6:	6803      	ldr	r3, [r0, #0]
  4016e8:	f043 0310 	orr.w	r3, r3, #16
  4016ec:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4016ee:	ab01      	add	r3, sp, #4
  4016f0:	2201      	movs	r2, #1
  4016f2:	4d36      	ldr	r5, [pc, #216]	; (4017cc <ethernet_phy_set_link+0xf0>)
  4016f4:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4016f6:	b958      	cbnz	r0, 401710 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  4016f8:	9b01      	ldr	r3, [sp, #4]
  4016fa:	f013 0f04 	tst.w	r3, #4
  4016fe:	d10d      	bne.n	40171c <ethernet_phy_set_link+0x40>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401700:	6823      	ldr	r3, [r4, #0]
  401702:	f023 0310 	bic.w	r3, r3, #16
  401706:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  401708:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40170a:	4618      	mov	r0, r3
  40170c:	b003      	add	sp, #12
  40170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401710:	4603      	mov	r3, r0
  401712:	6822      	ldr	r2, [r4, #0]
  401714:	f022 0210 	bic.w	r2, r2, #16
  401718:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40171a:	e7f6      	b.n	40170a <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  40171c:	b92e      	cbnz	r6, 40172a <ethernet_phy_set_link+0x4e>
  40171e:	6823      	ldr	r3, [r4, #0]
  401720:	f023 0310 	bic.w	r3, r3, #16
  401724:	6023      	str	r3, [r4, #0]
		return uc_rc;
  401726:	4633      	mov	r3, r6
  401728:	e7ef      	b.n	40170a <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  40172a:	466b      	mov	r3, sp
  40172c:	221e      	movs	r2, #30
  40172e:	4639      	mov	r1, r7
  401730:	4620      	mov	r0, r4
  401732:	4d26      	ldr	r5, [pc, #152]	; (4017cc <ethernet_phy_set_link+0xf0>)
  401734:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  401736:	4603      	mov	r3, r0
  401738:	b950      	cbnz	r0, 401750 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40173a:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  40173c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  401740:	d00b      	beq.n	40175a <ethernet_phy_set_link+0x7e>
  401742:	9900      	ldr	r1, [sp, #0]
  401744:	f011 0f05 	tst.w	r1, #5
  401748:	bf0c      	ite	eq
  40174a:	2101      	moveq	r1, #1
  40174c:	2100      	movne	r1, #0
  40174e:	e005      	b.n	40175c <ethernet_phy_set_link+0x80>
  401750:	6822      	ldr	r2, [r4, #0]
  401752:	f022 0210 	bic.w	r2, r2, #16
  401756:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401758:	e7d7      	b.n	40170a <ethernet_phy_set_link+0x2e>
  40175a:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  40175c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  401760:	d003      	beq.n	40176a <ethernet_phy_set_link+0x8e>
  401762:	9800      	ldr	r0, [sp, #0]
  401764:	f010 0f02 	tst.w	r0, #2
  401768:	d127      	bne.n	4017ba <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40176a:	f412 6f00 	tst.w	r2, #2048	; 0x800
  40176e:	d003      	beq.n	401778 <ethernet_phy_set_link+0x9c>
  401770:	9a00      	ldr	r2, [sp, #0]
  401772:	f012 0f01 	tst.w	r2, #1
  401776:	d111      	bne.n	40179c <ethernet_phy_set_link+0xc0>
	if (uc_speed) {
  401778:	b191      	cbz	r1, 4017a0 <ethernet_phy_set_link+0xc4>
  40177a:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40177c:	6861      	ldr	r1, [r4, #4]
  40177e:	f041 0101 	orr.w	r1, r1, #1
  401782:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  401784:	b1a2      	cbz	r2, 4017b0 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  401786:	6862      	ldr	r2, [r4, #4]
  401788:	f042 0202 	orr.w	r2, r2, #2
  40178c:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40178e:	6822      	ldr	r2, [r4, #0]
  401790:	f022 0210 	bic.w	r2, r2, #16
  401794:	6022      	str	r2, [r4, #0]
	return uc_rc;
  401796:	e7b8      	b.n	40170a <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  401798:	461a      	mov	r2, r3
  40179a:	e7ef      	b.n	40177c <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  40179c:	461a      	mov	r2, r3
  40179e:	e000      	b.n	4017a2 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4017a0:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4017a2:	6861      	ldr	r1, [r4, #4]
  4017a4:	f021 0101 	bic.w	r1, r1, #1
  4017a8:	6061      	str	r1, [r4, #4]
  4017aa:	e7eb      	b.n	401784 <ethernet_phy_set_link+0xa8>
  4017ac:	461a      	mov	r2, r3
  4017ae:	e7f8      	b.n	4017a2 <ethernet_phy_set_link+0xc6>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4017b0:	6862      	ldr	r2, [r4, #4]
  4017b2:	f022 0202 	bic.w	r2, r2, #2
  4017b6:	6062      	str	r2, [r4, #4]
  4017b8:	e7e9      	b.n	40178e <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4017ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4017be:	d0eb      	beq.n	401798 <ethernet_phy_set_link+0xbc>
  4017c0:	9a00      	ldr	r2, [sp, #0]
  4017c2:	f012 0f01 	tst.w	r2, #1
  4017c6:	d1f1      	bne.n	4017ac <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4017c8:	461a      	mov	r2, r3
  4017ca:	e7d7      	b.n	40177c <ethernet_phy_set_link+0xa0>
  4017cc:	00401b59 	.word	0x00401b59

004017d0 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017d4:	b082      	sub	sp, #8
  4017d6:	4604      	mov	r4, r0
  4017d8:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4017da:	6803      	ldr	r3, [r0, #0]
  4017dc:	f043 0310 	orr.w	r3, r3, #16
  4017e0:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4017e2:	ab01      	add	r3, sp, #4
  4017e4:	2200      	movs	r2, #0
  4017e6:	4e5d      	ldr	r6, [pc, #372]	; (40195c <ethernet_phy_auto_negotiate+0x18c>)
  4017e8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4017ea:	b140      	cbz	r0, 4017fe <ethernet_phy_auto_negotiate+0x2e>
  4017ec:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4017ee:	6822      	ldr	r2, [r4, #0]
  4017f0:	f022 0210 	bic.w	r2, r2, #16
  4017f4:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  4017f6:	4618      	mov	r0, r3
  4017f8:	b002      	add	sp, #8
  4017fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  4017fe:	9b01      	ldr	r3, [sp, #4]
  401800:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  401804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401808:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40180a:	2200      	movs	r2, #0
  40180c:	4629      	mov	r1, r5
  40180e:	4620      	mov	r0, r4
  401810:	4e53      	ldr	r6, [pc, #332]	; (401960 <ethernet_phy_auto_negotiate+0x190>)
  401812:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401814:	4603      	mov	r3, r0
  401816:	b120      	cbz	r0, 401822 <ethernet_phy_auto_negotiate+0x52>
  401818:	6822      	ldr	r2, [r4, #0]
  40181a:	f022 0210 	bic.w	r2, r2, #16
  40181e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401820:	e7e9      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  401822:	f240 13e1 	movw	r3, #481	; 0x1e1
  401826:	2204      	movs	r2, #4
  401828:	4629      	mov	r1, r5
  40182a:	4620      	mov	r0, r4
  40182c:	4e4c      	ldr	r6, [pc, #304]	; (401960 <ethernet_phy_auto_negotiate+0x190>)
  40182e:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  401830:	4603      	mov	r3, r0
  401832:	b120      	cbz	r0, 40183e <ethernet_phy_auto_negotiate+0x6e>
  401834:	6822      	ldr	r2, [r4, #0]
  401836:	f022 0210 	bic.w	r2, r2, #16
  40183a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40183c:	e7db      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  40183e:	ab01      	add	r3, sp, #4
  401840:	2200      	movs	r2, #0
  401842:	4629      	mov	r1, r5
  401844:	4620      	mov	r0, r4
  401846:	4e45      	ldr	r6, [pc, #276]	; (40195c <ethernet_phy_auto_negotiate+0x18c>)
  401848:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40184a:	4603      	mov	r3, r0
  40184c:	b120      	cbz	r0, 401858 <ethernet_phy_auto_negotiate+0x88>
  40184e:	6822      	ldr	r2, [r4, #0]
  401850:	f022 0210 	bic.w	r2, r2, #16
  401854:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401856:	e7ce      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  401858:	9b01      	ldr	r3, [sp, #4]
  40185a:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  40185e:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401860:	2200      	movs	r2, #0
  401862:	4629      	mov	r1, r5
  401864:	4620      	mov	r0, r4
  401866:	4e3e      	ldr	r6, [pc, #248]	; (401960 <ethernet_phy_auto_negotiate+0x190>)
  401868:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40186a:	4603      	mov	r3, r0
  40186c:	b120      	cbz	r0, 401878 <ethernet_phy_auto_negotiate+0xa8>
  40186e:	6822      	ldr	r2, [r4, #0]
  401870:	f022 0210 	bic.w	r2, r2, #16
  401874:	6022      	str	r2, [r4, #0]
		return uc_rc;
  401876:	e7be      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  401878:	9b01      	ldr	r3, [sp, #4]
  40187a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  401882:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  401884:	2200      	movs	r2, #0
  401886:	4629      	mov	r1, r5
  401888:	4620      	mov	r0, r4
  40188a:	4e35      	ldr	r6, [pc, #212]	; (401960 <ethernet_phy_auto_negotiate+0x190>)
  40188c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40188e:	4603      	mov	r3, r0
  401890:	b9b0      	cbnz	r0, 4018c0 <ethernet_phy_auto_negotiate+0xf0>
  401892:	4e34      	ldr	r6, [pc, #208]	; (401964 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  401894:	f04f 0801 	mov.w	r8, #1
  401898:	4f30      	ldr	r7, [pc, #192]	; (40195c <ethernet_phy_auto_negotiate+0x18c>)
  40189a:	ab01      	add	r3, sp, #4
  40189c:	4642      	mov	r2, r8
  40189e:	4629      	mov	r1, r5
  4018a0:	4620      	mov	r0, r4
  4018a2:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4018a4:	4603      	mov	r3, r0
  4018a6:	b980      	cbnz	r0, 4018ca <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4018a8:	9b01      	ldr	r3, [sp, #4]
  4018aa:	f013 0f20 	tst.w	r3, #32
  4018ae:	d111      	bne.n	4018d4 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4018b0:	3e01      	subs	r6, #1
  4018b2:	d1f2      	bne.n	40189a <ethernet_phy_auto_negotiate+0xca>
  4018b4:	6823      	ldr	r3, [r4, #0]
  4018b6:	f023 0310 	bic.w	r3, r3, #16
  4018ba:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4018bc:	2301      	movs	r3, #1
  4018be:	e79a      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
  4018c0:	6822      	ldr	r2, [r4, #0]
  4018c2:	f022 0210 	bic.w	r2, r2, #16
  4018c6:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4018c8:	e795      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
  4018ca:	6822      	ldr	r2, [r4, #0]
  4018cc:	f022 0210 	bic.w	r2, r2, #16
  4018d0:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4018d2:	e790      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4018d4:	466b      	mov	r3, sp
  4018d6:	2205      	movs	r2, #5
  4018d8:	4629      	mov	r1, r5
  4018da:	4620      	mov	r0, r4
  4018dc:	4d1f      	ldr	r5, [pc, #124]	; (40195c <ethernet_phy_auto_negotiate+0x18c>)
  4018de:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4018e0:	4603      	mov	r3, r0
  4018e2:	b980      	cbnz	r0, 401906 <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4018e4:	9a00      	ldr	r2, [sp, #0]
  4018e6:	f412 7f80 	tst.w	r2, #256	; 0x100
  4018ea:	d113      	bne.n	401914 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4018ec:	f012 0f40 	tst.w	r2, #64	; 0x40
  4018f0:	d12c      	bne.n	40194c <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  4018f2:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  4018f6:	bf08      	it	eq
  4018f8:	4602      	moveq	r2, r0
  4018fa:	d109      	bne.n	401910 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4018fc:	6861      	ldr	r1, [r4, #4]
  4018fe:	f021 0101 	bic.w	r1, r1, #1
  401902:	6061      	str	r1, [r4, #4]
  401904:	e00b      	b.n	40191e <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401906:	6822      	ldr	r2, [r4, #0]
  401908:	f022 0210 	bic.w	r2, r2, #16
  40190c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40190e:	e772      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  401910:	4602      	mov	r2, r0
  401912:	e000      	b.n	401916 <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  401914:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  401916:	6861      	ldr	r1, [r4, #4]
  401918:	f041 0101 	orr.w	r1, r1, #1
  40191c:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  40191e:	b1ba      	cbz	r2, 401950 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  401920:	6862      	ldr	r2, [r4, #4]
  401922:	f042 0202 	orr.w	r2, r2, #2
  401926:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  401928:	68e2      	ldr	r2, [r4, #12]
  40192a:	f022 0201 	bic.w	r2, r2, #1
  40192e:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  401930:	4a0d      	ldr	r2, [pc, #52]	; (401968 <ethernet_phy_auto_negotiate+0x198>)
  401932:	6811      	ldr	r1, [r2, #0]
  401934:	f041 0108 	orr.w	r1, r1, #8
  401938:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40193a:	6811      	ldr	r1, [r2, #0]
  40193c:	f041 0104 	orr.w	r1, r1, #4
  401940:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401942:	6822      	ldr	r2, [r4, #0]
  401944:	f022 0210 	bic.w	r2, r2, #16
  401948:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40194a:	e754      	b.n	4017f6 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  40194c:	2201      	movs	r2, #1
  40194e:	e7d5      	b.n	4018fc <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  401950:	6862      	ldr	r2, [r4, #4]
  401952:	f022 0202 	bic.w	r2, r2, #2
  401956:	6062      	str	r2, [r4, #4]
  401958:	e7e6      	b.n	401928 <ethernet_phy_auto_negotiate+0x158>
  40195a:	bf00      	nop
  40195c:	00401b59 	.word	0x00401b59
  401960:	00401bb9 	.word	0x00401bb9
  401964:	000f4240 	.word	0x000f4240
  401968:	40050000 	.word	0x40050000

0040196c <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  40196c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401970:	b083      	sub	sp, #12
  401972:	4605      	mov	r5, r0
  401974:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  401976:	6803      	ldr	r3, [r0, #0]
  401978:	f043 0310 	orr.w	r3, r3, #16
  40197c:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  40197e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401982:	ae02      	add	r6, sp, #8
  401984:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  401988:	2200      	movs	r2, #0
  40198a:	4c0e      	ldr	r4, [pc, #56]	; (4019c4 <ethernet_phy_reset+0x58>)
  40198c:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40198e:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  401990:	f04f 0800 	mov.w	r8, #0
  401994:	4f0c      	ldr	r7, [pc, #48]	; (4019c8 <ethernet_phy_reset+0x5c>)
  401996:	4633      	mov	r3, r6
  401998:	4642      	mov	r2, r8
  40199a:	4649      	mov	r1, r9
  40199c:	4628      	mov	r0, r5
  40199e:	47b8      	blx	r7
		ul_timeout--;
  4019a0:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4019a2:	9b01      	ldr	r3, [sp, #4]
  4019a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4019a8:	d001      	beq.n	4019ae <ethernet_phy_reset+0x42>
  4019aa:	2c00      	cmp	r4, #0
  4019ac:	d1f3      	bne.n	401996 <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4019ae:	682b      	ldr	r3, [r5, #0]
  4019b0:	f023 0310 	bic.w	r3, r3, #16
  4019b4:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4019b6:	fab4 f084 	clz	r0, r4
  4019ba:	0940      	lsrs	r0, r0, #5
  4019bc:	b003      	add	sp, #12
  4019be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4019c2:	bf00      	nop
  4019c4:	00401bb9 	.word	0x00401bb9
  4019c8:	00401b59 	.word	0x00401b59

004019cc <ethernet_phy_init>:
{
  4019cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019d0:	b085      	sub	sp, #20
  4019d2:	4606      	mov	r6, r0
  4019d4:	4688      	mov	r8, r1
  4019d6:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4019d8:	2401      	movs	r4, #1
  4019da:	9400      	str	r4, [sp, #0]
  4019dc:	2300      	movs	r3, #0
  4019de:	4622      	mov	r2, r4
  4019e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4019e4:	4843      	ldr	r0, [pc, #268]	; (401af4 <ethernet_phy_init+0x128>)
  4019e6:	4f44      	ldr	r7, [pc, #272]	; (401af8 <ethernet_phy_init+0x12c>)
  4019e8:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4019ea:	4622      	mov	r2, r4
  4019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4019f0:	4842      	ldr	r0, [pc, #264]	; (401afc <ethernet_phy_init+0x130>)
  4019f2:	4b43      	ldr	r3, [pc, #268]	; (401b00 <ethernet_phy_init+0x134>)
  4019f4:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4019f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4019fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019fe:	4841      	ldr	r0, [pc, #260]	; (401b04 <ethernet_phy_init+0x138>)
  401a00:	4b41      	ldr	r3, [pc, #260]	; (401b08 <ethernet_phy_init+0x13c>)
  401a02:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  401a04:	4641      	mov	r1, r8
  401a06:	4841      	ldr	r0, [pc, #260]	; (401b0c <ethernet_phy_init+0x140>)
  401a08:	4b41      	ldr	r3, [pc, #260]	; (401b10 <ethernet_phy_init+0x144>)
  401a0a:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  401a0c:	4b41      	ldr	r3, [pc, #260]	; (401b14 <ethernet_phy_init+0x148>)
  401a0e:	429d      	cmp	r5, r3
  401a10:	d85d      	bhi.n	401ace <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  401a12:	4b41      	ldr	r3, [pc, #260]	; (401b18 <ethernet_phy_init+0x14c>)
  401a14:	429d      	cmp	r5, r3
  401a16:	d80f      	bhi.n	401a38 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  401a18:	4b40      	ldr	r3, [pc, #256]	; (401b1c <ethernet_phy_init+0x150>)
  401a1a:	429d      	cmp	r5, r3
  401a1c:	d83e      	bhi.n	401a9c <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  401a1e:	4b40      	ldr	r3, [pc, #256]	; (401b20 <ethernet_phy_init+0x154>)
  401a20:	429d      	cmp	r5, r3
  401a22:	d83e      	bhi.n	401aa2 <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  401a24:	4b3f      	ldr	r3, [pc, #252]	; (401b24 <ethernet_phy_init+0x158>)
  401a26:	429d      	cmp	r5, r3
  401a28:	d83e      	bhi.n	401aa8 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  401a2a:	4b3f      	ldr	r3, [pc, #252]	; (401b28 <ethernet_phy_init+0x15c>)
  401a2c:	429d      	cmp	r5, r3
  401a2e:	bf8c      	ite	hi
  401a30:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  401a34:	2300      	movls	r3, #0
  401a36:	e001      	b.n	401a3c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  401a38:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  401a3c:	6872      	ldr	r2, [r6, #4]
  401a3e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  401a42:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  401a44:	6875      	ldr	r5, [r6, #4]
  401a46:	431d      	orrs	r5, r3
  401a48:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  401a4a:	ab04      	add	r3, sp, #16
  401a4c:	2200      	movs	r2, #0
  401a4e:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  401a52:	6832      	ldr	r2, [r6, #0]
  401a54:	f042 0210 	orr.w	r2, r2, #16
  401a58:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  401a5a:	2202      	movs	r2, #2
  401a5c:	4641      	mov	r1, r8
  401a5e:	4630      	mov	r0, r6
  401a60:	4c32      	ldr	r4, [pc, #200]	; (401b2c <ethernet_phy_init+0x160>)
  401a62:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  401a64:	9b03      	ldr	r3, [sp, #12]
  401a66:	2b22      	cmp	r3, #34	; 0x22
  401a68:	d035      	beq.n	401ad6 <ethernet_phy_init+0x10a>
  401a6a:	4644      	mov	r4, r8
  401a6c:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  401a6e:	f04f 0902 	mov.w	r9, #2
  401a72:	4f2e      	ldr	r7, [pc, #184]	; (401b2c <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  401a74:	3401      	adds	r4, #1
  401a76:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  401a7a:	ab03      	add	r3, sp, #12
  401a7c:	464a      	mov	r2, r9
  401a7e:	4621      	mov	r1, r4
  401a80:	4630      	mov	r0, r6
  401a82:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  401a84:	9b03      	ldr	r3, [sp, #12]
  401a86:	2b22      	cmp	r3, #34	; 0x22
  401a88:	d011      	beq.n	401aae <ethernet_phy_init+0xe2>
  401a8a:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  401a8c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  401a90:	d1f0      	bne.n	401a74 <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401a92:	6833      	ldr	r3, [r6, #0]
  401a94:	f023 0310 	bic.w	r3, r3, #16
  401a98:	6033      	str	r3, [r6, #0]
  401a9a:	e018      	b.n	401ace <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  401a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  401aa0:	e7cc      	b.n	401a3c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  401aa2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  401aa6:	e7c9      	b.n	401a3c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  401aa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401aac:	e7c6      	b.n	401a3c <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  401aae:	6833      	ldr	r3, [r6, #0]
  401ab0:	f023 0310 	bic.w	r3, r3, #16
  401ab4:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  401ab6:	ab03      	add	r3, sp, #12
  401ab8:	2201      	movs	r2, #1
  401aba:	4621      	mov	r1, r4
  401abc:	4630      	mov	r0, r6
  401abe:	4d1b      	ldr	r5, [pc, #108]	; (401b2c <ethernet_phy_init+0x160>)
  401ac0:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  401ac2:	45a0      	cmp	r8, r4
  401ac4:	d003      	beq.n	401ace <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  401ac6:	4641      	mov	r1, r8
  401ac8:	4630      	mov	r0, r6
  401aca:	4b11      	ldr	r3, [pc, #68]	; (401b10 <ethernet_phy_init+0x144>)
  401acc:	4798      	blx	r3
}
  401ace:	2000      	movs	r0, #0
  401ad0:	b005      	add	sp, #20
  401ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401ad6:	6833      	ldr	r3, [r6, #0]
  401ad8:	f023 0310 	bic.w	r3, r3, #16
  401adc:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  401ade:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  401ae2:	d0f4      	beq.n	401ace <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  401ae4:	ab03      	add	r3, sp, #12
  401ae6:	2201      	movs	r2, #1
  401ae8:	4641      	mov	r1, r8
  401aea:	4630      	mov	r0, r6
  401aec:	4c0f      	ldr	r4, [pc, #60]	; (401b2c <ethernet_phy_init+0x160>)
  401aee:	47a0      	blx	r4
  401af0:	e7ed      	b.n	401ace <ethernet_phy_init+0x102>
  401af2:	bf00      	nop
  401af4:	400e1200 	.word	0x400e1200
  401af8:	00401f1d 	.word	0x00401f1d
  401afc:	400e0e00 	.word	0x400e0e00
  401b00:	00401ee7 	.word	0x00401ee7
  401b04:	400e1400 	.word	0x400e1400
  401b08:	00401e55 	.word	0x00401e55
  401b0c:	40050000 	.word	0x40050000
  401b10:	0040196d 	.word	0x0040196d
  401b14:	0e4e1c00 	.word	0x0e4e1c00
  401b18:	09896800 	.word	0x09896800
  401b1c:	07270e00 	.word	0x07270e00
  401b20:	04c4b400 	.word	0x04c4b400
  401b24:	02625a00 	.word	0x02625a00
  401b28:	01312d00 	.word	0x01312d00
  401b2c:	00401b59 	.word	0x00401b59

00401b30 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401b30:	6943      	ldr	r3, [r0, #20]
  401b32:	f013 0f02 	tst.w	r3, #2
  401b36:	d002      	beq.n	401b3e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401b38:	61c1      	str	r1, [r0, #28]
	return 0;
  401b3a:	2000      	movs	r0, #0
  401b3c:	4770      	bx	lr
		return 1;
  401b3e:	2001      	movs	r0, #1
}
  401b40:	4770      	bx	lr

00401b42 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401b42:	6943      	ldr	r3, [r0, #20]
  401b44:	f013 0f01 	tst.w	r3, #1
  401b48:	d003      	beq.n	401b52 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401b4a:	6983      	ldr	r3, [r0, #24]
  401b4c:	700b      	strb	r3, [r1, #0]
	return 0;
  401b4e:	2000      	movs	r0, #0
  401b50:	4770      	bx	lr
		return 1;
  401b52:	2001      	movs	r0, #1
}
  401b54:	4770      	bx	lr
	...

00401b58 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401b58:	b410      	push	{r4}
  401b5a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b5c:	6884      	ldr	r4, [r0, #8]
  401b5e:	f014 0f04 	tst.w	r4, #4
  401b62:	d0fb      	beq.n	401b5c <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401b64:	0492      	lsls	r2, r2, #18
  401b66:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401b6a:	4a11      	ldr	r2, [pc, #68]	; (401bb0 <gmac_phy_read+0x58>)
  401b6c:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401b6e:	05c9      	lsls	r1, r1, #23
  401b70:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401b74:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401b76:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401b78:	2200      	movs	r2, #0
  401b7a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b7c:	490d      	ldr	r1, [pc, #52]	; (401bb4 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401b7e:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401b80:	f012 0f04 	tst.w	r2, #4
  401b84:	d107      	bne.n	401b96 <gmac_phy_read+0x3e>
		ul_retry_count++;
  401b86:	9a01      	ldr	r2, [sp, #4]
  401b88:	3201      	adds	r2, #1
  401b8a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b8c:	9a01      	ldr	r2, [sp, #4]
  401b8e:	428a      	cmp	r2, r1
  401b90:	d9f5      	bls.n	401b7e <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  401b92:	2001      	movs	r0, #1
  401b94:	e007      	b.n	401ba6 <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b96:	6882      	ldr	r2, [r0, #8]
  401b98:	f012 0f04 	tst.w	r2, #4
  401b9c:	d0fb      	beq.n	401b96 <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  401b9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401ba0:	b292      	uxth	r2, r2
  401ba2:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401ba4:	2000      	movs	r0, #0
}
  401ba6:	b003      	add	sp, #12
  401ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bac:	4770      	bx	lr
  401bae:	bf00      	nop
  401bb0:	60020000 	.word	0x60020000
  401bb4:	000f423f 	.word	0x000f423f

00401bb8 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401bb8:	b410      	push	{r4}
  401bba:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401bbc:	6884      	ldr	r4, [r0, #8]
  401bbe:	f014 0f04 	tst.w	r4, #4
  401bc2:	d0fb      	beq.n	401bbc <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401bc4:	0492      	lsls	r2, r2, #18
  401bc6:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401bca:	4a0e      	ldr	r2, [pc, #56]	; (401c04 <gmac_phy_write+0x4c>)
  401bcc:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401bce:	05c9      	lsls	r1, r1, #23
  401bd0:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401bd4:	430a      	orrs	r2, r1
  401bd6:	b29b      	uxth	r3, r3
  401bd8:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401bda:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401bdc:	2300      	movs	r3, #0
  401bde:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401be0:	4a09      	ldr	r2, [pc, #36]	; (401c08 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401be2:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401be4:	f013 0f04 	tst.w	r3, #4
  401be8:	d107      	bne.n	401bfa <gmac_phy_write+0x42>
		ul_retry_count++;
  401bea:	9b01      	ldr	r3, [sp, #4]
  401bec:	3301      	adds	r3, #1
  401bee:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401bf0:	9b01      	ldr	r3, [sp, #4]
  401bf2:	4293      	cmp	r3, r2
  401bf4:	d9f5      	bls.n	401be2 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  401bf6:	2001      	movs	r0, #1
  401bf8:	e000      	b.n	401bfc <gmac_phy_write+0x44>
	return GMAC_OK;
  401bfa:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  401bfc:	b003      	add	sp, #12
  401bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c02:	4770      	bx	lr
  401c04:	50020000 	.word	0x50020000
  401c08:	000f423f 	.word	0x000f423f

00401c0c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401c0c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  401c0e:	4810      	ldr	r0, [pc, #64]	; (401c50 <sysclk_init+0x44>)
  401c10:	4b10      	ldr	r3, [pc, #64]	; (401c54 <sysclk_init+0x48>)
  401c12:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401c14:	213e      	movs	r1, #62	; 0x3e
  401c16:	2000      	movs	r0, #0
  401c18:	4b0f      	ldr	r3, [pc, #60]	; (401c58 <sysclk_init+0x4c>)
  401c1a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401c1c:	4c0f      	ldr	r4, [pc, #60]	; (401c5c <sysclk_init+0x50>)
  401c1e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401c20:	2800      	cmp	r0, #0
  401c22:	d0fc      	beq.n	401c1e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401c24:	4b0e      	ldr	r3, [pc, #56]	; (401c60 <sysclk_init+0x54>)
  401c26:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401c28:	4a0e      	ldr	r2, [pc, #56]	; (401c64 <sysclk_init+0x58>)
  401c2a:	4b0f      	ldr	r3, [pc, #60]	; (401c68 <sysclk_init+0x5c>)
  401c2c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401c2e:	4c0f      	ldr	r4, [pc, #60]	; (401c6c <sysclk_init+0x60>)
  401c30:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401c32:	2800      	cmp	r0, #0
  401c34:	d0fc      	beq.n	401c30 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401c36:	2002      	movs	r0, #2
  401c38:	4b0d      	ldr	r3, [pc, #52]	; (401c70 <sysclk_init+0x64>)
  401c3a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c3c:	2000      	movs	r0, #0
  401c3e:	4b0d      	ldr	r3, [pc, #52]	; (401c74 <sysclk_init+0x68>)
  401c40:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c42:	4b0d      	ldr	r3, [pc, #52]	; (401c78 <sysclk_init+0x6c>)
  401c44:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  401c46:	4802      	ldr	r0, [pc, #8]	; (401c50 <sysclk_init+0x44>)
  401c48:	4b02      	ldr	r3, [pc, #8]	; (401c54 <sysclk_init+0x48>)
  401c4a:	4798      	blx	r3
  401c4c:	bd10      	pop	{r4, pc}
  401c4e:	bf00      	nop
  401c50:	08f0d180 	.word	0x08f0d180
  401c54:	00402319 	.word	0x00402319
  401c58:	0040209d 	.word	0x0040209d
  401c5c:	004020f1 	.word	0x004020f1
  401c60:	00402101 	.word	0x00402101
  401c64:	20183f01 	.word	0x20183f01
  401c68:	400e0600 	.word	0x400e0600
  401c6c:	00402111 	.word	0x00402111
  401c70:	00402001 	.word	0x00402001
  401c74:	00402039 	.word	0x00402039
  401c78:	0040220d 	.word	0x0040220d

00401c7c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401c7c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c82:	4b6e      	ldr	r3, [pc, #440]	; (401e3c <board_init+0x1c0>)
  401c84:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c86:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  401c8a:	4a6d      	ldr	r2, [pc, #436]	; (401e40 <board_init+0x1c4>)
  401c8c:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c8e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  401c92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  401c94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c98:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c9c:	4b69      	ldr	r3, [pc, #420]	; (401e44 <board_init+0x1c8>)
  401c9e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401ca2:	f022 0201 	bic.w	r2, r2, #1
  401ca6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401caa:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401cae:	f022 0201 	bic.w	r2, r2, #1
  401cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  401cb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401cba:	f3bf 8f6f 	isb	sy
  401cbe:	200a      	movs	r0, #10
  401cc0:	4c61      	ldr	r4, [pc, #388]	; (401e48 <board_init+0x1cc>)
  401cc2:	47a0      	blx	r4
  401cc4:	200b      	movs	r0, #11
  401cc6:	47a0      	blx	r4
  401cc8:	200c      	movs	r0, #12
  401cca:	47a0      	blx	r4
  401ccc:	2010      	movs	r0, #16
  401cce:	47a0      	blx	r4
  401cd0:	2011      	movs	r0, #17
  401cd2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cd4:	4b5d      	ldr	r3, [pc, #372]	; (401e4c <board_init+0x1d0>)
  401cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
  401cda:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ce0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ce2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401cea:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401cf0:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cf6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401cf8:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401cfe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d00:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401d04:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d06:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d08:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401d0c:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401d0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401d12:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401d1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401d1e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d24:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d26:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d2e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401d32:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d34:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d36:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401d3a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d3c:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401d3e:	4844      	ldr	r0, [pc, #272]	; (401e50 <board_init+0x1d4>)
  401d40:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  401d44:	f041 0110 	orr.w	r1, r1, #16
  401d48:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  401d4c:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  401d50:	2110      	movs	r1, #16
  401d52:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d54:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d58:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d5a:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d5c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401d60:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401d62:	430c      	orrs	r4, r1
  401d64:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d66:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401d68:	430c      	orrs	r4, r1
  401d6a:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d6c:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  401d6e:	2008      	movs	r0, #8
  401d70:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d72:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d76:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d78:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d7a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d7e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  401d80:	f024 0408 	bic.w	r4, r4, #8
  401d84:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401d86:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  401d88:	f024 0408 	bic.w	r4, r4, #8
  401d8c:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d8e:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  401d90:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d92:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d96:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d98:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d9a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d9e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401da0:	f020 0010 	bic.w	r0, r0, #16
  401da4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401da6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401da8:	f020 0010 	bic.w	r0, r0, #16
  401dac:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401dae:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401db0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  401db4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401db8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401dba:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401dbe:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401dc0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401dc2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401dc6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401dc8:	4308      	orrs	r0, r1
  401dca:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401dcc:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401dce:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  401dd2:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401dd4:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401dd6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ddc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401dde:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401de4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401de6:	4311      	orrs	r1, r2
  401de8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401dea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401dec:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401df0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401df2:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401df4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401df8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401dfe:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e00:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401e06:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401e08:	4311      	orrs	r1, r2
  401e0a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e0c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401e0e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  401e12:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e14:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401e1a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e20:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e22:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401e28:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401e2a:	4311      	orrs	r1, r2
  401e2c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e2e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401e30:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  401e34:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e36:	605a      	str	r2, [r3, #4]
  401e38:	bd10      	pop	{r4, pc}
  401e3a:	bf00      	nop
  401e3c:	400e1850 	.word	0x400e1850
  401e40:	5a00080c 	.word	0x5a00080c
  401e44:	e000ed00 	.word	0xe000ed00
  401e48:	00402121 	.word	0x00402121
  401e4c:	400e1200 	.word	0x400e1200
  401e50:	40088000 	.word	0x40088000

00401e54 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401e54:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401e56:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401e5a:	d03a      	beq.n	401ed2 <pio_set_peripheral+0x7e>
  401e5c:	d813      	bhi.n	401e86 <pio_set_peripheral+0x32>
  401e5e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401e62:	d025      	beq.n	401eb0 <pio_set_peripheral+0x5c>
  401e64:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401e68:	d10a      	bne.n	401e80 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e6c:	4313      	orrs	r3, r2
  401e6e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e70:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e72:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401e74:	400b      	ands	r3, r1
  401e76:	ea23 0302 	bic.w	r3, r3, r2
  401e7a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401e7c:	6042      	str	r2, [r0, #4]
  401e7e:	4770      	bx	lr
	switch (ul_type) {
  401e80:	2900      	cmp	r1, #0
  401e82:	d1fb      	bne.n	401e7c <pio_set_peripheral+0x28>
  401e84:	4770      	bx	lr
  401e86:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401e8a:	d021      	beq.n	401ed0 <pio_set_peripheral+0x7c>
  401e8c:	d809      	bhi.n	401ea2 <pio_set_peripheral+0x4e>
  401e8e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401e92:	d1f3      	bne.n	401e7c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e94:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e96:	4313      	orrs	r3, r2
  401e98:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401e9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e9c:	4313      	orrs	r3, r2
  401e9e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401ea0:	e7ec      	b.n	401e7c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401ea2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401ea6:	d013      	beq.n	401ed0 <pio_set_peripheral+0x7c>
  401ea8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401eac:	d010      	beq.n	401ed0 <pio_set_peripheral+0x7c>
  401eae:	e7e5      	b.n	401e7c <pio_set_peripheral+0x28>
{
  401eb0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401eb2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401eb4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401eb6:	43d3      	mvns	r3, r2
  401eb8:	4021      	ands	r1, r4
  401eba:	461c      	mov	r4, r3
  401ebc:	4019      	ands	r1, r3
  401ebe:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401ec0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401ec2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401ec4:	400b      	ands	r3, r1
  401ec6:	4023      	ands	r3, r4
  401ec8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401eca:	6042      	str	r2, [r0, #4]
}
  401ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ed0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ed2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401ed4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401ed6:	400b      	ands	r3, r1
  401ed8:	ea23 0302 	bic.w	r3, r3, r2
  401edc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401ede:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ee0:	4313      	orrs	r3, r2
  401ee2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401ee4:	e7ca      	b.n	401e7c <pio_set_peripheral+0x28>

00401ee6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401ee6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401ee8:	f012 0f01 	tst.w	r2, #1
  401eec:	d10d      	bne.n	401f0a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401eee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ef0:	f012 0f0a 	tst.w	r2, #10
  401ef4:	d00b      	beq.n	401f0e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401ef6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401ef8:	f012 0f02 	tst.w	r2, #2
  401efc:	d109      	bne.n	401f12 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401efe:	f012 0f08 	tst.w	r2, #8
  401f02:	d008      	beq.n	401f16 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401f04:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401f08:	e005      	b.n	401f16 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401f0a:	6641      	str	r1, [r0, #100]	; 0x64
  401f0c:	e7f0      	b.n	401ef0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401f0e:	6241      	str	r1, [r0, #36]	; 0x24
  401f10:	e7f2      	b.n	401ef8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401f12:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401f16:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401f18:	6001      	str	r1, [r0, #0]
  401f1a:	4770      	bx	lr

00401f1c <pio_set_output>:
{
  401f1c:	b410      	push	{r4}
  401f1e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401f20:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401f22:	b94c      	cbnz	r4, 401f38 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401f24:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401f26:	b14b      	cbz	r3, 401f3c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401f28:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401f2a:	b94a      	cbnz	r2, 401f40 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401f2c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401f2e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401f30:	6001      	str	r1, [r0, #0]
}
  401f32:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f36:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401f38:	6641      	str	r1, [r0, #100]	; 0x64
  401f3a:	e7f4      	b.n	401f26 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401f3c:	6541      	str	r1, [r0, #84]	; 0x54
  401f3e:	e7f4      	b.n	401f2a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401f40:	6301      	str	r1, [r0, #48]	; 0x30
  401f42:	e7f4      	b.n	401f2e <pio_set_output+0x12>

00401f44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401f44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401f46:	4770      	bx	lr

00401f48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401f48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401f4a:	4770      	bx	lr

00401f4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f50:	4604      	mov	r4, r0
  401f52:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f54:	4b0e      	ldr	r3, [pc, #56]	; (401f90 <pio_handler_process+0x44>)
  401f56:	4798      	blx	r3
  401f58:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f5a:	4620      	mov	r0, r4
  401f5c:	4b0d      	ldr	r3, [pc, #52]	; (401f94 <pio_handler_process+0x48>)
  401f5e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401f60:	4005      	ands	r5, r0
  401f62:	d013      	beq.n	401f8c <pio_handler_process+0x40>
  401f64:	4c0c      	ldr	r4, [pc, #48]	; (401f98 <pio_handler_process+0x4c>)
  401f66:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401f6a:	e003      	b.n	401f74 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f6c:	42b4      	cmp	r4, r6
  401f6e:	d00d      	beq.n	401f8c <pio_handler_process+0x40>
  401f70:	3410      	adds	r4, #16
		while (status != 0) {
  401f72:	b15d      	cbz	r5, 401f8c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401f74:	6820      	ldr	r0, [r4, #0]
  401f76:	4540      	cmp	r0, r8
  401f78:	d1f8      	bne.n	401f6c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f7a:	6861      	ldr	r1, [r4, #4]
  401f7c:	4229      	tst	r1, r5
  401f7e:	d0f5      	beq.n	401f6c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f80:	68e3      	ldr	r3, [r4, #12]
  401f82:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f84:	6863      	ldr	r3, [r4, #4]
  401f86:	ea25 0503 	bic.w	r5, r5, r3
  401f8a:	e7ef      	b.n	401f6c <pio_handler_process+0x20>
  401f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f90:	00401f45 	.word	0x00401f45
  401f94:	00401f49 	.word	0x00401f49
  401f98:	20407240 	.word	0x20407240

00401f9c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401f9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401f9e:	210a      	movs	r1, #10
  401fa0:	4801      	ldr	r0, [pc, #4]	; (401fa8 <PIOA_Handler+0xc>)
  401fa2:	4b02      	ldr	r3, [pc, #8]	; (401fac <PIOA_Handler+0x10>)
  401fa4:	4798      	blx	r3
  401fa6:	bd08      	pop	{r3, pc}
  401fa8:	400e0e00 	.word	0x400e0e00
  401fac:	00401f4d 	.word	0x00401f4d

00401fb0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401fb0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401fb2:	210b      	movs	r1, #11
  401fb4:	4801      	ldr	r0, [pc, #4]	; (401fbc <PIOB_Handler+0xc>)
  401fb6:	4b02      	ldr	r3, [pc, #8]	; (401fc0 <PIOB_Handler+0x10>)
  401fb8:	4798      	blx	r3
  401fba:	bd08      	pop	{r3, pc}
  401fbc:	400e1000 	.word	0x400e1000
  401fc0:	00401f4d 	.word	0x00401f4d

00401fc4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401fc4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401fc6:	210c      	movs	r1, #12
  401fc8:	4801      	ldr	r0, [pc, #4]	; (401fd0 <PIOC_Handler+0xc>)
  401fca:	4b02      	ldr	r3, [pc, #8]	; (401fd4 <PIOC_Handler+0x10>)
  401fcc:	4798      	blx	r3
  401fce:	bd08      	pop	{r3, pc}
  401fd0:	400e1200 	.word	0x400e1200
  401fd4:	00401f4d 	.word	0x00401f4d

00401fd8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401fd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401fda:	2110      	movs	r1, #16
  401fdc:	4801      	ldr	r0, [pc, #4]	; (401fe4 <PIOD_Handler+0xc>)
  401fde:	4b02      	ldr	r3, [pc, #8]	; (401fe8 <PIOD_Handler+0x10>)
  401fe0:	4798      	blx	r3
  401fe2:	bd08      	pop	{r3, pc}
  401fe4:	400e1400 	.word	0x400e1400
  401fe8:	00401f4d 	.word	0x00401f4d

00401fec <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401fec:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401fee:	2111      	movs	r1, #17
  401ff0:	4801      	ldr	r0, [pc, #4]	; (401ff8 <PIOE_Handler+0xc>)
  401ff2:	4b02      	ldr	r3, [pc, #8]	; (401ffc <PIOE_Handler+0x10>)
  401ff4:	4798      	blx	r3
  401ff6:	bd08      	pop	{r3, pc}
  401ff8:	400e1600 	.word	0x400e1600
  401ffc:	00401f4d 	.word	0x00401f4d

00402000 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402000:	2803      	cmp	r0, #3
  402002:	d011      	beq.n	402028 <pmc_mck_set_division+0x28>
  402004:	2804      	cmp	r0, #4
  402006:	d012      	beq.n	40202e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402008:	2802      	cmp	r0, #2
  40200a:	bf0c      	ite	eq
  40200c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402010:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402012:	4a08      	ldr	r2, [pc, #32]	; (402034 <pmc_mck_set_division+0x34>)
  402014:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40201a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40201c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40201e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402020:	f013 0f08 	tst.w	r3, #8
  402024:	d0fb      	beq.n	40201e <pmc_mck_set_division+0x1e>
}
  402026:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402028:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40202c:	e7f1      	b.n	402012 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40202e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  402032:	e7ee      	b.n	402012 <pmc_mck_set_division+0x12>
  402034:	400e0600 	.word	0x400e0600

00402038 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402038:	4a17      	ldr	r2, [pc, #92]	; (402098 <pmc_switch_mck_to_pllack+0x60>)
  40203a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40203c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402040:	4318      	orrs	r0, r3
  402042:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402044:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402046:	f013 0f08 	tst.w	r3, #8
  40204a:	d10a      	bne.n	402062 <pmc_switch_mck_to_pllack+0x2a>
  40204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402050:	4911      	ldr	r1, [pc, #68]	; (402098 <pmc_switch_mck_to_pllack+0x60>)
  402052:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402054:	f012 0f08 	tst.w	r2, #8
  402058:	d103      	bne.n	402062 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40205a:	3b01      	subs	r3, #1
  40205c:	d1f9      	bne.n	402052 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40205e:	2001      	movs	r0, #1
  402060:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402062:	4a0d      	ldr	r2, [pc, #52]	; (402098 <pmc_switch_mck_to_pllack+0x60>)
  402064:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402066:	f023 0303 	bic.w	r3, r3, #3
  40206a:	f043 0302 	orr.w	r3, r3, #2
  40206e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402070:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402072:	f013 0f08 	tst.w	r3, #8
  402076:	d10a      	bne.n	40208e <pmc_switch_mck_to_pllack+0x56>
  402078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40207c:	4906      	ldr	r1, [pc, #24]	; (402098 <pmc_switch_mck_to_pllack+0x60>)
  40207e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402080:	f012 0f08 	tst.w	r2, #8
  402084:	d105      	bne.n	402092 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402086:	3b01      	subs	r3, #1
  402088:	d1f9      	bne.n	40207e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40208a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40208c:	4770      	bx	lr
	return 0;
  40208e:	2000      	movs	r0, #0
  402090:	4770      	bx	lr
  402092:	2000      	movs	r0, #0
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	400e0600 	.word	0x400e0600

0040209c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40209c:	b9a0      	cbnz	r0, 4020c8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40209e:	480e      	ldr	r0, [pc, #56]	; (4020d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4020a0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4020a2:	0209      	lsls	r1, r1, #8
  4020a4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4020a6:	4a0d      	ldr	r2, [pc, #52]	; (4020dc <pmc_switch_mainck_to_xtal+0x40>)
  4020a8:	401a      	ands	r2, r3
  4020aa:	4b0d      	ldr	r3, [pc, #52]	; (4020e0 <pmc_switch_mainck_to_xtal+0x44>)
  4020ac:	4313      	orrs	r3, r2
  4020ae:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020b0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020b2:	4602      	mov	r2, r0
  4020b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020b6:	f013 0f01 	tst.w	r3, #1
  4020ba:	d0fb      	beq.n	4020b4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020bc:	4a06      	ldr	r2, [pc, #24]	; (4020d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4020be:	6a11      	ldr	r1, [r2, #32]
  4020c0:	4b08      	ldr	r3, [pc, #32]	; (4020e4 <pmc_switch_mainck_to_xtal+0x48>)
  4020c2:	430b      	orrs	r3, r1
  4020c4:	6213      	str	r3, [r2, #32]
  4020c6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4020c8:	4903      	ldr	r1, [pc, #12]	; (4020d8 <pmc_switch_mainck_to_xtal+0x3c>)
  4020ca:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4020cc:	4a06      	ldr	r2, [pc, #24]	; (4020e8 <pmc_switch_mainck_to_xtal+0x4c>)
  4020ce:	401a      	ands	r2, r3
  4020d0:	4b06      	ldr	r3, [pc, #24]	; (4020ec <pmc_switch_mainck_to_xtal+0x50>)
  4020d2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4020d4:	620b      	str	r3, [r1, #32]
  4020d6:	4770      	bx	lr
  4020d8:	400e0600 	.word	0x400e0600
  4020dc:	ffc8fffc 	.word	0xffc8fffc
  4020e0:	00370001 	.word	0x00370001
  4020e4:	01370000 	.word	0x01370000
  4020e8:	fec8fffc 	.word	0xfec8fffc
  4020ec:	01370002 	.word	0x01370002

004020f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4020f0:	4b02      	ldr	r3, [pc, #8]	; (4020fc <pmc_osc_is_ready_mainck+0xc>)
  4020f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4020f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4020f8:	4770      	bx	lr
  4020fa:	bf00      	nop
  4020fc:	400e0600 	.word	0x400e0600

00402100 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402100:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402104:	4b01      	ldr	r3, [pc, #4]	; (40210c <pmc_disable_pllack+0xc>)
  402106:	629a      	str	r2, [r3, #40]	; 0x28
  402108:	4770      	bx	lr
  40210a:	bf00      	nop
  40210c:	400e0600 	.word	0x400e0600

00402110 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402110:	4b02      	ldr	r3, [pc, #8]	; (40211c <pmc_is_locked_pllack+0xc>)
  402112:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402114:	f000 0002 	and.w	r0, r0, #2
  402118:	4770      	bx	lr
  40211a:	bf00      	nop
  40211c:	400e0600 	.word	0x400e0600

00402120 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  402120:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402124:	4b05      	ldr	r3, [pc, #20]	; (40213c <pmc_enable_periph_clk+0x1c>)
  402126:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40212a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40212e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  402132:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402136:	2000      	movs	r0, #0
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	400e0600 	.word	0x400e0600

00402140 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402140:	e7fe      	b.n	402140 <Dummy_Handler>
	...

00402144 <Reset_Handler>:
{
  402144:	b500      	push	{lr}
  402146:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402148:	4b25      	ldr	r3, [pc, #148]	; (4021e0 <Reset_Handler+0x9c>)
  40214a:	4a26      	ldr	r2, [pc, #152]	; (4021e4 <Reset_Handler+0xa0>)
  40214c:	429a      	cmp	r2, r3
  40214e:	d010      	beq.n	402172 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402150:	4b25      	ldr	r3, [pc, #148]	; (4021e8 <Reset_Handler+0xa4>)
  402152:	4a23      	ldr	r2, [pc, #140]	; (4021e0 <Reset_Handler+0x9c>)
  402154:	429a      	cmp	r2, r3
  402156:	d20c      	bcs.n	402172 <Reset_Handler+0x2e>
  402158:	3b01      	subs	r3, #1
  40215a:	1a9b      	subs	r3, r3, r2
  40215c:	f023 0303 	bic.w	r3, r3, #3
  402160:	3304      	adds	r3, #4
  402162:	4413      	add	r3, r2
  402164:	491f      	ldr	r1, [pc, #124]	; (4021e4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402166:	f851 0b04 	ldr.w	r0, [r1], #4
  40216a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40216e:	429a      	cmp	r2, r3
  402170:	d1f9      	bne.n	402166 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  402172:	4b1e      	ldr	r3, [pc, #120]	; (4021ec <Reset_Handler+0xa8>)
  402174:	4a1e      	ldr	r2, [pc, #120]	; (4021f0 <Reset_Handler+0xac>)
  402176:	429a      	cmp	r2, r3
  402178:	d20a      	bcs.n	402190 <Reset_Handler+0x4c>
  40217a:	3b01      	subs	r3, #1
  40217c:	1a9b      	subs	r3, r3, r2
  40217e:	f023 0303 	bic.w	r3, r3, #3
  402182:	3304      	adds	r3, #4
  402184:	4413      	add	r3, r2
                *pDest++ = 0;
  402186:	2100      	movs	r1, #0
  402188:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40218c:	4293      	cmp	r3, r2
  40218e:	d1fb      	bne.n	402188 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402190:	4a18      	ldr	r2, [pc, #96]	; (4021f4 <Reset_Handler+0xb0>)
  402192:	4b19      	ldr	r3, [pc, #100]	; (4021f8 <Reset_Handler+0xb4>)
  402194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402198:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40219a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40219e:	fab3 f383 	clz	r3, r3
  4021a2:	095b      	lsrs	r3, r3, #5
  4021a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4021a6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4021a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4021ac:	2200      	movs	r2, #0
  4021ae:	4b13      	ldr	r3, [pc, #76]	; (4021fc <Reset_Handler+0xb8>)
  4021b0:	701a      	strb	r2, [r3, #0]
	return flags;
  4021b2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4021b4:	4a12      	ldr	r2, [pc, #72]	; (402200 <Reset_Handler+0xbc>)
  4021b6:	6813      	ldr	r3, [r2, #0]
  4021b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4021bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4021be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4021c2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4021c6:	b129      	cbz	r1, 4021d4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4021c8:	2201      	movs	r2, #1
  4021ca:	4b0c      	ldr	r3, [pc, #48]	; (4021fc <Reset_Handler+0xb8>)
  4021cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4021ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4021d2:	b662      	cpsie	i
        __libc_init_array();
  4021d4:	4b0b      	ldr	r3, [pc, #44]	; (402204 <Reset_Handler+0xc0>)
  4021d6:	4798      	blx	r3
        main();
  4021d8:	4b0b      	ldr	r3, [pc, #44]	; (402208 <Reset_Handler+0xc4>)
  4021da:	4798      	blx	r3
  4021dc:	e7fe      	b.n	4021dc <Reset_Handler+0x98>
  4021de:	bf00      	nop
  4021e0:	20400000 	.word	0x20400000
  4021e4:	004098d4 	.word	0x004098d4
  4021e8:	204009e8 	.word	0x204009e8
  4021ec:	20408514 	.word	0x20408514
  4021f0:	204009e8 	.word	0x204009e8
  4021f4:	e000ed00 	.word	0xe000ed00
  4021f8:	00400000 	.word	0x00400000
  4021fc:	2040001c 	.word	0x2040001c
  402200:	e000ed88 	.word	0xe000ed88
  402204:	00402f59 	.word	0x00402f59
  402208:	00402a21 	.word	0x00402a21

0040220c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40220c:	4b3b      	ldr	r3, [pc, #236]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  40220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402210:	f003 0303 	and.w	r3, r3, #3
  402214:	2b01      	cmp	r3, #1
  402216:	d01d      	beq.n	402254 <SystemCoreClockUpdate+0x48>
  402218:	b183      	cbz	r3, 40223c <SystemCoreClockUpdate+0x30>
  40221a:	2b02      	cmp	r3, #2
  40221c:	d036      	beq.n	40228c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40221e:	4b37      	ldr	r3, [pc, #220]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  402220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402222:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402226:	2b70      	cmp	r3, #112	; 0x70
  402228:	d05f      	beq.n	4022ea <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40222a:	4b34      	ldr	r3, [pc, #208]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  40222c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40222e:	4934      	ldr	r1, [pc, #208]	; (402300 <SystemCoreClockUpdate+0xf4>)
  402230:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402234:	680b      	ldr	r3, [r1, #0]
  402236:	40d3      	lsrs	r3, r2
  402238:	600b      	str	r3, [r1, #0]
  40223a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40223c:	4b31      	ldr	r3, [pc, #196]	; (402304 <SystemCoreClockUpdate+0xf8>)
  40223e:	695b      	ldr	r3, [r3, #20]
  402240:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402244:	bf14      	ite	ne
  402246:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40224a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40224e:	4b2c      	ldr	r3, [pc, #176]	; (402300 <SystemCoreClockUpdate+0xf4>)
  402250:	601a      	str	r2, [r3, #0]
  402252:	e7e4      	b.n	40221e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402254:	4b29      	ldr	r3, [pc, #164]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  402256:	6a1b      	ldr	r3, [r3, #32]
  402258:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40225c:	d003      	beq.n	402266 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40225e:	4a2a      	ldr	r2, [pc, #168]	; (402308 <SystemCoreClockUpdate+0xfc>)
  402260:	4b27      	ldr	r3, [pc, #156]	; (402300 <SystemCoreClockUpdate+0xf4>)
  402262:	601a      	str	r2, [r3, #0]
  402264:	e7db      	b.n	40221e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402266:	4a29      	ldr	r2, [pc, #164]	; (40230c <SystemCoreClockUpdate+0x100>)
  402268:	4b25      	ldr	r3, [pc, #148]	; (402300 <SystemCoreClockUpdate+0xf4>)
  40226a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40226c:	4b23      	ldr	r3, [pc, #140]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  40226e:	6a1b      	ldr	r3, [r3, #32]
  402270:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402274:	2b10      	cmp	r3, #16
  402276:	d005      	beq.n	402284 <SystemCoreClockUpdate+0x78>
  402278:	2b20      	cmp	r3, #32
  40227a:	d1d0      	bne.n	40221e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40227c:	4a22      	ldr	r2, [pc, #136]	; (402308 <SystemCoreClockUpdate+0xfc>)
  40227e:	4b20      	ldr	r3, [pc, #128]	; (402300 <SystemCoreClockUpdate+0xf4>)
  402280:	601a      	str	r2, [r3, #0]
          break;
  402282:	e7cc      	b.n	40221e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402284:	4a22      	ldr	r2, [pc, #136]	; (402310 <SystemCoreClockUpdate+0x104>)
  402286:	4b1e      	ldr	r3, [pc, #120]	; (402300 <SystemCoreClockUpdate+0xf4>)
  402288:	601a      	str	r2, [r3, #0]
          break;
  40228a:	e7c8      	b.n	40221e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40228c:	4b1b      	ldr	r3, [pc, #108]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  40228e:	6a1b      	ldr	r3, [r3, #32]
  402290:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402294:	d016      	beq.n	4022c4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402296:	4a1c      	ldr	r2, [pc, #112]	; (402308 <SystemCoreClockUpdate+0xfc>)
  402298:	4b19      	ldr	r3, [pc, #100]	; (402300 <SystemCoreClockUpdate+0xf4>)
  40229a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40229c:	4b17      	ldr	r3, [pc, #92]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  40229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022a0:	f003 0303 	and.w	r3, r3, #3
  4022a4:	2b02      	cmp	r3, #2
  4022a6:	d1ba      	bne.n	40221e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4022a8:	4a14      	ldr	r2, [pc, #80]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  4022aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4022ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4022ae:	4814      	ldr	r0, [pc, #80]	; (402300 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4022b0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4022b4:	6803      	ldr	r3, [r0, #0]
  4022b6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4022ba:	b2d2      	uxtb	r2, r2
  4022bc:	fbb3 f3f2 	udiv	r3, r3, r2
  4022c0:	6003      	str	r3, [r0, #0]
  4022c2:	e7ac      	b.n	40221e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4022c4:	4a11      	ldr	r2, [pc, #68]	; (40230c <SystemCoreClockUpdate+0x100>)
  4022c6:	4b0e      	ldr	r3, [pc, #56]	; (402300 <SystemCoreClockUpdate+0xf4>)
  4022c8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4022ca:	4b0c      	ldr	r3, [pc, #48]	; (4022fc <SystemCoreClockUpdate+0xf0>)
  4022cc:	6a1b      	ldr	r3, [r3, #32]
  4022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4022d2:	2b10      	cmp	r3, #16
  4022d4:	d005      	beq.n	4022e2 <SystemCoreClockUpdate+0xd6>
  4022d6:	2b20      	cmp	r3, #32
  4022d8:	d1e0      	bne.n	40229c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4022da:	4a0b      	ldr	r2, [pc, #44]	; (402308 <SystemCoreClockUpdate+0xfc>)
  4022dc:	4b08      	ldr	r3, [pc, #32]	; (402300 <SystemCoreClockUpdate+0xf4>)
  4022de:	601a      	str	r2, [r3, #0]
          break;
  4022e0:	e7dc      	b.n	40229c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4022e2:	4a0b      	ldr	r2, [pc, #44]	; (402310 <SystemCoreClockUpdate+0x104>)
  4022e4:	4b06      	ldr	r3, [pc, #24]	; (402300 <SystemCoreClockUpdate+0xf4>)
  4022e6:	601a      	str	r2, [r3, #0]
          break;
  4022e8:	e7d8      	b.n	40229c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4022ea:	4a05      	ldr	r2, [pc, #20]	; (402300 <SystemCoreClockUpdate+0xf4>)
  4022ec:	6813      	ldr	r3, [r2, #0]
  4022ee:	4909      	ldr	r1, [pc, #36]	; (402314 <SystemCoreClockUpdate+0x108>)
  4022f0:	fba1 1303 	umull	r1, r3, r1, r3
  4022f4:	085b      	lsrs	r3, r3, #1
  4022f6:	6013      	str	r3, [r2, #0]
  4022f8:	4770      	bx	lr
  4022fa:	bf00      	nop
  4022fc:	400e0600 	.word	0x400e0600
  402300:	20400020 	.word	0x20400020
  402304:	400e1810 	.word	0x400e1810
  402308:	00b71b00 	.word	0x00b71b00
  40230c:	003d0900 	.word	0x003d0900
  402310:	007a1200 	.word	0x007a1200
  402314:	aaaaaaab 	.word	0xaaaaaaab

00402318 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402318:	4b16      	ldr	r3, [pc, #88]	; (402374 <system_init_flash+0x5c>)
  40231a:	4298      	cmp	r0, r3
  40231c:	d913      	bls.n	402346 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40231e:	4b16      	ldr	r3, [pc, #88]	; (402378 <system_init_flash+0x60>)
  402320:	4298      	cmp	r0, r3
  402322:	d915      	bls.n	402350 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402324:	4b15      	ldr	r3, [pc, #84]	; (40237c <system_init_flash+0x64>)
  402326:	4298      	cmp	r0, r3
  402328:	d916      	bls.n	402358 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40232a:	4b15      	ldr	r3, [pc, #84]	; (402380 <system_init_flash+0x68>)
  40232c:	4298      	cmp	r0, r3
  40232e:	d917      	bls.n	402360 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402330:	4b14      	ldr	r3, [pc, #80]	; (402384 <system_init_flash+0x6c>)
  402332:	4298      	cmp	r0, r3
  402334:	d918      	bls.n	402368 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402336:	4b14      	ldr	r3, [pc, #80]	; (402388 <system_init_flash+0x70>)
  402338:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40233a:	bf94      	ite	ls
  40233c:	4a13      	ldrls	r2, [pc, #76]	; (40238c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40233e:	4a14      	ldrhi	r2, [pc, #80]	; (402390 <system_init_flash+0x78>)
  402340:	4b14      	ldr	r3, [pc, #80]	; (402394 <system_init_flash+0x7c>)
  402342:	601a      	str	r2, [r3, #0]
  402344:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402346:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40234a:	4b12      	ldr	r3, [pc, #72]	; (402394 <system_init_flash+0x7c>)
  40234c:	601a      	str	r2, [r3, #0]
  40234e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402350:	4a11      	ldr	r2, [pc, #68]	; (402398 <system_init_flash+0x80>)
  402352:	4b10      	ldr	r3, [pc, #64]	; (402394 <system_init_flash+0x7c>)
  402354:	601a      	str	r2, [r3, #0]
  402356:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402358:	4a10      	ldr	r2, [pc, #64]	; (40239c <system_init_flash+0x84>)
  40235a:	4b0e      	ldr	r3, [pc, #56]	; (402394 <system_init_flash+0x7c>)
  40235c:	601a      	str	r2, [r3, #0]
  40235e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402360:	4a0f      	ldr	r2, [pc, #60]	; (4023a0 <system_init_flash+0x88>)
  402362:	4b0c      	ldr	r3, [pc, #48]	; (402394 <system_init_flash+0x7c>)
  402364:	601a      	str	r2, [r3, #0]
  402366:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402368:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40236c:	4b09      	ldr	r3, [pc, #36]	; (402394 <system_init_flash+0x7c>)
  40236e:	601a      	str	r2, [r3, #0]
  402370:	4770      	bx	lr
  402372:	bf00      	nop
  402374:	015ef3bf 	.word	0x015ef3bf
  402378:	02bde77f 	.word	0x02bde77f
  40237c:	041cdb3f 	.word	0x041cdb3f
  402380:	057bceff 	.word	0x057bceff
  402384:	06dac2bf 	.word	0x06dac2bf
  402388:	0839b67f 	.word	0x0839b67f
  40238c:	04000500 	.word	0x04000500
  402390:	04000600 	.word	0x04000600
  402394:	400e0c00 	.word	0x400e0c00
  402398:	04000100 	.word	0x04000100
  40239c:	04000200 	.word	0x04000200
  4023a0:	04000300 	.word	0x04000300

004023a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4023a4:	4b0a      	ldr	r3, [pc, #40]	; (4023d0 <_sbrk+0x2c>)
  4023a6:	681b      	ldr	r3, [r3, #0]
  4023a8:	b153      	cbz	r3, 4023c0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4023aa:	4b09      	ldr	r3, [pc, #36]	; (4023d0 <_sbrk+0x2c>)
  4023ac:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4023ae:	181a      	adds	r2, r3, r0
  4023b0:	4908      	ldr	r1, [pc, #32]	; (4023d4 <_sbrk+0x30>)
  4023b2:	4291      	cmp	r1, r2
  4023b4:	db08      	blt.n	4023c8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4023b6:	4610      	mov	r0, r2
  4023b8:	4a05      	ldr	r2, [pc, #20]	; (4023d0 <_sbrk+0x2c>)
  4023ba:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4023bc:	4618      	mov	r0, r3
  4023be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4023c0:	4a05      	ldr	r2, [pc, #20]	; (4023d8 <_sbrk+0x34>)
  4023c2:	4b03      	ldr	r3, [pc, #12]	; (4023d0 <_sbrk+0x2c>)
  4023c4:	601a      	str	r2, [r3, #0]
  4023c6:	e7f0      	b.n	4023aa <_sbrk+0x6>
		return (caddr_t) -1;	
  4023c8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop
  4023d0:	204072b0 	.word	0x204072b0
  4023d4:	2045fffc 	.word	0x2045fffc
  4023d8:	2040a718 	.word	0x2040a718

004023dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4023dc:	f04f 30ff 	mov.w	r0, #4294967295
  4023e0:	4770      	bx	lr

004023e2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4023e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4023e6:	604b      	str	r3, [r1, #4]

	return 0;
}
  4023e8:	2000      	movs	r0, #0
  4023ea:	4770      	bx	lr

004023ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4023ec:	2001      	movs	r0, #1
  4023ee:	4770      	bx	lr

004023f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4023f0:	2000      	movs	r0, #0
  4023f2:	4770      	bx	lr

004023f4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4023f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023f6:	b083      	sub	sp, #12
  4023f8:	4605      	mov	r5, r0
  4023fa:	460c      	mov	r4, r1
	uint32_t val = 0;
  4023fc:	2300      	movs	r3, #0
  4023fe:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402400:	4b2a      	ldr	r3, [pc, #168]	; (4024ac <usart_serial_getchar+0xb8>)
  402402:	4298      	cmp	r0, r3
  402404:	d013      	beq.n	40242e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402406:	4b2a      	ldr	r3, [pc, #168]	; (4024b0 <usart_serial_getchar+0xbc>)
  402408:	4298      	cmp	r0, r3
  40240a:	d018      	beq.n	40243e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40240c:	4b29      	ldr	r3, [pc, #164]	; (4024b4 <usart_serial_getchar+0xc0>)
  40240e:	4298      	cmp	r0, r3
  402410:	d01d      	beq.n	40244e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402412:	4b29      	ldr	r3, [pc, #164]	; (4024b8 <usart_serial_getchar+0xc4>)
  402414:	429d      	cmp	r5, r3
  402416:	d022      	beq.n	40245e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402418:	4b28      	ldr	r3, [pc, #160]	; (4024bc <usart_serial_getchar+0xc8>)
  40241a:	429d      	cmp	r5, r3
  40241c:	d027      	beq.n	40246e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40241e:	4b28      	ldr	r3, [pc, #160]	; (4024c0 <usart_serial_getchar+0xcc>)
  402420:	429d      	cmp	r5, r3
  402422:	d02e      	beq.n	402482 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402424:	4b27      	ldr	r3, [pc, #156]	; (4024c4 <usart_serial_getchar+0xd0>)
  402426:	429d      	cmp	r5, r3
  402428:	d035      	beq.n	402496 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40242a:	b003      	add	sp, #12
  40242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40242e:	461f      	mov	r7, r3
  402430:	4e25      	ldr	r6, [pc, #148]	; (4024c8 <usart_serial_getchar+0xd4>)
  402432:	4621      	mov	r1, r4
  402434:	4638      	mov	r0, r7
  402436:	47b0      	blx	r6
  402438:	2800      	cmp	r0, #0
  40243a:	d1fa      	bne.n	402432 <usart_serial_getchar+0x3e>
  40243c:	e7e9      	b.n	402412 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40243e:	461f      	mov	r7, r3
  402440:	4e21      	ldr	r6, [pc, #132]	; (4024c8 <usart_serial_getchar+0xd4>)
  402442:	4621      	mov	r1, r4
  402444:	4638      	mov	r0, r7
  402446:	47b0      	blx	r6
  402448:	2800      	cmp	r0, #0
  40244a:	d1fa      	bne.n	402442 <usart_serial_getchar+0x4e>
  40244c:	e7e4      	b.n	402418 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40244e:	461f      	mov	r7, r3
  402450:	4e1d      	ldr	r6, [pc, #116]	; (4024c8 <usart_serial_getchar+0xd4>)
  402452:	4621      	mov	r1, r4
  402454:	4638      	mov	r0, r7
  402456:	47b0      	blx	r6
  402458:	2800      	cmp	r0, #0
  40245a:	d1fa      	bne.n	402452 <usart_serial_getchar+0x5e>
  40245c:	e7df      	b.n	40241e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40245e:	461f      	mov	r7, r3
  402460:	4e19      	ldr	r6, [pc, #100]	; (4024c8 <usart_serial_getchar+0xd4>)
  402462:	4621      	mov	r1, r4
  402464:	4638      	mov	r0, r7
  402466:	47b0      	blx	r6
  402468:	2800      	cmp	r0, #0
  40246a:	d1fa      	bne.n	402462 <usart_serial_getchar+0x6e>
  40246c:	e7da      	b.n	402424 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40246e:	461e      	mov	r6, r3
  402470:	4d16      	ldr	r5, [pc, #88]	; (4024cc <usart_serial_getchar+0xd8>)
  402472:	a901      	add	r1, sp, #4
  402474:	4630      	mov	r0, r6
  402476:	47a8      	blx	r5
  402478:	2800      	cmp	r0, #0
  40247a:	d1fa      	bne.n	402472 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40247c:	9b01      	ldr	r3, [sp, #4]
  40247e:	7023      	strb	r3, [r4, #0]
  402480:	e7d3      	b.n	40242a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402482:	461e      	mov	r6, r3
  402484:	4d11      	ldr	r5, [pc, #68]	; (4024cc <usart_serial_getchar+0xd8>)
  402486:	a901      	add	r1, sp, #4
  402488:	4630      	mov	r0, r6
  40248a:	47a8      	blx	r5
  40248c:	2800      	cmp	r0, #0
  40248e:	d1fa      	bne.n	402486 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402490:	9b01      	ldr	r3, [sp, #4]
  402492:	7023      	strb	r3, [r4, #0]
  402494:	e7c9      	b.n	40242a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402496:	461e      	mov	r6, r3
  402498:	4d0c      	ldr	r5, [pc, #48]	; (4024cc <usart_serial_getchar+0xd8>)
  40249a:	a901      	add	r1, sp, #4
  40249c:	4630      	mov	r0, r6
  40249e:	47a8      	blx	r5
  4024a0:	2800      	cmp	r0, #0
  4024a2:	d1fa      	bne.n	40249a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4024a4:	9b01      	ldr	r3, [sp, #4]
  4024a6:	7023      	strb	r3, [r4, #0]
}
  4024a8:	e7bf      	b.n	40242a <usart_serial_getchar+0x36>
  4024aa:	bf00      	nop
  4024ac:	400e0800 	.word	0x400e0800
  4024b0:	400e0a00 	.word	0x400e0a00
  4024b4:	400e1a00 	.word	0x400e1a00
  4024b8:	400e1c00 	.word	0x400e1c00
  4024bc:	40024000 	.word	0x40024000
  4024c0:	40028000 	.word	0x40028000
  4024c4:	4002c000 	.word	0x4002c000
  4024c8:	00401b43 	.word	0x00401b43
  4024cc:	00400af7 	.word	0x00400af7

004024d0 <usart_serial_putchar>:
{
  4024d0:	b570      	push	{r4, r5, r6, lr}
  4024d2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4024d4:	4b2a      	ldr	r3, [pc, #168]	; (402580 <usart_serial_putchar+0xb0>)
  4024d6:	4298      	cmp	r0, r3
  4024d8:	d013      	beq.n	402502 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4024da:	4b2a      	ldr	r3, [pc, #168]	; (402584 <usart_serial_putchar+0xb4>)
  4024dc:	4298      	cmp	r0, r3
  4024de:	d019      	beq.n	402514 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4024e0:	4b29      	ldr	r3, [pc, #164]	; (402588 <usart_serial_putchar+0xb8>)
  4024e2:	4298      	cmp	r0, r3
  4024e4:	d01f      	beq.n	402526 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4024e6:	4b29      	ldr	r3, [pc, #164]	; (40258c <usart_serial_putchar+0xbc>)
  4024e8:	4298      	cmp	r0, r3
  4024ea:	d025      	beq.n	402538 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4024ec:	4b28      	ldr	r3, [pc, #160]	; (402590 <usart_serial_putchar+0xc0>)
  4024ee:	4298      	cmp	r0, r3
  4024f0:	d02b      	beq.n	40254a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4024f2:	4b28      	ldr	r3, [pc, #160]	; (402594 <usart_serial_putchar+0xc4>)
  4024f4:	4298      	cmp	r0, r3
  4024f6:	d031      	beq.n	40255c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4024f8:	4b27      	ldr	r3, [pc, #156]	; (402598 <usart_serial_putchar+0xc8>)
  4024fa:	4298      	cmp	r0, r3
  4024fc:	d037      	beq.n	40256e <usart_serial_putchar+0x9e>
	return 0;
  4024fe:	2000      	movs	r0, #0
}
  402500:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402502:	461e      	mov	r6, r3
  402504:	4d25      	ldr	r5, [pc, #148]	; (40259c <usart_serial_putchar+0xcc>)
  402506:	4621      	mov	r1, r4
  402508:	4630      	mov	r0, r6
  40250a:	47a8      	blx	r5
  40250c:	2800      	cmp	r0, #0
  40250e:	d1fa      	bne.n	402506 <usart_serial_putchar+0x36>
		return 1;
  402510:	2001      	movs	r0, #1
  402512:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402514:	461e      	mov	r6, r3
  402516:	4d21      	ldr	r5, [pc, #132]	; (40259c <usart_serial_putchar+0xcc>)
  402518:	4621      	mov	r1, r4
  40251a:	4630      	mov	r0, r6
  40251c:	47a8      	blx	r5
  40251e:	2800      	cmp	r0, #0
  402520:	d1fa      	bne.n	402518 <usart_serial_putchar+0x48>
		return 1;
  402522:	2001      	movs	r0, #1
  402524:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402526:	461e      	mov	r6, r3
  402528:	4d1c      	ldr	r5, [pc, #112]	; (40259c <usart_serial_putchar+0xcc>)
  40252a:	4621      	mov	r1, r4
  40252c:	4630      	mov	r0, r6
  40252e:	47a8      	blx	r5
  402530:	2800      	cmp	r0, #0
  402532:	d1fa      	bne.n	40252a <usart_serial_putchar+0x5a>
		return 1;
  402534:	2001      	movs	r0, #1
  402536:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402538:	461e      	mov	r6, r3
  40253a:	4d18      	ldr	r5, [pc, #96]	; (40259c <usart_serial_putchar+0xcc>)
  40253c:	4621      	mov	r1, r4
  40253e:	4630      	mov	r0, r6
  402540:	47a8      	blx	r5
  402542:	2800      	cmp	r0, #0
  402544:	d1fa      	bne.n	40253c <usart_serial_putchar+0x6c>
		return 1;
  402546:	2001      	movs	r0, #1
  402548:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40254a:	461e      	mov	r6, r3
  40254c:	4d14      	ldr	r5, [pc, #80]	; (4025a0 <usart_serial_putchar+0xd0>)
  40254e:	4621      	mov	r1, r4
  402550:	4630      	mov	r0, r6
  402552:	47a8      	blx	r5
  402554:	2800      	cmp	r0, #0
  402556:	d1fa      	bne.n	40254e <usart_serial_putchar+0x7e>
		return 1;
  402558:	2001      	movs	r0, #1
  40255a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40255c:	461e      	mov	r6, r3
  40255e:	4d10      	ldr	r5, [pc, #64]	; (4025a0 <usart_serial_putchar+0xd0>)
  402560:	4621      	mov	r1, r4
  402562:	4630      	mov	r0, r6
  402564:	47a8      	blx	r5
  402566:	2800      	cmp	r0, #0
  402568:	d1fa      	bne.n	402560 <usart_serial_putchar+0x90>
		return 1;
  40256a:	2001      	movs	r0, #1
  40256c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40256e:	461e      	mov	r6, r3
  402570:	4d0b      	ldr	r5, [pc, #44]	; (4025a0 <usart_serial_putchar+0xd0>)
  402572:	4621      	mov	r1, r4
  402574:	4630      	mov	r0, r6
  402576:	47a8      	blx	r5
  402578:	2800      	cmp	r0, #0
  40257a:	d1fa      	bne.n	402572 <usart_serial_putchar+0xa2>
		return 1;
  40257c:	2001      	movs	r0, #1
  40257e:	bd70      	pop	{r4, r5, r6, pc}
  402580:	400e0800 	.word	0x400e0800
  402584:	400e0a00 	.word	0x400e0a00
  402588:	400e1a00 	.word	0x400e1a00
  40258c:	400e1c00 	.word	0x400e1c00
  402590:	40024000 	.word	0x40024000
  402594:	40028000 	.word	0x40028000
  402598:	4002c000 	.word	0x4002c000
  40259c:	00401b31 	.word	0x00401b31
  4025a0:	00400ae1 	.word	0x00400ae1

004025a4 <fill_ArtNode>:
		return;	
	}
}

void fill_ArtNode(T_ArtNode *node)
{
  4025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4025a6:	4604      	mov	r4, r0
	
	//fill to 0's
	memset (node, 0, sizeof(node));
  4025a8:	4603      	mov	r3, r0
  4025aa:	2200      	movs	r2, #0
  4025ac:	f843 2bd8 	str.w	r2, [r3], #216
	
	//fill data
	memcpy (node->mac, factory_mac, 6);                   // the mac address of node
  4025b0:	4a3c      	ldr	r2, [pc, #240]	; (4026a4 <fill_ArtNode+0x100>)
  4025b2:	6810      	ldr	r0, [r2, #0]
  4025b4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  4025b8:	8892      	ldrh	r2, [r2, #4]
  4025ba:	809a      	strh	r2, [r3, #4]
	memcpy (node->localIp, factory_localIp, 4);           // the IP address of node
  4025bc:	4b3a      	ldr	r3, [pc, #232]	; (4026a8 <fill_ArtNode+0x104>)
  4025be:	681b      	ldr	r3, [r3, #0]
  4025c0:	f8c4 300a 	str.w	r3, [r4, #10]
	memcpy (node->broadcastIp, factory_broadcastIp, 4);   // broadcast IP address
  4025c4:	4b39      	ldr	r3, [pc, #228]	; (4026ac <fill_ArtNode+0x108>)
  4025c6:	681b      	ldr	r3, [r3, #0]
  4025c8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	memcpy (node->gateway, factory_gateway, 4);           // gateway IP address
  4025cc:	4b38      	ldr	r3, [pc, #224]	; (4026b0 <fill_ArtNode+0x10c>)
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	memcpy (node->subnetMask, factory_subnetMask, 4);     // network mask (art-net use 'A' network type)
  4025d4:	4b37      	ldr	r3, [pc, #220]	; (4026b4 <fill_ArtNode+0x110>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	
	sprintf((char *)node->id, "Art-Net\0"); // *** don't change never ***
  4025dc:	4f36      	ldr	r7, [pc, #216]	; (4026b8 <fill_ArtNode+0x114>)
  4025de:	463a      	mov	r2, r7
  4025e0:	ca03      	ldmia	r2!, {r0, r1}
  4025e2:	6020      	str	r0, [r4, #0]
  4025e4:	6061      	str	r1, [r4, #4]
	sprintf((char *)node->shortname, "Control node\0");
  4025e6:	f107 050c 	add.w	r5, r7, #12
  4025ea:	cd07      	ldmia	r5!, {r0, r1, r2}
  4025ec:	f8c4 001a 	str.w	r0, [r4, #26]
  4025f0:	f8c4 101e 	str.w	r1, [r4, #30]
  4025f4:	f8c4 2022 	str.w	r2, [r4, #34]	; 0x22
  4025f8:	782a      	ldrb	r2, [r5, #0]
  4025fa:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	sprintf((char *)node->longname, "Interactive System Master Control Node (c) Robbie Smedts\0");
  4025fe:	f107 061c 	add.w	r6, r7, #28
  402602:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  402606:	374c      	adds	r7, #76	; 0x4c
  402608:	46b6      	mov	lr, r6
  40260a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40260e:	6028      	str	r0, [r5, #0]
  402610:	6069      	str	r1, [r5, #4]
  402612:	60aa      	str	r2, [r5, #8]
  402614:	60eb      	str	r3, [r5, #12]
  402616:	4676      	mov	r6, lr
  402618:	3510      	adds	r5, #16
  40261a:	45be      	cmp	lr, r7
  40261c:	d1f4      	bne.n	402608 <fill_ArtNode+0x64>
  40261e:	ce03      	ldmia	r6!, {r0, r1}
  402620:	6028      	str	r0, [r5, #0]
  402622:	6069      	str	r1, [r5, #4]
  402624:	7833      	ldrb	r3, [r6, #0]
  402626:	722b      	strb	r3, [r5, #8]
	
	memset (node->porttypes,  0x80, 4);
  402628:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
  40262c:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
	memset (node->goodinput,  0x08, 4);
  402630:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
  402634:	f8c4 30b2 	str.w	r3, [r4, #178]	; 0xb2
	//memset (node->goodoutput, 0x00, 4);
	
	
	node->subH           = 0x00;        // high byte of the Node Subnet Address (This field is currently unused and set to zero. It is
  402638:	2300      	movs	r3, #0
  40263a:	74a3      	strb	r3, [r4, #18]
	// provided to allow future expansion.) (art-net III)
	node->sub            = 0x00;        // low byte of the Node Subnet Address
  40263c:	74e3      	strb	r3, [r4, #19]
	
	// **************************** art-net address of universes **********************************
	node->swout      [0] = 0x00;        // This array defines the 8 bit Universe address of the available output channels.
  40263e:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
	node->swout      [1] = 0x01;        // values from 0x00 to 0xFF
  402642:	2201      	movs	r2, #1
  402644:	f884 20bf 	strb.w	r2, [r4, #191]	; 0xbf
	node->swout      [2] = 0x02;
  402648:	2002      	movs	r0, #2
  40264a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	node->swout      [3] = 0x03;
  40264e:	2103      	movs	r1, #3
  402650:	f884 10c1 	strb.w	r1, [r4, #193]	; 0xc1
	
	// not implemented yet
	node->swin       [0] = 0x00;        // This array defines the 8 bit Universe address of the available input channels.
  402654:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	node->swin       [1] = 0x01;        // values from 0x00 to 0xFF
  402658:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
	node->swin       [2] = 0x02;
  40265c:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	node->swin       [3] = 0x03;
  402660:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
	

	node->goodoutput [0] = 0x80;
  402664:	2180      	movs	r1, #128	; 0x80
  402666:	f884 10b6 	strb.w	r1, [r4, #182]	; 0xb6

	node->etsamanH = "S";        // The ESTA manufacturer code.
  40266a:	4914      	ldr	r1, [pc, #80]	; (4026bc <fill_ArtNode+0x118>)
  40266c:	7621      	strb	r1, [r4, #24]
	node->etsamanL = "R";        // The ESTA manufacturer code.
  40266e:	4914      	ldr	r1, [pc, #80]	; (4026c0 <fill_ArtNode+0x11c>)
  402670:	7661      	strb	r1, [r4, #25]
	node->localPort  = 0x1936;   // artnet UDP port is by default 6454 (0x1936)
  402672:	f641 1136 	movw	r1, #6454	; 0x1936
  402676:	81e1      	strh	r1, [r4, #14]
	node->verH       = 0;        // high byte of Node firmware revision number.
  402678:	7423      	strb	r3, [r4, #16]
	node->ver        = 1;        // low byte of Node firmware revision number.
  40267a:	7462      	strb	r2, [r4, #17]
	node->ProVerH    = 0;        // high byte of the Art-Net protocol revision number.
  40267c:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
	node->ProVer     = 14;       // low byte of the Art-Net protocol revision number.
  402680:	220e      	movs	r2, #14
  402682:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	node->oemH       = 0;        // high byte of the oem value.
  402686:	7523      	strb	r3, [r4, #20]
	node->oem        = 0xFF;     // low byte of the oem value. (0x00FF = developer code)
  402688:	22ff      	movs	r2, #255	; 0xff
  40268a:	7562      	strb	r2, [r4, #21]
	node->ubea       = 0;        // This field contains the firmware version of the User Bios Extension Area (UBEA). 0 if not used
  40268c:	75a3      	strb	r3, [r4, #22]
	node->status     = 0x08;
  40268e:	2208      	movs	r2, #8
  402690:	75e2      	strb	r2, [r4, #23]
	node->swvideo    = 0;
  402692:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node->swmacro    = 0;
  402696:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	node->swremote   = 0;
  40269a:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	node->style      = 0;        // StNode style - A DMX to/from Art-Net device
  40269e:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
  4026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026a4:	20400030 	.word	0x20400030
  4026a8:	2040002c 	.word	0x2040002c
  4026ac:	20400024 	.word	0x20400024
  4026b0:	20400028 	.word	0x20400028
  4026b4:	20400038 	.word	0x20400038
  4026b8:	00409444 	.word	0x00409444
  4026bc:	004094bc 	.word	0x004094bc
  4026c0:	004092ec 	.word	0x004092ec

004026c4 <fill_ArtPollReply>:
}

void fill_ArtPollReply(T_ArtPollReply *poll_reply, T_ArtNode *node)
{
  4026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026c6:	4604      	mov	r4, r0
  4026c8:	460d      	mov	r5, r1
	//fill to 0's
	memset (poll_reply, 0, sizeof(poll_reply));
  4026ca:	2300      	movs	r3, #0
  4026cc:	6003      	str	r3, [r0, #0]
	
	//copy data from node
	memcpy (poll_reply->ID, node->id, sizeof(poll_reply->ID));
  4026ce:	680a      	ldr	r2, [r1, #0]
  4026d0:	684b      	ldr	r3, [r1, #4]
  4026d2:	6002      	str	r2, [r0, #0]
  4026d4:	6043      	str	r3, [r0, #4]
	memcpy (poll_reply->BoxAddr.IP, node->localIp, sizeof(poll_reply->BoxAddr.IP));
  4026d6:	f8d1 300a 	ldr.w	r3, [r1, #10]
  4026da:	f8c0 300a 	str.w	r3, [r0, #10]
	memcpy (poll_reply->Mac, node->mac, sizeof(poll_reply->Mac));
  4026de:	460b      	mov	r3, r1
  4026e0:	f853 2fd8 	ldr.w	r2, [r3, #216]!
  4026e4:	f8c0 20c9 	str.w	r2, [r0, #201]	; 0xc9
  4026e8:	889b      	ldrh	r3, [r3, #4]
  4026ea:	f8a0 30cd 	strh.w	r3, [r0, #205]	; 0xcd
	memcpy (poll_reply->ShortName, node->shortname, sizeof(poll_reply->ShortName));
  4026ee:	460b      	mov	r3, r1
  4026f0:	f853 7f1a 	ldr.w	r7, [r3, #26]!
  4026f4:	685e      	ldr	r6, [r3, #4]
  4026f6:	6898      	ldr	r0, [r3, #8]
  4026f8:	68d9      	ldr	r1, [r3, #12]
  4026fa:	f8c4 701a 	str.w	r7, [r4, #26]
  4026fe:	f8c4 601e 	str.w	r6, [r4, #30]
  402702:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  402706:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
  40270a:	8a1b      	ldrh	r3, [r3, #16]
  40270c:	8563      	strh	r3, [r4, #42]	; 0x2a
	memcpy (poll_reply->LongName, node->longname, sizeof(poll_reply->LongName));
  40270e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
  402712:	f104 022c 	add.w	r2, r4, #44	; 0x2c
  402716:	f105 016c 	add.w	r1, r5, #108	; 0x6c
  40271a:	f8d3 e000 	ldr.w	lr, [r3]
  40271e:	685f      	ldr	r7, [r3, #4]
  402720:	689e      	ldr	r6, [r3, #8]
  402722:	68d8      	ldr	r0, [r3, #12]
  402724:	f8c2 e000 	str.w	lr, [r2]
  402728:	6057      	str	r7, [r2, #4]
  40272a:	6096      	str	r6, [r2, #8]
  40272c:	60d0      	str	r0, [r2, #12]
  40272e:	3310      	adds	r3, #16
  402730:	3210      	adds	r2, #16
  402732:	428b      	cmp	r3, r1
  402734:	d1f1      	bne.n	40271a <fill_ArtPollReply+0x56>
	memcpy (poll_reply->NodeReport, node->nodereport, sizeof(poll_reply->NodeReport));
  402736:	f104 006c 	add.w	r0, r4, #108	; 0x6c
  40273a:	f105 036c 	add.w	r3, r5, #108	; 0x6c
  40273e:	4602      	mov	r2, r0
  402740:	f105 01ac 	add.w	r1, r5, #172	; 0xac
  402744:	f8d3 c000 	ldr.w	ip, [r3]
  402748:	f8d3 e004 	ldr.w	lr, [r3, #4]
  40274c:	689f      	ldr	r7, [r3, #8]
  40274e:	68de      	ldr	r6, [r3, #12]
  402750:	f8c2 c000 	str.w	ip, [r2]
  402754:	f8c2 e004 	str.w	lr, [r2, #4]
  402758:	6097      	str	r7, [r2, #8]
  40275a:	60d6      	str	r6, [r2, #12]
  40275c:	3310      	adds	r3, #16
  40275e:	3210      	adds	r2, #16
  402760:	428b      	cmp	r3, r1
  402762:	d1ef      	bne.n	402744 <fill_ArtPollReply+0x80>
	memcpy (poll_reply->PortTypes, node->porttypes, sizeof(poll_reply->PortTypes));
  402764:	f8d5 30ae 	ldr.w	r3, [r5, #174]	; 0xae
  402768:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
	memcpy (poll_reply->GoodInput, node->goodinput, sizeof(poll_reply->GoodInput));
  40276c:	f8d5 30b2 	ldr.w	r3, [r5, #178]	; 0xb2
  402770:	f8c4 30b2 	str.w	r3, [r4, #178]	; 0xb2
	memcpy (poll_reply->GoodOutputA, node->goodoutput, sizeof(poll_reply->GoodOutputA));
  402774:	f8d5 30b6 	ldr.w	r3, [r5, #182]	; 0xb6
  402778:	f8c4 30b6 	str.w	r3, [r4, #182]	; 0xb6
	memcpy (poll_reply->SwIn, node->swin, sizeof(poll_reply->SwIn));
  40277c:	f8d5 30ba 	ldr.w	r3, [r5, #186]	; 0xba
  402780:	f8c4 30ba 	str.w	r3, [r4, #186]	; 0xba
	memcpy (poll_reply->SwOut, node->swout, sizeof(poll_reply->SwOut));
  402784:	f8d5 30be 	ldr.w	r3, [r5, #190]	; 0xbe
  402788:	f8c4 30be 	str.w	r3, [r4, #190]	; 0xbe
	memcpy (poll_reply->EstaManHi, node->etsamanH, sizeof(poll_reply->EstaManHi));
  40278c:	7e2b      	ldrb	r3, [r5, #24]
  40278e:	781a      	ldrb	r2, [r3, #0]
  402790:	7e63      	ldrb	r3, [r4, #25]
  402792:	701a      	strb	r2, [r3, #0]
	memcpy (poll_reply->EstaManLo, node->etsamanL, sizeof(poll_reply->EstaManLo));
  402794:	7e6b      	ldrb	r3, [r5, #25]
  402796:	781a      	ldrb	r2, [r3, #0]
  402798:	7e23      	ldrb	r3, [r4, #24]
  40279a:	701a      	strb	r2, [r3, #0]
	
	sprintf((char *)poll_reply->NodeReport, "%i nRF output universe active.\0", node->numbports);
  40279c:	f895 20ad 	ldrb.w	r2, [r5, #173]	; 0xad
  4027a0:	4915      	ldr	r1, [pc, #84]	; (4027f8 <fill_ArtPollReply+0x134>)
  4027a2:	4b16      	ldr	r3, [pc, #88]	; (4027fc <fill_ArtPollReply+0x138>)
  4027a4:	4798      	blx	r3
	
	poll_reply->OpCode = 0x2100;  // ARTNET_REPLY
  4027a6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
  4027aa:	8123      	strh	r3, [r4, #8]
	poll_reply->BoxAddr.Port = node->localPort;
  4027ac:	89eb      	ldrh	r3, [r5, #14]
  4027ae:	81e3      	strh	r3, [r4, #14]
	poll_reply->VersionInfoHi = node->verH;
  4027b0:	7c2b      	ldrb	r3, [r5, #16]
  4027b2:	7423      	strb	r3, [r4, #16]
	poll_reply->VersionInfoLo = node->ver;
  4027b4:	7c6b      	ldrb	r3, [r5, #17]
  4027b6:	7463      	strb	r3, [r4, #17]
	poll_reply->NetSwitch = node->subH;
  4027b8:	7cab      	ldrb	r3, [r5, #18]
  4027ba:	74a3      	strb	r3, [r4, #18]
	poll_reply->SubSwitch = node->sub;
  4027bc:	7ceb      	ldrb	r3, [r5, #19]
  4027be:	74e3      	strb	r3, [r4, #19]
	poll_reply->OemHi = node->oemH;
  4027c0:	7d2b      	ldrb	r3, [r5, #20]
  4027c2:	7523      	strb	r3, [r4, #20]
	poll_reply->OemLo = node->oem;
  4027c4:	7d6b      	ldrb	r3, [r5, #21]
  4027c6:	7563      	strb	r3, [r4, #21]
	poll_reply->Status = node->status;
  4027c8:	7deb      	ldrb	r3, [r5, #23]
  4027ca:	75e3      	strb	r3, [r4, #23]
	poll_reply->NumPortsHi = node->numbportsH;
  4027cc:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
  4027d0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	poll_reply->NumPortsLo = node->numbports;
  4027d4:	f895 30ad 	ldrb.w	r3, [r5, #173]	; 0xad
  4027d8:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
	poll_reply->SwMacro         = node->swmacro;
  4027dc:	f895 30c3 	ldrb.w	r3, [r5, #195]	; 0xc3
  4027e0:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	poll_reply->SwRemote        = node->swremote;
  4027e4:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
  4027e8:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	poll_reply->Style           = node->style;
  4027ec:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
  4027f0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
  4027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027f6:	bf00      	nop
  4027f8:	0040949c 	.word	0x0040949c
  4027fc:	0040344d 	.word	0x0040344d

00402800 <handle_dmx>:
} 

void handle_dmx(T_ArtDmx *packet)
{
  402800:	b508      	push	{r3, lr}
	if(packet->SubUni == ArtNode.swout[0])
  402802:	7b82      	ldrb	r2, [r0, #14]
  402804:	4b06      	ldr	r3, [pc, #24]	; (402820 <handle_dmx+0x20>)
  402806:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
  40280a:	429a      	cmp	r2, r3
  40280c:	d000      	beq.n	402810 <handle_dmx+0x10>
  40280e:	bd08      	pop	{r3, pc}
	{
	  memcpy ((uint8_t *) artnet_data_buffer, (uint8_t *)packet->Data, MaxDataLength);
  402810:	f44f 7200 	mov.w	r2, #512	; 0x200
  402814:	f100 0112 	add.w	r1, r0, #18
  402818:	4802      	ldr	r0, [pc, #8]	; (402824 <handle_dmx+0x24>)
  40281a:	4b03      	ldr	r3, [pc, #12]	; (402828 <handle_dmx+0x28>)
  40281c:	4798      	blx	r3
	  //printf("M: DMX saved\r\n");
	}
}
  40281e:	e7f6      	b.n	40280e <handle_dmx+0xe>
  402820:	20408318 	.word	0x20408318
  402824:	204072ec 	.word	0x204072ec
  402828:	00403031 	.word	0x00403031

0040282c <get_packet_type>:
	send_reply(UNICAST, p_uc_data, (uint8_t *)&ArtPollReply);
	printf("M: Address unicast\r\n");
}

T_ArtPacketType get_packet_type(uint8_t *packet) //this get artnet packet type
{
  40282c:	b510      	push	{r4, lr}
  40282e:	4604      	mov	r4, r0
	if (! memcmp( packet, ArtNode.id, 8))
  402830:	2208      	movs	r2, #8
  402832:	4906      	ldr	r1, [pc, #24]	; (40284c <get_packet_type+0x20>)
  402834:	4b06      	ldr	r3, [pc, #24]	; (402850 <get_packet_type+0x24>)
  402836:	4798      	blx	r3
  402838:	b930      	cbnz	r0, 402848 <get_packet_type+0x1c>
	{
		return BYTES_TO_SHORT(packet[9], packet[8]);
  40283a:	7a63      	ldrb	r3, [r4, #9]
  40283c:	7a20      	ldrb	r0, [r4, #8]
  40283e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402842:	b200      	sxth	r0, r0
	}
	return 0;  // bad packet
}
  402844:	b280      	uxth	r0, r0
  402846:	bd10      	pop	{r4, pc}
  402848:	2000      	movs	r0, #0
  40284a:	e7fb      	b.n	402844 <get_packet_type+0x18>
  40284c:	20408318 	.word	0x20408318
  402850:	00402fd1 	.word	0x00402fd1

00402854 <send_reply>:

void send_reply(uint8_t mode_broadcast, uint8_t *p_uc_data, uint8_t *packet)
{
  402854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402858:	b082      	sub	sp, #8
  40285a:	4680      	mov	r8, r0
  40285c:	460e      	mov	r6, r1
  40285e:	4611      	mov	r1, r2
	uint32_t ul_size;
	uint8_t i;
	p_ethernet_header_t p_eth = (p_ethernet_header_t) p_uc_data;
	p_ip_header_t p_ip = (p_ip_header_t) (p_uc_data + ETH_HEADER_SIZE);
	p_udp_header_t p_udp = (p_udp_header_t) (p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE);
	p_T_ArtPollReply p_artPR = (p_T_ArtPollReply) (p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + UDP_HEADER_SIZE);
  402860:	f106 002a 	add.w	r0, r6, #42	; 0x2a
  402864:	1e72      	subs	r2, r6, #1
  402866:	4c28      	ldr	r4, [pc, #160]	; (402908 <send_reply+0xb4>)
  402868:	1d77      	adds	r7, r6, #5
  40286a:	463b      	mov	r3, r7
	
	//Swap ethernet [MAC] source and destination address
	for (i = 0; i < 6; i++) {
		p_eth->et_dest[i] = p_eth->et_src[i];
  40286c:	785d      	ldrb	r5, [r3, #1]
  40286e:	f802 5f01 	strb.w	r5, [r2, #1]!
		p_eth->et_src[i] = gs_uc_mac_address[i];
  402872:	f814 5b01 	ldrb.w	r5, [r4], #1
  402876:	f803 5f01 	strb.w	r5, [r3, #1]!
	for (i = 0; i < 6; i++) {
  40287a:	42ba      	cmp	r2, r7
  40287c:	d1f6      	bne.n	40286c <send_reply+0x18>
	}
	
	//merge ArtPollReply into GMAC data
	memcpy(p_artPR, packet, sizeof(T_ArtPollReply));//dest, src, len
  40287e:	22f0      	movs	r2, #240	; 0xf0
  402880:	4b22      	ldr	r3, [pc, #136]	; (40290c <send_reply+0xb8>)
  402882:	4798      	blx	r3
	
	p_udp->udp_len = sizeof(T_ArtPollReply);
  402884:	f06f 030f 	mvn.w	r3, #15
  402888:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
  40288c:	2300      	movs	r3, #0
  40288e:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
	
	//calculate size of the GMAC macket
	ul_size = ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + UDP_HEADER_SIZE + sizeof(T_ArtPollReply);
	
	if(mode_broadcast == 1) // send broadcast packet
  402892:	f1b8 0f01 	cmp.w	r8, #1
  402896:	d01c      	beq.n	4028d2 <send_reply+0x7e>
  402898:	f106 0319 	add.w	r3, r6, #25
  40289c:	4a1c      	ldr	r2, [pc, #112]	; (402910 <send_reply+0xbc>)
  40289e:	f106 001d 	add.w	r0, r6, #29
	}
	else // send unicast packet to controller
	{
		//Fill in source IP address
		for (i = 0; i < 4; i++) {
			p_ip->ip_dst[i] =p_ip->ip_src[i];
  4028a2:	7859      	ldrb	r1, [r3, #1]
  4028a4:	7159      	strb	r1, [r3, #5]
			p_ip->ip_src[i] = gs_uc_ip_address[i];
  4028a6:	f812 1b01 	ldrb.w	r1, [r2], #1
  4028aa:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  4028ae:	4283      	cmp	r3, r0
  4028b0:	d1f7      	bne.n	4028a2 <send_reply+0x4e>
		}
		ul_rc = gmac_dev_write(&gs_gmac_dev, *p_uc_data, GMAC_QUE_0, ul_size, NULL);
  4028b2:	7831      	ldrb	r1, [r6, #0]
  4028b4:	2200      	movs	r2, #0
  4028b6:	9200      	str	r2, [sp, #0]
  4028b8:	f44f 738d 	mov.w	r3, #282	; 0x11a
  4028bc:	4815      	ldr	r0, [pc, #84]	; (402914 <send_reply+0xc0>)
  4028be:	4c16      	ldr	r4, [pc, #88]	; (402918 <send_reply+0xc4>)
  4028c0:	47a0      	blx	r4
  4028c2:	b2c0      	uxtb	r0, r0
	}
#ifdef _DEBUG_
	if (ul_rc != GMAC_OK)
  4028c4:	b9e0      	cbnz	r0, 402900 <send_reply+0xac>
	{
		printf("E: ArtPollReply not send");
	}
	else
	{
		printf("M: ArtPollReply send\r\n");
  4028c6:	4815      	ldr	r0, [pc, #84]	; (40291c <send_reply+0xc8>)
  4028c8:	4b15      	ldr	r3, [pc, #84]	; (402920 <send_reply+0xcc>)
  4028ca:	4798      	blx	r3
	}
#endif	
}
  4028cc:	b002      	add	sp, #8
  4028ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028d2:	f106 0319 	add.w	r3, r6, #25
  4028d6:	4a0e      	ldr	r2, [pc, #56]	; (402910 <send_reply+0xbc>)
  4028d8:	f106 041d 	add.w	r4, r6, #29
			p_ip->ip_dst[i] = 255;
  4028dc:	20ff      	movs	r0, #255	; 0xff
  4028de:	7158      	strb	r0, [r3, #5]
			p_ip->ip_src[i] = gs_uc_ip_address[i];
  4028e0:	f812 1b01 	ldrb.w	r1, [r2], #1
  4028e4:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  4028e8:	429c      	cmp	r4, r3
  4028ea:	d1f8      	bne.n	4028de <send_reply+0x8a>
		ul_rc = gmac_dev_write(&gs_gmac_dev, *p_uc_data, GMAC_QUE_0, ul_size, NULL);
  4028ec:	7831      	ldrb	r1, [r6, #0]
  4028ee:	2200      	movs	r2, #0
  4028f0:	9200      	str	r2, [sp, #0]
  4028f2:	f44f 738d 	mov.w	r3, #282	; 0x11a
  4028f6:	4807      	ldr	r0, [pc, #28]	; (402914 <send_reply+0xc0>)
  4028f8:	4c07      	ldr	r4, [pc, #28]	; (402918 <send_reply+0xc4>)
  4028fa:	47a0      	blx	r4
  4028fc:	b2c0      	uxtb	r0, r0
  4028fe:	e7e1      	b.n	4028c4 <send_reply+0x70>
		printf("E: ArtPollReply not send");
  402900:	4808      	ldr	r0, [pc, #32]	; (402924 <send_reply+0xd0>)
  402902:	4b07      	ldr	r3, [pc, #28]	; (402920 <send_reply+0xcc>)
  402904:	4798      	blx	r3
  402906:	e7e1      	b.n	4028cc <send_reply+0x78>
  402908:	20400010 	.word	0x20400010
  40290c:	00403031 	.word	0x00403031
  402910:	2040000c 	.word	0x2040000c
  402914:	204074ec 	.word	0x204074ec
  402918:	00400639 	.word	0x00400639
  40291c:	004095e4 	.word	0x004095e4
  402920:	00402fa9 	.word	0x00402fa9
  402924:	004095c8 	.word	0x004095c8

00402928 <handle_poll>:
{
  402928:	b508      	push	{r3, lr}
		send_reply(BROADCAST, p_uc_data, (uint8_t *)&ArtPollReply);
  40292a:	4a02      	ldr	r2, [pc, #8]	; (402934 <handle_poll+0xc>)
  40292c:	2001      	movs	r0, #1
  40292e:	4b02      	ldr	r3, [pc, #8]	; (402938 <handle_poll+0x10>)
  402930:	4798      	blx	r3
  402932:	bd08      	pop	{r3, pc}
  402934:	204083fc 	.word	0x204083fc
  402938:	00402855 	.word	0x00402855

0040293c <handle_address>:
{
  40293c:	b508      	push	{r3, lr}
	send_reply(UNICAST, p_uc_data, (uint8_t *)&ArtPollReply);
  40293e:	4a04      	ldr	r2, [pc, #16]	; (402950 <handle_address+0x14>)
  402940:	2000      	movs	r0, #0
  402942:	4b04      	ldr	r3, [pc, #16]	; (402954 <handle_address+0x18>)
  402944:	4798      	blx	r3
	printf("M: Address unicast\r\n");
  402946:	4804      	ldr	r0, [pc, #16]	; (402958 <handle_address+0x1c>)
  402948:	4b04      	ldr	r3, [pc, #16]	; (40295c <handle_address+0x20>)
  40294a:	4798      	blx	r3
  40294c:	bd08      	pop	{r3, pc}
  40294e:	bf00      	nop
  402950:	204083fc 	.word	0x204083fc
  402954:	00402855 	.word	0x00402855
  402958:	004094f4 	.word	0x004094f4
  40295c:	00402fa9 	.word	0x00402fa9

00402960 <handleGMAC_Packet>:
void handleGMAC_Packet(uint8_t *p_uc_data, uint32_t ul_size){
  402960:	b510      	push	{r4, lr}
  402962:	f5ad 6dc0 	sub.w	sp, sp, #1536	; 0x600
  402966:	4604      	mov	r4, r0
	uint16_t eth_pkt_format = SWAP16(p_eth->et_protlen);
  402968:	8982      	ldrh	r2, [r0, #12]
  40296a:	0a13      	lsrs	r3, r2, #8
  40296c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402970:	b29b      	uxth	r3, r3
	if(eth_pkt_format == ETH_PROT_IPV4){
  402972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  402976:	d00a      	beq.n	40298e <handleGMAC_Packet+0x2e>
	else if(eth_pkt_format == ETH_PROT_ARP){
  402978:	f640 0206 	movw	r2, #2054	; 0x806
  40297c:	4293      	cmp	r3, r2
  40297e:	d035      	beq.n	4029ec <handleGMAC_Packet+0x8c>
		printf("=== Default w_pkt_format= 0x%X===\n\r", eth_pkt_format);
  402980:	4619      	mov	r1, r3
  402982:	481c      	ldr	r0, [pc, #112]	; (4029f4 <handleGMAC_Packet+0x94>)
  402984:	4b1c      	ldr	r3, [pc, #112]	; (4029f8 <handleGMAC_Packet+0x98>)
  402986:	4798      	blx	r3
}
  402988:	f50d 6dc0 	add.w	sp, sp, #1536	; 0x600
  40298c:	bd10      	pop	{r4, pc}
		if (p_ip->ip_p == IP_PROT_UDP){
  40298e:	7dc3      	ldrb	r3, [r0, #23]
  402990:	2b11      	cmp	r3, #17
  402992:	d004      	beq.n	40299e <handleGMAC_Packet+0x3e>
		else if(p_ip->ip_p == IP_PROT_ICMP)
  402994:	2b01      	cmp	r3, #1
  402996:	d1f7      	bne.n	402988 <handleGMAC_Packet+0x28>
			gmac_process_ICMP_packet(p_uc_data, ul_size);
  402998:	4b18      	ldr	r3, [pc, #96]	; (4029fc <handleGMAC_Packet+0x9c>)
  40299a:	4798      	blx	r3
  40299c:	e7f4      	b.n	402988 <handleGMAC_Packet+0x28>
			if (ul_size > hdr_len){
  40299e:	292a      	cmp	r1, #42	; 0x2a
  4029a0:	d9f2      	bls.n	402988 <handleGMAC_Packet+0x28>
				PacketType = (T_ArtPacketType) get_packet_type(p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + ICMP_HEADER_SIZE);
  4029a2:	302a      	adds	r0, #42	; 0x2a
  4029a4:	4b16      	ldr	r3, [pc, #88]	; (402a00 <handleGMAC_Packet+0xa0>)
  4029a6:	4798      	blx	r3
  4029a8:	4b16      	ldr	r3, [pc, #88]	; (402a04 <handleGMAC_Packet+0xa4>)
  4029aa:	8018      	strh	r0, [r3, #0]
				if(PacketType == FAULTY_PACKET){  // bad packet
  4029ac:	2800      	cmp	r0, #0
  4029ae:	d0eb      	beq.n	402988 <handleGMAC_Packet+0x28>
				*packetBuffer = *(p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + ICMP_HEADER_SIZE);
  4029b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4029b4:	f88d 3000 	strb.w	r3, [sp]
				if(PacketType == ARTNET_DMX){
  4029b8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
  4029bc:	d00a      	beq.n	4029d4 <handleGMAC_Packet+0x74>
				else if(PacketType == ARTNET_POLL){
  4029be:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  4029c2:	d00b      	beq.n	4029dc <handleGMAC_Packet+0x7c>
				else if(PacketType == ARTNET_ADDRESS){
  4029c4:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
  4029c8:	d1de      	bne.n	402988 <handleGMAC_Packet+0x28>
						handle_address((T_ArtAddress *)&packetBuffer, p_uc_data);
  4029ca:	4621      	mov	r1, r4
  4029cc:	4668      	mov	r0, sp
  4029ce:	4b0e      	ldr	r3, [pc, #56]	; (402a08 <handleGMAC_Packet+0xa8>)
  4029d0:	4798      	blx	r3
  4029d2:	e7d9      	b.n	402988 <handleGMAC_Packet+0x28>
						handle_dmx((T_ArtDmx *)&packetBuffer);
  4029d4:	4668      	mov	r0, sp
  4029d6:	4b0d      	ldr	r3, [pc, #52]	; (402a0c <handleGMAC_Packet+0xac>)
  4029d8:	4798      	blx	r3
  4029da:	e7d5      	b.n	402988 <handleGMAC_Packet+0x28>
						printf("M: ArtPoll\r\n");
  4029dc:	480c      	ldr	r0, [pc, #48]	; (402a10 <handleGMAC_Packet+0xb0>)
  4029de:	4b06      	ldr	r3, [pc, #24]	; (4029f8 <handleGMAC_Packet+0x98>)
  4029e0:	4798      	blx	r3
						handle_poll((T_ArtPoll *)&packetBuffer, p_uc_data);
  4029e2:	4621      	mov	r1, r4
  4029e4:	4668      	mov	r0, sp
  4029e6:	4b0b      	ldr	r3, [pc, #44]	; (402a14 <handleGMAC_Packet+0xb4>)
  4029e8:	4798      	blx	r3
  4029ea:	e7cd      	b.n	402988 <handleGMAC_Packet+0x28>
		gmac_process_arp_packet(p_uc_data, ul_size);
  4029ec:	4b0a      	ldr	r3, [pc, #40]	; (402a18 <handleGMAC_Packet+0xb8>)
  4029ee:	4798      	blx	r3
  4029f0:	e7ca      	b.n	402988 <handleGMAC_Packet+0x28>
  4029f2:	bf00      	nop
  4029f4:	004094d0 	.word	0x004094d0
  4029f8:	00402fa9 	.word	0x00402fa9
  4029fc:	00400ced 	.word	0x00400ced
  402a00:	0040282d 	.word	0x0040282d
  402a04:	20408304 	.word	0x20408304
  402a08:	0040293d 	.word	0x0040293d
  402a0c:	00402801 	.word	0x00402801
  402a10:	004094c0 	.word	0x004094c0
  402a14:	00402929 	.word	0x00402929
  402a18:	00400c29 	.word	0x00400c29
  402a1c:	00000000 	.word	0x00000000

00402a20 <main>:
{
  402a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a24:	b08a      	sub	sp, #40	; 0x28
	sysclk_init();
  402a26:	4b5c      	ldr	r3, [pc, #368]	; (402b98 <main+0x178>)
  402a28:	4798      	blx	r3
	board_init();
  402a2a:	4b5c      	ldr	r3, [pc, #368]	; (402b9c <main+0x17c>)
  402a2c:	4798      	blx	r3
  402a2e:	200e      	movs	r0, #14
  402a30:	4e5b      	ldr	r6, [pc, #364]	; (402ba0 <main+0x180>)
  402a32:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402a34:	4d5b      	ldr	r5, [pc, #364]	; (402ba4 <main+0x184>)
  402a36:	4b5c      	ldr	r3, [pc, #368]	; (402ba8 <main+0x188>)
  402a38:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402a3a:	4a5c      	ldr	r2, [pc, #368]	; (402bac <main+0x18c>)
  402a3c:	4b5c      	ldr	r3, [pc, #368]	; (402bb0 <main+0x190>)
  402a3e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402a40:	4a5c      	ldr	r2, [pc, #368]	; (402bb4 <main+0x194>)
  402a42:	4b5d      	ldr	r3, [pc, #372]	; (402bb8 <main+0x198>)
  402a44:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402a46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402a4a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402a4c:	23c0      	movs	r3, #192	; 0xc0
  402a4e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402a54:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402a56:	2400      	movs	r4, #0
  402a58:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402a5a:	9408      	str	r4, [sp, #32]
  402a5c:	200e      	movs	r0, #14
  402a5e:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  402a60:	4a56      	ldr	r2, [pc, #344]	; (402bbc <main+0x19c>)
  402a62:	a904      	add	r1, sp, #16
  402a64:	4628      	mov	r0, r5
  402a66:	4b56      	ldr	r3, [pc, #344]	; (402bc0 <main+0x1a0>)
  402a68:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402a6a:	4628      	mov	r0, r5
  402a6c:	4b55      	ldr	r3, [pc, #340]	; (402bc4 <main+0x1a4>)
  402a6e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402a70:	4628      	mov	r0, r5
  402a72:	4b55      	ldr	r3, [pc, #340]	; (402bc8 <main+0x1a8>)
  402a74:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402a76:	4e55      	ldr	r6, [pc, #340]	; (402bcc <main+0x1ac>)
  402a78:	6833      	ldr	r3, [r6, #0]
  402a7a:	4621      	mov	r1, r4
  402a7c:	6898      	ldr	r0, [r3, #8]
  402a7e:	4d54      	ldr	r5, [pc, #336]	; (402bd0 <main+0x1b0>)
  402a80:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402a82:	6833      	ldr	r3, [r6, #0]
  402a84:	4621      	mov	r1, r4
  402a86:	6858      	ldr	r0, [r3, #4]
  402a88:	47a8      	blx	r5
	puts(STRING_HEADER);
  402a8a:	4852      	ldr	r0, [pc, #328]	; (402bd4 <main+0x1b4>)
  402a8c:	4b52      	ldr	r3, [pc, #328]	; (402bd8 <main+0x1b8>)
  402a8e:	4798      	blx	r3
	fill_ArtNode(&ArtNode);
  402a90:	4c52      	ldr	r4, [pc, #328]	; (402bdc <main+0x1bc>)
  402a92:	4620      	mov	r0, r4
  402a94:	4b52      	ldr	r3, [pc, #328]	; (402be0 <main+0x1c0>)
  402a96:	4798      	blx	r3
	fill_ArtPollReply(&ArtPollReply, &ArtNode);	
  402a98:	4621      	mov	r1, r4
  402a9a:	4852      	ldr	r0, [pc, #328]	; (402be4 <main+0x1c4>)
  402a9c:	4b52      	ldr	r3, [pc, #328]	; (402be8 <main+0x1c8>)
  402a9e:	4798      	blx	r3
	if (!init_gmac_ethernet())
  402aa0:	4b52      	ldr	r3, [pc, #328]	; (402bec <main+0x1cc>)
  402aa2:	4798      	blx	r3
  402aa4:	b920      	cbnz	r0, 402ab0 <main+0x90>
}//end of program
  402aa6:	f04f 30ff 	mov.w	r0, #4294967295
  402aaa:	b00a      	add	sp, #40	; 0x28
  402aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
  402ab0:	484f      	ldr	r0, [pc, #316]	; (402bf0 <main+0x1d0>)
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  402ab2:	7883      	ldrb	r3, [r0, #2]
  402ab4:	7842      	ldrb	r2, [r0, #1]
  402ab6:	7801      	ldrb	r1, [r0, #0]
  402ab8:	7944      	ldrb	r4, [r0, #5]
  402aba:	9402      	str	r4, [sp, #8]
  402abc:	7904      	ldrb	r4, [r0, #4]
  402abe:	9401      	str	r4, [sp, #4]
  402ac0:	78c0      	ldrb	r0, [r0, #3]
  402ac2:	9000      	str	r0, [sp, #0]
  402ac4:	484b      	ldr	r0, [pc, #300]	; (402bf4 <main+0x1d4>)
  402ac6:	4c4c      	ldr	r4, [pc, #304]	; (402bf8 <main+0x1d8>)
  402ac8:	47a0      	blx	r4
	gs_uc_ip_address[2], gs_uc_ip_address[3]);
  402aca:	484c      	ldr	r0, [pc, #304]	; (402bfc <main+0x1dc>)
	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
  402acc:	7883      	ldrb	r3, [r0, #2]
  402ace:	7842      	ldrb	r2, [r0, #1]
  402ad0:	7801      	ldrb	r1, [r0, #0]
  402ad2:	78c0      	ldrb	r0, [r0, #3]
  402ad4:	9000      	str	r0, [sp, #0]
  402ad6:	484a      	ldr	r0, [pc, #296]	; (402c00 <main+0x1e0>)
  402ad8:	47a0      	blx	r4
	puts("link detected\r");
  402ada:	484a      	ldr	r0, [pc, #296]	; (402c04 <main+0x1e4>)
  402adc:	4b3e      	ldr	r3, [pc, #248]	; (402bd8 <main+0x1b8>)
  402ade:	4798      	blx	r3
	spi_master_initialize();
  402ae0:	4b49      	ldr	r3, [pc, #292]	; (402c08 <main+0x1e8>)
  402ae2:	4798      	blx	r3
	nRF24_begin();
  402ae4:	4b49      	ldr	r3, [pc, #292]	; (402c0c <main+0x1ec>)
  402ae6:	4798      	blx	r3
	nRF24_setPALevel(RF_PA_HIGH);
  402ae8:	2002      	movs	r0, #2
  402aea:	4b49      	ldr	r3, [pc, #292]	; (402c10 <main+0x1f0>)
  402aec:	4798      	blx	r3
	nRF24_stopListening();
  402aee:	4b49      	ldr	r3, [pc, #292]	; (402c14 <main+0x1f4>)
  402af0:	4798      	blx	r3
	printDetails();
  402af2:	4b49      	ldr	r3, [pc, #292]	; (402c18 <main+0x1f8>)
  402af4:	4798      	blx	r3
		if (GMAC_OK == read_dev_gmac()) {
  402af6:	4d49      	ldr	r5, [pc, #292]	; (402c1c <main+0x1fc>)
				nRF24_openWritingPipe(listeningPipes[currentNode]);
  402af8:	a725      	add	r7, pc, #148	; (adr r7, 402b90 <main+0x170>)
  402afa:	e9d7 6700 	ldrd	r6, r7, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  402afe:	f8df 8144 	ldr.w	r8, [pc, #324]	; 402c44 <main+0x224>
  402b02:	e008      	b.n	402b16 <main+0xf6>
			else if(dmxValue >= 11 && dmxValue <= 20)
  402b04:	f1a3 020b 	sub.w	r2, r3, #11
  402b08:	b2d2      	uxtb	r2, r2
  402b0a:	2a09      	cmp	r2, #9
  402b0c:	d91c      	bls.n	402b48 <main+0x128>
			else if(dmxValue >= 101 && dmxValue <= 230)
  402b0e:	3b65      	subs	r3, #101	; 0x65
  402b10:	b2dc      	uxtb	r4, r3
  402b12:	2c81      	cmp	r4, #129	; 0x81
  402b14:	d927      	bls.n	402b66 <main+0x146>
		if (GMAC_OK == read_dev_gmac()) {
  402b16:	47a8      	blx	r5
  402b18:	2800      	cmp	r0, #0
  402b1a:	d1fc      	bne.n	402b16 <main+0xf6>
			if (ul_frm_size_rx > 0) {
  402b1c:	4b40      	ldr	r3, [pc, #256]	; (402c20 <main+0x200>)
  402b1e:	6819      	ldr	r1, [r3, #0]
  402b20:	2900      	cmp	r1, #0
  402b22:	d0f8      	beq.n	402b16 <main+0xf6>
				handleGMAC_Packet((uint8_t *) gs_uc_eth_buffer_rx, ul_frm_size_rx);
  402b24:	483f      	ldr	r0, [pc, #252]	; (402c24 <main+0x204>)
  402b26:	4b40      	ldr	r3, [pc, #256]	; (402c28 <main+0x208>)
  402b28:	4798      	blx	r3
		dmxValue = artnet_data_buffer[i];
  402b2a:	4b40      	ldr	r3, [pc, #256]	; (402c2c <main+0x20c>)
  402b2c:	781b      	ldrb	r3, [r3, #0]
			if(dmxValue <= 10)
  402b2e:	2b0a      	cmp	r3, #10
  402b30:	d8e8      	bhi.n	402b04 <main+0xe4>
					nRF24_openWritingPipe(listeningPipes[currentNode]);
  402b32:	4630      	mov	r0, r6
  402b34:	4639      	mov	r1, r7
  402b36:	4b3e      	ldr	r3, [pc, #248]	; (402c30 <main+0x210>)
  402b38:	4798      	blx	r3
					dataOut.command = 0;
  402b3a:	483e      	ldr	r0, [pc, #248]	; (402c34 <main+0x214>)
  402b3c:	2300      	movs	r3, #0
  402b3e:	7183      	strb	r3, [r0, #6]
					nRF24_write(&dataOut, sizeof(dataOut));
  402b40:	2108      	movs	r1, #8
  402b42:	4b3d      	ldr	r3, [pc, #244]	; (402c38 <main+0x218>)
  402b44:	4798      	blx	r3
  402b46:	e7e6      	b.n	402b16 <main+0xf6>
					nRF24_openWritingPipe(listeningPipes[currentNode]);
  402b48:	4630      	mov	r0, r6
  402b4a:	4639      	mov	r1, r7
  402b4c:	4b38      	ldr	r3, [pc, #224]	; (402c30 <main+0x210>)
  402b4e:	4798      	blx	r3
					dataOut.command = 1;
  402b50:	4838      	ldr	r0, [pc, #224]	; (402c34 <main+0x214>)
  402b52:	2401      	movs	r4, #1
  402b54:	7184      	strb	r4, [r0, #6]
					nRF24_write(&dataOut, sizeof(dataOut));
  402b56:	2108      	movs	r1, #8
  402b58:	4b37      	ldr	r3, [pc, #220]	; (402c38 <main+0x218>)
  402b5a:	4798      	blx	r3
					printf("Node %d read own sensor\r\n", currentNode);
  402b5c:	4621      	mov	r1, r4
  402b5e:	4837      	ldr	r0, [pc, #220]	; (402c3c <main+0x21c>)
  402b60:	4b25      	ldr	r3, [pc, #148]	; (402bf8 <main+0x1d8>)
  402b62:	4798      	blx	r3
  402b64:	e7d7      	b.n	402b16 <main+0xf6>
				nRF24_openWritingPipe(listeningPipes[currentNode]);
  402b66:	4630      	mov	r0, r6
  402b68:	4639      	mov	r1, r7
  402b6a:	4b31      	ldr	r3, [pc, #196]	; (402c30 <main+0x210>)
  402b6c:	4798      	blx	r3
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  402b6e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
  402b72:	fb88 3204 	smull	r3, r2, r8, r4
  402b76:	17e4      	asrs	r4, r4, #31
  402b78:	ebc4 02e2 	rsb	r2, r4, r2, asr #3
				dataOut.datavalue = m_dmx;
  402b7c:	4b2d      	ldr	r3, [pc, #180]	; (402c34 <main+0x214>)
  402b7e:	b2d2      	uxtb	r2, r2
  402b80:	809a      	strh	r2, [r3, #4]
				dataOut.command = 3;
  402b82:	2103      	movs	r1, #3
  402b84:	7199      	strb	r1, [r3, #6]
				printf("connect desk to node %d for %d\r\n", currentNode, m_dmx);
  402b86:	2101      	movs	r1, #1
  402b88:	482d      	ldr	r0, [pc, #180]	; (402c40 <main+0x220>)
  402b8a:	4b1b      	ldr	r3, [pc, #108]	; (402bf8 <main+0x1d8>)
  402b8c:	4798      	blx	r3
  402b8e:	e7c2      	b.n	402b16 <main+0xf6>
  402b90:	3a3a3ab1 	.word	0x3a3a3ab1
  402b94:	00000000 	.word	0x00000000
  402b98:	00401c0d 	.word	0x00401c0d
  402b9c:	00401c7d 	.word	0x00401c7d
  402ba0:	00402121 	.word	0x00402121
  402ba4:	40028000 	.word	0x40028000
  402ba8:	20408300 	.word	0x20408300
  402bac:	004024d1 	.word	0x004024d1
  402bb0:	204082fc 	.word	0x204082fc
  402bb4:	004023f5 	.word	0x004023f5
  402bb8:	204072e8 	.word	0x204072e8
  402bbc:	08f0d180 	.word	0x08f0d180
  402bc0:	00400a81 	.word	0x00400a81
  402bc4:	00400ad5 	.word	0x00400ad5
  402bc8:	00400adb 	.word	0x00400adb
  402bcc:	2040003c 	.word	0x2040003c
  402bd0:	004032ad 	.word	0x004032ad
  402bd4:	0040950c 	.word	0x0040950c
  402bd8:	0040329d 	.word	0x0040329d
  402bdc:	20408318 	.word	0x20408318
  402be0:	004025a5 	.word	0x004025a5
  402be4:	204083fc 	.word	0x204083fc
  402be8:	004026c5 	.word	0x004026c5
  402bec:	00400b3d 	.word	0x00400b3d
  402bf0:	20400010 	.word	0x20400010
  402bf4:	004091bc 	.word	0x004091bc
  402bf8:	00402fa9 	.word	0x00402fa9
  402bfc:	2040000c 	.word	0x2040000c
  402c00:	00409560 	.word	0x00409560
  402c04:	00409578 	.word	0x00409578
  402c08:	00401535 	.word	0x00401535
  402c0c:	004013a9 	.word	0x004013a9
  402c10:	004010c5 	.word	0x004010c5
  402c14:	004012f5 	.word	0x004012f5
  402c18:	00401109 	.word	0x00401109
  402c1c:	00400b11 	.word	0x00400b11
  402c20:	204082e0 	.word	0x204082e0
  402c24:	204075e4 	.word	0x204075e4
  402c28:	00402961 	.word	0x00402961
  402c2c:	204072ec 	.word	0x204072ec
  402c30:	00401441 	.word	0x00401441
  402c34:	20408310 	.word	0x20408310
  402c38:	0040147d 	.word	0x0040147d
  402c3c:	00409588 	.word	0x00409588
  402c40:	004095a4 	.word	0x004095a4
  402c44:	0fe03f81 	.word	0x0fe03f81

00402c48 <__aeabi_uldivmod>:
  402c48:	b953      	cbnz	r3, 402c60 <__aeabi_uldivmod+0x18>
  402c4a:	b94a      	cbnz	r2, 402c60 <__aeabi_uldivmod+0x18>
  402c4c:	2900      	cmp	r1, #0
  402c4e:	bf08      	it	eq
  402c50:	2800      	cmpeq	r0, #0
  402c52:	bf1c      	itt	ne
  402c54:	f04f 31ff 	movne.w	r1, #4294967295
  402c58:	f04f 30ff 	movne.w	r0, #4294967295
  402c5c:	f000 b97a 	b.w	402f54 <__aeabi_idiv0>
  402c60:	f1ad 0c08 	sub.w	ip, sp, #8
  402c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402c68:	f000 f806 	bl	402c78 <__udivmoddi4>
  402c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402c74:	b004      	add	sp, #16
  402c76:	4770      	bx	lr

00402c78 <__udivmoddi4>:
  402c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c7c:	468c      	mov	ip, r1
  402c7e:	460d      	mov	r5, r1
  402c80:	4604      	mov	r4, r0
  402c82:	9e08      	ldr	r6, [sp, #32]
  402c84:	2b00      	cmp	r3, #0
  402c86:	d151      	bne.n	402d2c <__udivmoddi4+0xb4>
  402c88:	428a      	cmp	r2, r1
  402c8a:	4617      	mov	r7, r2
  402c8c:	d96d      	bls.n	402d6a <__udivmoddi4+0xf2>
  402c8e:	fab2 fe82 	clz	lr, r2
  402c92:	f1be 0f00 	cmp.w	lr, #0
  402c96:	d00b      	beq.n	402cb0 <__udivmoddi4+0x38>
  402c98:	f1ce 0c20 	rsb	ip, lr, #32
  402c9c:	fa01 f50e 	lsl.w	r5, r1, lr
  402ca0:	fa20 fc0c 	lsr.w	ip, r0, ip
  402ca4:	fa02 f70e 	lsl.w	r7, r2, lr
  402ca8:	ea4c 0c05 	orr.w	ip, ip, r5
  402cac:	fa00 f40e 	lsl.w	r4, r0, lr
  402cb0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402cb4:	0c25      	lsrs	r5, r4, #16
  402cb6:	fbbc f8fa 	udiv	r8, ip, sl
  402cba:	fa1f f987 	uxth.w	r9, r7
  402cbe:	fb0a cc18 	mls	ip, sl, r8, ip
  402cc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402cc6:	fb08 f309 	mul.w	r3, r8, r9
  402cca:	42ab      	cmp	r3, r5
  402ccc:	d90a      	bls.n	402ce4 <__udivmoddi4+0x6c>
  402cce:	19ed      	adds	r5, r5, r7
  402cd0:	f108 32ff 	add.w	r2, r8, #4294967295
  402cd4:	f080 8123 	bcs.w	402f1e <__udivmoddi4+0x2a6>
  402cd8:	42ab      	cmp	r3, r5
  402cda:	f240 8120 	bls.w	402f1e <__udivmoddi4+0x2a6>
  402cde:	f1a8 0802 	sub.w	r8, r8, #2
  402ce2:	443d      	add	r5, r7
  402ce4:	1aed      	subs	r5, r5, r3
  402ce6:	b2a4      	uxth	r4, r4
  402ce8:	fbb5 f0fa 	udiv	r0, r5, sl
  402cec:	fb0a 5510 	mls	r5, sl, r0, r5
  402cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402cf4:	fb00 f909 	mul.w	r9, r0, r9
  402cf8:	45a1      	cmp	r9, r4
  402cfa:	d909      	bls.n	402d10 <__udivmoddi4+0x98>
  402cfc:	19e4      	adds	r4, r4, r7
  402cfe:	f100 33ff 	add.w	r3, r0, #4294967295
  402d02:	f080 810a 	bcs.w	402f1a <__udivmoddi4+0x2a2>
  402d06:	45a1      	cmp	r9, r4
  402d08:	f240 8107 	bls.w	402f1a <__udivmoddi4+0x2a2>
  402d0c:	3802      	subs	r0, #2
  402d0e:	443c      	add	r4, r7
  402d10:	eba4 0409 	sub.w	r4, r4, r9
  402d14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402d18:	2100      	movs	r1, #0
  402d1a:	2e00      	cmp	r6, #0
  402d1c:	d061      	beq.n	402de2 <__udivmoddi4+0x16a>
  402d1e:	fa24 f40e 	lsr.w	r4, r4, lr
  402d22:	2300      	movs	r3, #0
  402d24:	6034      	str	r4, [r6, #0]
  402d26:	6073      	str	r3, [r6, #4]
  402d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d2c:	428b      	cmp	r3, r1
  402d2e:	d907      	bls.n	402d40 <__udivmoddi4+0xc8>
  402d30:	2e00      	cmp	r6, #0
  402d32:	d054      	beq.n	402dde <__udivmoddi4+0x166>
  402d34:	2100      	movs	r1, #0
  402d36:	e886 0021 	stmia.w	r6, {r0, r5}
  402d3a:	4608      	mov	r0, r1
  402d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d40:	fab3 f183 	clz	r1, r3
  402d44:	2900      	cmp	r1, #0
  402d46:	f040 808e 	bne.w	402e66 <__udivmoddi4+0x1ee>
  402d4a:	42ab      	cmp	r3, r5
  402d4c:	d302      	bcc.n	402d54 <__udivmoddi4+0xdc>
  402d4e:	4282      	cmp	r2, r0
  402d50:	f200 80fa 	bhi.w	402f48 <__udivmoddi4+0x2d0>
  402d54:	1a84      	subs	r4, r0, r2
  402d56:	eb65 0503 	sbc.w	r5, r5, r3
  402d5a:	2001      	movs	r0, #1
  402d5c:	46ac      	mov	ip, r5
  402d5e:	2e00      	cmp	r6, #0
  402d60:	d03f      	beq.n	402de2 <__udivmoddi4+0x16a>
  402d62:	e886 1010 	stmia.w	r6, {r4, ip}
  402d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d6a:	b912      	cbnz	r2, 402d72 <__udivmoddi4+0xfa>
  402d6c:	2701      	movs	r7, #1
  402d6e:	fbb7 f7f2 	udiv	r7, r7, r2
  402d72:	fab7 fe87 	clz	lr, r7
  402d76:	f1be 0f00 	cmp.w	lr, #0
  402d7a:	d134      	bne.n	402de6 <__udivmoddi4+0x16e>
  402d7c:	1beb      	subs	r3, r5, r7
  402d7e:	0c3a      	lsrs	r2, r7, #16
  402d80:	fa1f fc87 	uxth.w	ip, r7
  402d84:	2101      	movs	r1, #1
  402d86:	fbb3 f8f2 	udiv	r8, r3, r2
  402d8a:	0c25      	lsrs	r5, r4, #16
  402d8c:	fb02 3318 	mls	r3, r2, r8, r3
  402d90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402d94:	fb0c f308 	mul.w	r3, ip, r8
  402d98:	42ab      	cmp	r3, r5
  402d9a:	d907      	bls.n	402dac <__udivmoddi4+0x134>
  402d9c:	19ed      	adds	r5, r5, r7
  402d9e:	f108 30ff 	add.w	r0, r8, #4294967295
  402da2:	d202      	bcs.n	402daa <__udivmoddi4+0x132>
  402da4:	42ab      	cmp	r3, r5
  402da6:	f200 80d1 	bhi.w	402f4c <__udivmoddi4+0x2d4>
  402daa:	4680      	mov	r8, r0
  402dac:	1aed      	subs	r5, r5, r3
  402dae:	b2a3      	uxth	r3, r4
  402db0:	fbb5 f0f2 	udiv	r0, r5, r2
  402db4:	fb02 5510 	mls	r5, r2, r0, r5
  402db8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402dbc:	fb0c fc00 	mul.w	ip, ip, r0
  402dc0:	45a4      	cmp	ip, r4
  402dc2:	d907      	bls.n	402dd4 <__udivmoddi4+0x15c>
  402dc4:	19e4      	adds	r4, r4, r7
  402dc6:	f100 33ff 	add.w	r3, r0, #4294967295
  402dca:	d202      	bcs.n	402dd2 <__udivmoddi4+0x15a>
  402dcc:	45a4      	cmp	ip, r4
  402dce:	f200 80b8 	bhi.w	402f42 <__udivmoddi4+0x2ca>
  402dd2:	4618      	mov	r0, r3
  402dd4:	eba4 040c 	sub.w	r4, r4, ip
  402dd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402ddc:	e79d      	b.n	402d1a <__udivmoddi4+0xa2>
  402dde:	4631      	mov	r1, r6
  402de0:	4630      	mov	r0, r6
  402de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402de6:	f1ce 0420 	rsb	r4, lr, #32
  402dea:	fa05 f30e 	lsl.w	r3, r5, lr
  402dee:	fa07 f70e 	lsl.w	r7, r7, lr
  402df2:	fa20 f804 	lsr.w	r8, r0, r4
  402df6:	0c3a      	lsrs	r2, r7, #16
  402df8:	fa25 f404 	lsr.w	r4, r5, r4
  402dfc:	ea48 0803 	orr.w	r8, r8, r3
  402e00:	fbb4 f1f2 	udiv	r1, r4, r2
  402e04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402e08:	fb02 4411 	mls	r4, r2, r1, r4
  402e0c:	fa1f fc87 	uxth.w	ip, r7
  402e10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402e14:	fb01 f30c 	mul.w	r3, r1, ip
  402e18:	42ab      	cmp	r3, r5
  402e1a:	fa00 f40e 	lsl.w	r4, r0, lr
  402e1e:	d909      	bls.n	402e34 <__udivmoddi4+0x1bc>
  402e20:	19ed      	adds	r5, r5, r7
  402e22:	f101 30ff 	add.w	r0, r1, #4294967295
  402e26:	f080 808a 	bcs.w	402f3e <__udivmoddi4+0x2c6>
  402e2a:	42ab      	cmp	r3, r5
  402e2c:	f240 8087 	bls.w	402f3e <__udivmoddi4+0x2c6>
  402e30:	3902      	subs	r1, #2
  402e32:	443d      	add	r5, r7
  402e34:	1aeb      	subs	r3, r5, r3
  402e36:	fa1f f588 	uxth.w	r5, r8
  402e3a:	fbb3 f0f2 	udiv	r0, r3, r2
  402e3e:	fb02 3310 	mls	r3, r2, r0, r3
  402e42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402e46:	fb00 f30c 	mul.w	r3, r0, ip
  402e4a:	42ab      	cmp	r3, r5
  402e4c:	d907      	bls.n	402e5e <__udivmoddi4+0x1e6>
  402e4e:	19ed      	adds	r5, r5, r7
  402e50:	f100 38ff 	add.w	r8, r0, #4294967295
  402e54:	d26f      	bcs.n	402f36 <__udivmoddi4+0x2be>
  402e56:	42ab      	cmp	r3, r5
  402e58:	d96d      	bls.n	402f36 <__udivmoddi4+0x2be>
  402e5a:	3802      	subs	r0, #2
  402e5c:	443d      	add	r5, r7
  402e5e:	1aeb      	subs	r3, r5, r3
  402e60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402e64:	e78f      	b.n	402d86 <__udivmoddi4+0x10e>
  402e66:	f1c1 0720 	rsb	r7, r1, #32
  402e6a:	fa22 f807 	lsr.w	r8, r2, r7
  402e6e:	408b      	lsls	r3, r1
  402e70:	fa05 f401 	lsl.w	r4, r5, r1
  402e74:	ea48 0303 	orr.w	r3, r8, r3
  402e78:	fa20 fe07 	lsr.w	lr, r0, r7
  402e7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402e80:	40fd      	lsrs	r5, r7
  402e82:	ea4e 0e04 	orr.w	lr, lr, r4
  402e86:	fbb5 f9fc 	udiv	r9, r5, ip
  402e8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402e8e:	fb0c 5519 	mls	r5, ip, r9, r5
  402e92:	fa1f f883 	uxth.w	r8, r3
  402e96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402e9a:	fb09 f408 	mul.w	r4, r9, r8
  402e9e:	42ac      	cmp	r4, r5
  402ea0:	fa02 f201 	lsl.w	r2, r2, r1
  402ea4:	fa00 fa01 	lsl.w	sl, r0, r1
  402ea8:	d908      	bls.n	402ebc <__udivmoddi4+0x244>
  402eaa:	18ed      	adds	r5, r5, r3
  402eac:	f109 30ff 	add.w	r0, r9, #4294967295
  402eb0:	d243      	bcs.n	402f3a <__udivmoddi4+0x2c2>
  402eb2:	42ac      	cmp	r4, r5
  402eb4:	d941      	bls.n	402f3a <__udivmoddi4+0x2c2>
  402eb6:	f1a9 0902 	sub.w	r9, r9, #2
  402eba:	441d      	add	r5, r3
  402ebc:	1b2d      	subs	r5, r5, r4
  402ebe:	fa1f fe8e 	uxth.w	lr, lr
  402ec2:	fbb5 f0fc 	udiv	r0, r5, ip
  402ec6:	fb0c 5510 	mls	r5, ip, r0, r5
  402eca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402ece:	fb00 f808 	mul.w	r8, r0, r8
  402ed2:	45a0      	cmp	r8, r4
  402ed4:	d907      	bls.n	402ee6 <__udivmoddi4+0x26e>
  402ed6:	18e4      	adds	r4, r4, r3
  402ed8:	f100 35ff 	add.w	r5, r0, #4294967295
  402edc:	d229      	bcs.n	402f32 <__udivmoddi4+0x2ba>
  402ede:	45a0      	cmp	r8, r4
  402ee0:	d927      	bls.n	402f32 <__udivmoddi4+0x2ba>
  402ee2:	3802      	subs	r0, #2
  402ee4:	441c      	add	r4, r3
  402ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402eea:	eba4 0408 	sub.w	r4, r4, r8
  402eee:	fba0 8902 	umull	r8, r9, r0, r2
  402ef2:	454c      	cmp	r4, r9
  402ef4:	46c6      	mov	lr, r8
  402ef6:	464d      	mov	r5, r9
  402ef8:	d315      	bcc.n	402f26 <__udivmoddi4+0x2ae>
  402efa:	d012      	beq.n	402f22 <__udivmoddi4+0x2aa>
  402efc:	b156      	cbz	r6, 402f14 <__udivmoddi4+0x29c>
  402efe:	ebba 030e 	subs.w	r3, sl, lr
  402f02:	eb64 0405 	sbc.w	r4, r4, r5
  402f06:	fa04 f707 	lsl.w	r7, r4, r7
  402f0a:	40cb      	lsrs	r3, r1
  402f0c:	431f      	orrs	r7, r3
  402f0e:	40cc      	lsrs	r4, r1
  402f10:	6037      	str	r7, [r6, #0]
  402f12:	6074      	str	r4, [r6, #4]
  402f14:	2100      	movs	r1, #0
  402f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f1a:	4618      	mov	r0, r3
  402f1c:	e6f8      	b.n	402d10 <__udivmoddi4+0x98>
  402f1e:	4690      	mov	r8, r2
  402f20:	e6e0      	b.n	402ce4 <__udivmoddi4+0x6c>
  402f22:	45c2      	cmp	sl, r8
  402f24:	d2ea      	bcs.n	402efc <__udivmoddi4+0x284>
  402f26:	ebb8 0e02 	subs.w	lr, r8, r2
  402f2a:	eb69 0503 	sbc.w	r5, r9, r3
  402f2e:	3801      	subs	r0, #1
  402f30:	e7e4      	b.n	402efc <__udivmoddi4+0x284>
  402f32:	4628      	mov	r0, r5
  402f34:	e7d7      	b.n	402ee6 <__udivmoddi4+0x26e>
  402f36:	4640      	mov	r0, r8
  402f38:	e791      	b.n	402e5e <__udivmoddi4+0x1e6>
  402f3a:	4681      	mov	r9, r0
  402f3c:	e7be      	b.n	402ebc <__udivmoddi4+0x244>
  402f3e:	4601      	mov	r1, r0
  402f40:	e778      	b.n	402e34 <__udivmoddi4+0x1bc>
  402f42:	3802      	subs	r0, #2
  402f44:	443c      	add	r4, r7
  402f46:	e745      	b.n	402dd4 <__udivmoddi4+0x15c>
  402f48:	4608      	mov	r0, r1
  402f4a:	e708      	b.n	402d5e <__udivmoddi4+0xe6>
  402f4c:	f1a8 0802 	sub.w	r8, r8, #2
  402f50:	443d      	add	r5, r7
  402f52:	e72b      	b.n	402dac <__udivmoddi4+0x134>

00402f54 <__aeabi_idiv0>:
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop

00402f58 <__libc_init_array>:
  402f58:	b570      	push	{r4, r5, r6, lr}
  402f5a:	4e0f      	ldr	r6, [pc, #60]	; (402f98 <__libc_init_array+0x40>)
  402f5c:	4d0f      	ldr	r5, [pc, #60]	; (402f9c <__libc_init_array+0x44>)
  402f5e:	1b76      	subs	r6, r6, r5
  402f60:	10b6      	asrs	r6, r6, #2
  402f62:	bf18      	it	ne
  402f64:	2400      	movne	r4, #0
  402f66:	d005      	beq.n	402f74 <__libc_init_array+0x1c>
  402f68:	3401      	adds	r4, #1
  402f6a:	f855 3b04 	ldr.w	r3, [r5], #4
  402f6e:	4798      	blx	r3
  402f70:	42a6      	cmp	r6, r4
  402f72:	d1f9      	bne.n	402f68 <__libc_init_array+0x10>
  402f74:	4e0a      	ldr	r6, [pc, #40]	; (402fa0 <__libc_init_array+0x48>)
  402f76:	4d0b      	ldr	r5, [pc, #44]	; (402fa4 <__libc_init_array+0x4c>)
  402f78:	1b76      	subs	r6, r6, r5
  402f7a:	f006 fc95 	bl	4098a8 <_init>
  402f7e:	10b6      	asrs	r6, r6, #2
  402f80:	bf18      	it	ne
  402f82:	2400      	movne	r4, #0
  402f84:	d006      	beq.n	402f94 <__libc_init_array+0x3c>
  402f86:	3401      	adds	r4, #1
  402f88:	f855 3b04 	ldr.w	r3, [r5], #4
  402f8c:	4798      	blx	r3
  402f8e:	42a6      	cmp	r6, r4
  402f90:	d1f9      	bne.n	402f86 <__libc_init_array+0x2e>
  402f92:	bd70      	pop	{r4, r5, r6, pc}
  402f94:	bd70      	pop	{r4, r5, r6, pc}
  402f96:	bf00      	nop
  402f98:	004098b4 	.word	0x004098b4
  402f9c:	004098b4 	.word	0x004098b4
  402fa0:	004098bc 	.word	0x004098bc
  402fa4:	004098b4 	.word	0x004098b4

00402fa8 <iprintf>:
  402fa8:	b40f      	push	{r0, r1, r2, r3}
  402faa:	b500      	push	{lr}
  402fac:	4907      	ldr	r1, [pc, #28]	; (402fcc <iprintf+0x24>)
  402fae:	b083      	sub	sp, #12
  402fb0:	ab04      	add	r3, sp, #16
  402fb2:	6808      	ldr	r0, [r1, #0]
  402fb4:	f853 2b04 	ldr.w	r2, [r3], #4
  402fb8:	6881      	ldr	r1, [r0, #8]
  402fba:	9301      	str	r3, [sp, #4]
  402fbc:	f001 fd5c 	bl	404a78 <_vfiprintf_r>
  402fc0:	b003      	add	sp, #12
  402fc2:	f85d eb04 	ldr.w	lr, [sp], #4
  402fc6:	b004      	add	sp, #16
  402fc8:	4770      	bx	lr
  402fca:	bf00      	nop
  402fcc:	2040003c 	.word	0x2040003c

00402fd0 <memcmp>:
  402fd0:	2a03      	cmp	r2, #3
  402fd2:	b470      	push	{r4, r5, r6}
  402fd4:	d922      	bls.n	40301c <memcmp+0x4c>
  402fd6:	ea40 0301 	orr.w	r3, r0, r1
  402fda:	079b      	lsls	r3, r3, #30
  402fdc:	d011      	beq.n	403002 <memcmp+0x32>
  402fde:	7803      	ldrb	r3, [r0, #0]
  402fe0:	780c      	ldrb	r4, [r1, #0]
  402fe2:	42a3      	cmp	r3, r4
  402fe4:	d11d      	bne.n	403022 <memcmp+0x52>
  402fe6:	440a      	add	r2, r1
  402fe8:	3101      	adds	r1, #1
  402fea:	e005      	b.n	402ff8 <memcmp+0x28>
  402fec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
  402ff4:	42a3      	cmp	r3, r4
  402ff6:	d114      	bne.n	403022 <memcmp+0x52>
  402ff8:	4291      	cmp	r1, r2
  402ffa:	d1f7      	bne.n	402fec <memcmp+0x1c>
  402ffc:	2000      	movs	r0, #0
  402ffe:	bc70      	pop	{r4, r5, r6}
  403000:	4770      	bx	lr
  403002:	680d      	ldr	r5, [r1, #0]
  403004:	6806      	ldr	r6, [r0, #0]
  403006:	42ae      	cmp	r6, r5
  403008:	460c      	mov	r4, r1
  40300a:	4603      	mov	r3, r0
  40300c:	f101 0104 	add.w	r1, r1, #4
  403010:	f100 0004 	add.w	r0, r0, #4
  403014:	d108      	bne.n	403028 <memcmp+0x58>
  403016:	3a04      	subs	r2, #4
  403018:	2a03      	cmp	r2, #3
  40301a:	d8f2      	bhi.n	403002 <memcmp+0x32>
  40301c:	2a00      	cmp	r2, #0
  40301e:	d1de      	bne.n	402fde <memcmp+0xe>
  403020:	e7ec      	b.n	402ffc <memcmp+0x2c>
  403022:	1b18      	subs	r0, r3, r4
  403024:	bc70      	pop	{r4, r5, r6}
  403026:	4770      	bx	lr
  403028:	4621      	mov	r1, r4
  40302a:	4618      	mov	r0, r3
  40302c:	e7d7      	b.n	402fde <memcmp+0xe>
  40302e:	bf00      	nop

00403030 <memcpy>:
  403030:	4684      	mov	ip, r0
  403032:	ea41 0300 	orr.w	r3, r1, r0
  403036:	f013 0303 	ands.w	r3, r3, #3
  40303a:	d16d      	bne.n	403118 <memcpy+0xe8>
  40303c:	3a40      	subs	r2, #64	; 0x40
  40303e:	d341      	bcc.n	4030c4 <memcpy+0x94>
  403040:	f851 3b04 	ldr.w	r3, [r1], #4
  403044:	f840 3b04 	str.w	r3, [r0], #4
  403048:	f851 3b04 	ldr.w	r3, [r1], #4
  40304c:	f840 3b04 	str.w	r3, [r0], #4
  403050:	f851 3b04 	ldr.w	r3, [r1], #4
  403054:	f840 3b04 	str.w	r3, [r0], #4
  403058:	f851 3b04 	ldr.w	r3, [r1], #4
  40305c:	f840 3b04 	str.w	r3, [r0], #4
  403060:	f851 3b04 	ldr.w	r3, [r1], #4
  403064:	f840 3b04 	str.w	r3, [r0], #4
  403068:	f851 3b04 	ldr.w	r3, [r1], #4
  40306c:	f840 3b04 	str.w	r3, [r0], #4
  403070:	f851 3b04 	ldr.w	r3, [r1], #4
  403074:	f840 3b04 	str.w	r3, [r0], #4
  403078:	f851 3b04 	ldr.w	r3, [r1], #4
  40307c:	f840 3b04 	str.w	r3, [r0], #4
  403080:	f851 3b04 	ldr.w	r3, [r1], #4
  403084:	f840 3b04 	str.w	r3, [r0], #4
  403088:	f851 3b04 	ldr.w	r3, [r1], #4
  40308c:	f840 3b04 	str.w	r3, [r0], #4
  403090:	f851 3b04 	ldr.w	r3, [r1], #4
  403094:	f840 3b04 	str.w	r3, [r0], #4
  403098:	f851 3b04 	ldr.w	r3, [r1], #4
  40309c:	f840 3b04 	str.w	r3, [r0], #4
  4030a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030a4:	f840 3b04 	str.w	r3, [r0], #4
  4030a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4030ac:	f840 3b04 	str.w	r3, [r0], #4
  4030b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030b4:	f840 3b04 	str.w	r3, [r0], #4
  4030b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4030bc:	f840 3b04 	str.w	r3, [r0], #4
  4030c0:	3a40      	subs	r2, #64	; 0x40
  4030c2:	d2bd      	bcs.n	403040 <memcpy+0x10>
  4030c4:	3230      	adds	r2, #48	; 0x30
  4030c6:	d311      	bcc.n	4030ec <memcpy+0xbc>
  4030c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4030cc:	f840 3b04 	str.w	r3, [r0], #4
  4030d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030d4:	f840 3b04 	str.w	r3, [r0], #4
  4030d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4030dc:	f840 3b04 	str.w	r3, [r0], #4
  4030e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030e4:	f840 3b04 	str.w	r3, [r0], #4
  4030e8:	3a10      	subs	r2, #16
  4030ea:	d2ed      	bcs.n	4030c8 <memcpy+0x98>
  4030ec:	320c      	adds	r2, #12
  4030ee:	d305      	bcc.n	4030fc <memcpy+0xcc>
  4030f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4030f4:	f840 3b04 	str.w	r3, [r0], #4
  4030f8:	3a04      	subs	r2, #4
  4030fa:	d2f9      	bcs.n	4030f0 <memcpy+0xc0>
  4030fc:	3204      	adds	r2, #4
  4030fe:	d008      	beq.n	403112 <memcpy+0xe2>
  403100:	07d2      	lsls	r2, r2, #31
  403102:	bf1c      	itt	ne
  403104:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403108:	f800 3b01 	strbne.w	r3, [r0], #1
  40310c:	d301      	bcc.n	403112 <memcpy+0xe2>
  40310e:	880b      	ldrh	r3, [r1, #0]
  403110:	8003      	strh	r3, [r0, #0]
  403112:	4660      	mov	r0, ip
  403114:	4770      	bx	lr
  403116:	bf00      	nop
  403118:	2a08      	cmp	r2, #8
  40311a:	d313      	bcc.n	403144 <memcpy+0x114>
  40311c:	078b      	lsls	r3, r1, #30
  40311e:	d08d      	beq.n	40303c <memcpy+0xc>
  403120:	f010 0303 	ands.w	r3, r0, #3
  403124:	d08a      	beq.n	40303c <memcpy+0xc>
  403126:	f1c3 0304 	rsb	r3, r3, #4
  40312a:	1ad2      	subs	r2, r2, r3
  40312c:	07db      	lsls	r3, r3, #31
  40312e:	bf1c      	itt	ne
  403130:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403134:	f800 3b01 	strbne.w	r3, [r0], #1
  403138:	d380      	bcc.n	40303c <memcpy+0xc>
  40313a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40313e:	f820 3b02 	strh.w	r3, [r0], #2
  403142:	e77b      	b.n	40303c <memcpy+0xc>
  403144:	3a04      	subs	r2, #4
  403146:	d3d9      	bcc.n	4030fc <memcpy+0xcc>
  403148:	3a01      	subs	r2, #1
  40314a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40314e:	f800 3b01 	strb.w	r3, [r0], #1
  403152:	d2f9      	bcs.n	403148 <memcpy+0x118>
  403154:	780b      	ldrb	r3, [r1, #0]
  403156:	7003      	strb	r3, [r0, #0]
  403158:	784b      	ldrb	r3, [r1, #1]
  40315a:	7043      	strb	r3, [r0, #1]
  40315c:	788b      	ldrb	r3, [r1, #2]
  40315e:	7083      	strb	r3, [r0, #2]
  403160:	4660      	mov	r0, ip
  403162:	4770      	bx	lr

00403164 <memset>:
  403164:	b470      	push	{r4, r5, r6}
  403166:	0786      	lsls	r6, r0, #30
  403168:	d046      	beq.n	4031f8 <memset+0x94>
  40316a:	1e54      	subs	r4, r2, #1
  40316c:	2a00      	cmp	r2, #0
  40316e:	d041      	beq.n	4031f4 <memset+0x90>
  403170:	b2ca      	uxtb	r2, r1
  403172:	4603      	mov	r3, r0
  403174:	e002      	b.n	40317c <memset+0x18>
  403176:	f114 34ff 	adds.w	r4, r4, #4294967295
  40317a:	d33b      	bcc.n	4031f4 <memset+0x90>
  40317c:	f803 2b01 	strb.w	r2, [r3], #1
  403180:	079d      	lsls	r5, r3, #30
  403182:	d1f8      	bne.n	403176 <memset+0x12>
  403184:	2c03      	cmp	r4, #3
  403186:	d92e      	bls.n	4031e6 <memset+0x82>
  403188:	b2cd      	uxtb	r5, r1
  40318a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40318e:	2c0f      	cmp	r4, #15
  403190:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403194:	d919      	bls.n	4031ca <memset+0x66>
  403196:	f103 0210 	add.w	r2, r3, #16
  40319a:	4626      	mov	r6, r4
  40319c:	3e10      	subs	r6, #16
  40319e:	2e0f      	cmp	r6, #15
  4031a0:	f842 5c10 	str.w	r5, [r2, #-16]
  4031a4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4031a8:	f842 5c08 	str.w	r5, [r2, #-8]
  4031ac:	f842 5c04 	str.w	r5, [r2, #-4]
  4031b0:	f102 0210 	add.w	r2, r2, #16
  4031b4:	d8f2      	bhi.n	40319c <memset+0x38>
  4031b6:	f1a4 0210 	sub.w	r2, r4, #16
  4031ba:	f022 020f 	bic.w	r2, r2, #15
  4031be:	f004 040f 	and.w	r4, r4, #15
  4031c2:	3210      	adds	r2, #16
  4031c4:	2c03      	cmp	r4, #3
  4031c6:	4413      	add	r3, r2
  4031c8:	d90d      	bls.n	4031e6 <memset+0x82>
  4031ca:	461e      	mov	r6, r3
  4031cc:	4622      	mov	r2, r4
  4031ce:	3a04      	subs	r2, #4
  4031d0:	2a03      	cmp	r2, #3
  4031d2:	f846 5b04 	str.w	r5, [r6], #4
  4031d6:	d8fa      	bhi.n	4031ce <memset+0x6a>
  4031d8:	1f22      	subs	r2, r4, #4
  4031da:	f022 0203 	bic.w	r2, r2, #3
  4031de:	3204      	adds	r2, #4
  4031e0:	4413      	add	r3, r2
  4031e2:	f004 0403 	and.w	r4, r4, #3
  4031e6:	b12c      	cbz	r4, 4031f4 <memset+0x90>
  4031e8:	b2c9      	uxtb	r1, r1
  4031ea:	441c      	add	r4, r3
  4031ec:	f803 1b01 	strb.w	r1, [r3], #1
  4031f0:	429c      	cmp	r4, r3
  4031f2:	d1fb      	bne.n	4031ec <memset+0x88>
  4031f4:	bc70      	pop	{r4, r5, r6}
  4031f6:	4770      	bx	lr
  4031f8:	4614      	mov	r4, r2
  4031fa:	4603      	mov	r3, r0
  4031fc:	e7c2      	b.n	403184 <memset+0x20>
  4031fe:	bf00      	nop

00403200 <_puts_r>:
  403200:	b5f0      	push	{r4, r5, r6, r7, lr}
  403202:	4605      	mov	r5, r0
  403204:	b089      	sub	sp, #36	; 0x24
  403206:	4608      	mov	r0, r1
  403208:	460c      	mov	r4, r1
  40320a:	f000 f959 	bl	4034c0 <strlen>
  40320e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403210:	4f21      	ldr	r7, [pc, #132]	; (403298 <_puts_r+0x98>)
  403212:	9404      	str	r4, [sp, #16]
  403214:	2601      	movs	r6, #1
  403216:	1c44      	adds	r4, r0, #1
  403218:	a904      	add	r1, sp, #16
  40321a:	2202      	movs	r2, #2
  40321c:	9403      	str	r4, [sp, #12]
  40321e:	9005      	str	r0, [sp, #20]
  403220:	68ac      	ldr	r4, [r5, #8]
  403222:	9706      	str	r7, [sp, #24]
  403224:	9607      	str	r6, [sp, #28]
  403226:	9101      	str	r1, [sp, #4]
  403228:	9202      	str	r2, [sp, #8]
  40322a:	b353      	cbz	r3, 403282 <_puts_r+0x82>
  40322c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40322e:	f013 0f01 	tst.w	r3, #1
  403232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403236:	b29a      	uxth	r2, r3
  403238:	d101      	bne.n	40323e <_puts_r+0x3e>
  40323a:	0590      	lsls	r0, r2, #22
  40323c:	d525      	bpl.n	40328a <_puts_r+0x8a>
  40323e:	0491      	lsls	r1, r2, #18
  403240:	d406      	bmi.n	403250 <_puts_r+0x50>
  403242:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40324c:	81a3      	strh	r3, [r4, #12]
  40324e:	6662      	str	r2, [r4, #100]	; 0x64
  403250:	4628      	mov	r0, r5
  403252:	aa01      	add	r2, sp, #4
  403254:	4621      	mov	r1, r4
  403256:	f003 fdd1 	bl	406dfc <__sfvwrite_r>
  40325a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40325c:	2800      	cmp	r0, #0
  40325e:	bf0c      	ite	eq
  403260:	250a      	moveq	r5, #10
  403262:	f04f 35ff 	movne.w	r5, #4294967295
  403266:	07da      	lsls	r2, r3, #31
  403268:	d402      	bmi.n	403270 <_puts_r+0x70>
  40326a:	89a3      	ldrh	r3, [r4, #12]
  40326c:	059b      	lsls	r3, r3, #22
  40326e:	d502      	bpl.n	403276 <_puts_r+0x76>
  403270:	4628      	mov	r0, r5
  403272:	b009      	add	sp, #36	; 0x24
  403274:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403276:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403278:	f003 ff84 	bl	407184 <__retarget_lock_release_recursive>
  40327c:	4628      	mov	r0, r5
  40327e:	b009      	add	sp, #36	; 0x24
  403280:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403282:	4628      	mov	r0, r5
  403284:	f003 fbae 	bl	4069e4 <__sinit>
  403288:	e7d0      	b.n	40322c <_puts_r+0x2c>
  40328a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40328c:	f003 ff78 	bl	407180 <__retarget_lock_acquire_recursive>
  403290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403294:	b29a      	uxth	r2, r3
  403296:	e7d2      	b.n	40323e <_puts_r+0x3e>
  403298:	004095a0 	.word	0x004095a0

0040329c <puts>:
  40329c:	4b02      	ldr	r3, [pc, #8]	; (4032a8 <puts+0xc>)
  40329e:	4601      	mov	r1, r0
  4032a0:	6818      	ldr	r0, [r3, #0]
  4032a2:	f7ff bfad 	b.w	403200 <_puts_r>
  4032a6:	bf00      	nop
  4032a8:	2040003c 	.word	0x2040003c

004032ac <setbuf>:
  4032ac:	2900      	cmp	r1, #0
  4032ae:	bf0c      	ite	eq
  4032b0:	2202      	moveq	r2, #2
  4032b2:	2200      	movne	r2, #0
  4032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4032b8:	f000 b800 	b.w	4032bc <setvbuf>

004032bc <setvbuf>:
  4032bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4032c0:	4c61      	ldr	r4, [pc, #388]	; (403448 <setvbuf+0x18c>)
  4032c2:	6825      	ldr	r5, [r4, #0]
  4032c4:	b083      	sub	sp, #12
  4032c6:	4604      	mov	r4, r0
  4032c8:	460f      	mov	r7, r1
  4032ca:	4690      	mov	r8, r2
  4032cc:	461e      	mov	r6, r3
  4032ce:	b115      	cbz	r5, 4032d6 <setvbuf+0x1a>
  4032d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4032d2:	2b00      	cmp	r3, #0
  4032d4:	d064      	beq.n	4033a0 <setvbuf+0xe4>
  4032d6:	f1b8 0f02 	cmp.w	r8, #2
  4032da:	d006      	beq.n	4032ea <setvbuf+0x2e>
  4032dc:	f1b8 0f01 	cmp.w	r8, #1
  4032e0:	f200 809f 	bhi.w	403422 <setvbuf+0x166>
  4032e4:	2e00      	cmp	r6, #0
  4032e6:	f2c0 809c 	blt.w	403422 <setvbuf+0x166>
  4032ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4032ec:	07d8      	lsls	r0, r3, #31
  4032ee:	d534      	bpl.n	40335a <setvbuf+0x9e>
  4032f0:	4621      	mov	r1, r4
  4032f2:	4628      	mov	r0, r5
  4032f4:	f003 fb1e 	bl	406934 <_fflush_r>
  4032f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4032fa:	b141      	cbz	r1, 40330e <setvbuf+0x52>
  4032fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403300:	4299      	cmp	r1, r3
  403302:	d002      	beq.n	40330a <setvbuf+0x4e>
  403304:	4628      	mov	r0, r5
  403306:	f003 fc93 	bl	406c30 <_free_r>
  40330a:	2300      	movs	r3, #0
  40330c:	6323      	str	r3, [r4, #48]	; 0x30
  40330e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403312:	2200      	movs	r2, #0
  403314:	61a2      	str	r2, [r4, #24]
  403316:	6062      	str	r2, [r4, #4]
  403318:	061a      	lsls	r2, r3, #24
  40331a:	d43a      	bmi.n	403392 <setvbuf+0xd6>
  40331c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403320:	f023 0303 	bic.w	r3, r3, #3
  403324:	f1b8 0f02 	cmp.w	r8, #2
  403328:	81a3      	strh	r3, [r4, #12]
  40332a:	d01d      	beq.n	403368 <setvbuf+0xac>
  40332c:	ab01      	add	r3, sp, #4
  40332e:	466a      	mov	r2, sp
  403330:	4621      	mov	r1, r4
  403332:	4628      	mov	r0, r5
  403334:	f003 ff28 	bl	407188 <__swhatbuf_r>
  403338:	89a3      	ldrh	r3, [r4, #12]
  40333a:	4318      	orrs	r0, r3
  40333c:	81a0      	strh	r0, [r4, #12]
  40333e:	2e00      	cmp	r6, #0
  403340:	d132      	bne.n	4033a8 <setvbuf+0xec>
  403342:	9e00      	ldr	r6, [sp, #0]
  403344:	4630      	mov	r0, r6
  403346:	f003 ff97 	bl	407278 <malloc>
  40334a:	4607      	mov	r7, r0
  40334c:	2800      	cmp	r0, #0
  40334e:	d06b      	beq.n	403428 <setvbuf+0x16c>
  403350:	89a3      	ldrh	r3, [r4, #12]
  403352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403356:	81a3      	strh	r3, [r4, #12]
  403358:	e028      	b.n	4033ac <setvbuf+0xf0>
  40335a:	89a3      	ldrh	r3, [r4, #12]
  40335c:	0599      	lsls	r1, r3, #22
  40335e:	d4c7      	bmi.n	4032f0 <setvbuf+0x34>
  403360:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403362:	f003 ff0d 	bl	407180 <__retarget_lock_acquire_recursive>
  403366:	e7c3      	b.n	4032f0 <setvbuf+0x34>
  403368:	2500      	movs	r5, #0
  40336a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40336c:	2600      	movs	r6, #0
  40336e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403372:	f043 0302 	orr.w	r3, r3, #2
  403376:	2001      	movs	r0, #1
  403378:	60a6      	str	r6, [r4, #8]
  40337a:	07ce      	lsls	r6, r1, #31
  40337c:	81a3      	strh	r3, [r4, #12]
  40337e:	6022      	str	r2, [r4, #0]
  403380:	6122      	str	r2, [r4, #16]
  403382:	6160      	str	r0, [r4, #20]
  403384:	d401      	bmi.n	40338a <setvbuf+0xce>
  403386:	0598      	lsls	r0, r3, #22
  403388:	d53e      	bpl.n	403408 <setvbuf+0x14c>
  40338a:	4628      	mov	r0, r5
  40338c:	b003      	add	sp, #12
  40338e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403392:	6921      	ldr	r1, [r4, #16]
  403394:	4628      	mov	r0, r5
  403396:	f003 fc4b 	bl	406c30 <_free_r>
  40339a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40339e:	e7bd      	b.n	40331c <setvbuf+0x60>
  4033a0:	4628      	mov	r0, r5
  4033a2:	f003 fb1f 	bl	4069e4 <__sinit>
  4033a6:	e796      	b.n	4032d6 <setvbuf+0x1a>
  4033a8:	2f00      	cmp	r7, #0
  4033aa:	d0cb      	beq.n	403344 <setvbuf+0x88>
  4033ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4033ae:	2b00      	cmp	r3, #0
  4033b0:	d033      	beq.n	40341a <setvbuf+0x15e>
  4033b2:	9b00      	ldr	r3, [sp, #0]
  4033b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4033b8:	6027      	str	r7, [r4, #0]
  4033ba:	429e      	cmp	r6, r3
  4033bc:	bf1c      	itt	ne
  4033be:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4033c2:	81a2      	strhne	r2, [r4, #12]
  4033c4:	f1b8 0f01 	cmp.w	r8, #1
  4033c8:	bf04      	itt	eq
  4033ca:	f042 0201 	orreq.w	r2, r2, #1
  4033ce:	81a2      	strheq	r2, [r4, #12]
  4033d0:	b292      	uxth	r2, r2
  4033d2:	f012 0308 	ands.w	r3, r2, #8
  4033d6:	6127      	str	r7, [r4, #16]
  4033d8:	6166      	str	r6, [r4, #20]
  4033da:	d00e      	beq.n	4033fa <setvbuf+0x13e>
  4033dc:	07d1      	lsls	r1, r2, #31
  4033de:	d51a      	bpl.n	403416 <setvbuf+0x15a>
  4033e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4033e2:	4276      	negs	r6, r6
  4033e4:	2300      	movs	r3, #0
  4033e6:	f015 0501 	ands.w	r5, r5, #1
  4033ea:	61a6      	str	r6, [r4, #24]
  4033ec:	60a3      	str	r3, [r4, #8]
  4033ee:	d009      	beq.n	403404 <setvbuf+0x148>
  4033f0:	2500      	movs	r5, #0
  4033f2:	4628      	mov	r0, r5
  4033f4:	b003      	add	sp, #12
  4033f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033fa:	60a3      	str	r3, [r4, #8]
  4033fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4033fe:	f015 0501 	ands.w	r5, r5, #1
  403402:	d1f5      	bne.n	4033f0 <setvbuf+0x134>
  403404:	0593      	lsls	r3, r2, #22
  403406:	d4c0      	bmi.n	40338a <setvbuf+0xce>
  403408:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40340a:	f003 febb 	bl	407184 <__retarget_lock_release_recursive>
  40340e:	4628      	mov	r0, r5
  403410:	b003      	add	sp, #12
  403412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403416:	60a6      	str	r6, [r4, #8]
  403418:	e7f0      	b.n	4033fc <setvbuf+0x140>
  40341a:	4628      	mov	r0, r5
  40341c:	f003 fae2 	bl	4069e4 <__sinit>
  403420:	e7c7      	b.n	4033b2 <setvbuf+0xf6>
  403422:	f04f 35ff 	mov.w	r5, #4294967295
  403426:	e7b0      	b.n	40338a <setvbuf+0xce>
  403428:	f8dd 9000 	ldr.w	r9, [sp]
  40342c:	45b1      	cmp	r9, r6
  40342e:	d004      	beq.n	40343a <setvbuf+0x17e>
  403430:	4648      	mov	r0, r9
  403432:	f003 ff21 	bl	407278 <malloc>
  403436:	4607      	mov	r7, r0
  403438:	b920      	cbnz	r0, 403444 <setvbuf+0x188>
  40343a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40343e:	f04f 35ff 	mov.w	r5, #4294967295
  403442:	e792      	b.n	40336a <setvbuf+0xae>
  403444:	464e      	mov	r6, r9
  403446:	e783      	b.n	403350 <setvbuf+0x94>
  403448:	2040003c 	.word	0x2040003c

0040344c <sprintf>:
  40344c:	b40e      	push	{r1, r2, r3}
  40344e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403450:	b09c      	sub	sp, #112	; 0x70
  403452:	ab21      	add	r3, sp, #132	; 0x84
  403454:	490f      	ldr	r1, [pc, #60]	; (403494 <sprintf+0x48>)
  403456:	f853 2b04 	ldr.w	r2, [r3], #4
  40345a:	9301      	str	r3, [sp, #4]
  40345c:	4605      	mov	r5, r0
  40345e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403462:	6808      	ldr	r0, [r1, #0]
  403464:	9502      	str	r5, [sp, #8]
  403466:	f44f 7702 	mov.w	r7, #520	; 0x208
  40346a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40346e:	a902      	add	r1, sp, #8
  403470:	9506      	str	r5, [sp, #24]
  403472:	f8ad 7014 	strh.w	r7, [sp, #20]
  403476:	9404      	str	r4, [sp, #16]
  403478:	9407      	str	r4, [sp, #28]
  40347a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40347e:	f000 f88d 	bl	40359c <_svfprintf_r>
  403482:	9b02      	ldr	r3, [sp, #8]
  403484:	2200      	movs	r2, #0
  403486:	701a      	strb	r2, [r3, #0]
  403488:	b01c      	add	sp, #112	; 0x70
  40348a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40348e:	b003      	add	sp, #12
  403490:	4770      	bx	lr
  403492:	bf00      	nop
  403494:	2040003c 	.word	0x2040003c
	...

004034c0 <strlen>:
  4034c0:	f890 f000 	pld	[r0]
  4034c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4034c8:	f020 0107 	bic.w	r1, r0, #7
  4034cc:	f06f 0c00 	mvn.w	ip, #0
  4034d0:	f010 0407 	ands.w	r4, r0, #7
  4034d4:	f891 f020 	pld	[r1, #32]
  4034d8:	f040 8049 	bne.w	40356e <strlen+0xae>
  4034dc:	f04f 0400 	mov.w	r4, #0
  4034e0:	f06f 0007 	mvn.w	r0, #7
  4034e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4034e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4034ec:	f100 0008 	add.w	r0, r0, #8
  4034f0:	fa82 f24c 	uadd8	r2, r2, ip
  4034f4:	faa4 f28c 	sel	r2, r4, ip
  4034f8:	fa83 f34c 	uadd8	r3, r3, ip
  4034fc:	faa2 f38c 	sel	r3, r2, ip
  403500:	bb4b      	cbnz	r3, 403556 <strlen+0x96>
  403502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403506:	fa82 f24c 	uadd8	r2, r2, ip
  40350a:	f100 0008 	add.w	r0, r0, #8
  40350e:	faa4 f28c 	sel	r2, r4, ip
  403512:	fa83 f34c 	uadd8	r3, r3, ip
  403516:	faa2 f38c 	sel	r3, r2, ip
  40351a:	b9e3      	cbnz	r3, 403556 <strlen+0x96>
  40351c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403520:	fa82 f24c 	uadd8	r2, r2, ip
  403524:	f100 0008 	add.w	r0, r0, #8
  403528:	faa4 f28c 	sel	r2, r4, ip
  40352c:	fa83 f34c 	uadd8	r3, r3, ip
  403530:	faa2 f38c 	sel	r3, r2, ip
  403534:	b97b      	cbnz	r3, 403556 <strlen+0x96>
  403536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40353a:	f101 0120 	add.w	r1, r1, #32
  40353e:	fa82 f24c 	uadd8	r2, r2, ip
  403542:	f100 0008 	add.w	r0, r0, #8
  403546:	faa4 f28c 	sel	r2, r4, ip
  40354a:	fa83 f34c 	uadd8	r3, r3, ip
  40354e:	faa2 f38c 	sel	r3, r2, ip
  403552:	2b00      	cmp	r3, #0
  403554:	d0c6      	beq.n	4034e4 <strlen+0x24>
  403556:	2a00      	cmp	r2, #0
  403558:	bf04      	itt	eq
  40355a:	3004      	addeq	r0, #4
  40355c:	461a      	moveq	r2, r3
  40355e:	ba12      	rev	r2, r2
  403560:	fab2 f282 	clz	r2, r2
  403564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40356c:	4770      	bx	lr
  40356e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403572:	f004 0503 	and.w	r5, r4, #3
  403576:	f1c4 0000 	rsb	r0, r4, #0
  40357a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40357e:	f014 0f04 	tst.w	r4, #4
  403582:	f891 f040 	pld	[r1, #64]	; 0x40
  403586:	fa0c f505 	lsl.w	r5, ip, r5
  40358a:	ea62 0205 	orn	r2, r2, r5
  40358e:	bf1c      	itt	ne
  403590:	ea63 0305 	ornne	r3, r3, r5
  403594:	4662      	movne	r2, ip
  403596:	f04f 0400 	mov.w	r4, #0
  40359a:	e7a9      	b.n	4034f0 <strlen+0x30>

0040359c <_svfprintf_r>:
  40359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a0:	b0c3      	sub	sp, #268	; 0x10c
  4035a2:	460c      	mov	r4, r1
  4035a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4035a6:	4692      	mov	sl, r2
  4035a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4035aa:	900c      	str	r0, [sp, #48]	; 0x30
  4035ac:	f003 fdd6 	bl	40715c <_localeconv_r>
  4035b0:	6803      	ldr	r3, [r0, #0]
  4035b2:	931a      	str	r3, [sp, #104]	; 0x68
  4035b4:	4618      	mov	r0, r3
  4035b6:	f7ff ff83 	bl	4034c0 <strlen>
  4035ba:	89a3      	ldrh	r3, [r4, #12]
  4035bc:	9019      	str	r0, [sp, #100]	; 0x64
  4035be:	0619      	lsls	r1, r3, #24
  4035c0:	d503      	bpl.n	4035ca <_svfprintf_r+0x2e>
  4035c2:	6923      	ldr	r3, [r4, #16]
  4035c4:	2b00      	cmp	r3, #0
  4035c6:	f001 8003 	beq.w	4045d0 <_svfprintf_r+0x1034>
  4035ca:	2300      	movs	r3, #0
  4035cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4035d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4035d2:	9315      	str	r3, [sp, #84]	; 0x54
  4035d4:	9314      	str	r3, [sp, #80]	; 0x50
  4035d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4035d8:	9326      	str	r3, [sp, #152]	; 0x98
  4035da:	9318      	str	r3, [sp, #96]	; 0x60
  4035dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4035de:	9309      	str	r3, [sp, #36]	; 0x24
  4035e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4035e4:	46c8      	mov	r8, r9
  4035e6:	9316      	str	r3, [sp, #88]	; 0x58
  4035e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4035ea:	f89a 3000 	ldrb.w	r3, [sl]
  4035ee:	4654      	mov	r4, sl
  4035f0:	b1e3      	cbz	r3, 40362c <_svfprintf_r+0x90>
  4035f2:	2b25      	cmp	r3, #37	; 0x25
  4035f4:	d102      	bne.n	4035fc <_svfprintf_r+0x60>
  4035f6:	e019      	b.n	40362c <_svfprintf_r+0x90>
  4035f8:	2b25      	cmp	r3, #37	; 0x25
  4035fa:	d003      	beq.n	403604 <_svfprintf_r+0x68>
  4035fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403600:	2b00      	cmp	r3, #0
  403602:	d1f9      	bne.n	4035f8 <_svfprintf_r+0x5c>
  403604:	eba4 050a 	sub.w	r5, r4, sl
  403608:	b185      	cbz	r5, 40362c <_svfprintf_r+0x90>
  40360a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40360c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40360e:	f8c8 a000 	str.w	sl, [r8]
  403612:	3301      	adds	r3, #1
  403614:	442a      	add	r2, r5
  403616:	2b07      	cmp	r3, #7
  403618:	f8c8 5004 	str.w	r5, [r8, #4]
  40361c:	9227      	str	r2, [sp, #156]	; 0x9c
  40361e:	9326      	str	r3, [sp, #152]	; 0x98
  403620:	dc7f      	bgt.n	403722 <_svfprintf_r+0x186>
  403622:	f108 0808 	add.w	r8, r8, #8
  403626:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403628:	442b      	add	r3, r5
  40362a:	9309      	str	r3, [sp, #36]	; 0x24
  40362c:	7823      	ldrb	r3, [r4, #0]
  40362e:	2b00      	cmp	r3, #0
  403630:	d07f      	beq.n	403732 <_svfprintf_r+0x196>
  403632:	2300      	movs	r3, #0
  403634:	461a      	mov	r2, r3
  403636:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40363a:	4619      	mov	r1, r3
  40363c:	930d      	str	r3, [sp, #52]	; 0x34
  40363e:	469b      	mov	fp, r3
  403640:	f04f 30ff 	mov.w	r0, #4294967295
  403644:	7863      	ldrb	r3, [r4, #1]
  403646:	900a      	str	r0, [sp, #40]	; 0x28
  403648:	f104 0a01 	add.w	sl, r4, #1
  40364c:	f10a 0a01 	add.w	sl, sl, #1
  403650:	f1a3 0020 	sub.w	r0, r3, #32
  403654:	2858      	cmp	r0, #88	; 0x58
  403656:	f200 83c1 	bhi.w	403ddc <_svfprintf_r+0x840>
  40365a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40365e:	0238      	.short	0x0238
  403660:	03bf03bf 	.word	0x03bf03bf
  403664:	03bf0240 	.word	0x03bf0240
  403668:	03bf03bf 	.word	0x03bf03bf
  40366c:	03bf03bf 	.word	0x03bf03bf
  403670:	024503bf 	.word	0x024503bf
  403674:	03bf0203 	.word	0x03bf0203
  403678:	026b005d 	.word	0x026b005d
  40367c:	028603bf 	.word	0x028603bf
  403680:	039d039d 	.word	0x039d039d
  403684:	039d039d 	.word	0x039d039d
  403688:	039d039d 	.word	0x039d039d
  40368c:	039d039d 	.word	0x039d039d
  403690:	03bf039d 	.word	0x03bf039d
  403694:	03bf03bf 	.word	0x03bf03bf
  403698:	03bf03bf 	.word	0x03bf03bf
  40369c:	03bf03bf 	.word	0x03bf03bf
  4036a0:	03bf03bf 	.word	0x03bf03bf
  4036a4:	033703bf 	.word	0x033703bf
  4036a8:	03bf0357 	.word	0x03bf0357
  4036ac:	03bf0357 	.word	0x03bf0357
  4036b0:	03bf03bf 	.word	0x03bf03bf
  4036b4:	039803bf 	.word	0x039803bf
  4036b8:	03bf03bf 	.word	0x03bf03bf
  4036bc:	03bf03ad 	.word	0x03bf03ad
  4036c0:	03bf03bf 	.word	0x03bf03bf
  4036c4:	03bf03bf 	.word	0x03bf03bf
  4036c8:	03bf0259 	.word	0x03bf0259
  4036cc:	031e03bf 	.word	0x031e03bf
  4036d0:	03bf03bf 	.word	0x03bf03bf
  4036d4:	03bf03bf 	.word	0x03bf03bf
  4036d8:	03bf03bf 	.word	0x03bf03bf
  4036dc:	03bf03bf 	.word	0x03bf03bf
  4036e0:	03bf03bf 	.word	0x03bf03bf
  4036e4:	02db02c6 	.word	0x02db02c6
  4036e8:	03570357 	.word	0x03570357
  4036ec:	028b0357 	.word	0x028b0357
  4036f0:	03bf02db 	.word	0x03bf02db
  4036f4:	029003bf 	.word	0x029003bf
  4036f8:	029d03bf 	.word	0x029d03bf
  4036fc:	02b401cc 	.word	0x02b401cc
  403700:	03bf0208 	.word	0x03bf0208
  403704:	03bf01e1 	.word	0x03bf01e1
  403708:	03bf007e 	.word	0x03bf007e
  40370c:	020d03bf 	.word	0x020d03bf
  403710:	980d      	ldr	r0, [sp, #52]	; 0x34
  403712:	930f      	str	r3, [sp, #60]	; 0x3c
  403714:	4240      	negs	r0, r0
  403716:	900d      	str	r0, [sp, #52]	; 0x34
  403718:	f04b 0b04 	orr.w	fp, fp, #4
  40371c:	f89a 3000 	ldrb.w	r3, [sl]
  403720:	e794      	b.n	40364c <_svfprintf_r+0xb0>
  403722:	aa25      	add	r2, sp, #148	; 0x94
  403724:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403726:	980c      	ldr	r0, [sp, #48]	; 0x30
  403728:	f004 fe30 	bl	40838c <__ssprint_r>
  40372c:	b940      	cbnz	r0, 403740 <_svfprintf_r+0x1a4>
  40372e:	46c8      	mov	r8, r9
  403730:	e779      	b.n	403626 <_svfprintf_r+0x8a>
  403732:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403734:	b123      	cbz	r3, 403740 <_svfprintf_r+0x1a4>
  403736:	980c      	ldr	r0, [sp, #48]	; 0x30
  403738:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40373a:	aa25      	add	r2, sp, #148	; 0x94
  40373c:	f004 fe26 	bl	40838c <__ssprint_r>
  403740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403742:	899b      	ldrh	r3, [r3, #12]
  403744:	f013 0f40 	tst.w	r3, #64	; 0x40
  403748:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40374a:	bf18      	it	ne
  40374c:	f04f 33ff 	movne.w	r3, #4294967295
  403750:	9309      	str	r3, [sp, #36]	; 0x24
  403752:	9809      	ldr	r0, [sp, #36]	; 0x24
  403754:	b043      	add	sp, #268	; 0x10c
  403756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40375a:	f01b 0f20 	tst.w	fp, #32
  40375e:	9311      	str	r3, [sp, #68]	; 0x44
  403760:	f040 81dd 	bne.w	403b1e <_svfprintf_r+0x582>
  403764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403766:	f01b 0f10 	tst.w	fp, #16
  40376a:	4613      	mov	r3, r2
  40376c:	f040 856e 	bne.w	40424c <_svfprintf_r+0xcb0>
  403770:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403774:	f000 856a 	beq.w	40424c <_svfprintf_r+0xcb0>
  403778:	8814      	ldrh	r4, [r2, #0]
  40377a:	3204      	adds	r2, #4
  40377c:	2500      	movs	r5, #0
  40377e:	2301      	movs	r3, #1
  403780:	920f      	str	r2, [sp, #60]	; 0x3c
  403782:	2700      	movs	r7, #0
  403784:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403788:	990a      	ldr	r1, [sp, #40]	; 0x28
  40378a:	1c4a      	adds	r2, r1, #1
  40378c:	f000 8265 	beq.w	403c5a <_svfprintf_r+0x6be>
  403790:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403794:	9207      	str	r2, [sp, #28]
  403796:	ea54 0205 	orrs.w	r2, r4, r5
  40379a:	f040 8264 	bne.w	403c66 <_svfprintf_r+0x6ca>
  40379e:	2900      	cmp	r1, #0
  4037a0:	f040 843c 	bne.w	40401c <_svfprintf_r+0xa80>
  4037a4:	2b00      	cmp	r3, #0
  4037a6:	f040 84d7 	bne.w	404158 <_svfprintf_r+0xbbc>
  4037aa:	f01b 0301 	ands.w	r3, fp, #1
  4037ae:	930e      	str	r3, [sp, #56]	; 0x38
  4037b0:	f000 8604 	beq.w	4043bc <_svfprintf_r+0xe20>
  4037b4:	ae42      	add	r6, sp, #264	; 0x108
  4037b6:	2330      	movs	r3, #48	; 0x30
  4037b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4037bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4037c0:	4293      	cmp	r3, r2
  4037c2:	bfb8      	it	lt
  4037c4:	4613      	movlt	r3, r2
  4037c6:	9308      	str	r3, [sp, #32]
  4037c8:	2300      	movs	r3, #0
  4037ca:	9312      	str	r3, [sp, #72]	; 0x48
  4037cc:	b117      	cbz	r7, 4037d4 <_svfprintf_r+0x238>
  4037ce:	9b08      	ldr	r3, [sp, #32]
  4037d0:	3301      	adds	r3, #1
  4037d2:	9308      	str	r3, [sp, #32]
  4037d4:	9b07      	ldr	r3, [sp, #28]
  4037d6:	f013 0302 	ands.w	r3, r3, #2
  4037da:	9310      	str	r3, [sp, #64]	; 0x40
  4037dc:	d002      	beq.n	4037e4 <_svfprintf_r+0x248>
  4037de:	9b08      	ldr	r3, [sp, #32]
  4037e0:	3302      	adds	r3, #2
  4037e2:	9308      	str	r3, [sp, #32]
  4037e4:	9b07      	ldr	r3, [sp, #28]
  4037e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4037ea:	f040 830e 	bne.w	403e0a <_svfprintf_r+0x86e>
  4037ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4037f0:	9a08      	ldr	r2, [sp, #32]
  4037f2:	eba3 0b02 	sub.w	fp, r3, r2
  4037f6:	f1bb 0f00 	cmp.w	fp, #0
  4037fa:	f340 8306 	ble.w	403e0a <_svfprintf_r+0x86e>
  4037fe:	f1bb 0f10 	cmp.w	fp, #16
  403802:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403804:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403806:	dd29      	ble.n	40385c <_svfprintf_r+0x2c0>
  403808:	4643      	mov	r3, r8
  40380a:	4621      	mov	r1, r4
  40380c:	46a8      	mov	r8, r5
  40380e:	2710      	movs	r7, #16
  403810:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403814:	e006      	b.n	403824 <_svfprintf_r+0x288>
  403816:	f1ab 0b10 	sub.w	fp, fp, #16
  40381a:	f1bb 0f10 	cmp.w	fp, #16
  40381e:	f103 0308 	add.w	r3, r3, #8
  403822:	dd18      	ble.n	403856 <_svfprintf_r+0x2ba>
  403824:	3201      	adds	r2, #1
  403826:	48b7      	ldr	r0, [pc, #732]	; (403b04 <_svfprintf_r+0x568>)
  403828:	9226      	str	r2, [sp, #152]	; 0x98
  40382a:	3110      	adds	r1, #16
  40382c:	2a07      	cmp	r2, #7
  40382e:	9127      	str	r1, [sp, #156]	; 0x9c
  403830:	e883 0081 	stmia.w	r3, {r0, r7}
  403834:	ddef      	ble.n	403816 <_svfprintf_r+0x27a>
  403836:	aa25      	add	r2, sp, #148	; 0x94
  403838:	4629      	mov	r1, r5
  40383a:	4620      	mov	r0, r4
  40383c:	f004 fda6 	bl	40838c <__ssprint_r>
  403840:	2800      	cmp	r0, #0
  403842:	f47f af7d 	bne.w	403740 <_svfprintf_r+0x1a4>
  403846:	f1ab 0b10 	sub.w	fp, fp, #16
  40384a:	f1bb 0f10 	cmp.w	fp, #16
  40384e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403850:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403852:	464b      	mov	r3, r9
  403854:	dce6      	bgt.n	403824 <_svfprintf_r+0x288>
  403856:	4645      	mov	r5, r8
  403858:	460c      	mov	r4, r1
  40385a:	4698      	mov	r8, r3
  40385c:	3201      	adds	r2, #1
  40385e:	4ba9      	ldr	r3, [pc, #676]	; (403b04 <_svfprintf_r+0x568>)
  403860:	9226      	str	r2, [sp, #152]	; 0x98
  403862:	445c      	add	r4, fp
  403864:	2a07      	cmp	r2, #7
  403866:	9427      	str	r4, [sp, #156]	; 0x9c
  403868:	e888 0808 	stmia.w	r8, {r3, fp}
  40386c:	f300 8498 	bgt.w	4041a0 <_svfprintf_r+0xc04>
  403870:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403874:	f108 0808 	add.w	r8, r8, #8
  403878:	b177      	cbz	r7, 403898 <_svfprintf_r+0x2fc>
  40387a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40387c:	3301      	adds	r3, #1
  40387e:	3401      	adds	r4, #1
  403880:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403884:	2201      	movs	r2, #1
  403886:	2b07      	cmp	r3, #7
  403888:	9427      	str	r4, [sp, #156]	; 0x9c
  40388a:	9326      	str	r3, [sp, #152]	; 0x98
  40388c:	e888 0006 	stmia.w	r8, {r1, r2}
  403890:	f300 83db 	bgt.w	40404a <_svfprintf_r+0xaae>
  403894:	f108 0808 	add.w	r8, r8, #8
  403898:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40389a:	b16b      	cbz	r3, 4038b8 <_svfprintf_r+0x31c>
  40389c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40389e:	3301      	adds	r3, #1
  4038a0:	3402      	adds	r4, #2
  4038a2:	a91e      	add	r1, sp, #120	; 0x78
  4038a4:	2202      	movs	r2, #2
  4038a6:	2b07      	cmp	r3, #7
  4038a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4038aa:	9326      	str	r3, [sp, #152]	; 0x98
  4038ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4038b0:	f300 83d6 	bgt.w	404060 <_svfprintf_r+0xac4>
  4038b4:	f108 0808 	add.w	r8, r8, #8
  4038b8:	2d80      	cmp	r5, #128	; 0x80
  4038ba:	f000 8315 	beq.w	403ee8 <_svfprintf_r+0x94c>
  4038be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038c2:	1a9f      	subs	r7, r3, r2
  4038c4:	2f00      	cmp	r7, #0
  4038c6:	dd36      	ble.n	403936 <_svfprintf_r+0x39a>
  4038c8:	2f10      	cmp	r7, #16
  4038ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038cc:	4d8e      	ldr	r5, [pc, #568]	; (403b08 <_svfprintf_r+0x56c>)
  4038ce:	dd27      	ble.n	403920 <_svfprintf_r+0x384>
  4038d0:	4642      	mov	r2, r8
  4038d2:	4621      	mov	r1, r4
  4038d4:	46b0      	mov	r8, r6
  4038d6:	f04f 0b10 	mov.w	fp, #16
  4038da:	462e      	mov	r6, r5
  4038dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4038de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4038e0:	e004      	b.n	4038ec <_svfprintf_r+0x350>
  4038e2:	3f10      	subs	r7, #16
  4038e4:	2f10      	cmp	r7, #16
  4038e6:	f102 0208 	add.w	r2, r2, #8
  4038ea:	dd15      	ble.n	403918 <_svfprintf_r+0x37c>
  4038ec:	3301      	adds	r3, #1
  4038ee:	3110      	adds	r1, #16
  4038f0:	2b07      	cmp	r3, #7
  4038f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4038f4:	9326      	str	r3, [sp, #152]	; 0x98
  4038f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4038fa:	ddf2      	ble.n	4038e2 <_svfprintf_r+0x346>
  4038fc:	aa25      	add	r2, sp, #148	; 0x94
  4038fe:	4629      	mov	r1, r5
  403900:	4620      	mov	r0, r4
  403902:	f004 fd43 	bl	40838c <__ssprint_r>
  403906:	2800      	cmp	r0, #0
  403908:	f47f af1a 	bne.w	403740 <_svfprintf_r+0x1a4>
  40390c:	3f10      	subs	r7, #16
  40390e:	2f10      	cmp	r7, #16
  403910:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403914:	464a      	mov	r2, r9
  403916:	dce9      	bgt.n	4038ec <_svfprintf_r+0x350>
  403918:	4635      	mov	r5, r6
  40391a:	460c      	mov	r4, r1
  40391c:	4646      	mov	r6, r8
  40391e:	4690      	mov	r8, r2
  403920:	3301      	adds	r3, #1
  403922:	443c      	add	r4, r7
  403924:	2b07      	cmp	r3, #7
  403926:	9427      	str	r4, [sp, #156]	; 0x9c
  403928:	9326      	str	r3, [sp, #152]	; 0x98
  40392a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40392e:	f300 8381 	bgt.w	404034 <_svfprintf_r+0xa98>
  403932:	f108 0808 	add.w	r8, r8, #8
  403936:	9b07      	ldr	r3, [sp, #28]
  403938:	05df      	lsls	r7, r3, #23
  40393a:	f100 8268 	bmi.w	403e0e <_svfprintf_r+0x872>
  40393e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403940:	990e      	ldr	r1, [sp, #56]	; 0x38
  403942:	f8c8 6000 	str.w	r6, [r8]
  403946:	3301      	adds	r3, #1
  403948:	440c      	add	r4, r1
  40394a:	2b07      	cmp	r3, #7
  40394c:	9427      	str	r4, [sp, #156]	; 0x9c
  40394e:	f8c8 1004 	str.w	r1, [r8, #4]
  403952:	9326      	str	r3, [sp, #152]	; 0x98
  403954:	f300 834d 	bgt.w	403ff2 <_svfprintf_r+0xa56>
  403958:	f108 0808 	add.w	r8, r8, #8
  40395c:	9b07      	ldr	r3, [sp, #28]
  40395e:	075b      	lsls	r3, r3, #29
  403960:	d53a      	bpl.n	4039d8 <_svfprintf_r+0x43c>
  403962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403964:	9a08      	ldr	r2, [sp, #32]
  403966:	1a9d      	subs	r5, r3, r2
  403968:	2d00      	cmp	r5, #0
  40396a:	dd35      	ble.n	4039d8 <_svfprintf_r+0x43c>
  40396c:	2d10      	cmp	r5, #16
  40396e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403970:	dd20      	ble.n	4039b4 <_svfprintf_r+0x418>
  403972:	2610      	movs	r6, #16
  403974:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403976:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40397a:	e004      	b.n	403986 <_svfprintf_r+0x3ea>
  40397c:	3d10      	subs	r5, #16
  40397e:	2d10      	cmp	r5, #16
  403980:	f108 0808 	add.w	r8, r8, #8
  403984:	dd16      	ble.n	4039b4 <_svfprintf_r+0x418>
  403986:	3301      	adds	r3, #1
  403988:	4a5e      	ldr	r2, [pc, #376]	; (403b04 <_svfprintf_r+0x568>)
  40398a:	9326      	str	r3, [sp, #152]	; 0x98
  40398c:	3410      	adds	r4, #16
  40398e:	2b07      	cmp	r3, #7
  403990:	9427      	str	r4, [sp, #156]	; 0x9c
  403992:	e888 0044 	stmia.w	r8, {r2, r6}
  403996:	ddf1      	ble.n	40397c <_svfprintf_r+0x3e0>
  403998:	aa25      	add	r2, sp, #148	; 0x94
  40399a:	4659      	mov	r1, fp
  40399c:	4638      	mov	r0, r7
  40399e:	f004 fcf5 	bl	40838c <__ssprint_r>
  4039a2:	2800      	cmp	r0, #0
  4039a4:	f47f aecc 	bne.w	403740 <_svfprintf_r+0x1a4>
  4039a8:	3d10      	subs	r5, #16
  4039aa:	2d10      	cmp	r5, #16
  4039ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039b0:	46c8      	mov	r8, r9
  4039b2:	dce8      	bgt.n	403986 <_svfprintf_r+0x3ea>
  4039b4:	3301      	adds	r3, #1
  4039b6:	4a53      	ldr	r2, [pc, #332]	; (403b04 <_svfprintf_r+0x568>)
  4039b8:	9326      	str	r3, [sp, #152]	; 0x98
  4039ba:	442c      	add	r4, r5
  4039bc:	2b07      	cmp	r3, #7
  4039be:	9427      	str	r4, [sp, #156]	; 0x9c
  4039c0:	e888 0024 	stmia.w	r8, {r2, r5}
  4039c4:	dd08      	ble.n	4039d8 <_svfprintf_r+0x43c>
  4039c6:	aa25      	add	r2, sp, #148	; 0x94
  4039c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4039ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039cc:	f004 fcde 	bl	40838c <__ssprint_r>
  4039d0:	2800      	cmp	r0, #0
  4039d2:	f47f aeb5 	bne.w	403740 <_svfprintf_r+0x1a4>
  4039d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4039dc:	9908      	ldr	r1, [sp, #32]
  4039de:	428a      	cmp	r2, r1
  4039e0:	bfac      	ite	ge
  4039e2:	189b      	addge	r3, r3, r2
  4039e4:	185b      	addlt	r3, r3, r1
  4039e6:	9309      	str	r3, [sp, #36]	; 0x24
  4039e8:	2c00      	cmp	r4, #0
  4039ea:	f040 830d 	bne.w	404008 <_svfprintf_r+0xa6c>
  4039ee:	2300      	movs	r3, #0
  4039f0:	9326      	str	r3, [sp, #152]	; 0x98
  4039f2:	46c8      	mov	r8, r9
  4039f4:	e5f9      	b.n	4035ea <_svfprintf_r+0x4e>
  4039f6:	9311      	str	r3, [sp, #68]	; 0x44
  4039f8:	f01b 0320 	ands.w	r3, fp, #32
  4039fc:	f040 81e3 	bne.w	403dc6 <_svfprintf_r+0x82a>
  403a00:	f01b 0210 	ands.w	r2, fp, #16
  403a04:	f040 842e 	bne.w	404264 <_svfprintf_r+0xcc8>
  403a08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403a0c:	f000 842a 	beq.w	404264 <_svfprintf_r+0xcc8>
  403a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a12:	4613      	mov	r3, r2
  403a14:	460a      	mov	r2, r1
  403a16:	3204      	adds	r2, #4
  403a18:	880c      	ldrh	r4, [r1, #0]
  403a1a:	920f      	str	r2, [sp, #60]	; 0x3c
  403a1c:	2500      	movs	r5, #0
  403a1e:	e6b0      	b.n	403782 <_svfprintf_r+0x1e6>
  403a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a22:	9311      	str	r3, [sp, #68]	; 0x44
  403a24:	6816      	ldr	r6, [r2, #0]
  403a26:	2400      	movs	r4, #0
  403a28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403a2c:	1d15      	adds	r5, r2, #4
  403a2e:	2e00      	cmp	r6, #0
  403a30:	f000 86a7 	beq.w	404782 <_svfprintf_r+0x11e6>
  403a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403a36:	1c53      	adds	r3, r2, #1
  403a38:	f000 8609 	beq.w	40464e <_svfprintf_r+0x10b2>
  403a3c:	4621      	mov	r1, r4
  403a3e:	4630      	mov	r0, r6
  403a40:	f003 feee 	bl	407820 <memchr>
  403a44:	2800      	cmp	r0, #0
  403a46:	f000 86e1 	beq.w	40480c <_svfprintf_r+0x1270>
  403a4a:	1b83      	subs	r3, r0, r6
  403a4c:	930e      	str	r3, [sp, #56]	; 0x38
  403a4e:	940a      	str	r4, [sp, #40]	; 0x28
  403a50:	950f      	str	r5, [sp, #60]	; 0x3c
  403a52:	f8cd b01c 	str.w	fp, [sp, #28]
  403a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a5a:	9308      	str	r3, [sp, #32]
  403a5c:	9412      	str	r4, [sp, #72]	; 0x48
  403a5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403a62:	e6b3      	b.n	4037cc <_svfprintf_r+0x230>
  403a64:	f89a 3000 	ldrb.w	r3, [sl]
  403a68:	2201      	movs	r2, #1
  403a6a:	212b      	movs	r1, #43	; 0x2b
  403a6c:	e5ee      	b.n	40364c <_svfprintf_r+0xb0>
  403a6e:	f04b 0b20 	orr.w	fp, fp, #32
  403a72:	f89a 3000 	ldrb.w	r3, [sl]
  403a76:	e5e9      	b.n	40364c <_svfprintf_r+0xb0>
  403a78:	9311      	str	r3, [sp, #68]	; 0x44
  403a7a:	2a00      	cmp	r2, #0
  403a7c:	f040 8795 	bne.w	4049aa <_svfprintf_r+0x140e>
  403a80:	4b22      	ldr	r3, [pc, #136]	; (403b0c <_svfprintf_r+0x570>)
  403a82:	9318      	str	r3, [sp, #96]	; 0x60
  403a84:	f01b 0f20 	tst.w	fp, #32
  403a88:	f040 8111 	bne.w	403cae <_svfprintf_r+0x712>
  403a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a8e:	f01b 0f10 	tst.w	fp, #16
  403a92:	4613      	mov	r3, r2
  403a94:	f040 83e1 	bne.w	40425a <_svfprintf_r+0xcbe>
  403a98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403a9c:	f000 83dd 	beq.w	40425a <_svfprintf_r+0xcbe>
  403aa0:	3304      	adds	r3, #4
  403aa2:	8814      	ldrh	r4, [r2, #0]
  403aa4:	930f      	str	r3, [sp, #60]	; 0x3c
  403aa6:	2500      	movs	r5, #0
  403aa8:	f01b 0f01 	tst.w	fp, #1
  403aac:	f000 810c 	beq.w	403cc8 <_svfprintf_r+0x72c>
  403ab0:	ea54 0305 	orrs.w	r3, r4, r5
  403ab4:	f000 8108 	beq.w	403cc8 <_svfprintf_r+0x72c>
  403ab8:	2330      	movs	r3, #48	; 0x30
  403aba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403abe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403ac2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403ac6:	f04b 0b02 	orr.w	fp, fp, #2
  403aca:	2302      	movs	r3, #2
  403acc:	e659      	b.n	403782 <_svfprintf_r+0x1e6>
  403ace:	f89a 3000 	ldrb.w	r3, [sl]
  403ad2:	2900      	cmp	r1, #0
  403ad4:	f47f adba 	bne.w	40364c <_svfprintf_r+0xb0>
  403ad8:	2201      	movs	r2, #1
  403ada:	2120      	movs	r1, #32
  403adc:	e5b6      	b.n	40364c <_svfprintf_r+0xb0>
  403ade:	f04b 0b01 	orr.w	fp, fp, #1
  403ae2:	f89a 3000 	ldrb.w	r3, [sl]
  403ae6:	e5b1      	b.n	40364c <_svfprintf_r+0xb0>
  403ae8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403aea:	6823      	ldr	r3, [r4, #0]
  403aec:	930d      	str	r3, [sp, #52]	; 0x34
  403aee:	4618      	mov	r0, r3
  403af0:	2800      	cmp	r0, #0
  403af2:	4623      	mov	r3, r4
  403af4:	f103 0304 	add.w	r3, r3, #4
  403af8:	f6ff ae0a 	blt.w	403710 <_svfprintf_r+0x174>
  403afc:	930f      	str	r3, [sp, #60]	; 0x3c
  403afe:	f89a 3000 	ldrb.w	r3, [sl]
  403b02:	e5a3      	b.n	40364c <_svfprintf_r+0xb0>
  403b04:	00409644 	.word	0x00409644
  403b08:	00409654 	.word	0x00409654
  403b0c:	00409624 	.word	0x00409624
  403b10:	f04b 0b10 	orr.w	fp, fp, #16
  403b14:	f01b 0f20 	tst.w	fp, #32
  403b18:	9311      	str	r3, [sp, #68]	; 0x44
  403b1a:	f43f ae23 	beq.w	403764 <_svfprintf_r+0x1c8>
  403b1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b20:	3507      	adds	r5, #7
  403b22:	f025 0307 	bic.w	r3, r5, #7
  403b26:	f103 0208 	add.w	r2, r3, #8
  403b2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b2e:	920f      	str	r2, [sp, #60]	; 0x3c
  403b30:	2301      	movs	r3, #1
  403b32:	e626      	b.n	403782 <_svfprintf_r+0x1e6>
  403b34:	f89a 3000 	ldrb.w	r3, [sl]
  403b38:	2b2a      	cmp	r3, #42	; 0x2a
  403b3a:	f10a 0401 	add.w	r4, sl, #1
  403b3e:	f000 8727 	beq.w	404990 <_svfprintf_r+0x13f4>
  403b42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b46:	2809      	cmp	r0, #9
  403b48:	46a2      	mov	sl, r4
  403b4a:	f200 86ad 	bhi.w	4048a8 <_svfprintf_r+0x130c>
  403b4e:	2300      	movs	r3, #0
  403b50:	461c      	mov	r4, r3
  403b52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403b5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403b5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b62:	2809      	cmp	r0, #9
  403b64:	d9f5      	bls.n	403b52 <_svfprintf_r+0x5b6>
  403b66:	940a      	str	r4, [sp, #40]	; 0x28
  403b68:	e572      	b.n	403650 <_svfprintf_r+0xb4>
  403b6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403b6e:	f89a 3000 	ldrb.w	r3, [sl]
  403b72:	e56b      	b.n	40364c <_svfprintf_r+0xb0>
  403b74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403b78:	f89a 3000 	ldrb.w	r3, [sl]
  403b7c:	e566      	b.n	40364c <_svfprintf_r+0xb0>
  403b7e:	f89a 3000 	ldrb.w	r3, [sl]
  403b82:	2b6c      	cmp	r3, #108	; 0x6c
  403b84:	bf03      	ittte	eq
  403b86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403b8a:	f04b 0b20 	orreq.w	fp, fp, #32
  403b8e:	f10a 0a01 	addeq.w	sl, sl, #1
  403b92:	f04b 0b10 	orrne.w	fp, fp, #16
  403b96:	e559      	b.n	40364c <_svfprintf_r+0xb0>
  403b98:	2a00      	cmp	r2, #0
  403b9a:	f040 8711 	bne.w	4049c0 <_svfprintf_r+0x1424>
  403b9e:	f01b 0f20 	tst.w	fp, #32
  403ba2:	f040 84f9 	bne.w	404598 <_svfprintf_r+0xffc>
  403ba6:	f01b 0f10 	tst.w	fp, #16
  403baa:	f040 84ac 	bne.w	404506 <_svfprintf_r+0xf6a>
  403bae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bb2:	f000 84a8 	beq.w	404506 <_svfprintf_r+0xf6a>
  403bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bb8:	6813      	ldr	r3, [r2, #0]
  403bba:	3204      	adds	r2, #4
  403bbc:	920f      	str	r2, [sp, #60]	; 0x3c
  403bbe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403bc2:	801a      	strh	r2, [r3, #0]
  403bc4:	e511      	b.n	4035ea <_svfprintf_r+0x4e>
  403bc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bc8:	4bb3      	ldr	r3, [pc, #716]	; (403e98 <_svfprintf_r+0x8fc>)
  403bca:	680c      	ldr	r4, [r1, #0]
  403bcc:	9318      	str	r3, [sp, #96]	; 0x60
  403bce:	2230      	movs	r2, #48	; 0x30
  403bd0:	2378      	movs	r3, #120	; 0x78
  403bd2:	3104      	adds	r1, #4
  403bd4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403bd8:	9311      	str	r3, [sp, #68]	; 0x44
  403bda:	f04b 0b02 	orr.w	fp, fp, #2
  403bde:	910f      	str	r1, [sp, #60]	; 0x3c
  403be0:	2500      	movs	r5, #0
  403be2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403be6:	2302      	movs	r3, #2
  403be8:	e5cb      	b.n	403782 <_svfprintf_r+0x1e6>
  403bea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bec:	9311      	str	r3, [sp, #68]	; 0x44
  403bee:	680a      	ldr	r2, [r1, #0]
  403bf0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403bf4:	2300      	movs	r3, #0
  403bf6:	460a      	mov	r2, r1
  403bf8:	461f      	mov	r7, r3
  403bfa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bfe:	3204      	adds	r2, #4
  403c00:	2301      	movs	r3, #1
  403c02:	9308      	str	r3, [sp, #32]
  403c04:	f8cd b01c 	str.w	fp, [sp, #28]
  403c08:	970a      	str	r7, [sp, #40]	; 0x28
  403c0a:	9712      	str	r7, [sp, #72]	; 0x48
  403c0c:	920f      	str	r2, [sp, #60]	; 0x3c
  403c0e:	930e      	str	r3, [sp, #56]	; 0x38
  403c10:	ae28      	add	r6, sp, #160	; 0xa0
  403c12:	e5df      	b.n	4037d4 <_svfprintf_r+0x238>
  403c14:	9311      	str	r3, [sp, #68]	; 0x44
  403c16:	2a00      	cmp	r2, #0
  403c18:	f040 86ea 	bne.w	4049f0 <_svfprintf_r+0x1454>
  403c1c:	f01b 0f20 	tst.w	fp, #32
  403c20:	d15d      	bne.n	403cde <_svfprintf_r+0x742>
  403c22:	f01b 0f10 	tst.w	fp, #16
  403c26:	f040 8308 	bne.w	40423a <_svfprintf_r+0xc9e>
  403c2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c2e:	f000 8304 	beq.w	40423a <_svfprintf_r+0xc9e>
  403c32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c34:	f9b1 4000 	ldrsh.w	r4, [r1]
  403c38:	3104      	adds	r1, #4
  403c3a:	17e5      	asrs	r5, r4, #31
  403c3c:	4622      	mov	r2, r4
  403c3e:	462b      	mov	r3, r5
  403c40:	910f      	str	r1, [sp, #60]	; 0x3c
  403c42:	2a00      	cmp	r2, #0
  403c44:	f173 0300 	sbcs.w	r3, r3, #0
  403c48:	db58      	blt.n	403cfc <_svfprintf_r+0x760>
  403c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c50:	1c4a      	adds	r2, r1, #1
  403c52:	f04f 0301 	mov.w	r3, #1
  403c56:	f47f ad9b 	bne.w	403790 <_svfprintf_r+0x1f4>
  403c5a:	ea54 0205 	orrs.w	r2, r4, r5
  403c5e:	f000 81df 	beq.w	404020 <_svfprintf_r+0xa84>
  403c62:	f8cd b01c 	str.w	fp, [sp, #28]
  403c66:	2b01      	cmp	r3, #1
  403c68:	f000 827b 	beq.w	404162 <_svfprintf_r+0xbc6>
  403c6c:	2b02      	cmp	r3, #2
  403c6e:	f040 8206 	bne.w	40407e <_svfprintf_r+0xae2>
  403c72:	9818      	ldr	r0, [sp, #96]	; 0x60
  403c74:	464e      	mov	r6, r9
  403c76:	0923      	lsrs	r3, r4, #4
  403c78:	f004 010f 	and.w	r1, r4, #15
  403c7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c80:	092a      	lsrs	r2, r5, #4
  403c82:	461c      	mov	r4, r3
  403c84:	4615      	mov	r5, r2
  403c86:	5c43      	ldrb	r3, [r0, r1]
  403c88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403c8c:	ea54 0305 	orrs.w	r3, r4, r5
  403c90:	d1f1      	bne.n	403c76 <_svfprintf_r+0x6da>
  403c92:	eba9 0306 	sub.w	r3, r9, r6
  403c96:	930e      	str	r3, [sp, #56]	; 0x38
  403c98:	e590      	b.n	4037bc <_svfprintf_r+0x220>
  403c9a:	9311      	str	r3, [sp, #68]	; 0x44
  403c9c:	2a00      	cmp	r2, #0
  403c9e:	f040 86a3 	bne.w	4049e8 <_svfprintf_r+0x144c>
  403ca2:	4b7e      	ldr	r3, [pc, #504]	; (403e9c <_svfprintf_r+0x900>)
  403ca4:	9318      	str	r3, [sp, #96]	; 0x60
  403ca6:	f01b 0f20 	tst.w	fp, #32
  403caa:	f43f aeef 	beq.w	403a8c <_svfprintf_r+0x4f0>
  403cae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cb0:	3507      	adds	r5, #7
  403cb2:	f025 0307 	bic.w	r3, r5, #7
  403cb6:	f103 0208 	add.w	r2, r3, #8
  403cba:	f01b 0f01 	tst.w	fp, #1
  403cbe:	920f      	str	r2, [sp, #60]	; 0x3c
  403cc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  403cc4:	f47f aef4 	bne.w	403ab0 <_svfprintf_r+0x514>
  403cc8:	2302      	movs	r3, #2
  403cca:	e55a      	b.n	403782 <_svfprintf_r+0x1e6>
  403ccc:	9311      	str	r3, [sp, #68]	; 0x44
  403cce:	2a00      	cmp	r2, #0
  403cd0:	f040 8686 	bne.w	4049e0 <_svfprintf_r+0x1444>
  403cd4:	f04b 0b10 	orr.w	fp, fp, #16
  403cd8:	f01b 0f20 	tst.w	fp, #32
  403cdc:	d0a1      	beq.n	403c22 <_svfprintf_r+0x686>
  403cde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ce0:	3507      	adds	r5, #7
  403ce2:	f025 0507 	bic.w	r5, r5, #7
  403ce6:	e9d5 2300 	ldrd	r2, r3, [r5]
  403cea:	2a00      	cmp	r2, #0
  403cec:	f105 0108 	add.w	r1, r5, #8
  403cf0:	461d      	mov	r5, r3
  403cf2:	f173 0300 	sbcs.w	r3, r3, #0
  403cf6:	910f      	str	r1, [sp, #60]	; 0x3c
  403cf8:	4614      	mov	r4, r2
  403cfa:	daa6      	bge.n	403c4a <_svfprintf_r+0x6ae>
  403cfc:	272d      	movs	r7, #45	; 0x2d
  403cfe:	4264      	negs	r4, r4
  403d00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403d04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d08:	2301      	movs	r3, #1
  403d0a:	e53d      	b.n	403788 <_svfprintf_r+0x1ec>
  403d0c:	9311      	str	r3, [sp, #68]	; 0x44
  403d0e:	2a00      	cmp	r2, #0
  403d10:	f040 8662 	bne.w	4049d8 <_svfprintf_r+0x143c>
  403d14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d16:	3507      	adds	r5, #7
  403d18:	f025 0307 	bic.w	r3, r5, #7
  403d1c:	f103 0208 	add.w	r2, r3, #8
  403d20:	920f      	str	r2, [sp, #60]	; 0x3c
  403d22:	681a      	ldr	r2, [r3, #0]
  403d24:	9215      	str	r2, [sp, #84]	; 0x54
  403d26:	685b      	ldr	r3, [r3, #4]
  403d28:	9314      	str	r3, [sp, #80]	; 0x50
  403d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403d2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403d2e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403d32:	4628      	mov	r0, r5
  403d34:	4621      	mov	r1, r4
  403d36:	f04f 32ff 	mov.w	r2, #4294967295
  403d3a:	4b59      	ldr	r3, [pc, #356]	; (403ea0 <_svfprintf_r+0x904>)
  403d3c:	f005 f9f4 	bl	409128 <__aeabi_dcmpun>
  403d40:	2800      	cmp	r0, #0
  403d42:	f040 834a 	bne.w	4043da <_svfprintf_r+0xe3e>
  403d46:	4628      	mov	r0, r5
  403d48:	4621      	mov	r1, r4
  403d4a:	f04f 32ff 	mov.w	r2, #4294967295
  403d4e:	4b54      	ldr	r3, [pc, #336]	; (403ea0 <_svfprintf_r+0x904>)
  403d50:	f005 f9cc 	bl	4090ec <__aeabi_dcmple>
  403d54:	2800      	cmp	r0, #0
  403d56:	f040 8340 	bne.w	4043da <_svfprintf_r+0xe3e>
  403d5a:	a815      	add	r0, sp, #84	; 0x54
  403d5c:	c80d      	ldmia	r0, {r0, r2, r3}
  403d5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403d60:	f005 f9ba 	bl	4090d8 <__aeabi_dcmplt>
  403d64:	2800      	cmp	r0, #0
  403d66:	f040 8530 	bne.w	4047ca <_svfprintf_r+0x122e>
  403d6a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d6e:	4e4d      	ldr	r6, [pc, #308]	; (403ea4 <_svfprintf_r+0x908>)
  403d70:	4b4d      	ldr	r3, [pc, #308]	; (403ea8 <_svfprintf_r+0x90c>)
  403d72:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403d76:	9007      	str	r0, [sp, #28]
  403d78:	9811      	ldr	r0, [sp, #68]	; 0x44
  403d7a:	2203      	movs	r2, #3
  403d7c:	2100      	movs	r1, #0
  403d7e:	9208      	str	r2, [sp, #32]
  403d80:	910a      	str	r1, [sp, #40]	; 0x28
  403d82:	2847      	cmp	r0, #71	; 0x47
  403d84:	bfd8      	it	le
  403d86:	461e      	movle	r6, r3
  403d88:	920e      	str	r2, [sp, #56]	; 0x38
  403d8a:	9112      	str	r1, [sp, #72]	; 0x48
  403d8c:	e51e      	b.n	4037cc <_svfprintf_r+0x230>
  403d8e:	f04b 0b08 	orr.w	fp, fp, #8
  403d92:	f89a 3000 	ldrb.w	r3, [sl]
  403d96:	e459      	b.n	40364c <_svfprintf_r+0xb0>
  403d98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d9c:	2300      	movs	r3, #0
  403d9e:	461c      	mov	r4, r3
  403da0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403da4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403da8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403dac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403db0:	2809      	cmp	r0, #9
  403db2:	d9f5      	bls.n	403da0 <_svfprintf_r+0x804>
  403db4:	940d      	str	r4, [sp, #52]	; 0x34
  403db6:	e44b      	b.n	403650 <_svfprintf_r+0xb4>
  403db8:	f04b 0b10 	orr.w	fp, fp, #16
  403dbc:	9311      	str	r3, [sp, #68]	; 0x44
  403dbe:	f01b 0320 	ands.w	r3, fp, #32
  403dc2:	f43f ae1d 	beq.w	403a00 <_svfprintf_r+0x464>
  403dc6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403dc8:	3507      	adds	r5, #7
  403dca:	f025 0307 	bic.w	r3, r5, #7
  403dce:	f103 0208 	add.w	r2, r3, #8
  403dd2:	e9d3 4500 	ldrd	r4, r5, [r3]
  403dd6:	920f      	str	r2, [sp, #60]	; 0x3c
  403dd8:	2300      	movs	r3, #0
  403dda:	e4d2      	b.n	403782 <_svfprintf_r+0x1e6>
  403ddc:	9311      	str	r3, [sp, #68]	; 0x44
  403dde:	2a00      	cmp	r2, #0
  403de0:	f040 85e7 	bne.w	4049b2 <_svfprintf_r+0x1416>
  403de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403de6:	2a00      	cmp	r2, #0
  403de8:	f43f aca3 	beq.w	403732 <_svfprintf_r+0x196>
  403dec:	2300      	movs	r3, #0
  403dee:	2101      	movs	r1, #1
  403df0:	461f      	mov	r7, r3
  403df2:	9108      	str	r1, [sp, #32]
  403df4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403df8:	f8cd b01c 	str.w	fp, [sp, #28]
  403dfc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e00:	930a      	str	r3, [sp, #40]	; 0x28
  403e02:	9312      	str	r3, [sp, #72]	; 0x48
  403e04:	910e      	str	r1, [sp, #56]	; 0x38
  403e06:	ae28      	add	r6, sp, #160	; 0xa0
  403e08:	e4e4      	b.n	4037d4 <_svfprintf_r+0x238>
  403e0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e0c:	e534      	b.n	403878 <_svfprintf_r+0x2dc>
  403e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e10:	2b65      	cmp	r3, #101	; 0x65
  403e12:	f340 80a7 	ble.w	403f64 <_svfprintf_r+0x9c8>
  403e16:	a815      	add	r0, sp, #84	; 0x54
  403e18:	c80d      	ldmia	r0, {r0, r2, r3}
  403e1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e1c:	f005 f952 	bl	4090c4 <__aeabi_dcmpeq>
  403e20:	2800      	cmp	r0, #0
  403e22:	f000 8150 	beq.w	4040c6 <_svfprintf_r+0xb2a>
  403e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e28:	4a20      	ldr	r2, [pc, #128]	; (403eac <_svfprintf_r+0x910>)
  403e2a:	f8c8 2000 	str.w	r2, [r8]
  403e2e:	3301      	adds	r3, #1
  403e30:	3401      	adds	r4, #1
  403e32:	2201      	movs	r2, #1
  403e34:	2b07      	cmp	r3, #7
  403e36:	9427      	str	r4, [sp, #156]	; 0x9c
  403e38:	9326      	str	r3, [sp, #152]	; 0x98
  403e3a:	f8c8 2004 	str.w	r2, [r8, #4]
  403e3e:	f300 836a 	bgt.w	404516 <_svfprintf_r+0xf7a>
  403e42:	f108 0808 	add.w	r8, r8, #8
  403e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403e4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e4c:	4293      	cmp	r3, r2
  403e4e:	db03      	blt.n	403e58 <_svfprintf_r+0x8bc>
  403e50:	9b07      	ldr	r3, [sp, #28]
  403e52:	07dd      	lsls	r5, r3, #31
  403e54:	f57f ad82 	bpl.w	40395c <_svfprintf_r+0x3c0>
  403e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  403e5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403e5e:	f8c8 2000 	str.w	r2, [r8]
  403e62:	3301      	adds	r3, #1
  403e64:	440c      	add	r4, r1
  403e66:	2b07      	cmp	r3, #7
  403e68:	f8c8 1004 	str.w	r1, [r8, #4]
  403e6c:	9427      	str	r4, [sp, #156]	; 0x9c
  403e6e:	9326      	str	r3, [sp, #152]	; 0x98
  403e70:	f300 839e 	bgt.w	4045b0 <_svfprintf_r+0x1014>
  403e74:	f108 0808 	add.w	r8, r8, #8
  403e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e7a:	1e5e      	subs	r6, r3, #1
  403e7c:	2e00      	cmp	r6, #0
  403e7e:	f77f ad6d 	ble.w	40395c <_svfprintf_r+0x3c0>
  403e82:	2e10      	cmp	r6, #16
  403e84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e86:	4d0a      	ldr	r5, [pc, #40]	; (403eb0 <_svfprintf_r+0x914>)
  403e88:	f340 81f5 	ble.w	404276 <_svfprintf_r+0xcda>
  403e8c:	4622      	mov	r2, r4
  403e8e:	2710      	movs	r7, #16
  403e90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403e94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403e96:	e013      	b.n	403ec0 <_svfprintf_r+0x924>
  403e98:	00409624 	.word	0x00409624
  403e9c:	00409610 	.word	0x00409610
  403ea0:	7fefffff 	.word	0x7fefffff
  403ea4:	00409604 	.word	0x00409604
  403ea8:	00409600 	.word	0x00409600
  403eac:	00409640 	.word	0x00409640
  403eb0:	00409654 	.word	0x00409654
  403eb4:	f108 0808 	add.w	r8, r8, #8
  403eb8:	3e10      	subs	r6, #16
  403eba:	2e10      	cmp	r6, #16
  403ebc:	f340 81da 	ble.w	404274 <_svfprintf_r+0xcd8>
  403ec0:	3301      	adds	r3, #1
  403ec2:	3210      	adds	r2, #16
  403ec4:	2b07      	cmp	r3, #7
  403ec6:	9227      	str	r2, [sp, #156]	; 0x9c
  403ec8:	9326      	str	r3, [sp, #152]	; 0x98
  403eca:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ece:	ddf1      	ble.n	403eb4 <_svfprintf_r+0x918>
  403ed0:	aa25      	add	r2, sp, #148	; 0x94
  403ed2:	4621      	mov	r1, r4
  403ed4:	4658      	mov	r0, fp
  403ed6:	f004 fa59 	bl	40838c <__ssprint_r>
  403eda:	2800      	cmp	r0, #0
  403edc:	f47f ac30 	bne.w	403740 <_svfprintf_r+0x1a4>
  403ee0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ee4:	46c8      	mov	r8, r9
  403ee6:	e7e7      	b.n	403eb8 <_svfprintf_r+0x91c>
  403ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eea:	9a08      	ldr	r2, [sp, #32]
  403eec:	1a9f      	subs	r7, r3, r2
  403eee:	2f00      	cmp	r7, #0
  403ef0:	f77f ace5 	ble.w	4038be <_svfprintf_r+0x322>
  403ef4:	2f10      	cmp	r7, #16
  403ef6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ef8:	4db6      	ldr	r5, [pc, #728]	; (4041d4 <_svfprintf_r+0xc38>)
  403efa:	dd27      	ble.n	403f4c <_svfprintf_r+0x9b0>
  403efc:	4642      	mov	r2, r8
  403efe:	4621      	mov	r1, r4
  403f00:	46b0      	mov	r8, r6
  403f02:	f04f 0b10 	mov.w	fp, #16
  403f06:	462e      	mov	r6, r5
  403f08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f0c:	e004      	b.n	403f18 <_svfprintf_r+0x97c>
  403f0e:	3f10      	subs	r7, #16
  403f10:	2f10      	cmp	r7, #16
  403f12:	f102 0208 	add.w	r2, r2, #8
  403f16:	dd15      	ble.n	403f44 <_svfprintf_r+0x9a8>
  403f18:	3301      	adds	r3, #1
  403f1a:	3110      	adds	r1, #16
  403f1c:	2b07      	cmp	r3, #7
  403f1e:	9127      	str	r1, [sp, #156]	; 0x9c
  403f20:	9326      	str	r3, [sp, #152]	; 0x98
  403f22:	e882 0840 	stmia.w	r2, {r6, fp}
  403f26:	ddf2      	ble.n	403f0e <_svfprintf_r+0x972>
  403f28:	aa25      	add	r2, sp, #148	; 0x94
  403f2a:	4629      	mov	r1, r5
  403f2c:	4620      	mov	r0, r4
  403f2e:	f004 fa2d 	bl	40838c <__ssprint_r>
  403f32:	2800      	cmp	r0, #0
  403f34:	f47f ac04 	bne.w	403740 <_svfprintf_r+0x1a4>
  403f38:	3f10      	subs	r7, #16
  403f3a:	2f10      	cmp	r7, #16
  403f3c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f40:	464a      	mov	r2, r9
  403f42:	dce9      	bgt.n	403f18 <_svfprintf_r+0x97c>
  403f44:	4635      	mov	r5, r6
  403f46:	460c      	mov	r4, r1
  403f48:	4646      	mov	r6, r8
  403f4a:	4690      	mov	r8, r2
  403f4c:	3301      	adds	r3, #1
  403f4e:	443c      	add	r4, r7
  403f50:	2b07      	cmp	r3, #7
  403f52:	9427      	str	r4, [sp, #156]	; 0x9c
  403f54:	9326      	str	r3, [sp, #152]	; 0x98
  403f56:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f5a:	f300 8232 	bgt.w	4043c2 <_svfprintf_r+0xe26>
  403f5e:	f108 0808 	add.w	r8, r8, #8
  403f62:	e4ac      	b.n	4038be <_svfprintf_r+0x322>
  403f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f66:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403f68:	2b01      	cmp	r3, #1
  403f6a:	f340 81fe 	ble.w	40436a <_svfprintf_r+0xdce>
  403f6e:	3701      	adds	r7, #1
  403f70:	3401      	adds	r4, #1
  403f72:	2301      	movs	r3, #1
  403f74:	2f07      	cmp	r7, #7
  403f76:	9427      	str	r4, [sp, #156]	; 0x9c
  403f78:	9726      	str	r7, [sp, #152]	; 0x98
  403f7a:	f8c8 6000 	str.w	r6, [r8]
  403f7e:	f8c8 3004 	str.w	r3, [r8, #4]
  403f82:	f300 8203 	bgt.w	40438c <_svfprintf_r+0xdf0>
  403f86:	f108 0808 	add.w	r8, r8, #8
  403f8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403f8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403f8e:	f8c8 3000 	str.w	r3, [r8]
  403f92:	3701      	adds	r7, #1
  403f94:	4414      	add	r4, r2
  403f96:	2f07      	cmp	r7, #7
  403f98:	9427      	str	r4, [sp, #156]	; 0x9c
  403f9a:	9726      	str	r7, [sp, #152]	; 0x98
  403f9c:	f8c8 2004 	str.w	r2, [r8, #4]
  403fa0:	f300 8200 	bgt.w	4043a4 <_svfprintf_r+0xe08>
  403fa4:	f108 0808 	add.w	r8, r8, #8
  403fa8:	a815      	add	r0, sp, #84	; 0x54
  403faa:	c80d      	ldmia	r0, {r0, r2, r3}
  403fac:	9914      	ldr	r1, [sp, #80]	; 0x50
  403fae:	f005 f889 	bl	4090c4 <__aeabi_dcmpeq>
  403fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403fb4:	2800      	cmp	r0, #0
  403fb6:	f040 8101 	bne.w	4041bc <_svfprintf_r+0xc20>
  403fba:	3b01      	subs	r3, #1
  403fbc:	3701      	adds	r7, #1
  403fbe:	3601      	adds	r6, #1
  403fc0:	441c      	add	r4, r3
  403fc2:	2f07      	cmp	r7, #7
  403fc4:	9726      	str	r7, [sp, #152]	; 0x98
  403fc6:	9427      	str	r4, [sp, #156]	; 0x9c
  403fc8:	f8c8 6000 	str.w	r6, [r8]
  403fcc:	f8c8 3004 	str.w	r3, [r8, #4]
  403fd0:	f300 8127 	bgt.w	404222 <_svfprintf_r+0xc86>
  403fd4:	f108 0808 	add.w	r8, r8, #8
  403fd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403fda:	f8c8 2004 	str.w	r2, [r8, #4]
  403fde:	3701      	adds	r7, #1
  403fe0:	4414      	add	r4, r2
  403fe2:	ab21      	add	r3, sp, #132	; 0x84
  403fe4:	2f07      	cmp	r7, #7
  403fe6:	9427      	str	r4, [sp, #156]	; 0x9c
  403fe8:	9726      	str	r7, [sp, #152]	; 0x98
  403fea:	f8c8 3000 	str.w	r3, [r8]
  403fee:	f77f acb3 	ble.w	403958 <_svfprintf_r+0x3bc>
  403ff2:	aa25      	add	r2, sp, #148	; 0x94
  403ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ff8:	f004 f9c8 	bl	40838c <__ssprint_r>
  403ffc:	2800      	cmp	r0, #0
  403ffe:	f47f ab9f 	bne.w	403740 <_svfprintf_r+0x1a4>
  404002:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404004:	46c8      	mov	r8, r9
  404006:	e4a9      	b.n	40395c <_svfprintf_r+0x3c0>
  404008:	aa25      	add	r2, sp, #148	; 0x94
  40400a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40400c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40400e:	f004 f9bd 	bl	40838c <__ssprint_r>
  404012:	2800      	cmp	r0, #0
  404014:	f43f aceb 	beq.w	4039ee <_svfprintf_r+0x452>
  404018:	f7ff bb92 	b.w	403740 <_svfprintf_r+0x1a4>
  40401c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404020:	2b01      	cmp	r3, #1
  404022:	f000 8134 	beq.w	40428e <_svfprintf_r+0xcf2>
  404026:	2b02      	cmp	r3, #2
  404028:	d125      	bne.n	404076 <_svfprintf_r+0xada>
  40402a:	f8cd b01c 	str.w	fp, [sp, #28]
  40402e:	2400      	movs	r4, #0
  404030:	2500      	movs	r5, #0
  404032:	e61e      	b.n	403c72 <_svfprintf_r+0x6d6>
  404034:	aa25      	add	r2, sp, #148	; 0x94
  404036:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404038:	980c      	ldr	r0, [sp, #48]	; 0x30
  40403a:	f004 f9a7 	bl	40838c <__ssprint_r>
  40403e:	2800      	cmp	r0, #0
  404040:	f47f ab7e 	bne.w	403740 <_svfprintf_r+0x1a4>
  404044:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404046:	46c8      	mov	r8, r9
  404048:	e475      	b.n	403936 <_svfprintf_r+0x39a>
  40404a:	aa25      	add	r2, sp, #148	; 0x94
  40404c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40404e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404050:	f004 f99c 	bl	40838c <__ssprint_r>
  404054:	2800      	cmp	r0, #0
  404056:	f47f ab73 	bne.w	403740 <_svfprintf_r+0x1a4>
  40405a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40405c:	46c8      	mov	r8, r9
  40405e:	e41b      	b.n	403898 <_svfprintf_r+0x2fc>
  404060:	aa25      	add	r2, sp, #148	; 0x94
  404062:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404064:	980c      	ldr	r0, [sp, #48]	; 0x30
  404066:	f004 f991 	bl	40838c <__ssprint_r>
  40406a:	2800      	cmp	r0, #0
  40406c:	f47f ab68 	bne.w	403740 <_svfprintf_r+0x1a4>
  404070:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404072:	46c8      	mov	r8, r9
  404074:	e420      	b.n	4038b8 <_svfprintf_r+0x31c>
  404076:	f8cd b01c 	str.w	fp, [sp, #28]
  40407a:	2400      	movs	r4, #0
  40407c:	2500      	movs	r5, #0
  40407e:	4649      	mov	r1, r9
  404080:	e000      	b.n	404084 <_svfprintf_r+0xae8>
  404082:	4631      	mov	r1, r6
  404084:	08e2      	lsrs	r2, r4, #3
  404086:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40408a:	08e8      	lsrs	r0, r5, #3
  40408c:	f004 0307 	and.w	r3, r4, #7
  404090:	4605      	mov	r5, r0
  404092:	4614      	mov	r4, r2
  404094:	3330      	adds	r3, #48	; 0x30
  404096:	ea54 0205 	orrs.w	r2, r4, r5
  40409a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40409e:	f101 36ff 	add.w	r6, r1, #4294967295
  4040a2:	d1ee      	bne.n	404082 <_svfprintf_r+0xae6>
  4040a4:	9a07      	ldr	r2, [sp, #28]
  4040a6:	07d2      	lsls	r2, r2, #31
  4040a8:	f57f adf3 	bpl.w	403c92 <_svfprintf_r+0x6f6>
  4040ac:	2b30      	cmp	r3, #48	; 0x30
  4040ae:	f43f adf0 	beq.w	403c92 <_svfprintf_r+0x6f6>
  4040b2:	3902      	subs	r1, #2
  4040b4:	2330      	movs	r3, #48	; 0x30
  4040b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4040ba:	eba9 0301 	sub.w	r3, r9, r1
  4040be:	930e      	str	r3, [sp, #56]	; 0x38
  4040c0:	460e      	mov	r6, r1
  4040c2:	f7ff bb7b 	b.w	4037bc <_svfprintf_r+0x220>
  4040c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4040c8:	2900      	cmp	r1, #0
  4040ca:	f340 822e 	ble.w	40452a <_svfprintf_r+0xf8e>
  4040ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4040d2:	4293      	cmp	r3, r2
  4040d4:	bfa8      	it	ge
  4040d6:	4613      	movge	r3, r2
  4040d8:	2b00      	cmp	r3, #0
  4040da:	461f      	mov	r7, r3
  4040dc:	dd0d      	ble.n	4040fa <_svfprintf_r+0xb5e>
  4040de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040e0:	f8c8 6000 	str.w	r6, [r8]
  4040e4:	3301      	adds	r3, #1
  4040e6:	443c      	add	r4, r7
  4040e8:	2b07      	cmp	r3, #7
  4040ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4040ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4040f0:	9326      	str	r3, [sp, #152]	; 0x98
  4040f2:	f300 831f 	bgt.w	404734 <_svfprintf_r+0x1198>
  4040f6:	f108 0808 	add.w	r8, r8, #8
  4040fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040fc:	2f00      	cmp	r7, #0
  4040fe:	bfa8      	it	ge
  404100:	1bdb      	subge	r3, r3, r7
  404102:	2b00      	cmp	r3, #0
  404104:	461f      	mov	r7, r3
  404106:	f340 80d6 	ble.w	4042b6 <_svfprintf_r+0xd1a>
  40410a:	2f10      	cmp	r7, #16
  40410c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40410e:	4d31      	ldr	r5, [pc, #196]	; (4041d4 <_svfprintf_r+0xc38>)
  404110:	f340 81ed 	ble.w	4044ee <_svfprintf_r+0xf52>
  404114:	4642      	mov	r2, r8
  404116:	4621      	mov	r1, r4
  404118:	46b0      	mov	r8, r6
  40411a:	f04f 0b10 	mov.w	fp, #16
  40411e:	462e      	mov	r6, r5
  404120:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404122:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404124:	e004      	b.n	404130 <_svfprintf_r+0xb94>
  404126:	3208      	adds	r2, #8
  404128:	3f10      	subs	r7, #16
  40412a:	2f10      	cmp	r7, #16
  40412c:	f340 81db 	ble.w	4044e6 <_svfprintf_r+0xf4a>
  404130:	3301      	adds	r3, #1
  404132:	3110      	adds	r1, #16
  404134:	2b07      	cmp	r3, #7
  404136:	9127      	str	r1, [sp, #156]	; 0x9c
  404138:	9326      	str	r3, [sp, #152]	; 0x98
  40413a:	e882 0840 	stmia.w	r2, {r6, fp}
  40413e:	ddf2      	ble.n	404126 <_svfprintf_r+0xb8a>
  404140:	aa25      	add	r2, sp, #148	; 0x94
  404142:	4629      	mov	r1, r5
  404144:	4620      	mov	r0, r4
  404146:	f004 f921 	bl	40838c <__ssprint_r>
  40414a:	2800      	cmp	r0, #0
  40414c:	f47f aaf8 	bne.w	403740 <_svfprintf_r+0x1a4>
  404150:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404152:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404154:	464a      	mov	r2, r9
  404156:	e7e7      	b.n	404128 <_svfprintf_r+0xb8c>
  404158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40415a:	930e      	str	r3, [sp, #56]	; 0x38
  40415c:	464e      	mov	r6, r9
  40415e:	f7ff bb2d 	b.w	4037bc <_svfprintf_r+0x220>
  404162:	2d00      	cmp	r5, #0
  404164:	bf08      	it	eq
  404166:	2c0a      	cmpeq	r4, #10
  404168:	f0c0 808f 	bcc.w	40428a <_svfprintf_r+0xcee>
  40416c:	464e      	mov	r6, r9
  40416e:	4620      	mov	r0, r4
  404170:	4629      	mov	r1, r5
  404172:	220a      	movs	r2, #10
  404174:	2300      	movs	r3, #0
  404176:	f7fe fd67 	bl	402c48 <__aeabi_uldivmod>
  40417a:	3230      	adds	r2, #48	; 0x30
  40417c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404180:	4620      	mov	r0, r4
  404182:	4629      	mov	r1, r5
  404184:	2300      	movs	r3, #0
  404186:	220a      	movs	r2, #10
  404188:	f7fe fd5e 	bl	402c48 <__aeabi_uldivmod>
  40418c:	4604      	mov	r4, r0
  40418e:	460d      	mov	r5, r1
  404190:	ea54 0305 	orrs.w	r3, r4, r5
  404194:	d1eb      	bne.n	40416e <_svfprintf_r+0xbd2>
  404196:	eba9 0306 	sub.w	r3, r9, r6
  40419a:	930e      	str	r3, [sp, #56]	; 0x38
  40419c:	f7ff bb0e 	b.w	4037bc <_svfprintf_r+0x220>
  4041a0:	aa25      	add	r2, sp, #148	; 0x94
  4041a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041a6:	f004 f8f1 	bl	40838c <__ssprint_r>
  4041aa:	2800      	cmp	r0, #0
  4041ac:	f47f aac8 	bne.w	403740 <_svfprintf_r+0x1a4>
  4041b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041b6:	46c8      	mov	r8, r9
  4041b8:	f7ff bb5e 	b.w	403878 <_svfprintf_r+0x2dc>
  4041bc:	1e5e      	subs	r6, r3, #1
  4041be:	2e00      	cmp	r6, #0
  4041c0:	f77f af0a 	ble.w	403fd8 <_svfprintf_r+0xa3c>
  4041c4:	2e10      	cmp	r6, #16
  4041c6:	4d03      	ldr	r5, [pc, #12]	; (4041d4 <_svfprintf_r+0xc38>)
  4041c8:	dd22      	ble.n	404210 <_svfprintf_r+0xc74>
  4041ca:	4622      	mov	r2, r4
  4041cc:	f04f 0b10 	mov.w	fp, #16
  4041d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041d2:	e006      	b.n	4041e2 <_svfprintf_r+0xc46>
  4041d4:	00409654 	.word	0x00409654
  4041d8:	3e10      	subs	r6, #16
  4041da:	2e10      	cmp	r6, #16
  4041dc:	f108 0808 	add.w	r8, r8, #8
  4041e0:	dd15      	ble.n	40420e <_svfprintf_r+0xc72>
  4041e2:	3701      	adds	r7, #1
  4041e4:	3210      	adds	r2, #16
  4041e6:	2f07      	cmp	r7, #7
  4041e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4041ea:	9726      	str	r7, [sp, #152]	; 0x98
  4041ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4041f0:	ddf2      	ble.n	4041d8 <_svfprintf_r+0xc3c>
  4041f2:	aa25      	add	r2, sp, #148	; 0x94
  4041f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041f6:	4620      	mov	r0, r4
  4041f8:	f004 f8c8 	bl	40838c <__ssprint_r>
  4041fc:	2800      	cmp	r0, #0
  4041fe:	f47f aa9f 	bne.w	403740 <_svfprintf_r+0x1a4>
  404202:	3e10      	subs	r6, #16
  404204:	2e10      	cmp	r6, #16
  404206:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404208:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40420a:	46c8      	mov	r8, r9
  40420c:	dce9      	bgt.n	4041e2 <_svfprintf_r+0xc46>
  40420e:	4614      	mov	r4, r2
  404210:	3701      	adds	r7, #1
  404212:	4434      	add	r4, r6
  404214:	2f07      	cmp	r7, #7
  404216:	9427      	str	r4, [sp, #156]	; 0x9c
  404218:	9726      	str	r7, [sp, #152]	; 0x98
  40421a:	e888 0060 	stmia.w	r8, {r5, r6}
  40421e:	f77f aed9 	ble.w	403fd4 <_svfprintf_r+0xa38>
  404222:	aa25      	add	r2, sp, #148	; 0x94
  404224:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404226:	980c      	ldr	r0, [sp, #48]	; 0x30
  404228:	f004 f8b0 	bl	40838c <__ssprint_r>
  40422c:	2800      	cmp	r0, #0
  40422e:	f47f aa87 	bne.w	403740 <_svfprintf_r+0x1a4>
  404232:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404234:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404236:	46c8      	mov	r8, r9
  404238:	e6ce      	b.n	403fd8 <_svfprintf_r+0xa3c>
  40423a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40423c:	6814      	ldr	r4, [r2, #0]
  40423e:	4613      	mov	r3, r2
  404240:	3304      	adds	r3, #4
  404242:	17e5      	asrs	r5, r4, #31
  404244:	930f      	str	r3, [sp, #60]	; 0x3c
  404246:	4622      	mov	r2, r4
  404248:	462b      	mov	r3, r5
  40424a:	e4fa      	b.n	403c42 <_svfprintf_r+0x6a6>
  40424c:	3204      	adds	r2, #4
  40424e:	681c      	ldr	r4, [r3, #0]
  404250:	920f      	str	r2, [sp, #60]	; 0x3c
  404252:	2301      	movs	r3, #1
  404254:	2500      	movs	r5, #0
  404256:	f7ff ba94 	b.w	403782 <_svfprintf_r+0x1e6>
  40425a:	681c      	ldr	r4, [r3, #0]
  40425c:	3304      	adds	r3, #4
  40425e:	930f      	str	r3, [sp, #60]	; 0x3c
  404260:	2500      	movs	r5, #0
  404262:	e421      	b.n	403aa8 <_svfprintf_r+0x50c>
  404264:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404266:	460a      	mov	r2, r1
  404268:	3204      	adds	r2, #4
  40426a:	680c      	ldr	r4, [r1, #0]
  40426c:	920f      	str	r2, [sp, #60]	; 0x3c
  40426e:	2500      	movs	r5, #0
  404270:	f7ff ba87 	b.w	403782 <_svfprintf_r+0x1e6>
  404274:	4614      	mov	r4, r2
  404276:	3301      	adds	r3, #1
  404278:	4434      	add	r4, r6
  40427a:	2b07      	cmp	r3, #7
  40427c:	9427      	str	r4, [sp, #156]	; 0x9c
  40427e:	9326      	str	r3, [sp, #152]	; 0x98
  404280:	e888 0060 	stmia.w	r8, {r5, r6}
  404284:	f77f ab68 	ble.w	403958 <_svfprintf_r+0x3bc>
  404288:	e6b3      	b.n	403ff2 <_svfprintf_r+0xa56>
  40428a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40428e:	f8cd b01c 	str.w	fp, [sp, #28]
  404292:	ae42      	add	r6, sp, #264	; 0x108
  404294:	3430      	adds	r4, #48	; 0x30
  404296:	2301      	movs	r3, #1
  404298:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40429c:	930e      	str	r3, [sp, #56]	; 0x38
  40429e:	f7ff ba8d 	b.w	4037bc <_svfprintf_r+0x220>
  4042a2:	aa25      	add	r2, sp, #148	; 0x94
  4042a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042a8:	f004 f870 	bl	40838c <__ssprint_r>
  4042ac:	2800      	cmp	r0, #0
  4042ae:	f47f aa47 	bne.w	403740 <_svfprintf_r+0x1a4>
  4042b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042b4:	46c8      	mov	r8, r9
  4042b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4042b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042ba:	429a      	cmp	r2, r3
  4042bc:	db44      	blt.n	404348 <_svfprintf_r+0xdac>
  4042be:	9b07      	ldr	r3, [sp, #28]
  4042c0:	07d9      	lsls	r1, r3, #31
  4042c2:	d441      	bmi.n	404348 <_svfprintf_r+0xdac>
  4042c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4042c8:	1a9a      	subs	r2, r3, r2
  4042ca:	1a1d      	subs	r5, r3, r0
  4042cc:	4295      	cmp	r5, r2
  4042ce:	bfa8      	it	ge
  4042d0:	4615      	movge	r5, r2
  4042d2:	2d00      	cmp	r5, #0
  4042d4:	dd0e      	ble.n	4042f4 <_svfprintf_r+0xd58>
  4042d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4042d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4042dc:	3101      	adds	r1, #1
  4042de:	4406      	add	r6, r0
  4042e0:	442c      	add	r4, r5
  4042e2:	2907      	cmp	r1, #7
  4042e4:	f8c8 6000 	str.w	r6, [r8]
  4042e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4042ea:	9126      	str	r1, [sp, #152]	; 0x98
  4042ec:	f300 823b 	bgt.w	404766 <_svfprintf_r+0x11ca>
  4042f0:	f108 0808 	add.w	r8, r8, #8
  4042f4:	2d00      	cmp	r5, #0
  4042f6:	bfac      	ite	ge
  4042f8:	1b56      	subge	r6, r2, r5
  4042fa:	4616      	movlt	r6, r2
  4042fc:	2e00      	cmp	r6, #0
  4042fe:	f77f ab2d 	ble.w	40395c <_svfprintf_r+0x3c0>
  404302:	2e10      	cmp	r6, #16
  404304:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404306:	4db0      	ldr	r5, [pc, #704]	; (4045c8 <_svfprintf_r+0x102c>)
  404308:	ddb5      	ble.n	404276 <_svfprintf_r+0xcda>
  40430a:	4622      	mov	r2, r4
  40430c:	2710      	movs	r7, #16
  40430e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404312:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404314:	e004      	b.n	404320 <_svfprintf_r+0xd84>
  404316:	f108 0808 	add.w	r8, r8, #8
  40431a:	3e10      	subs	r6, #16
  40431c:	2e10      	cmp	r6, #16
  40431e:	dda9      	ble.n	404274 <_svfprintf_r+0xcd8>
  404320:	3301      	adds	r3, #1
  404322:	3210      	adds	r2, #16
  404324:	2b07      	cmp	r3, #7
  404326:	9227      	str	r2, [sp, #156]	; 0x9c
  404328:	9326      	str	r3, [sp, #152]	; 0x98
  40432a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40432e:	ddf2      	ble.n	404316 <_svfprintf_r+0xd7a>
  404330:	aa25      	add	r2, sp, #148	; 0x94
  404332:	4621      	mov	r1, r4
  404334:	4658      	mov	r0, fp
  404336:	f004 f829 	bl	40838c <__ssprint_r>
  40433a:	2800      	cmp	r0, #0
  40433c:	f47f aa00 	bne.w	403740 <_svfprintf_r+0x1a4>
  404340:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404342:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404344:	46c8      	mov	r8, r9
  404346:	e7e8      	b.n	40431a <_svfprintf_r+0xd7e>
  404348:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40434c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40434e:	f8c8 1000 	str.w	r1, [r8]
  404352:	3301      	adds	r3, #1
  404354:	4404      	add	r4, r0
  404356:	2b07      	cmp	r3, #7
  404358:	9427      	str	r4, [sp, #156]	; 0x9c
  40435a:	f8c8 0004 	str.w	r0, [r8, #4]
  40435e:	9326      	str	r3, [sp, #152]	; 0x98
  404360:	f300 81f5 	bgt.w	40474e <_svfprintf_r+0x11b2>
  404364:	f108 0808 	add.w	r8, r8, #8
  404368:	e7ac      	b.n	4042c4 <_svfprintf_r+0xd28>
  40436a:	9b07      	ldr	r3, [sp, #28]
  40436c:	07da      	lsls	r2, r3, #31
  40436e:	f53f adfe 	bmi.w	403f6e <_svfprintf_r+0x9d2>
  404372:	3701      	adds	r7, #1
  404374:	3401      	adds	r4, #1
  404376:	2301      	movs	r3, #1
  404378:	2f07      	cmp	r7, #7
  40437a:	9427      	str	r4, [sp, #156]	; 0x9c
  40437c:	9726      	str	r7, [sp, #152]	; 0x98
  40437e:	f8c8 6000 	str.w	r6, [r8]
  404382:	f8c8 3004 	str.w	r3, [r8, #4]
  404386:	f77f ae25 	ble.w	403fd4 <_svfprintf_r+0xa38>
  40438a:	e74a      	b.n	404222 <_svfprintf_r+0xc86>
  40438c:	aa25      	add	r2, sp, #148	; 0x94
  40438e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404390:	980c      	ldr	r0, [sp, #48]	; 0x30
  404392:	f003 fffb 	bl	40838c <__ssprint_r>
  404396:	2800      	cmp	r0, #0
  404398:	f47f a9d2 	bne.w	403740 <_svfprintf_r+0x1a4>
  40439c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40439e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043a0:	46c8      	mov	r8, r9
  4043a2:	e5f2      	b.n	403f8a <_svfprintf_r+0x9ee>
  4043a4:	aa25      	add	r2, sp, #148	; 0x94
  4043a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043aa:	f003 ffef 	bl	40838c <__ssprint_r>
  4043ae:	2800      	cmp	r0, #0
  4043b0:	f47f a9c6 	bne.w	403740 <_svfprintf_r+0x1a4>
  4043b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043b8:	46c8      	mov	r8, r9
  4043ba:	e5f5      	b.n	403fa8 <_svfprintf_r+0xa0c>
  4043bc:	464e      	mov	r6, r9
  4043be:	f7ff b9fd 	b.w	4037bc <_svfprintf_r+0x220>
  4043c2:	aa25      	add	r2, sp, #148	; 0x94
  4043c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043c8:	f003 ffe0 	bl	40838c <__ssprint_r>
  4043cc:	2800      	cmp	r0, #0
  4043ce:	f47f a9b7 	bne.w	403740 <_svfprintf_r+0x1a4>
  4043d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043d4:	46c8      	mov	r8, r9
  4043d6:	f7ff ba72 	b.w	4038be <_svfprintf_r+0x322>
  4043da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4043dc:	4622      	mov	r2, r4
  4043de:	4620      	mov	r0, r4
  4043e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4043e2:	4623      	mov	r3, r4
  4043e4:	4621      	mov	r1, r4
  4043e6:	f004 fe9f 	bl	409128 <__aeabi_dcmpun>
  4043ea:	2800      	cmp	r0, #0
  4043ec:	f040 8286 	bne.w	4048fc <_svfprintf_r+0x1360>
  4043f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043f2:	3301      	adds	r3, #1
  4043f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043f6:	f023 0320 	bic.w	r3, r3, #32
  4043fa:	930e      	str	r3, [sp, #56]	; 0x38
  4043fc:	f000 81e2 	beq.w	4047c4 <_svfprintf_r+0x1228>
  404400:	2b47      	cmp	r3, #71	; 0x47
  404402:	f000 811e 	beq.w	404642 <_svfprintf_r+0x10a6>
  404406:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40440a:	9307      	str	r3, [sp, #28]
  40440c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40440e:	1e1f      	subs	r7, r3, #0
  404410:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404412:	9308      	str	r3, [sp, #32]
  404414:	bfbb      	ittet	lt
  404416:	463b      	movlt	r3, r7
  404418:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40441c:	2300      	movge	r3, #0
  40441e:	232d      	movlt	r3, #45	; 0x2d
  404420:	9310      	str	r3, [sp, #64]	; 0x40
  404422:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404424:	2b66      	cmp	r3, #102	; 0x66
  404426:	f000 81bb 	beq.w	4047a0 <_svfprintf_r+0x1204>
  40442a:	2b46      	cmp	r3, #70	; 0x46
  40442c:	f000 80df 	beq.w	4045ee <_svfprintf_r+0x1052>
  404430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404432:	9a08      	ldr	r2, [sp, #32]
  404434:	2b45      	cmp	r3, #69	; 0x45
  404436:	bf0c      	ite	eq
  404438:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40443a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40443c:	a823      	add	r0, sp, #140	; 0x8c
  40443e:	a920      	add	r1, sp, #128	; 0x80
  404440:	bf08      	it	eq
  404442:	1c5d      	addeq	r5, r3, #1
  404444:	9004      	str	r0, [sp, #16]
  404446:	9103      	str	r1, [sp, #12]
  404448:	a81f      	add	r0, sp, #124	; 0x7c
  40444a:	2102      	movs	r1, #2
  40444c:	463b      	mov	r3, r7
  40444e:	9002      	str	r0, [sp, #8]
  404450:	9501      	str	r5, [sp, #4]
  404452:	9100      	str	r1, [sp, #0]
  404454:	980c      	ldr	r0, [sp, #48]	; 0x30
  404456:	f001 faa3 	bl	4059a0 <_dtoa_r>
  40445a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40445c:	2b67      	cmp	r3, #103	; 0x67
  40445e:	4606      	mov	r6, r0
  404460:	f040 81e0 	bne.w	404824 <_svfprintf_r+0x1288>
  404464:	f01b 0f01 	tst.w	fp, #1
  404468:	f000 8246 	beq.w	4048f8 <_svfprintf_r+0x135c>
  40446c:	1974      	adds	r4, r6, r5
  40446e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404470:	9808      	ldr	r0, [sp, #32]
  404472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404474:	4639      	mov	r1, r7
  404476:	f004 fe25 	bl	4090c4 <__aeabi_dcmpeq>
  40447a:	2800      	cmp	r0, #0
  40447c:	f040 8165 	bne.w	40474a <_svfprintf_r+0x11ae>
  404480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404482:	42a3      	cmp	r3, r4
  404484:	d206      	bcs.n	404494 <_svfprintf_r+0xef8>
  404486:	2130      	movs	r1, #48	; 0x30
  404488:	1c5a      	adds	r2, r3, #1
  40448a:	9223      	str	r2, [sp, #140]	; 0x8c
  40448c:	7019      	strb	r1, [r3, #0]
  40448e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404490:	429c      	cmp	r4, r3
  404492:	d8f9      	bhi.n	404488 <_svfprintf_r+0xeec>
  404494:	1b9b      	subs	r3, r3, r6
  404496:	9313      	str	r3, [sp, #76]	; 0x4c
  404498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40449a:	2b47      	cmp	r3, #71	; 0x47
  40449c:	f000 80e9 	beq.w	404672 <_svfprintf_r+0x10d6>
  4044a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a2:	2b65      	cmp	r3, #101	; 0x65
  4044a4:	f340 81cd 	ble.w	404842 <_svfprintf_r+0x12a6>
  4044a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044aa:	2b66      	cmp	r3, #102	; 0x66
  4044ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044ae:	9312      	str	r3, [sp, #72]	; 0x48
  4044b0:	f000 819e 	beq.w	4047f0 <_svfprintf_r+0x1254>
  4044b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4044b8:	4619      	mov	r1, r3
  4044ba:	4291      	cmp	r1, r2
  4044bc:	f300 818a 	bgt.w	4047d4 <_svfprintf_r+0x1238>
  4044c0:	f01b 0f01 	tst.w	fp, #1
  4044c4:	f040 8213 	bne.w	4048ee <_svfprintf_r+0x1352>
  4044c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4044cc:	9308      	str	r3, [sp, #32]
  4044ce:	2367      	movs	r3, #103	; 0x67
  4044d0:	920e      	str	r2, [sp, #56]	; 0x38
  4044d2:	9311      	str	r3, [sp, #68]	; 0x44
  4044d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4044d6:	2b00      	cmp	r3, #0
  4044d8:	f040 80c4 	bne.w	404664 <_svfprintf_r+0x10c8>
  4044dc:	930a      	str	r3, [sp, #40]	; 0x28
  4044de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044e2:	f7ff b973 	b.w	4037cc <_svfprintf_r+0x230>
  4044e6:	4635      	mov	r5, r6
  4044e8:	460c      	mov	r4, r1
  4044ea:	4646      	mov	r6, r8
  4044ec:	4690      	mov	r8, r2
  4044ee:	3301      	adds	r3, #1
  4044f0:	443c      	add	r4, r7
  4044f2:	2b07      	cmp	r3, #7
  4044f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4044f6:	9326      	str	r3, [sp, #152]	; 0x98
  4044f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4044fc:	f73f aed1 	bgt.w	4042a2 <_svfprintf_r+0xd06>
  404500:	f108 0808 	add.w	r8, r8, #8
  404504:	e6d7      	b.n	4042b6 <_svfprintf_r+0xd1a>
  404506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404508:	6813      	ldr	r3, [r2, #0]
  40450a:	3204      	adds	r2, #4
  40450c:	920f      	str	r2, [sp, #60]	; 0x3c
  40450e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404510:	601a      	str	r2, [r3, #0]
  404512:	f7ff b86a 	b.w	4035ea <_svfprintf_r+0x4e>
  404516:	aa25      	add	r2, sp, #148	; 0x94
  404518:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40451a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40451c:	f003 ff36 	bl	40838c <__ssprint_r>
  404520:	2800      	cmp	r0, #0
  404522:	f47f a90d 	bne.w	403740 <_svfprintf_r+0x1a4>
  404526:	46c8      	mov	r8, r9
  404528:	e48d      	b.n	403e46 <_svfprintf_r+0x8aa>
  40452a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40452c:	4a27      	ldr	r2, [pc, #156]	; (4045cc <_svfprintf_r+0x1030>)
  40452e:	f8c8 2000 	str.w	r2, [r8]
  404532:	3301      	adds	r3, #1
  404534:	3401      	adds	r4, #1
  404536:	2201      	movs	r2, #1
  404538:	2b07      	cmp	r3, #7
  40453a:	9427      	str	r4, [sp, #156]	; 0x9c
  40453c:	9326      	str	r3, [sp, #152]	; 0x98
  40453e:	f8c8 2004 	str.w	r2, [r8, #4]
  404542:	dc72      	bgt.n	40462a <_svfprintf_r+0x108e>
  404544:	f108 0808 	add.w	r8, r8, #8
  404548:	b929      	cbnz	r1, 404556 <_svfprintf_r+0xfba>
  40454a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40454c:	b91b      	cbnz	r3, 404556 <_svfprintf_r+0xfba>
  40454e:	9b07      	ldr	r3, [sp, #28]
  404550:	07d8      	lsls	r0, r3, #31
  404552:	f57f aa03 	bpl.w	40395c <_svfprintf_r+0x3c0>
  404556:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404558:	9819      	ldr	r0, [sp, #100]	; 0x64
  40455a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40455c:	f8c8 2000 	str.w	r2, [r8]
  404560:	3301      	adds	r3, #1
  404562:	4602      	mov	r2, r0
  404564:	4422      	add	r2, r4
  404566:	2b07      	cmp	r3, #7
  404568:	9227      	str	r2, [sp, #156]	; 0x9c
  40456a:	f8c8 0004 	str.w	r0, [r8, #4]
  40456e:	9326      	str	r3, [sp, #152]	; 0x98
  404570:	f300 818d 	bgt.w	40488e <_svfprintf_r+0x12f2>
  404574:	f108 0808 	add.w	r8, r8, #8
  404578:	2900      	cmp	r1, #0
  40457a:	f2c0 8165 	blt.w	404848 <_svfprintf_r+0x12ac>
  40457e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404580:	f8c8 6000 	str.w	r6, [r8]
  404584:	3301      	adds	r3, #1
  404586:	188c      	adds	r4, r1, r2
  404588:	2b07      	cmp	r3, #7
  40458a:	9427      	str	r4, [sp, #156]	; 0x9c
  40458c:	9326      	str	r3, [sp, #152]	; 0x98
  40458e:	f8c8 1004 	str.w	r1, [r8, #4]
  404592:	f77f a9e1 	ble.w	403958 <_svfprintf_r+0x3bc>
  404596:	e52c      	b.n	403ff2 <_svfprintf_r+0xa56>
  404598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40459a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40459c:	6813      	ldr	r3, [r2, #0]
  40459e:	17cd      	asrs	r5, r1, #31
  4045a0:	4608      	mov	r0, r1
  4045a2:	3204      	adds	r2, #4
  4045a4:	4629      	mov	r1, r5
  4045a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4045a8:	e9c3 0100 	strd	r0, r1, [r3]
  4045ac:	f7ff b81d 	b.w	4035ea <_svfprintf_r+0x4e>
  4045b0:	aa25      	add	r2, sp, #148	; 0x94
  4045b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045b6:	f003 fee9 	bl	40838c <__ssprint_r>
  4045ba:	2800      	cmp	r0, #0
  4045bc:	f47f a8c0 	bne.w	403740 <_svfprintf_r+0x1a4>
  4045c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045c2:	46c8      	mov	r8, r9
  4045c4:	e458      	b.n	403e78 <_svfprintf_r+0x8dc>
  4045c6:	bf00      	nop
  4045c8:	00409654 	.word	0x00409654
  4045cc:	00409640 	.word	0x00409640
  4045d0:	2140      	movs	r1, #64	; 0x40
  4045d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045d4:	f002 fe58 	bl	407288 <_malloc_r>
  4045d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045da:	6010      	str	r0, [r2, #0]
  4045dc:	6110      	str	r0, [r2, #16]
  4045de:	2800      	cmp	r0, #0
  4045e0:	f000 81f2 	beq.w	4049c8 <_svfprintf_r+0x142c>
  4045e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045e6:	2340      	movs	r3, #64	; 0x40
  4045e8:	6153      	str	r3, [r2, #20]
  4045ea:	f7fe bfee 	b.w	4035ca <_svfprintf_r+0x2e>
  4045ee:	a823      	add	r0, sp, #140	; 0x8c
  4045f0:	a920      	add	r1, sp, #128	; 0x80
  4045f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4045f4:	9004      	str	r0, [sp, #16]
  4045f6:	9103      	str	r1, [sp, #12]
  4045f8:	a81f      	add	r0, sp, #124	; 0x7c
  4045fa:	2103      	movs	r1, #3
  4045fc:	9002      	str	r0, [sp, #8]
  4045fe:	9a08      	ldr	r2, [sp, #32]
  404600:	9401      	str	r4, [sp, #4]
  404602:	463b      	mov	r3, r7
  404604:	9100      	str	r1, [sp, #0]
  404606:	980c      	ldr	r0, [sp, #48]	; 0x30
  404608:	f001 f9ca 	bl	4059a0 <_dtoa_r>
  40460c:	4625      	mov	r5, r4
  40460e:	4606      	mov	r6, r0
  404610:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404612:	2b46      	cmp	r3, #70	; 0x46
  404614:	eb06 0405 	add.w	r4, r6, r5
  404618:	f47f af29 	bne.w	40446e <_svfprintf_r+0xed2>
  40461c:	7833      	ldrb	r3, [r6, #0]
  40461e:	2b30      	cmp	r3, #48	; 0x30
  404620:	f000 8178 	beq.w	404914 <_svfprintf_r+0x1378>
  404624:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404626:	442c      	add	r4, r5
  404628:	e721      	b.n	40446e <_svfprintf_r+0xed2>
  40462a:	aa25      	add	r2, sp, #148	; 0x94
  40462c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40462e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404630:	f003 feac 	bl	40838c <__ssprint_r>
  404634:	2800      	cmp	r0, #0
  404636:	f47f a883 	bne.w	403740 <_svfprintf_r+0x1a4>
  40463a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40463c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40463e:	46c8      	mov	r8, r9
  404640:	e782      	b.n	404548 <_svfprintf_r+0xfac>
  404642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404644:	2b00      	cmp	r3, #0
  404646:	bf08      	it	eq
  404648:	2301      	moveq	r3, #1
  40464a:	930a      	str	r3, [sp, #40]	; 0x28
  40464c:	e6db      	b.n	404406 <_svfprintf_r+0xe6a>
  40464e:	4630      	mov	r0, r6
  404650:	940a      	str	r4, [sp, #40]	; 0x28
  404652:	f7fe ff35 	bl	4034c0 <strlen>
  404656:	950f      	str	r5, [sp, #60]	; 0x3c
  404658:	900e      	str	r0, [sp, #56]	; 0x38
  40465a:	f8cd b01c 	str.w	fp, [sp, #28]
  40465e:	4603      	mov	r3, r0
  404660:	f7ff b9f9 	b.w	403a56 <_svfprintf_r+0x4ba>
  404664:	272d      	movs	r7, #45	; 0x2d
  404666:	2300      	movs	r3, #0
  404668:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40466c:	930a      	str	r3, [sp, #40]	; 0x28
  40466e:	f7ff b8ae 	b.w	4037ce <_svfprintf_r+0x232>
  404672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404674:	9312      	str	r3, [sp, #72]	; 0x48
  404676:	461a      	mov	r2, r3
  404678:	3303      	adds	r3, #3
  40467a:	db04      	blt.n	404686 <_svfprintf_r+0x10ea>
  40467c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40467e:	4619      	mov	r1, r3
  404680:	4291      	cmp	r1, r2
  404682:	f6bf af17 	bge.w	4044b4 <_svfprintf_r+0xf18>
  404686:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404688:	3b02      	subs	r3, #2
  40468a:	9311      	str	r3, [sp, #68]	; 0x44
  40468c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404690:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404694:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404696:	3b01      	subs	r3, #1
  404698:	2b00      	cmp	r3, #0
  40469a:	931f      	str	r3, [sp, #124]	; 0x7c
  40469c:	bfbd      	ittte	lt
  40469e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4046a0:	f1c3 0301 	rsblt	r3, r3, #1
  4046a4:	222d      	movlt	r2, #45	; 0x2d
  4046a6:	222b      	movge	r2, #43	; 0x2b
  4046a8:	2b09      	cmp	r3, #9
  4046aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4046ae:	f340 8116 	ble.w	4048de <_svfprintf_r+0x1342>
  4046b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4046b6:	4620      	mov	r0, r4
  4046b8:	4dab      	ldr	r5, [pc, #684]	; (404968 <_svfprintf_r+0x13cc>)
  4046ba:	e000      	b.n	4046be <_svfprintf_r+0x1122>
  4046bc:	4610      	mov	r0, r2
  4046be:	fb85 1203 	smull	r1, r2, r5, r3
  4046c2:	17d9      	asrs	r1, r3, #31
  4046c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4046c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4046cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4046d0:	3230      	adds	r2, #48	; 0x30
  4046d2:	2909      	cmp	r1, #9
  4046d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4046d8:	460b      	mov	r3, r1
  4046da:	f100 32ff 	add.w	r2, r0, #4294967295
  4046de:	dced      	bgt.n	4046bc <_svfprintf_r+0x1120>
  4046e0:	3330      	adds	r3, #48	; 0x30
  4046e2:	3802      	subs	r0, #2
  4046e4:	b2d9      	uxtb	r1, r3
  4046e6:	4284      	cmp	r4, r0
  4046e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4046ec:	f240 8165 	bls.w	4049ba <_svfprintf_r+0x141e>
  4046f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4046f4:	4613      	mov	r3, r2
  4046f6:	e001      	b.n	4046fc <_svfprintf_r+0x1160>
  4046f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4046fc:	f800 1b01 	strb.w	r1, [r0], #1
  404700:	42a3      	cmp	r3, r4
  404702:	d1f9      	bne.n	4046f8 <_svfprintf_r+0x115c>
  404704:	3301      	adds	r3, #1
  404706:	1a9b      	subs	r3, r3, r2
  404708:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40470c:	4413      	add	r3, r2
  40470e:	aa21      	add	r2, sp, #132	; 0x84
  404710:	1a9b      	subs	r3, r3, r2
  404712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404714:	931b      	str	r3, [sp, #108]	; 0x6c
  404716:	2a01      	cmp	r2, #1
  404718:	4413      	add	r3, r2
  40471a:	930e      	str	r3, [sp, #56]	; 0x38
  40471c:	f340 8119 	ble.w	404952 <_svfprintf_r+0x13b6>
  404720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404722:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404724:	4413      	add	r3, r2
  404726:	930e      	str	r3, [sp, #56]	; 0x38
  404728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40472c:	9308      	str	r3, [sp, #32]
  40472e:	2300      	movs	r3, #0
  404730:	9312      	str	r3, [sp, #72]	; 0x48
  404732:	e6cf      	b.n	4044d4 <_svfprintf_r+0xf38>
  404734:	aa25      	add	r2, sp, #148	; 0x94
  404736:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404738:	980c      	ldr	r0, [sp, #48]	; 0x30
  40473a:	f003 fe27 	bl	40838c <__ssprint_r>
  40473e:	2800      	cmp	r0, #0
  404740:	f47e affe 	bne.w	403740 <_svfprintf_r+0x1a4>
  404744:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404746:	46c8      	mov	r8, r9
  404748:	e4d7      	b.n	4040fa <_svfprintf_r+0xb5e>
  40474a:	4623      	mov	r3, r4
  40474c:	e6a2      	b.n	404494 <_svfprintf_r+0xef8>
  40474e:	aa25      	add	r2, sp, #148	; 0x94
  404750:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404752:	980c      	ldr	r0, [sp, #48]	; 0x30
  404754:	f003 fe1a 	bl	40838c <__ssprint_r>
  404758:	2800      	cmp	r0, #0
  40475a:	f47e aff1 	bne.w	403740 <_svfprintf_r+0x1a4>
  40475e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404760:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404762:	46c8      	mov	r8, r9
  404764:	e5ae      	b.n	4042c4 <_svfprintf_r+0xd28>
  404766:	aa25      	add	r2, sp, #148	; 0x94
  404768:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40476a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40476c:	f003 fe0e 	bl	40838c <__ssprint_r>
  404770:	2800      	cmp	r0, #0
  404772:	f47e afe5 	bne.w	403740 <_svfprintf_r+0x1a4>
  404776:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40477a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40477c:	1a9a      	subs	r2, r3, r2
  40477e:	46c8      	mov	r8, r9
  404780:	e5b8      	b.n	4042f4 <_svfprintf_r+0xd58>
  404782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404784:	9612      	str	r6, [sp, #72]	; 0x48
  404786:	2b06      	cmp	r3, #6
  404788:	bf28      	it	cs
  40478a:	2306      	movcs	r3, #6
  40478c:	960a      	str	r6, [sp, #40]	; 0x28
  40478e:	4637      	mov	r7, r6
  404790:	9308      	str	r3, [sp, #32]
  404792:	950f      	str	r5, [sp, #60]	; 0x3c
  404794:	f8cd b01c 	str.w	fp, [sp, #28]
  404798:	930e      	str	r3, [sp, #56]	; 0x38
  40479a:	4e74      	ldr	r6, [pc, #464]	; (40496c <_svfprintf_r+0x13d0>)
  40479c:	f7ff b816 	b.w	4037cc <_svfprintf_r+0x230>
  4047a0:	a823      	add	r0, sp, #140	; 0x8c
  4047a2:	a920      	add	r1, sp, #128	; 0x80
  4047a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047a6:	9004      	str	r0, [sp, #16]
  4047a8:	9103      	str	r1, [sp, #12]
  4047aa:	a81f      	add	r0, sp, #124	; 0x7c
  4047ac:	2103      	movs	r1, #3
  4047ae:	9002      	str	r0, [sp, #8]
  4047b0:	9a08      	ldr	r2, [sp, #32]
  4047b2:	9501      	str	r5, [sp, #4]
  4047b4:	463b      	mov	r3, r7
  4047b6:	9100      	str	r1, [sp, #0]
  4047b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047ba:	f001 f8f1 	bl	4059a0 <_dtoa_r>
  4047be:	4606      	mov	r6, r0
  4047c0:	1944      	adds	r4, r0, r5
  4047c2:	e72b      	b.n	40461c <_svfprintf_r+0x1080>
  4047c4:	2306      	movs	r3, #6
  4047c6:	930a      	str	r3, [sp, #40]	; 0x28
  4047c8:	e61d      	b.n	404406 <_svfprintf_r+0xe6a>
  4047ca:	272d      	movs	r7, #45	; 0x2d
  4047cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047d0:	f7ff bacd 	b.w	403d6e <_svfprintf_r+0x7d2>
  4047d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047d8:	4413      	add	r3, r2
  4047da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4047dc:	930e      	str	r3, [sp, #56]	; 0x38
  4047de:	2a00      	cmp	r2, #0
  4047e0:	f340 80b0 	ble.w	404944 <_svfprintf_r+0x13a8>
  4047e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047e8:	9308      	str	r3, [sp, #32]
  4047ea:	2367      	movs	r3, #103	; 0x67
  4047ec:	9311      	str	r3, [sp, #68]	; 0x44
  4047ee:	e671      	b.n	4044d4 <_svfprintf_r+0xf38>
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	f340 80c3 	ble.w	40497c <_svfprintf_r+0x13e0>
  4047f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047f8:	2a00      	cmp	r2, #0
  4047fa:	f040 8099 	bne.w	404930 <_svfprintf_r+0x1394>
  4047fe:	f01b 0f01 	tst.w	fp, #1
  404802:	f040 8095 	bne.w	404930 <_svfprintf_r+0x1394>
  404806:	9308      	str	r3, [sp, #32]
  404808:	930e      	str	r3, [sp, #56]	; 0x38
  40480a:	e663      	b.n	4044d4 <_svfprintf_r+0xf38>
  40480c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40480e:	9308      	str	r3, [sp, #32]
  404810:	930e      	str	r3, [sp, #56]	; 0x38
  404812:	900a      	str	r0, [sp, #40]	; 0x28
  404814:	950f      	str	r5, [sp, #60]	; 0x3c
  404816:	f8cd b01c 	str.w	fp, [sp, #28]
  40481a:	9012      	str	r0, [sp, #72]	; 0x48
  40481c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404820:	f7fe bfd4 	b.w	4037cc <_svfprintf_r+0x230>
  404824:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404826:	2b47      	cmp	r3, #71	; 0x47
  404828:	f47f ae20 	bne.w	40446c <_svfprintf_r+0xed0>
  40482c:	f01b 0f01 	tst.w	fp, #1
  404830:	f47f aeee 	bne.w	404610 <_svfprintf_r+0x1074>
  404834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404836:	1b9b      	subs	r3, r3, r6
  404838:	9313      	str	r3, [sp, #76]	; 0x4c
  40483a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40483c:	2b47      	cmp	r3, #71	; 0x47
  40483e:	f43f af18 	beq.w	404672 <_svfprintf_r+0x10d6>
  404842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404844:	9312      	str	r3, [sp, #72]	; 0x48
  404846:	e721      	b.n	40468c <_svfprintf_r+0x10f0>
  404848:	424f      	negs	r7, r1
  40484a:	3110      	adds	r1, #16
  40484c:	4d48      	ldr	r5, [pc, #288]	; (404970 <_svfprintf_r+0x13d4>)
  40484e:	da2f      	bge.n	4048b0 <_svfprintf_r+0x1314>
  404850:	2410      	movs	r4, #16
  404852:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404856:	e004      	b.n	404862 <_svfprintf_r+0x12c6>
  404858:	f108 0808 	add.w	r8, r8, #8
  40485c:	3f10      	subs	r7, #16
  40485e:	2f10      	cmp	r7, #16
  404860:	dd26      	ble.n	4048b0 <_svfprintf_r+0x1314>
  404862:	3301      	adds	r3, #1
  404864:	3210      	adds	r2, #16
  404866:	2b07      	cmp	r3, #7
  404868:	9227      	str	r2, [sp, #156]	; 0x9c
  40486a:	9326      	str	r3, [sp, #152]	; 0x98
  40486c:	f8c8 5000 	str.w	r5, [r8]
  404870:	f8c8 4004 	str.w	r4, [r8, #4]
  404874:	ddf0      	ble.n	404858 <_svfprintf_r+0x12bc>
  404876:	aa25      	add	r2, sp, #148	; 0x94
  404878:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40487a:	4658      	mov	r0, fp
  40487c:	f003 fd86 	bl	40838c <__ssprint_r>
  404880:	2800      	cmp	r0, #0
  404882:	f47e af5d 	bne.w	403740 <_svfprintf_r+0x1a4>
  404886:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404888:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40488a:	46c8      	mov	r8, r9
  40488c:	e7e6      	b.n	40485c <_svfprintf_r+0x12c0>
  40488e:	aa25      	add	r2, sp, #148	; 0x94
  404890:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404892:	980c      	ldr	r0, [sp, #48]	; 0x30
  404894:	f003 fd7a 	bl	40838c <__ssprint_r>
  404898:	2800      	cmp	r0, #0
  40489a:	f47e af51 	bne.w	403740 <_svfprintf_r+0x1a4>
  40489e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4048a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048a4:	46c8      	mov	r8, r9
  4048a6:	e667      	b.n	404578 <_svfprintf_r+0xfdc>
  4048a8:	2000      	movs	r0, #0
  4048aa:	900a      	str	r0, [sp, #40]	; 0x28
  4048ac:	f7fe bed0 	b.w	403650 <_svfprintf_r+0xb4>
  4048b0:	3301      	adds	r3, #1
  4048b2:	443a      	add	r2, r7
  4048b4:	2b07      	cmp	r3, #7
  4048b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4048bc:	9326      	str	r3, [sp, #152]	; 0x98
  4048be:	f108 0808 	add.w	r8, r8, #8
  4048c2:	f77f ae5c 	ble.w	40457e <_svfprintf_r+0xfe2>
  4048c6:	aa25      	add	r2, sp, #148	; 0x94
  4048c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048cc:	f003 fd5e 	bl	40838c <__ssprint_r>
  4048d0:	2800      	cmp	r0, #0
  4048d2:	f47e af35 	bne.w	403740 <_svfprintf_r+0x1a4>
  4048d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048da:	46c8      	mov	r8, r9
  4048dc:	e64f      	b.n	40457e <_svfprintf_r+0xfe2>
  4048de:	3330      	adds	r3, #48	; 0x30
  4048e0:	2230      	movs	r2, #48	; 0x30
  4048e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4048e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4048ea:	ab22      	add	r3, sp, #136	; 0x88
  4048ec:	e70f      	b.n	40470e <_svfprintf_r+0x1172>
  4048ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048f2:	4413      	add	r3, r2
  4048f4:	930e      	str	r3, [sp, #56]	; 0x38
  4048f6:	e775      	b.n	4047e4 <_svfprintf_r+0x1248>
  4048f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4048fa:	e5cb      	b.n	404494 <_svfprintf_r+0xef8>
  4048fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4048fe:	4e1d      	ldr	r6, [pc, #116]	; (404974 <_svfprintf_r+0x13d8>)
  404900:	2b00      	cmp	r3, #0
  404902:	bfb6      	itet	lt
  404904:	272d      	movlt	r7, #45	; 0x2d
  404906:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40490a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40490e:	4b1a      	ldr	r3, [pc, #104]	; (404978 <_svfprintf_r+0x13dc>)
  404910:	f7ff ba2f 	b.w	403d72 <_svfprintf_r+0x7d6>
  404914:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404916:	9808      	ldr	r0, [sp, #32]
  404918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40491a:	4639      	mov	r1, r7
  40491c:	f004 fbd2 	bl	4090c4 <__aeabi_dcmpeq>
  404920:	2800      	cmp	r0, #0
  404922:	f47f ae7f 	bne.w	404624 <_svfprintf_r+0x1088>
  404926:	f1c5 0501 	rsb	r5, r5, #1
  40492a:	951f      	str	r5, [sp, #124]	; 0x7c
  40492c:	442c      	add	r4, r5
  40492e:	e59e      	b.n	40446e <_svfprintf_r+0xed2>
  404930:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404932:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404934:	4413      	add	r3, r2
  404936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404938:	441a      	add	r2, r3
  40493a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40493e:	920e      	str	r2, [sp, #56]	; 0x38
  404940:	9308      	str	r3, [sp, #32]
  404942:	e5c7      	b.n	4044d4 <_svfprintf_r+0xf38>
  404944:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404948:	f1c3 0301 	rsb	r3, r3, #1
  40494c:	441a      	add	r2, r3
  40494e:	4613      	mov	r3, r2
  404950:	e7d0      	b.n	4048f4 <_svfprintf_r+0x1358>
  404952:	f01b 0301 	ands.w	r3, fp, #1
  404956:	9312      	str	r3, [sp, #72]	; 0x48
  404958:	f47f aee2 	bne.w	404720 <_svfprintf_r+0x1184>
  40495c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40495e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404962:	9308      	str	r3, [sp, #32]
  404964:	e5b6      	b.n	4044d4 <_svfprintf_r+0xf38>
  404966:	bf00      	nop
  404968:	66666667 	.word	0x66666667
  40496c:	00409638 	.word	0x00409638
  404970:	00409654 	.word	0x00409654
  404974:	0040960c 	.word	0x0040960c
  404978:	00409608 	.word	0x00409608
  40497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40497e:	b913      	cbnz	r3, 404986 <_svfprintf_r+0x13ea>
  404980:	f01b 0f01 	tst.w	fp, #1
  404984:	d002      	beq.n	40498c <_svfprintf_r+0x13f0>
  404986:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404988:	3301      	adds	r3, #1
  40498a:	e7d4      	b.n	404936 <_svfprintf_r+0x139a>
  40498c:	2301      	movs	r3, #1
  40498e:	e73a      	b.n	404806 <_svfprintf_r+0x126a>
  404990:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404992:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404996:	6828      	ldr	r0, [r5, #0]
  404998:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40499c:	900a      	str	r0, [sp, #40]	; 0x28
  40499e:	4628      	mov	r0, r5
  4049a0:	3004      	adds	r0, #4
  4049a2:	46a2      	mov	sl, r4
  4049a4:	900f      	str	r0, [sp, #60]	; 0x3c
  4049a6:	f7fe be51 	b.w	40364c <_svfprintf_r+0xb0>
  4049aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ae:	f7ff b867 	b.w	403a80 <_svfprintf_r+0x4e4>
  4049b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049b6:	f7ff ba15 	b.w	403de4 <_svfprintf_r+0x848>
  4049ba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4049be:	e6a6      	b.n	40470e <_svfprintf_r+0x1172>
  4049c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049c4:	f7ff b8eb 	b.w	403b9e <_svfprintf_r+0x602>
  4049c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4049ca:	230c      	movs	r3, #12
  4049cc:	6013      	str	r3, [r2, #0]
  4049ce:	f04f 33ff 	mov.w	r3, #4294967295
  4049d2:	9309      	str	r3, [sp, #36]	; 0x24
  4049d4:	f7fe bebd 	b.w	403752 <_svfprintf_r+0x1b6>
  4049d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049dc:	f7ff b99a 	b.w	403d14 <_svfprintf_r+0x778>
  4049e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049e4:	f7ff b976 	b.w	403cd4 <_svfprintf_r+0x738>
  4049e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ec:	f7ff b959 	b.w	403ca2 <_svfprintf_r+0x706>
  4049f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049f4:	f7ff b912 	b.w	403c1c <_svfprintf_r+0x680>

004049f8 <__sprint_r.part.0>:
  4049f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4049fe:	049c      	lsls	r4, r3, #18
  404a00:	4693      	mov	fp, r2
  404a02:	d52f      	bpl.n	404a64 <__sprint_r.part.0+0x6c>
  404a04:	6893      	ldr	r3, [r2, #8]
  404a06:	6812      	ldr	r2, [r2, #0]
  404a08:	b353      	cbz	r3, 404a60 <__sprint_r.part.0+0x68>
  404a0a:	460e      	mov	r6, r1
  404a0c:	4607      	mov	r7, r0
  404a0e:	f102 0908 	add.w	r9, r2, #8
  404a12:	e919 0420 	ldmdb	r9, {r5, sl}
  404a16:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404a1a:	d017      	beq.n	404a4c <__sprint_r.part.0+0x54>
  404a1c:	3d04      	subs	r5, #4
  404a1e:	2400      	movs	r4, #0
  404a20:	e001      	b.n	404a26 <__sprint_r.part.0+0x2e>
  404a22:	45a0      	cmp	r8, r4
  404a24:	d010      	beq.n	404a48 <__sprint_r.part.0+0x50>
  404a26:	4632      	mov	r2, r6
  404a28:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404a2c:	4638      	mov	r0, r7
  404a2e:	f002 f87b 	bl	406b28 <_fputwc_r>
  404a32:	1c43      	adds	r3, r0, #1
  404a34:	f104 0401 	add.w	r4, r4, #1
  404a38:	d1f3      	bne.n	404a22 <__sprint_r.part.0+0x2a>
  404a3a:	2300      	movs	r3, #0
  404a3c:	f8cb 3008 	str.w	r3, [fp, #8]
  404a40:	f8cb 3004 	str.w	r3, [fp, #4]
  404a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a48:	f8db 3008 	ldr.w	r3, [fp, #8]
  404a4c:	f02a 0a03 	bic.w	sl, sl, #3
  404a50:	eba3 030a 	sub.w	r3, r3, sl
  404a54:	f8cb 3008 	str.w	r3, [fp, #8]
  404a58:	f109 0908 	add.w	r9, r9, #8
  404a5c:	2b00      	cmp	r3, #0
  404a5e:	d1d8      	bne.n	404a12 <__sprint_r.part.0+0x1a>
  404a60:	2000      	movs	r0, #0
  404a62:	e7ea      	b.n	404a3a <__sprint_r.part.0+0x42>
  404a64:	f002 f9ca 	bl	406dfc <__sfvwrite_r>
  404a68:	2300      	movs	r3, #0
  404a6a:	f8cb 3008 	str.w	r3, [fp, #8]
  404a6e:	f8cb 3004 	str.w	r3, [fp, #4]
  404a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a76:	bf00      	nop

00404a78 <_vfiprintf_r>:
  404a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a7c:	b0ad      	sub	sp, #180	; 0xb4
  404a7e:	461d      	mov	r5, r3
  404a80:	468b      	mov	fp, r1
  404a82:	4690      	mov	r8, r2
  404a84:	9307      	str	r3, [sp, #28]
  404a86:	9006      	str	r0, [sp, #24]
  404a88:	b118      	cbz	r0, 404a92 <_vfiprintf_r+0x1a>
  404a8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a8c:	2b00      	cmp	r3, #0
  404a8e:	f000 80f3 	beq.w	404c78 <_vfiprintf_r+0x200>
  404a92:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404a96:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404a9a:	07df      	lsls	r7, r3, #31
  404a9c:	b281      	uxth	r1, r0
  404a9e:	d402      	bmi.n	404aa6 <_vfiprintf_r+0x2e>
  404aa0:	058e      	lsls	r6, r1, #22
  404aa2:	f140 80fc 	bpl.w	404c9e <_vfiprintf_r+0x226>
  404aa6:	048c      	lsls	r4, r1, #18
  404aa8:	d40a      	bmi.n	404ac0 <_vfiprintf_r+0x48>
  404aaa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404aae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404ab6:	f8ab 100c 	strh.w	r1, [fp, #12]
  404aba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404abe:	b289      	uxth	r1, r1
  404ac0:	0708      	lsls	r0, r1, #28
  404ac2:	f140 80b3 	bpl.w	404c2c <_vfiprintf_r+0x1b4>
  404ac6:	f8db 3010 	ldr.w	r3, [fp, #16]
  404aca:	2b00      	cmp	r3, #0
  404acc:	f000 80ae 	beq.w	404c2c <_vfiprintf_r+0x1b4>
  404ad0:	f001 031a 	and.w	r3, r1, #26
  404ad4:	2b0a      	cmp	r3, #10
  404ad6:	f000 80b5 	beq.w	404c44 <_vfiprintf_r+0x1cc>
  404ada:	2300      	movs	r3, #0
  404adc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404ae0:	930b      	str	r3, [sp, #44]	; 0x2c
  404ae2:	9311      	str	r3, [sp, #68]	; 0x44
  404ae4:	9310      	str	r3, [sp, #64]	; 0x40
  404ae6:	9303      	str	r3, [sp, #12]
  404ae8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404aec:	46ca      	mov	sl, r9
  404aee:	f8cd b010 	str.w	fp, [sp, #16]
  404af2:	f898 3000 	ldrb.w	r3, [r8]
  404af6:	4644      	mov	r4, r8
  404af8:	b1fb      	cbz	r3, 404b3a <_vfiprintf_r+0xc2>
  404afa:	2b25      	cmp	r3, #37	; 0x25
  404afc:	d102      	bne.n	404b04 <_vfiprintf_r+0x8c>
  404afe:	e01c      	b.n	404b3a <_vfiprintf_r+0xc2>
  404b00:	2b25      	cmp	r3, #37	; 0x25
  404b02:	d003      	beq.n	404b0c <_vfiprintf_r+0x94>
  404b04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404b08:	2b00      	cmp	r3, #0
  404b0a:	d1f9      	bne.n	404b00 <_vfiprintf_r+0x88>
  404b0c:	eba4 0508 	sub.w	r5, r4, r8
  404b10:	b19d      	cbz	r5, 404b3a <_vfiprintf_r+0xc2>
  404b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404b14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b16:	f8ca 8000 	str.w	r8, [sl]
  404b1a:	3301      	adds	r3, #1
  404b1c:	442a      	add	r2, r5
  404b1e:	2b07      	cmp	r3, #7
  404b20:	f8ca 5004 	str.w	r5, [sl, #4]
  404b24:	9211      	str	r2, [sp, #68]	; 0x44
  404b26:	9310      	str	r3, [sp, #64]	; 0x40
  404b28:	dd7a      	ble.n	404c20 <_vfiprintf_r+0x1a8>
  404b2a:	2a00      	cmp	r2, #0
  404b2c:	f040 84b0 	bne.w	405490 <_vfiprintf_r+0xa18>
  404b30:	9b03      	ldr	r3, [sp, #12]
  404b32:	9210      	str	r2, [sp, #64]	; 0x40
  404b34:	442b      	add	r3, r5
  404b36:	46ca      	mov	sl, r9
  404b38:	9303      	str	r3, [sp, #12]
  404b3a:	7823      	ldrb	r3, [r4, #0]
  404b3c:	2b00      	cmp	r3, #0
  404b3e:	f000 83e0 	beq.w	405302 <_vfiprintf_r+0x88a>
  404b42:	2000      	movs	r0, #0
  404b44:	f04f 0300 	mov.w	r3, #0
  404b48:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404b4c:	f104 0801 	add.w	r8, r4, #1
  404b50:	7862      	ldrb	r2, [r4, #1]
  404b52:	4605      	mov	r5, r0
  404b54:	4606      	mov	r6, r0
  404b56:	4603      	mov	r3, r0
  404b58:	f04f 34ff 	mov.w	r4, #4294967295
  404b5c:	f108 0801 	add.w	r8, r8, #1
  404b60:	f1a2 0120 	sub.w	r1, r2, #32
  404b64:	2958      	cmp	r1, #88	; 0x58
  404b66:	f200 82de 	bhi.w	405126 <_vfiprintf_r+0x6ae>
  404b6a:	e8df f011 	tbh	[pc, r1, lsl #1]
  404b6e:	0221      	.short	0x0221
  404b70:	02dc02dc 	.word	0x02dc02dc
  404b74:	02dc0229 	.word	0x02dc0229
  404b78:	02dc02dc 	.word	0x02dc02dc
  404b7c:	02dc02dc 	.word	0x02dc02dc
  404b80:	028902dc 	.word	0x028902dc
  404b84:	02dc0295 	.word	0x02dc0295
  404b88:	02bd00a2 	.word	0x02bd00a2
  404b8c:	019f02dc 	.word	0x019f02dc
  404b90:	01a401a4 	.word	0x01a401a4
  404b94:	01a401a4 	.word	0x01a401a4
  404b98:	01a401a4 	.word	0x01a401a4
  404b9c:	01a401a4 	.word	0x01a401a4
  404ba0:	02dc01a4 	.word	0x02dc01a4
  404ba4:	02dc02dc 	.word	0x02dc02dc
  404ba8:	02dc02dc 	.word	0x02dc02dc
  404bac:	02dc02dc 	.word	0x02dc02dc
  404bb0:	02dc02dc 	.word	0x02dc02dc
  404bb4:	01b202dc 	.word	0x01b202dc
  404bb8:	02dc02dc 	.word	0x02dc02dc
  404bbc:	02dc02dc 	.word	0x02dc02dc
  404bc0:	02dc02dc 	.word	0x02dc02dc
  404bc4:	02dc02dc 	.word	0x02dc02dc
  404bc8:	02dc02dc 	.word	0x02dc02dc
  404bcc:	02dc0197 	.word	0x02dc0197
  404bd0:	02dc02dc 	.word	0x02dc02dc
  404bd4:	02dc02dc 	.word	0x02dc02dc
  404bd8:	02dc019b 	.word	0x02dc019b
  404bdc:	025302dc 	.word	0x025302dc
  404be0:	02dc02dc 	.word	0x02dc02dc
  404be4:	02dc02dc 	.word	0x02dc02dc
  404be8:	02dc02dc 	.word	0x02dc02dc
  404bec:	02dc02dc 	.word	0x02dc02dc
  404bf0:	02dc02dc 	.word	0x02dc02dc
  404bf4:	021b025a 	.word	0x021b025a
  404bf8:	02dc02dc 	.word	0x02dc02dc
  404bfc:	026e02dc 	.word	0x026e02dc
  404c00:	02dc021b 	.word	0x02dc021b
  404c04:	027302dc 	.word	0x027302dc
  404c08:	01f502dc 	.word	0x01f502dc
  404c0c:	02090182 	.word	0x02090182
  404c10:	02dc02d7 	.word	0x02dc02d7
  404c14:	02dc029a 	.word	0x02dc029a
  404c18:	02dc00a7 	.word	0x02dc00a7
  404c1c:	022e02dc 	.word	0x022e02dc
  404c20:	f10a 0a08 	add.w	sl, sl, #8
  404c24:	9b03      	ldr	r3, [sp, #12]
  404c26:	442b      	add	r3, r5
  404c28:	9303      	str	r3, [sp, #12]
  404c2a:	e786      	b.n	404b3a <_vfiprintf_r+0xc2>
  404c2c:	4659      	mov	r1, fp
  404c2e:	9806      	ldr	r0, [sp, #24]
  404c30:	f000 fdac 	bl	40578c <__swsetup_r>
  404c34:	bb18      	cbnz	r0, 404c7e <_vfiprintf_r+0x206>
  404c36:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404c3a:	f001 031a 	and.w	r3, r1, #26
  404c3e:	2b0a      	cmp	r3, #10
  404c40:	f47f af4b 	bne.w	404ada <_vfiprintf_r+0x62>
  404c44:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404c48:	2b00      	cmp	r3, #0
  404c4a:	f6ff af46 	blt.w	404ada <_vfiprintf_r+0x62>
  404c4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c52:	07db      	lsls	r3, r3, #31
  404c54:	d405      	bmi.n	404c62 <_vfiprintf_r+0x1ea>
  404c56:	058f      	lsls	r7, r1, #22
  404c58:	d403      	bmi.n	404c62 <_vfiprintf_r+0x1ea>
  404c5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404c5e:	f002 fa91 	bl	407184 <__retarget_lock_release_recursive>
  404c62:	462b      	mov	r3, r5
  404c64:	4642      	mov	r2, r8
  404c66:	4659      	mov	r1, fp
  404c68:	9806      	ldr	r0, [sp, #24]
  404c6a:	f000 fd4d 	bl	405708 <__sbprintf>
  404c6e:	9003      	str	r0, [sp, #12]
  404c70:	9803      	ldr	r0, [sp, #12]
  404c72:	b02d      	add	sp, #180	; 0xb4
  404c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c78:	f001 feb4 	bl	4069e4 <__sinit>
  404c7c:	e709      	b.n	404a92 <_vfiprintf_r+0x1a>
  404c7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c82:	07d9      	lsls	r1, r3, #31
  404c84:	d404      	bmi.n	404c90 <_vfiprintf_r+0x218>
  404c86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404c8a:	059a      	lsls	r2, r3, #22
  404c8c:	f140 84aa 	bpl.w	4055e4 <_vfiprintf_r+0xb6c>
  404c90:	f04f 33ff 	mov.w	r3, #4294967295
  404c94:	9303      	str	r3, [sp, #12]
  404c96:	9803      	ldr	r0, [sp, #12]
  404c98:	b02d      	add	sp, #180	; 0xb4
  404c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c9e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404ca2:	f002 fa6d 	bl	407180 <__retarget_lock_acquire_recursive>
  404ca6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404caa:	b281      	uxth	r1, r0
  404cac:	e6fb      	b.n	404aa6 <_vfiprintf_r+0x2e>
  404cae:	4276      	negs	r6, r6
  404cb0:	9207      	str	r2, [sp, #28]
  404cb2:	f043 0304 	orr.w	r3, r3, #4
  404cb6:	f898 2000 	ldrb.w	r2, [r8]
  404cba:	e74f      	b.n	404b5c <_vfiprintf_r+0xe4>
  404cbc:	9608      	str	r6, [sp, #32]
  404cbe:	069e      	lsls	r6, r3, #26
  404cc0:	f100 8450 	bmi.w	405564 <_vfiprintf_r+0xaec>
  404cc4:	9907      	ldr	r1, [sp, #28]
  404cc6:	06dd      	lsls	r5, r3, #27
  404cc8:	460a      	mov	r2, r1
  404cca:	f100 83ef 	bmi.w	4054ac <_vfiprintf_r+0xa34>
  404cce:	0658      	lsls	r0, r3, #25
  404cd0:	f140 83ec 	bpl.w	4054ac <_vfiprintf_r+0xa34>
  404cd4:	880e      	ldrh	r6, [r1, #0]
  404cd6:	3104      	adds	r1, #4
  404cd8:	2700      	movs	r7, #0
  404cda:	2201      	movs	r2, #1
  404cdc:	9107      	str	r1, [sp, #28]
  404cde:	f04f 0100 	mov.w	r1, #0
  404ce2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404ce6:	2500      	movs	r5, #0
  404ce8:	1c61      	adds	r1, r4, #1
  404cea:	f000 8116 	beq.w	404f1a <_vfiprintf_r+0x4a2>
  404cee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404cf2:	9102      	str	r1, [sp, #8]
  404cf4:	ea56 0107 	orrs.w	r1, r6, r7
  404cf8:	f040 8114 	bne.w	404f24 <_vfiprintf_r+0x4ac>
  404cfc:	2c00      	cmp	r4, #0
  404cfe:	f040 835c 	bne.w	4053ba <_vfiprintf_r+0x942>
  404d02:	2a00      	cmp	r2, #0
  404d04:	f040 83b7 	bne.w	405476 <_vfiprintf_r+0x9fe>
  404d08:	f013 0301 	ands.w	r3, r3, #1
  404d0c:	9305      	str	r3, [sp, #20]
  404d0e:	f000 8457 	beq.w	4055c0 <_vfiprintf_r+0xb48>
  404d12:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404d16:	2330      	movs	r3, #48	; 0x30
  404d18:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404d1c:	9b05      	ldr	r3, [sp, #20]
  404d1e:	42a3      	cmp	r3, r4
  404d20:	bfb8      	it	lt
  404d22:	4623      	movlt	r3, r4
  404d24:	9301      	str	r3, [sp, #4]
  404d26:	b10d      	cbz	r5, 404d2c <_vfiprintf_r+0x2b4>
  404d28:	3301      	adds	r3, #1
  404d2a:	9301      	str	r3, [sp, #4]
  404d2c:	9b02      	ldr	r3, [sp, #8]
  404d2e:	f013 0302 	ands.w	r3, r3, #2
  404d32:	9309      	str	r3, [sp, #36]	; 0x24
  404d34:	d002      	beq.n	404d3c <_vfiprintf_r+0x2c4>
  404d36:	9b01      	ldr	r3, [sp, #4]
  404d38:	3302      	adds	r3, #2
  404d3a:	9301      	str	r3, [sp, #4]
  404d3c:	9b02      	ldr	r3, [sp, #8]
  404d3e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404d42:	930a      	str	r3, [sp, #40]	; 0x28
  404d44:	f040 8217 	bne.w	405176 <_vfiprintf_r+0x6fe>
  404d48:	9b08      	ldr	r3, [sp, #32]
  404d4a:	9a01      	ldr	r2, [sp, #4]
  404d4c:	1a9d      	subs	r5, r3, r2
  404d4e:	2d00      	cmp	r5, #0
  404d50:	f340 8211 	ble.w	405176 <_vfiprintf_r+0x6fe>
  404d54:	2d10      	cmp	r5, #16
  404d56:	f340 8490 	ble.w	40567a <_vfiprintf_r+0xc02>
  404d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d5e:	4ec4      	ldr	r6, [pc, #784]	; (405070 <_vfiprintf_r+0x5f8>)
  404d60:	46d6      	mov	lr, sl
  404d62:	2710      	movs	r7, #16
  404d64:	46a2      	mov	sl, r4
  404d66:	4619      	mov	r1, r3
  404d68:	9c06      	ldr	r4, [sp, #24]
  404d6a:	e007      	b.n	404d7c <_vfiprintf_r+0x304>
  404d6c:	f101 0c02 	add.w	ip, r1, #2
  404d70:	f10e 0e08 	add.w	lr, lr, #8
  404d74:	4601      	mov	r1, r0
  404d76:	3d10      	subs	r5, #16
  404d78:	2d10      	cmp	r5, #16
  404d7a:	dd11      	ble.n	404da0 <_vfiprintf_r+0x328>
  404d7c:	1c48      	adds	r0, r1, #1
  404d7e:	3210      	adds	r2, #16
  404d80:	2807      	cmp	r0, #7
  404d82:	9211      	str	r2, [sp, #68]	; 0x44
  404d84:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404d88:	9010      	str	r0, [sp, #64]	; 0x40
  404d8a:	ddef      	ble.n	404d6c <_vfiprintf_r+0x2f4>
  404d8c:	2a00      	cmp	r2, #0
  404d8e:	f040 81e4 	bne.w	40515a <_vfiprintf_r+0x6e2>
  404d92:	3d10      	subs	r5, #16
  404d94:	2d10      	cmp	r5, #16
  404d96:	4611      	mov	r1, r2
  404d98:	f04f 0c01 	mov.w	ip, #1
  404d9c:	46ce      	mov	lr, r9
  404d9e:	dced      	bgt.n	404d7c <_vfiprintf_r+0x304>
  404da0:	4654      	mov	r4, sl
  404da2:	4661      	mov	r1, ip
  404da4:	46f2      	mov	sl, lr
  404da6:	442a      	add	r2, r5
  404da8:	2907      	cmp	r1, #7
  404daa:	9211      	str	r2, [sp, #68]	; 0x44
  404dac:	f8ca 6000 	str.w	r6, [sl]
  404db0:	f8ca 5004 	str.w	r5, [sl, #4]
  404db4:	9110      	str	r1, [sp, #64]	; 0x40
  404db6:	f300 82ec 	bgt.w	405392 <_vfiprintf_r+0x91a>
  404dba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404dbe:	f10a 0a08 	add.w	sl, sl, #8
  404dc2:	1c48      	adds	r0, r1, #1
  404dc4:	2d00      	cmp	r5, #0
  404dc6:	f040 81de 	bne.w	405186 <_vfiprintf_r+0x70e>
  404dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dcc:	2b00      	cmp	r3, #0
  404dce:	f000 81f8 	beq.w	4051c2 <_vfiprintf_r+0x74a>
  404dd2:	3202      	adds	r2, #2
  404dd4:	a90e      	add	r1, sp, #56	; 0x38
  404dd6:	2302      	movs	r3, #2
  404dd8:	2807      	cmp	r0, #7
  404dda:	9211      	str	r2, [sp, #68]	; 0x44
  404ddc:	9010      	str	r0, [sp, #64]	; 0x40
  404dde:	e88a 000a 	stmia.w	sl, {r1, r3}
  404de2:	f340 81ea 	ble.w	4051ba <_vfiprintf_r+0x742>
  404de6:	2a00      	cmp	r2, #0
  404de8:	f040 838c 	bne.w	405504 <_vfiprintf_r+0xa8c>
  404dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dee:	2b80      	cmp	r3, #128	; 0x80
  404df0:	f04f 0001 	mov.w	r0, #1
  404df4:	4611      	mov	r1, r2
  404df6:	46ca      	mov	sl, r9
  404df8:	f040 81e7 	bne.w	4051ca <_vfiprintf_r+0x752>
  404dfc:	9b08      	ldr	r3, [sp, #32]
  404dfe:	9d01      	ldr	r5, [sp, #4]
  404e00:	1b5e      	subs	r6, r3, r5
  404e02:	2e00      	cmp	r6, #0
  404e04:	f340 81e1 	ble.w	4051ca <_vfiprintf_r+0x752>
  404e08:	2e10      	cmp	r6, #16
  404e0a:	4d9a      	ldr	r5, [pc, #616]	; (405074 <_vfiprintf_r+0x5fc>)
  404e0c:	f340 8450 	ble.w	4056b0 <_vfiprintf_r+0xc38>
  404e10:	46d4      	mov	ip, sl
  404e12:	2710      	movs	r7, #16
  404e14:	46a2      	mov	sl, r4
  404e16:	9c06      	ldr	r4, [sp, #24]
  404e18:	e007      	b.n	404e2a <_vfiprintf_r+0x3b2>
  404e1a:	f101 0e02 	add.w	lr, r1, #2
  404e1e:	f10c 0c08 	add.w	ip, ip, #8
  404e22:	4601      	mov	r1, r0
  404e24:	3e10      	subs	r6, #16
  404e26:	2e10      	cmp	r6, #16
  404e28:	dd11      	ble.n	404e4e <_vfiprintf_r+0x3d6>
  404e2a:	1c48      	adds	r0, r1, #1
  404e2c:	3210      	adds	r2, #16
  404e2e:	2807      	cmp	r0, #7
  404e30:	9211      	str	r2, [sp, #68]	; 0x44
  404e32:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404e36:	9010      	str	r0, [sp, #64]	; 0x40
  404e38:	ddef      	ble.n	404e1a <_vfiprintf_r+0x3a2>
  404e3a:	2a00      	cmp	r2, #0
  404e3c:	f040 829d 	bne.w	40537a <_vfiprintf_r+0x902>
  404e40:	3e10      	subs	r6, #16
  404e42:	2e10      	cmp	r6, #16
  404e44:	f04f 0e01 	mov.w	lr, #1
  404e48:	4611      	mov	r1, r2
  404e4a:	46cc      	mov	ip, r9
  404e4c:	dced      	bgt.n	404e2a <_vfiprintf_r+0x3b2>
  404e4e:	4654      	mov	r4, sl
  404e50:	46e2      	mov	sl, ip
  404e52:	4432      	add	r2, r6
  404e54:	f1be 0f07 	cmp.w	lr, #7
  404e58:	9211      	str	r2, [sp, #68]	; 0x44
  404e5a:	e88a 0060 	stmia.w	sl, {r5, r6}
  404e5e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404e62:	f300 8369 	bgt.w	405538 <_vfiprintf_r+0xac0>
  404e66:	f10a 0a08 	add.w	sl, sl, #8
  404e6a:	f10e 0001 	add.w	r0, lr, #1
  404e6e:	4671      	mov	r1, lr
  404e70:	e1ab      	b.n	4051ca <_vfiprintf_r+0x752>
  404e72:	9608      	str	r6, [sp, #32]
  404e74:	f013 0220 	ands.w	r2, r3, #32
  404e78:	f040 838c 	bne.w	405594 <_vfiprintf_r+0xb1c>
  404e7c:	f013 0110 	ands.w	r1, r3, #16
  404e80:	f040 831a 	bne.w	4054b8 <_vfiprintf_r+0xa40>
  404e84:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404e88:	f000 8316 	beq.w	4054b8 <_vfiprintf_r+0xa40>
  404e8c:	9807      	ldr	r0, [sp, #28]
  404e8e:	460a      	mov	r2, r1
  404e90:	4601      	mov	r1, r0
  404e92:	3104      	adds	r1, #4
  404e94:	8806      	ldrh	r6, [r0, #0]
  404e96:	9107      	str	r1, [sp, #28]
  404e98:	2700      	movs	r7, #0
  404e9a:	e720      	b.n	404cde <_vfiprintf_r+0x266>
  404e9c:	9608      	str	r6, [sp, #32]
  404e9e:	f043 0310 	orr.w	r3, r3, #16
  404ea2:	e7e7      	b.n	404e74 <_vfiprintf_r+0x3fc>
  404ea4:	9608      	str	r6, [sp, #32]
  404ea6:	f043 0310 	orr.w	r3, r3, #16
  404eaa:	e708      	b.n	404cbe <_vfiprintf_r+0x246>
  404eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404eb0:	f898 2000 	ldrb.w	r2, [r8]
  404eb4:	e652      	b.n	404b5c <_vfiprintf_r+0xe4>
  404eb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404eba:	2600      	movs	r6, #0
  404ebc:	f818 2b01 	ldrb.w	r2, [r8], #1
  404ec0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404ec4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404ec8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404ecc:	2909      	cmp	r1, #9
  404ece:	d9f5      	bls.n	404ebc <_vfiprintf_r+0x444>
  404ed0:	e646      	b.n	404b60 <_vfiprintf_r+0xe8>
  404ed2:	9608      	str	r6, [sp, #32]
  404ed4:	2800      	cmp	r0, #0
  404ed6:	f040 8408 	bne.w	4056ea <_vfiprintf_r+0xc72>
  404eda:	f043 0310 	orr.w	r3, r3, #16
  404ede:	069e      	lsls	r6, r3, #26
  404ee0:	f100 834c 	bmi.w	40557c <_vfiprintf_r+0xb04>
  404ee4:	06dd      	lsls	r5, r3, #27
  404ee6:	f100 82f3 	bmi.w	4054d0 <_vfiprintf_r+0xa58>
  404eea:	0658      	lsls	r0, r3, #25
  404eec:	f140 82f0 	bpl.w	4054d0 <_vfiprintf_r+0xa58>
  404ef0:	9d07      	ldr	r5, [sp, #28]
  404ef2:	f9b5 6000 	ldrsh.w	r6, [r5]
  404ef6:	462a      	mov	r2, r5
  404ef8:	17f7      	asrs	r7, r6, #31
  404efa:	3204      	adds	r2, #4
  404efc:	4630      	mov	r0, r6
  404efe:	4639      	mov	r1, r7
  404f00:	9207      	str	r2, [sp, #28]
  404f02:	2800      	cmp	r0, #0
  404f04:	f171 0200 	sbcs.w	r2, r1, #0
  404f08:	f2c0 835d 	blt.w	4055c6 <_vfiprintf_r+0xb4e>
  404f0c:	1c61      	adds	r1, r4, #1
  404f0e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f12:	f04f 0201 	mov.w	r2, #1
  404f16:	f47f aeea 	bne.w	404cee <_vfiprintf_r+0x276>
  404f1a:	ea56 0107 	orrs.w	r1, r6, r7
  404f1e:	f000 824d 	beq.w	4053bc <_vfiprintf_r+0x944>
  404f22:	9302      	str	r3, [sp, #8]
  404f24:	2a01      	cmp	r2, #1
  404f26:	f000 828c 	beq.w	405442 <_vfiprintf_r+0x9ca>
  404f2a:	2a02      	cmp	r2, #2
  404f2c:	f040 825c 	bne.w	4053e8 <_vfiprintf_r+0x970>
  404f30:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404f32:	46cb      	mov	fp, r9
  404f34:	0933      	lsrs	r3, r6, #4
  404f36:	f006 010f 	and.w	r1, r6, #15
  404f3a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404f3e:	093a      	lsrs	r2, r7, #4
  404f40:	461e      	mov	r6, r3
  404f42:	4617      	mov	r7, r2
  404f44:	5c43      	ldrb	r3, [r0, r1]
  404f46:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404f4a:	ea56 0307 	orrs.w	r3, r6, r7
  404f4e:	d1f1      	bne.n	404f34 <_vfiprintf_r+0x4bc>
  404f50:	eba9 030b 	sub.w	r3, r9, fp
  404f54:	9305      	str	r3, [sp, #20]
  404f56:	e6e1      	b.n	404d1c <_vfiprintf_r+0x2a4>
  404f58:	2800      	cmp	r0, #0
  404f5a:	f040 83c0 	bne.w	4056de <_vfiprintf_r+0xc66>
  404f5e:	0699      	lsls	r1, r3, #26
  404f60:	f100 8367 	bmi.w	405632 <_vfiprintf_r+0xbba>
  404f64:	06da      	lsls	r2, r3, #27
  404f66:	f100 80f1 	bmi.w	40514c <_vfiprintf_r+0x6d4>
  404f6a:	065b      	lsls	r3, r3, #25
  404f6c:	f140 80ee 	bpl.w	40514c <_vfiprintf_r+0x6d4>
  404f70:	9a07      	ldr	r2, [sp, #28]
  404f72:	6813      	ldr	r3, [r2, #0]
  404f74:	3204      	adds	r2, #4
  404f76:	9207      	str	r2, [sp, #28]
  404f78:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404f7c:	801a      	strh	r2, [r3, #0]
  404f7e:	e5b8      	b.n	404af2 <_vfiprintf_r+0x7a>
  404f80:	9807      	ldr	r0, [sp, #28]
  404f82:	4a3d      	ldr	r2, [pc, #244]	; (405078 <_vfiprintf_r+0x600>)
  404f84:	9608      	str	r6, [sp, #32]
  404f86:	920b      	str	r2, [sp, #44]	; 0x2c
  404f88:	6806      	ldr	r6, [r0, #0]
  404f8a:	2278      	movs	r2, #120	; 0x78
  404f8c:	2130      	movs	r1, #48	; 0x30
  404f8e:	3004      	adds	r0, #4
  404f90:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404f94:	f043 0302 	orr.w	r3, r3, #2
  404f98:	9007      	str	r0, [sp, #28]
  404f9a:	2700      	movs	r7, #0
  404f9c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404fa0:	2202      	movs	r2, #2
  404fa2:	e69c      	b.n	404cde <_vfiprintf_r+0x266>
  404fa4:	9608      	str	r6, [sp, #32]
  404fa6:	2800      	cmp	r0, #0
  404fa8:	d099      	beq.n	404ede <_vfiprintf_r+0x466>
  404faa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404fae:	e796      	b.n	404ede <_vfiprintf_r+0x466>
  404fb0:	f898 2000 	ldrb.w	r2, [r8]
  404fb4:	2d00      	cmp	r5, #0
  404fb6:	f47f add1 	bne.w	404b5c <_vfiprintf_r+0xe4>
  404fba:	2001      	movs	r0, #1
  404fbc:	2520      	movs	r5, #32
  404fbe:	e5cd      	b.n	404b5c <_vfiprintf_r+0xe4>
  404fc0:	f043 0301 	orr.w	r3, r3, #1
  404fc4:	f898 2000 	ldrb.w	r2, [r8]
  404fc8:	e5c8      	b.n	404b5c <_vfiprintf_r+0xe4>
  404fca:	9608      	str	r6, [sp, #32]
  404fcc:	2800      	cmp	r0, #0
  404fce:	f040 8393 	bne.w	4056f8 <_vfiprintf_r+0xc80>
  404fd2:	4929      	ldr	r1, [pc, #164]	; (405078 <_vfiprintf_r+0x600>)
  404fd4:	910b      	str	r1, [sp, #44]	; 0x2c
  404fd6:	069f      	lsls	r7, r3, #26
  404fd8:	f100 82e8 	bmi.w	4055ac <_vfiprintf_r+0xb34>
  404fdc:	9807      	ldr	r0, [sp, #28]
  404fde:	06de      	lsls	r6, r3, #27
  404fe0:	4601      	mov	r1, r0
  404fe2:	f100 8270 	bmi.w	4054c6 <_vfiprintf_r+0xa4e>
  404fe6:	065d      	lsls	r5, r3, #25
  404fe8:	f140 826d 	bpl.w	4054c6 <_vfiprintf_r+0xa4e>
  404fec:	3104      	adds	r1, #4
  404fee:	8806      	ldrh	r6, [r0, #0]
  404ff0:	9107      	str	r1, [sp, #28]
  404ff2:	2700      	movs	r7, #0
  404ff4:	07d8      	lsls	r0, r3, #31
  404ff6:	f140 8222 	bpl.w	40543e <_vfiprintf_r+0x9c6>
  404ffa:	ea56 0107 	orrs.w	r1, r6, r7
  404ffe:	f000 821e 	beq.w	40543e <_vfiprintf_r+0x9c6>
  405002:	2130      	movs	r1, #48	; 0x30
  405004:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405008:	f043 0302 	orr.w	r3, r3, #2
  40500c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405010:	2202      	movs	r2, #2
  405012:	e664      	b.n	404cde <_vfiprintf_r+0x266>
  405014:	9608      	str	r6, [sp, #32]
  405016:	2800      	cmp	r0, #0
  405018:	f040 836b 	bne.w	4056f2 <_vfiprintf_r+0xc7a>
  40501c:	4917      	ldr	r1, [pc, #92]	; (40507c <_vfiprintf_r+0x604>)
  40501e:	910b      	str	r1, [sp, #44]	; 0x2c
  405020:	e7d9      	b.n	404fd6 <_vfiprintf_r+0x55e>
  405022:	9907      	ldr	r1, [sp, #28]
  405024:	9608      	str	r6, [sp, #32]
  405026:	680a      	ldr	r2, [r1, #0]
  405028:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40502c:	f04f 0000 	mov.w	r0, #0
  405030:	460a      	mov	r2, r1
  405032:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405036:	3204      	adds	r2, #4
  405038:	2001      	movs	r0, #1
  40503a:	9001      	str	r0, [sp, #4]
  40503c:	9207      	str	r2, [sp, #28]
  40503e:	9005      	str	r0, [sp, #20]
  405040:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405044:	9302      	str	r3, [sp, #8]
  405046:	2400      	movs	r4, #0
  405048:	e670      	b.n	404d2c <_vfiprintf_r+0x2b4>
  40504a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40504e:	f898 2000 	ldrb.w	r2, [r8]
  405052:	e583      	b.n	404b5c <_vfiprintf_r+0xe4>
  405054:	f898 2000 	ldrb.w	r2, [r8]
  405058:	2a6c      	cmp	r2, #108	; 0x6c
  40505a:	bf03      	ittte	eq
  40505c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405060:	f043 0320 	orreq.w	r3, r3, #32
  405064:	f108 0801 	addeq.w	r8, r8, #1
  405068:	f043 0310 	orrne.w	r3, r3, #16
  40506c:	e576      	b.n	404b5c <_vfiprintf_r+0xe4>
  40506e:	bf00      	nop
  405070:	00409664 	.word	0x00409664
  405074:	00409674 	.word	0x00409674
  405078:	00409624 	.word	0x00409624
  40507c:	00409610 	.word	0x00409610
  405080:	9907      	ldr	r1, [sp, #28]
  405082:	680e      	ldr	r6, [r1, #0]
  405084:	460a      	mov	r2, r1
  405086:	2e00      	cmp	r6, #0
  405088:	f102 0204 	add.w	r2, r2, #4
  40508c:	f6ff ae0f 	blt.w	404cae <_vfiprintf_r+0x236>
  405090:	9207      	str	r2, [sp, #28]
  405092:	f898 2000 	ldrb.w	r2, [r8]
  405096:	e561      	b.n	404b5c <_vfiprintf_r+0xe4>
  405098:	f898 2000 	ldrb.w	r2, [r8]
  40509c:	2001      	movs	r0, #1
  40509e:	252b      	movs	r5, #43	; 0x2b
  4050a0:	e55c      	b.n	404b5c <_vfiprintf_r+0xe4>
  4050a2:	9907      	ldr	r1, [sp, #28]
  4050a4:	9608      	str	r6, [sp, #32]
  4050a6:	f8d1 b000 	ldr.w	fp, [r1]
  4050aa:	f04f 0200 	mov.w	r2, #0
  4050ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4050b2:	1d0e      	adds	r6, r1, #4
  4050b4:	f1bb 0f00 	cmp.w	fp, #0
  4050b8:	f000 82e5 	beq.w	405686 <_vfiprintf_r+0xc0e>
  4050bc:	1c67      	adds	r7, r4, #1
  4050be:	f000 82c4 	beq.w	40564a <_vfiprintf_r+0xbd2>
  4050c2:	4622      	mov	r2, r4
  4050c4:	2100      	movs	r1, #0
  4050c6:	4658      	mov	r0, fp
  4050c8:	9301      	str	r3, [sp, #4]
  4050ca:	f002 fba9 	bl	407820 <memchr>
  4050ce:	9b01      	ldr	r3, [sp, #4]
  4050d0:	2800      	cmp	r0, #0
  4050d2:	f000 82e5 	beq.w	4056a0 <_vfiprintf_r+0xc28>
  4050d6:	eba0 020b 	sub.w	r2, r0, fp
  4050da:	9205      	str	r2, [sp, #20]
  4050dc:	9607      	str	r6, [sp, #28]
  4050de:	9302      	str	r3, [sp, #8]
  4050e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050e4:	2400      	movs	r4, #0
  4050e6:	e619      	b.n	404d1c <_vfiprintf_r+0x2a4>
  4050e8:	f898 2000 	ldrb.w	r2, [r8]
  4050ec:	2a2a      	cmp	r2, #42	; 0x2a
  4050ee:	f108 0701 	add.w	r7, r8, #1
  4050f2:	f000 82e9 	beq.w	4056c8 <_vfiprintf_r+0xc50>
  4050f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4050fa:	2909      	cmp	r1, #9
  4050fc:	46b8      	mov	r8, r7
  4050fe:	f04f 0400 	mov.w	r4, #0
  405102:	f63f ad2d 	bhi.w	404b60 <_vfiprintf_r+0xe8>
  405106:	f818 2b01 	ldrb.w	r2, [r8], #1
  40510a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40510e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405112:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405116:	2909      	cmp	r1, #9
  405118:	d9f5      	bls.n	405106 <_vfiprintf_r+0x68e>
  40511a:	e521      	b.n	404b60 <_vfiprintf_r+0xe8>
  40511c:	f043 0320 	orr.w	r3, r3, #32
  405120:	f898 2000 	ldrb.w	r2, [r8]
  405124:	e51a      	b.n	404b5c <_vfiprintf_r+0xe4>
  405126:	9608      	str	r6, [sp, #32]
  405128:	2800      	cmp	r0, #0
  40512a:	f040 82db 	bne.w	4056e4 <_vfiprintf_r+0xc6c>
  40512e:	2a00      	cmp	r2, #0
  405130:	f000 80e7 	beq.w	405302 <_vfiprintf_r+0x88a>
  405134:	2101      	movs	r1, #1
  405136:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40513a:	f04f 0200 	mov.w	r2, #0
  40513e:	9101      	str	r1, [sp, #4]
  405140:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405144:	9105      	str	r1, [sp, #20]
  405146:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40514a:	e77b      	b.n	405044 <_vfiprintf_r+0x5cc>
  40514c:	9a07      	ldr	r2, [sp, #28]
  40514e:	6813      	ldr	r3, [r2, #0]
  405150:	3204      	adds	r2, #4
  405152:	9207      	str	r2, [sp, #28]
  405154:	9a03      	ldr	r2, [sp, #12]
  405156:	601a      	str	r2, [r3, #0]
  405158:	e4cb      	b.n	404af2 <_vfiprintf_r+0x7a>
  40515a:	aa0f      	add	r2, sp, #60	; 0x3c
  40515c:	9904      	ldr	r1, [sp, #16]
  40515e:	4620      	mov	r0, r4
  405160:	f7ff fc4a 	bl	4049f8 <__sprint_r.part.0>
  405164:	2800      	cmp	r0, #0
  405166:	f040 8139 	bne.w	4053dc <_vfiprintf_r+0x964>
  40516a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40516c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40516e:	f101 0c01 	add.w	ip, r1, #1
  405172:	46ce      	mov	lr, r9
  405174:	e5ff      	b.n	404d76 <_vfiprintf_r+0x2fe>
  405176:	9910      	ldr	r1, [sp, #64]	; 0x40
  405178:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40517a:	1c48      	adds	r0, r1, #1
  40517c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405180:	2d00      	cmp	r5, #0
  405182:	f43f ae22 	beq.w	404dca <_vfiprintf_r+0x352>
  405186:	3201      	adds	r2, #1
  405188:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40518c:	2101      	movs	r1, #1
  40518e:	2807      	cmp	r0, #7
  405190:	9211      	str	r2, [sp, #68]	; 0x44
  405192:	9010      	str	r0, [sp, #64]	; 0x40
  405194:	f8ca 5000 	str.w	r5, [sl]
  405198:	f8ca 1004 	str.w	r1, [sl, #4]
  40519c:	f340 8108 	ble.w	4053b0 <_vfiprintf_r+0x938>
  4051a0:	2a00      	cmp	r2, #0
  4051a2:	f040 81bc 	bne.w	40551e <_vfiprintf_r+0xaa6>
  4051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4051a8:	2b00      	cmp	r3, #0
  4051aa:	f43f ae1f 	beq.w	404dec <_vfiprintf_r+0x374>
  4051ae:	ab0e      	add	r3, sp, #56	; 0x38
  4051b0:	2202      	movs	r2, #2
  4051b2:	4608      	mov	r0, r1
  4051b4:	931c      	str	r3, [sp, #112]	; 0x70
  4051b6:	921d      	str	r2, [sp, #116]	; 0x74
  4051b8:	46ca      	mov	sl, r9
  4051ba:	4601      	mov	r1, r0
  4051bc:	f10a 0a08 	add.w	sl, sl, #8
  4051c0:	3001      	adds	r0, #1
  4051c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051c4:	2b80      	cmp	r3, #128	; 0x80
  4051c6:	f43f ae19 	beq.w	404dfc <_vfiprintf_r+0x384>
  4051ca:	9b05      	ldr	r3, [sp, #20]
  4051cc:	1ae4      	subs	r4, r4, r3
  4051ce:	2c00      	cmp	r4, #0
  4051d0:	dd2e      	ble.n	405230 <_vfiprintf_r+0x7b8>
  4051d2:	2c10      	cmp	r4, #16
  4051d4:	4db3      	ldr	r5, [pc, #716]	; (4054a4 <_vfiprintf_r+0xa2c>)
  4051d6:	dd1e      	ble.n	405216 <_vfiprintf_r+0x79e>
  4051d8:	46d6      	mov	lr, sl
  4051da:	2610      	movs	r6, #16
  4051dc:	9f06      	ldr	r7, [sp, #24]
  4051de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4051e2:	e006      	b.n	4051f2 <_vfiprintf_r+0x77a>
  4051e4:	1c88      	adds	r0, r1, #2
  4051e6:	f10e 0e08 	add.w	lr, lr, #8
  4051ea:	4619      	mov	r1, r3
  4051ec:	3c10      	subs	r4, #16
  4051ee:	2c10      	cmp	r4, #16
  4051f0:	dd10      	ble.n	405214 <_vfiprintf_r+0x79c>
  4051f2:	1c4b      	adds	r3, r1, #1
  4051f4:	3210      	adds	r2, #16
  4051f6:	2b07      	cmp	r3, #7
  4051f8:	9211      	str	r2, [sp, #68]	; 0x44
  4051fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4051fe:	9310      	str	r3, [sp, #64]	; 0x40
  405200:	ddf0      	ble.n	4051e4 <_vfiprintf_r+0x76c>
  405202:	2a00      	cmp	r2, #0
  405204:	d165      	bne.n	4052d2 <_vfiprintf_r+0x85a>
  405206:	3c10      	subs	r4, #16
  405208:	2c10      	cmp	r4, #16
  40520a:	f04f 0001 	mov.w	r0, #1
  40520e:	4611      	mov	r1, r2
  405210:	46ce      	mov	lr, r9
  405212:	dcee      	bgt.n	4051f2 <_vfiprintf_r+0x77a>
  405214:	46f2      	mov	sl, lr
  405216:	4422      	add	r2, r4
  405218:	2807      	cmp	r0, #7
  40521a:	9211      	str	r2, [sp, #68]	; 0x44
  40521c:	f8ca 5000 	str.w	r5, [sl]
  405220:	f8ca 4004 	str.w	r4, [sl, #4]
  405224:	9010      	str	r0, [sp, #64]	; 0x40
  405226:	f300 8085 	bgt.w	405334 <_vfiprintf_r+0x8bc>
  40522a:	f10a 0a08 	add.w	sl, sl, #8
  40522e:	3001      	adds	r0, #1
  405230:	9905      	ldr	r1, [sp, #20]
  405232:	f8ca b000 	str.w	fp, [sl]
  405236:	440a      	add	r2, r1
  405238:	2807      	cmp	r0, #7
  40523a:	9211      	str	r2, [sp, #68]	; 0x44
  40523c:	f8ca 1004 	str.w	r1, [sl, #4]
  405240:	9010      	str	r0, [sp, #64]	; 0x40
  405242:	f340 8082 	ble.w	40534a <_vfiprintf_r+0x8d2>
  405246:	2a00      	cmp	r2, #0
  405248:	f040 8118 	bne.w	40547c <_vfiprintf_r+0xa04>
  40524c:	9b02      	ldr	r3, [sp, #8]
  40524e:	9210      	str	r2, [sp, #64]	; 0x40
  405250:	0758      	lsls	r0, r3, #29
  405252:	d535      	bpl.n	4052c0 <_vfiprintf_r+0x848>
  405254:	9b08      	ldr	r3, [sp, #32]
  405256:	9901      	ldr	r1, [sp, #4]
  405258:	1a5c      	subs	r4, r3, r1
  40525a:	2c00      	cmp	r4, #0
  40525c:	f340 80e7 	ble.w	40542e <_vfiprintf_r+0x9b6>
  405260:	46ca      	mov	sl, r9
  405262:	2c10      	cmp	r4, #16
  405264:	f340 8218 	ble.w	405698 <_vfiprintf_r+0xc20>
  405268:	9910      	ldr	r1, [sp, #64]	; 0x40
  40526a:	4e8f      	ldr	r6, [pc, #572]	; (4054a8 <_vfiprintf_r+0xa30>)
  40526c:	9f06      	ldr	r7, [sp, #24]
  40526e:	f8dd b010 	ldr.w	fp, [sp, #16]
  405272:	2510      	movs	r5, #16
  405274:	e006      	b.n	405284 <_vfiprintf_r+0x80c>
  405276:	1c88      	adds	r0, r1, #2
  405278:	f10a 0a08 	add.w	sl, sl, #8
  40527c:	4619      	mov	r1, r3
  40527e:	3c10      	subs	r4, #16
  405280:	2c10      	cmp	r4, #16
  405282:	dd11      	ble.n	4052a8 <_vfiprintf_r+0x830>
  405284:	1c4b      	adds	r3, r1, #1
  405286:	3210      	adds	r2, #16
  405288:	2b07      	cmp	r3, #7
  40528a:	9211      	str	r2, [sp, #68]	; 0x44
  40528c:	f8ca 6000 	str.w	r6, [sl]
  405290:	f8ca 5004 	str.w	r5, [sl, #4]
  405294:	9310      	str	r3, [sp, #64]	; 0x40
  405296:	ddee      	ble.n	405276 <_vfiprintf_r+0x7fe>
  405298:	bb42      	cbnz	r2, 4052ec <_vfiprintf_r+0x874>
  40529a:	3c10      	subs	r4, #16
  40529c:	2c10      	cmp	r4, #16
  40529e:	f04f 0001 	mov.w	r0, #1
  4052a2:	4611      	mov	r1, r2
  4052a4:	46ca      	mov	sl, r9
  4052a6:	dced      	bgt.n	405284 <_vfiprintf_r+0x80c>
  4052a8:	4422      	add	r2, r4
  4052aa:	2807      	cmp	r0, #7
  4052ac:	9211      	str	r2, [sp, #68]	; 0x44
  4052ae:	f8ca 6000 	str.w	r6, [sl]
  4052b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4052b6:	9010      	str	r0, [sp, #64]	; 0x40
  4052b8:	dd51      	ble.n	40535e <_vfiprintf_r+0x8e6>
  4052ba:	2a00      	cmp	r2, #0
  4052bc:	f040 819b 	bne.w	4055f6 <_vfiprintf_r+0xb7e>
  4052c0:	9b03      	ldr	r3, [sp, #12]
  4052c2:	9a08      	ldr	r2, [sp, #32]
  4052c4:	9901      	ldr	r1, [sp, #4]
  4052c6:	428a      	cmp	r2, r1
  4052c8:	bfac      	ite	ge
  4052ca:	189b      	addge	r3, r3, r2
  4052cc:	185b      	addlt	r3, r3, r1
  4052ce:	9303      	str	r3, [sp, #12]
  4052d0:	e04e      	b.n	405370 <_vfiprintf_r+0x8f8>
  4052d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4052d4:	4651      	mov	r1, sl
  4052d6:	4638      	mov	r0, r7
  4052d8:	f7ff fb8e 	bl	4049f8 <__sprint_r.part.0>
  4052dc:	2800      	cmp	r0, #0
  4052de:	f040 813f 	bne.w	405560 <_vfiprintf_r+0xae8>
  4052e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052e6:	1c48      	adds	r0, r1, #1
  4052e8:	46ce      	mov	lr, r9
  4052ea:	e77f      	b.n	4051ec <_vfiprintf_r+0x774>
  4052ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4052ee:	4659      	mov	r1, fp
  4052f0:	4638      	mov	r0, r7
  4052f2:	f7ff fb81 	bl	4049f8 <__sprint_r.part.0>
  4052f6:	b960      	cbnz	r0, 405312 <_vfiprintf_r+0x89a>
  4052f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052fc:	1c48      	adds	r0, r1, #1
  4052fe:	46ca      	mov	sl, r9
  405300:	e7bd      	b.n	40527e <_vfiprintf_r+0x806>
  405302:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405304:	f8dd b010 	ldr.w	fp, [sp, #16]
  405308:	2b00      	cmp	r3, #0
  40530a:	f040 81d4 	bne.w	4056b6 <_vfiprintf_r+0xc3e>
  40530e:	2300      	movs	r3, #0
  405310:	9310      	str	r3, [sp, #64]	; 0x40
  405312:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405316:	f013 0f01 	tst.w	r3, #1
  40531a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40531e:	d102      	bne.n	405326 <_vfiprintf_r+0x8ae>
  405320:	059a      	lsls	r2, r3, #22
  405322:	f140 80de 	bpl.w	4054e2 <_vfiprintf_r+0xa6a>
  405326:	065b      	lsls	r3, r3, #25
  405328:	f53f acb2 	bmi.w	404c90 <_vfiprintf_r+0x218>
  40532c:	9803      	ldr	r0, [sp, #12]
  40532e:	b02d      	add	sp, #180	; 0xb4
  405330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405334:	2a00      	cmp	r2, #0
  405336:	f040 8106 	bne.w	405546 <_vfiprintf_r+0xace>
  40533a:	9a05      	ldr	r2, [sp, #20]
  40533c:	921d      	str	r2, [sp, #116]	; 0x74
  40533e:	2301      	movs	r3, #1
  405340:	9211      	str	r2, [sp, #68]	; 0x44
  405342:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405346:	9310      	str	r3, [sp, #64]	; 0x40
  405348:	46ca      	mov	sl, r9
  40534a:	f10a 0a08 	add.w	sl, sl, #8
  40534e:	9b02      	ldr	r3, [sp, #8]
  405350:	0759      	lsls	r1, r3, #29
  405352:	d504      	bpl.n	40535e <_vfiprintf_r+0x8e6>
  405354:	9b08      	ldr	r3, [sp, #32]
  405356:	9901      	ldr	r1, [sp, #4]
  405358:	1a5c      	subs	r4, r3, r1
  40535a:	2c00      	cmp	r4, #0
  40535c:	dc81      	bgt.n	405262 <_vfiprintf_r+0x7ea>
  40535e:	9b03      	ldr	r3, [sp, #12]
  405360:	9908      	ldr	r1, [sp, #32]
  405362:	9801      	ldr	r0, [sp, #4]
  405364:	4281      	cmp	r1, r0
  405366:	bfac      	ite	ge
  405368:	185b      	addge	r3, r3, r1
  40536a:	181b      	addlt	r3, r3, r0
  40536c:	9303      	str	r3, [sp, #12]
  40536e:	bb72      	cbnz	r2, 4053ce <_vfiprintf_r+0x956>
  405370:	2300      	movs	r3, #0
  405372:	9310      	str	r3, [sp, #64]	; 0x40
  405374:	46ca      	mov	sl, r9
  405376:	f7ff bbbc 	b.w	404af2 <_vfiprintf_r+0x7a>
  40537a:	aa0f      	add	r2, sp, #60	; 0x3c
  40537c:	9904      	ldr	r1, [sp, #16]
  40537e:	4620      	mov	r0, r4
  405380:	f7ff fb3a 	bl	4049f8 <__sprint_r.part.0>
  405384:	bb50      	cbnz	r0, 4053dc <_vfiprintf_r+0x964>
  405386:	9910      	ldr	r1, [sp, #64]	; 0x40
  405388:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40538a:	f101 0e01 	add.w	lr, r1, #1
  40538e:	46cc      	mov	ip, r9
  405390:	e548      	b.n	404e24 <_vfiprintf_r+0x3ac>
  405392:	2a00      	cmp	r2, #0
  405394:	f040 8140 	bne.w	405618 <_vfiprintf_r+0xba0>
  405398:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40539c:	2900      	cmp	r1, #0
  40539e:	f000 811b 	beq.w	4055d8 <_vfiprintf_r+0xb60>
  4053a2:	2201      	movs	r2, #1
  4053a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4053a8:	4610      	mov	r0, r2
  4053aa:	921d      	str	r2, [sp, #116]	; 0x74
  4053ac:	911c      	str	r1, [sp, #112]	; 0x70
  4053ae:	46ca      	mov	sl, r9
  4053b0:	4601      	mov	r1, r0
  4053b2:	f10a 0a08 	add.w	sl, sl, #8
  4053b6:	3001      	adds	r0, #1
  4053b8:	e507      	b.n	404dca <_vfiprintf_r+0x352>
  4053ba:	9b02      	ldr	r3, [sp, #8]
  4053bc:	2a01      	cmp	r2, #1
  4053be:	f000 8098 	beq.w	4054f2 <_vfiprintf_r+0xa7a>
  4053c2:	2a02      	cmp	r2, #2
  4053c4:	d10d      	bne.n	4053e2 <_vfiprintf_r+0x96a>
  4053c6:	9302      	str	r3, [sp, #8]
  4053c8:	2600      	movs	r6, #0
  4053ca:	2700      	movs	r7, #0
  4053cc:	e5b0      	b.n	404f30 <_vfiprintf_r+0x4b8>
  4053ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4053d0:	9904      	ldr	r1, [sp, #16]
  4053d2:	9806      	ldr	r0, [sp, #24]
  4053d4:	f7ff fb10 	bl	4049f8 <__sprint_r.part.0>
  4053d8:	2800      	cmp	r0, #0
  4053da:	d0c9      	beq.n	405370 <_vfiprintf_r+0x8f8>
  4053dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4053e0:	e797      	b.n	405312 <_vfiprintf_r+0x89a>
  4053e2:	9302      	str	r3, [sp, #8]
  4053e4:	2600      	movs	r6, #0
  4053e6:	2700      	movs	r7, #0
  4053e8:	4649      	mov	r1, r9
  4053ea:	e000      	b.n	4053ee <_vfiprintf_r+0x976>
  4053ec:	4659      	mov	r1, fp
  4053ee:	08f2      	lsrs	r2, r6, #3
  4053f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4053f4:	08f8      	lsrs	r0, r7, #3
  4053f6:	f006 0307 	and.w	r3, r6, #7
  4053fa:	4607      	mov	r7, r0
  4053fc:	4616      	mov	r6, r2
  4053fe:	3330      	adds	r3, #48	; 0x30
  405400:	ea56 0207 	orrs.w	r2, r6, r7
  405404:	f801 3c01 	strb.w	r3, [r1, #-1]
  405408:	f101 3bff 	add.w	fp, r1, #4294967295
  40540c:	d1ee      	bne.n	4053ec <_vfiprintf_r+0x974>
  40540e:	9a02      	ldr	r2, [sp, #8]
  405410:	07d6      	lsls	r6, r2, #31
  405412:	f57f ad9d 	bpl.w	404f50 <_vfiprintf_r+0x4d8>
  405416:	2b30      	cmp	r3, #48	; 0x30
  405418:	f43f ad9a 	beq.w	404f50 <_vfiprintf_r+0x4d8>
  40541c:	3902      	subs	r1, #2
  40541e:	2330      	movs	r3, #48	; 0x30
  405420:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405424:	eba9 0301 	sub.w	r3, r9, r1
  405428:	9305      	str	r3, [sp, #20]
  40542a:	468b      	mov	fp, r1
  40542c:	e476      	b.n	404d1c <_vfiprintf_r+0x2a4>
  40542e:	9b03      	ldr	r3, [sp, #12]
  405430:	9a08      	ldr	r2, [sp, #32]
  405432:	428a      	cmp	r2, r1
  405434:	bfac      	ite	ge
  405436:	189b      	addge	r3, r3, r2
  405438:	185b      	addlt	r3, r3, r1
  40543a:	9303      	str	r3, [sp, #12]
  40543c:	e798      	b.n	405370 <_vfiprintf_r+0x8f8>
  40543e:	2202      	movs	r2, #2
  405440:	e44d      	b.n	404cde <_vfiprintf_r+0x266>
  405442:	2f00      	cmp	r7, #0
  405444:	bf08      	it	eq
  405446:	2e0a      	cmpeq	r6, #10
  405448:	d352      	bcc.n	4054f0 <_vfiprintf_r+0xa78>
  40544a:	46cb      	mov	fp, r9
  40544c:	4630      	mov	r0, r6
  40544e:	4639      	mov	r1, r7
  405450:	220a      	movs	r2, #10
  405452:	2300      	movs	r3, #0
  405454:	f7fd fbf8 	bl	402c48 <__aeabi_uldivmod>
  405458:	3230      	adds	r2, #48	; 0x30
  40545a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40545e:	4630      	mov	r0, r6
  405460:	4639      	mov	r1, r7
  405462:	2300      	movs	r3, #0
  405464:	220a      	movs	r2, #10
  405466:	f7fd fbef 	bl	402c48 <__aeabi_uldivmod>
  40546a:	4606      	mov	r6, r0
  40546c:	460f      	mov	r7, r1
  40546e:	ea56 0307 	orrs.w	r3, r6, r7
  405472:	d1eb      	bne.n	40544c <_vfiprintf_r+0x9d4>
  405474:	e56c      	b.n	404f50 <_vfiprintf_r+0x4d8>
  405476:	9405      	str	r4, [sp, #20]
  405478:	46cb      	mov	fp, r9
  40547a:	e44f      	b.n	404d1c <_vfiprintf_r+0x2a4>
  40547c:	aa0f      	add	r2, sp, #60	; 0x3c
  40547e:	9904      	ldr	r1, [sp, #16]
  405480:	9806      	ldr	r0, [sp, #24]
  405482:	f7ff fab9 	bl	4049f8 <__sprint_r.part.0>
  405486:	2800      	cmp	r0, #0
  405488:	d1a8      	bne.n	4053dc <_vfiprintf_r+0x964>
  40548a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40548c:	46ca      	mov	sl, r9
  40548e:	e75e      	b.n	40534e <_vfiprintf_r+0x8d6>
  405490:	aa0f      	add	r2, sp, #60	; 0x3c
  405492:	9904      	ldr	r1, [sp, #16]
  405494:	9806      	ldr	r0, [sp, #24]
  405496:	f7ff faaf 	bl	4049f8 <__sprint_r.part.0>
  40549a:	2800      	cmp	r0, #0
  40549c:	d19e      	bne.n	4053dc <_vfiprintf_r+0x964>
  40549e:	46ca      	mov	sl, r9
  4054a0:	f7ff bbc0 	b.w	404c24 <_vfiprintf_r+0x1ac>
  4054a4:	00409674 	.word	0x00409674
  4054a8:	00409664 	.word	0x00409664
  4054ac:	3104      	adds	r1, #4
  4054ae:	6816      	ldr	r6, [r2, #0]
  4054b0:	9107      	str	r1, [sp, #28]
  4054b2:	2201      	movs	r2, #1
  4054b4:	2700      	movs	r7, #0
  4054b6:	e412      	b.n	404cde <_vfiprintf_r+0x266>
  4054b8:	9807      	ldr	r0, [sp, #28]
  4054ba:	4601      	mov	r1, r0
  4054bc:	3104      	adds	r1, #4
  4054be:	6806      	ldr	r6, [r0, #0]
  4054c0:	9107      	str	r1, [sp, #28]
  4054c2:	2700      	movs	r7, #0
  4054c4:	e40b      	b.n	404cde <_vfiprintf_r+0x266>
  4054c6:	680e      	ldr	r6, [r1, #0]
  4054c8:	3104      	adds	r1, #4
  4054ca:	9107      	str	r1, [sp, #28]
  4054cc:	2700      	movs	r7, #0
  4054ce:	e591      	b.n	404ff4 <_vfiprintf_r+0x57c>
  4054d0:	9907      	ldr	r1, [sp, #28]
  4054d2:	680e      	ldr	r6, [r1, #0]
  4054d4:	460a      	mov	r2, r1
  4054d6:	17f7      	asrs	r7, r6, #31
  4054d8:	3204      	adds	r2, #4
  4054da:	9207      	str	r2, [sp, #28]
  4054dc:	4630      	mov	r0, r6
  4054de:	4639      	mov	r1, r7
  4054e0:	e50f      	b.n	404f02 <_vfiprintf_r+0x48a>
  4054e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4054e6:	f001 fe4d 	bl	407184 <__retarget_lock_release_recursive>
  4054ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4054ee:	e71a      	b.n	405326 <_vfiprintf_r+0x8ae>
  4054f0:	9b02      	ldr	r3, [sp, #8]
  4054f2:	9302      	str	r3, [sp, #8]
  4054f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4054f8:	3630      	adds	r6, #48	; 0x30
  4054fa:	2301      	movs	r3, #1
  4054fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405500:	9305      	str	r3, [sp, #20]
  405502:	e40b      	b.n	404d1c <_vfiprintf_r+0x2a4>
  405504:	aa0f      	add	r2, sp, #60	; 0x3c
  405506:	9904      	ldr	r1, [sp, #16]
  405508:	9806      	ldr	r0, [sp, #24]
  40550a:	f7ff fa75 	bl	4049f8 <__sprint_r.part.0>
  40550e:	2800      	cmp	r0, #0
  405510:	f47f af64 	bne.w	4053dc <_vfiprintf_r+0x964>
  405514:	9910      	ldr	r1, [sp, #64]	; 0x40
  405516:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405518:	1c48      	adds	r0, r1, #1
  40551a:	46ca      	mov	sl, r9
  40551c:	e651      	b.n	4051c2 <_vfiprintf_r+0x74a>
  40551e:	aa0f      	add	r2, sp, #60	; 0x3c
  405520:	9904      	ldr	r1, [sp, #16]
  405522:	9806      	ldr	r0, [sp, #24]
  405524:	f7ff fa68 	bl	4049f8 <__sprint_r.part.0>
  405528:	2800      	cmp	r0, #0
  40552a:	f47f af57 	bne.w	4053dc <_vfiprintf_r+0x964>
  40552e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405530:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405532:	1c48      	adds	r0, r1, #1
  405534:	46ca      	mov	sl, r9
  405536:	e448      	b.n	404dca <_vfiprintf_r+0x352>
  405538:	2a00      	cmp	r2, #0
  40553a:	f040 8091 	bne.w	405660 <_vfiprintf_r+0xbe8>
  40553e:	2001      	movs	r0, #1
  405540:	4611      	mov	r1, r2
  405542:	46ca      	mov	sl, r9
  405544:	e641      	b.n	4051ca <_vfiprintf_r+0x752>
  405546:	aa0f      	add	r2, sp, #60	; 0x3c
  405548:	9904      	ldr	r1, [sp, #16]
  40554a:	9806      	ldr	r0, [sp, #24]
  40554c:	f7ff fa54 	bl	4049f8 <__sprint_r.part.0>
  405550:	2800      	cmp	r0, #0
  405552:	f47f af43 	bne.w	4053dc <_vfiprintf_r+0x964>
  405556:	9810      	ldr	r0, [sp, #64]	; 0x40
  405558:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40555a:	3001      	adds	r0, #1
  40555c:	46ca      	mov	sl, r9
  40555e:	e667      	b.n	405230 <_vfiprintf_r+0x7b8>
  405560:	46d3      	mov	fp, sl
  405562:	e6d6      	b.n	405312 <_vfiprintf_r+0x89a>
  405564:	9e07      	ldr	r6, [sp, #28]
  405566:	3607      	adds	r6, #7
  405568:	f026 0207 	bic.w	r2, r6, #7
  40556c:	f102 0108 	add.w	r1, r2, #8
  405570:	e9d2 6700 	ldrd	r6, r7, [r2]
  405574:	9107      	str	r1, [sp, #28]
  405576:	2201      	movs	r2, #1
  405578:	f7ff bbb1 	b.w	404cde <_vfiprintf_r+0x266>
  40557c:	9e07      	ldr	r6, [sp, #28]
  40557e:	3607      	adds	r6, #7
  405580:	f026 0607 	bic.w	r6, r6, #7
  405584:	e9d6 0100 	ldrd	r0, r1, [r6]
  405588:	f106 0208 	add.w	r2, r6, #8
  40558c:	9207      	str	r2, [sp, #28]
  40558e:	4606      	mov	r6, r0
  405590:	460f      	mov	r7, r1
  405592:	e4b6      	b.n	404f02 <_vfiprintf_r+0x48a>
  405594:	9e07      	ldr	r6, [sp, #28]
  405596:	3607      	adds	r6, #7
  405598:	f026 0207 	bic.w	r2, r6, #7
  40559c:	f102 0108 	add.w	r1, r2, #8
  4055a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4055a4:	9107      	str	r1, [sp, #28]
  4055a6:	2200      	movs	r2, #0
  4055a8:	f7ff bb99 	b.w	404cde <_vfiprintf_r+0x266>
  4055ac:	9e07      	ldr	r6, [sp, #28]
  4055ae:	3607      	adds	r6, #7
  4055b0:	f026 0107 	bic.w	r1, r6, #7
  4055b4:	f101 0008 	add.w	r0, r1, #8
  4055b8:	9007      	str	r0, [sp, #28]
  4055ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4055be:	e519      	b.n	404ff4 <_vfiprintf_r+0x57c>
  4055c0:	46cb      	mov	fp, r9
  4055c2:	f7ff bbab 	b.w	404d1c <_vfiprintf_r+0x2a4>
  4055c6:	252d      	movs	r5, #45	; 0x2d
  4055c8:	4276      	negs	r6, r6
  4055ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4055ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055d2:	2201      	movs	r2, #1
  4055d4:	f7ff bb88 	b.w	404ce8 <_vfiprintf_r+0x270>
  4055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055da:	b9b3      	cbnz	r3, 40560a <_vfiprintf_r+0xb92>
  4055dc:	4611      	mov	r1, r2
  4055de:	2001      	movs	r0, #1
  4055e0:	46ca      	mov	sl, r9
  4055e2:	e5f2      	b.n	4051ca <_vfiprintf_r+0x752>
  4055e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4055e8:	f001 fdcc 	bl	407184 <__retarget_lock_release_recursive>
  4055ec:	f04f 33ff 	mov.w	r3, #4294967295
  4055f0:	9303      	str	r3, [sp, #12]
  4055f2:	f7ff bb50 	b.w	404c96 <_vfiprintf_r+0x21e>
  4055f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4055f8:	9904      	ldr	r1, [sp, #16]
  4055fa:	9806      	ldr	r0, [sp, #24]
  4055fc:	f7ff f9fc 	bl	4049f8 <__sprint_r.part.0>
  405600:	2800      	cmp	r0, #0
  405602:	f47f aeeb 	bne.w	4053dc <_vfiprintf_r+0x964>
  405606:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405608:	e6a9      	b.n	40535e <_vfiprintf_r+0x8e6>
  40560a:	ab0e      	add	r3, sp, #56	; 0x38
  40560c:	2202      	movs	r2, #2
  40560e:	931c      	str	r3, [sp, #112]	; 0x70
  405610:	921d      	str	r2, [sp, #116]	; 0x74
  405612:	2001      	movs	r0, #1
  405614:	46ca      	mov	sl, r9
  405616:	e5d0      	b.n	4051ba <_vfiprintf_r+0x742>
  405618:	aa0f      	add	r2, sp, #60	; 0x3c
  40561a:	9904      	ldr	r1, [sp, #16]
  40561c:	9806      	ldr	r0, [sp, #24]
  40561e:	f7ff f9eb 	bl	4049f8 <__sprint_r.part.0>
  405622:	2800      	cmp	r0, #0
  405624:	f47f aeda 	bne.w	4053dc <_vfiprintf_r+0x964>
  405628:	9910      	ldr	r1, [sp, #64]	; 0x40
  40562a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40562c:	1c48      	adds	r0, r1, #1
  40562e:	46ca      	mov	sl, r9
  405630:	e5a4      	b.n	40517c <_vfiprintf_r+0x704>
  405632:	9a07      	ldr	r2, [sp, #28]
  405634:	9903      	ldr	r1, [sp, #12]
  405636:	6813      	ldr	r3, [r2, #0]
  405638:	17cd      	asrs	r5, r1, #31
  40563a:	4608      	mov	r0, r1
  40563c:	3204      	adds	r2, #4
  40563e:	4629      	mov	r1, r5
  405640:	9207      	str	r2, [sp, #28]
  405642:	e9c3 0100 	strd	r0, r1, [r3]
  405646:	f7ff ba54 	b.w	404af2 <_vfiprintf_r+0x7a>
  40564a:	4658      	mov	r0, fp
  40564c:	9607      	str	r6, [sp, #28]
  40564e:	9302      	str	r3, [sp, #8]
  405650:	f7fd ff36 	bl	4034c0 <strlen>
  405654:	2400      	movs	r4, #0
  405656:	9005      	str	r0, [sp, #20]
  405658:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40565c:	f7ff bb5e 	b.w	404d1c <_vfiprintf_r+0x2a4>
  405660:	aa0f      	add	r2, sp, #60	; 0x3c
  405662:	9904      	ldr	r1, [sp, #16]
  405664:	9806      	ldr	r0, [sp, #24]
  405666:	f7ff f9c7 	bl	4049f8 <__sprint_r.part.0>
  40566a:	2800      	cmp	r0, #0
  40566c:	f47f aeb6 	bne.w	4053dc <_vfiprintf_r+0x964>
  405670:	9910      	ldr	r1, [sp, #64]	; 0x40
  405672:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405674:	1c48      	adds	r0, r1, #1
  405676:	46ca      	mov	sl, r9
  405678:	e5a7      	b.n	4051ca <_vfiprintf_r+0x752>
  40567a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40567c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40567e:	4e20      	ldr	r6, [pc, #128]	; (405700 <_vfiprintf_r+0xc88>)
  405680:	3101      	adds	r1, #1
  405682:	f7ff bb90 	b.w	404da6 <_vfiprintf_r+0x32e>
  405686:	2c06      	cmp	r4, #6
  405688:	bf28      	it	cs
  40568a:	2406      	movcs	r4, #6
  40568c:	9405      	str	r4, [sp, #20]
  40568e:	9607      	str	r6, [sp, #28]
  405690:	9401      	str	r4, [sp, #4]
  405692:	f8df b070 	ldr.w	fp, [pc, #112]	; 405704 <_vfiprintf_r+0xc8c>
  405696:	e4d5      	b.n	405044 <_vfiprintf_r+0x5cc>
  405698:	9810      	ldr	r0, [sp, #64]	; 0x40
  40569a:	4e19      	ldr	r6, [pc, #100]	; (405700 <_vfiprintf_r+0xc88>)
  40569c:	3001      	adds	r0, #1
  40569e:	e603      	b.n	4052a8 <_vfiprintf_r+0x830>
  4056a0:	9405      	str	r4, [sp, #20]
  4056a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4056a6:	9607      	str	r6, [sp, #28]
  4056a8:	9302      	str	r3, [sp, #8]
  4056aa:	4604      	mov	r4, r0
  4056ac:	f7ff bb36 	b.w	404d1c <_vfiprintf_r+0x2a4>
  4056b0:	4686      	mov	lr, r0
  4056b2:	f7ff bbce 	b.w	404e52 <_vfiprintf_r+0x3da>
  4056b6:	9806      	ldr	r0, [sp, #24]
  4056b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4056ba:	4659      	mov	r1, fp
  4056bc:	f7ff f99c 	bl	4049f8 <__sprint_r.part.0>
  4056c0:	2800      	cmp	r0, #0
  4056c2:	f43f ae24 	beq.w	40530e <_vfiprintf_r+0x896>
  4056c6:	e624      	b.n	405312 <_vfiprintf_r+0x89a>
  4056c8:	9907      	ldr	r1, [sp, #28]
  4056ca:	f898 2001 	ldrb.w	r2, [r8, #1]
  4056ce:	680c      	ldr	r4, [r1, #0]
  4056d0:	3104      	adds	r1, #4
  4056d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4056d6:	46b8      	mov	r8, r7
  4056d8:	9107      	str	r1, [sp, #28]
  4056da:	f7ff ba3f 	b.w	404b5c <_vfiprintf_r+0xe4>
  4056de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056e2:	e43c      	b.n	404f5e <_vfiprintf_r+0x4e6>
  4056e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056e8:	e521      	b.n	40512e <_vfiprintf_r+0x6b6>
  4056ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056ee:	f7ff bbf4 	b.w	404eda <_vfiprintf_r+0x462>
  4056f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056f6:	e491      	b.n	40501c <_vfiprintf_r+0x5a4>
  4056f8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056fc:	e469      	b.n	404fd2 <_vfiprintf_r+0x55a>
  4056fe:	bf00      	nop
  405700:	00409664 	.word	0x00409664
  405704:	00409638 	.word	0x00409638

00405708 <__sbprintf>:
  405708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40570c:	460c      	mov	r4, r1
  40570e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405712:	8989      	ldrh	r1, [r1, #12]
  405714:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405716:	89e5      	ldrh	r5, [r4, #14]
  405718:	9619      	str	r6, [sp, #100]	; 0x64
  40571a:	f021 0102 	bic.w	r1, r1, #2
  40571e:	4606      	mov	r6, r0
  405720:	69e0      	ldr	r0, [r4, #28]
  405722:	f8ad 100c 	strh.w	r1, [sp, #12]
  405726:	4617      	mov	r7, r2
  405728:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40572c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40572e:	f8ad 500e 	strh.w	r5, [sp, #14]
  405732:	4698      	mov	r8, r3
  405734:	ad1a      	add	r5, sp, #104	; 0x68
  405736:	2300      	movs	r3, #0
  405738:	9007      	str	r0, [sp, #28]
  40573a:	a816      	add	r0, sp, #88	; 0x58
  40573c:	9209      	str	r2, [sp, #36]	; 0x24
  40573e:	9306      	str	r3, [sp, #24]
  405740:	9500      	str	r5, [sp, #0]
  405742:	9504      	str	r5, [sp, #16]
  405744:	9102      	str	r1, [sp, #8]
  405746:	9105      	str	r1, [sp, #20]
  405748:	f001 fd16 	bl	407178 <__retarget_lock_init_recursive>
  40574c:	4643      	mov	r3, r8
  40574e:	463a      	mov	r2, r7
  405750:	4669      	mov	r1, sp
  405752:	4630      	mov	r0, r6
  405754:	f7ff f990 	bl	404a78 <_vfiprintf_r>
  405758:	1e05      	subs	r5, r0, #0
  40575a:	db07      	blt.n	40576c <__sbprintf+0x64>
  40575c:	4630      	mov	r0, r6
  40575e:	4669      	mov	r1, sp
  405760:	f001 f8e8 	bl	406934 <_fflush_r>
  405764:	2800      	cmp	r0, #0
  405766:	bf18      	it	ne
  405768:	f04f 35ff 	movne.w	r5, #4294967295
  40576c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405770:	065b      	lsls	r3, r3, #25
  405772:	d503      	bpl.n	40577c <__sbprintf+0x74>
  405774:	89a3      	ldrh	r3, [r4, #12]
  405776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40577a:	81a3      	strh	r3, [r4, #12]
  40577c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40577e:	f001 fcfd 	bl	40717c <__retarget_lock_close_recursive>
  405782:	4628      	mov	r0, r5
  405784:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040578c <__swsetup_r>:
  40578c:	b538      	push	{r3, r4, r5, lr}
  40578e:	4b30      	ldr	r3, [pc, #192]	; (405850 <__swsetup_r+0xc4>)
  405790:	681b      	ldr	r3, [r3, #0]
  405792:	4605      	mov	r5, r0
  405794:	460c      	mov	r4, r1
  405796:	b113      	cbz	r3, 40579e <__swsetup_r+0x12>
  405798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40579a:	2a00      	cmp	r2, #0
  40579c:	d038      	beq.n	405810 <__swsetup_r+0x84>
  40579e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4057a2:	b293      	uxth	r3, r2
  4057a4:	0718      	lsls	r0, r3, #28
  4057a6:	d50c      	bpl.n	4057c2 <__swsetup_r+0x36>
  4057a8:	6920      	ldr	r0, [r4, #16]
  4057aa:	b1a8      	cbz	r0, 4057d8 <__swsetup_r+0x4c>
  4057ac:	f013 0201 	ands.w	r2, r3, #1
  4057b0:	d01e      	beq.n	4057f0 <__swsetup_r+0x64>
  4057b2:	6963      	ldr	r3, [r4, #20]
  4057b4:	2200      	movs	r2, #0
  4057b6:	425b      	negs	r3, r3
  4057b8:	61a3      	str	r3, [r4, #24]
  4057ba:	60a2      	str	r2, [r4, #8]
  4057bc:	b1f0      	cbz	r0, 4057fc <__swsetup_r+0x70>
  4057be:	2000      	movs	r0, #0
  4057c0:	bd38      	pop	{r3, r4, r5, pc}
  4057c2:	06d9      	lsls	r1, r3, #27
  4057c4:	d53c      	bpl.n	405840 <__swsetup_r+0xb4>
  4057c6:	0758      	lsls	r0, r3, #29
  4057c8:	d426      	bmi.n	405818 <__swsetup_r+0x8c>
  4057ca:	6920      	ldr	r0, [r4, #16]
  4057cc:	f042 0308 	orr.w	r3, r2, #8
  4057d0:	81a3      	strh	r3, [r4, #12]
  4057d2:	b29b      	uxth	r3, r3
  4057d4:	2800      	cmp	r0, #0
  4057d6:	d1e9      	bne.n	4057ac <__swsetup_r+0x20>
  4057d8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4057dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4057e0:	d0e4      	beq.n	4057ac <__swsetup_r+0x20>
  4057e2:	4628      	mov	r0, r5
  4057e4:	4621      	mov	r1, r4
  4057e6:	f001 fcfd 	bl	4071e4 <__smakebuf_r>
  4057ea:	89a3      	ldrh	r3, [r4, #12]
  4057ec:	6920      	ldr	r0, [r4, #16]
  4057ee:	e7dd      	b.n	4057ac <__swsetup_r+0x20>
  4057f0:	0799      	lsls	r1, r3, #30
  4057f2:	bf58      	it	pl
  4057f4:	6962      	ldrpl	r2, [r4, #20]
  4057f6:	60a2      	str	r2, [r4, #8]
  4057f8:	2800      	cmp	r0, #0
  4057fa:	d1e0      	bne.n	4057be <__swsetup_r+0x32>
  4057fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405800:	061a      	lsls	r2, r3, #24
  405802:	d5dd      	bpl.n	4057c0 <__swsetup_r+0x34>
  405804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405808:	81a3      	strh	r3, [r4, #12]
  40580a:	f04f 30ff 	mov.w	r0, #4294967295
  40580e:	bd38      	pop	{r3, r4, r5, pc}
  405810:	4618      	mov	r0, r3
  405812:	f001 f8e7 	bl	4069e4 <__sinit>
  405816:	e7c2      	b.n	40579e <__swsetup_r+0x12>
  405818:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40581a:	b151      	cbz	r1, 405832 <__swsetup_r+0xa6>
  40581c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405820:	4299      	cmp	r1, r3
  405822:	d004      	beq.n	40582e <__swsetup_r+0xa2>
  405824:	4628      	mov	r0, r5
  405826:	f001 fa03 	bl	406c30 <_free_r>
  40582a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40582e:	2300      	movs	r3, #0
  405830:	6323      	str	r3, [r4, #48]	; 0x30
  405832:	2300      	movs	r3, #0
  405834:	6920      	ldr	r0, [r4, #16]
  405836:	6063      	str	r3, [r4, #4]
  405838:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40583c:	6020      	str	r0, [r4, #0]
  40583e:	e7c5      	b.n	4057cc <__swsetup_r+0x40>
  405840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405844:	2309      	movs	r3, #9
  405846:	602b      	str	r3, [r5, #0]
  405848:	f04f 30ff 	mov.w	r0, #4294967295
  40584c:	81a2      	strh	r2, [r4, #12]
  40584e:	bd38      	pop	{r3, r4, r5, pc}
  405850:	2040003c 	.word	0x2040003c

00405854 <register_fini>:
  405854:	4b02      	ldr	r3, [pc, #8]	; (405860 <register_fini+0xc>)
  405856:	b113      	cbz	r3, 40585e <register_fini+0xa>
  405858:	4802      	ldr	r0, [pc, #8]	; (405864 <register_fini+0x10>)
  40585a:	f000 b805 	b.w	405868 <atexit>
  40585e:	4770      	bx	lr
  405860:	00000000 	.word	0x00000000
  405864:	00406a55 	.word	0x00406a55

00405868 <atexit>:
  405868:	2300      	movs	r3, #0
  40586a:	4601      	mov	r1, r0
  40586c:	461a      	mov	r2, r3
  40586e:	4618      	mov	r0, r3
  405870:	f002 beb0 	b.w	4085d4 <__register_exitproc>

00405874 <quorem>:
  405874:	6902      	ldr	r2, [r0, #16]
  405876:	690b      	ldr	r3, [r1, #16]
  405878:	4293      	cmp	r3, r2
  40587a:	f300 808d 	bgt.w	405998 <quorem+0x124>
  40587e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405882:	f103 38ff 	add.w	r8, r3, #4294967295
  405886:	f101 0714 	add.w	r7, r1, #20
  40588a:	f100 0b14 	add.w	fp, r0, #20
  40588e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405892:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405896:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40589a:	b083      	sub	sp, #12
  40589c:	3201      	adds	r2, #1
  40589e:	fbb3 f9f2 	udiv	r9, r3, r2
  4058a2:	eb0b 0304 	add.w	r3, fp, r4
  4058a6:	9400      	str	r4, [sp, #0]
  4058a8:	eb07 0a04 	add.w	sl, r7, r4
  4058ac:	9301      	str	r3, [sp, #4]
  4058ae:	f1b9 0f00 	cmp.w	r9, #0
  4058b2:	d039      	beq.n	405928 <quorem+0xb4>
  4058b4:	2500      	movs	r5, #0
  4058b6:	462e      	mov	r6, r5
  4058b8:	46bc      	mov	ip, r7
  4058ba:	46de      	mov	lr, fp
  4058bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4058c0:	f8de 3000 	ldr.w	r3, [lr]
  4058c4:	b2a2      	uxth	r2, r4
  4058c6:	fb09 5502 	mla	r5, r9, r2, r5
  4058ca:	0c22      	lsrs	r2, r4, #16
  4058cc:	0c2c      	lsrs	r4, r5, #16
  4058ce:	fb09 4202 	mla	r2, r9, r2, r4
  4058d2:	b2ad      	uxth	r5, r5
  4058d4:	1b75      	subs	r5, r6, r5
  4058d6:	b296      	uxth	r6, r2
  4058d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4058dc:	fa15 f383 	uxtah	r3, r5, r3
  4058e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4058e4:	b29b      	uxth	r3, r3
  4058e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4058ea:	45e2      	cmp	sl, ip
  4058ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4058f0:	f84e 3b04 	str.w	r3, [lr], #4
  4058f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4058f8:	d2e0      	bcs.n	4058bc <quorem+0x48>
  4058fa:	9b00      	ldr	r3, [sp, #0]
  4058fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  405900:	b993      	cbnz	r3, 405928 <quorem+0xb4>
  405902:	9c01      	ldr	r4, [sp, #4]
  405904:	1f23      	subs	r3, r4, #4
  405906:	459b      	cmp	fp, r3
  405908:	d20c      	bcs.n	405924 <quorem+0xb0>
  40590a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40590e:	b94b      	cbnz	r3, 405924 <quorem+0xb0>
  405910:	f1a4 0308 	sub.w	r3, r4, #8
  405914:	e002      	b.n	40591c <quorem+0xa8>
  405916:	681a      	ldr	r2, [r3, #0]
  405918:	3b04      	subs	r3, #4
  40591a:	b91a      	cbnz	r2, 405924 <quorem+0xb0>
  40591c:	459b      	cmp	fp, r3
  40591e:	f108 38ff 	add.w	r8, r8, #4294967295
  405922:	d3f8      	bcc.n	405916 <quorem+0xa2>
  405924:	f8c0 8010 	str.w	r8, [r0, #16]
  405928:	4604      	mov	r4, r0
  40592a:	f002 fa37 	bl	407d9c <__mcmp>
  40592e:	2800      	cmp	r0, #0
  405930:	db2e      	blt.n	405990 <quorem+0x11c>
  405932:	f109 0901 	add.w	r9, r9, #1
  405936:	465d      	mov	r5, fp
  405938:	2300      	movs	r3, #0
  40593a:	f857 1b04 	ldr.w	r1, [r7], #4
  40593e:	6828      	ldr	r0, [r5, #0]
  405940:	b28a      	uxth	r2, r1
  405942:	1a9a      	subs	r2, r3, r2
  405944:	0c0b      	lsrs	r3, r1, #16
  405946:	fa12 f280 	uxtah	r2, r2, r0
  40594a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40594e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405952:	b292      	uxth	r2, r2
  405954:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405958:	45ba      	cmp	sl, r7
  40595a:	f845 2b04 	str.w	r2, [r5], #4
  40595e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405962:	d2ea      	bcs.n	40593a <quorem+0xc6>
  405964:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405968:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40596c:	b982      	cbnz	r2, 405990 <quorem+0x11c>
  40596e:	1f1a      	subs	r2, r3, #4
  405970:	4593      	cmp	fp, r2
  405972:	d20b      	bcs.n	40598c <quorem+0x118>
  405974:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405978:	b942      	cbnz	r2, 40598c <quorem+0x118>
  40597a:	3b08      	subs	r3, #8
  40597c:	e002      	b.n	405984 <quorem+0x110>
  40597e:	681a      	ldr	r2, [r3, #0]
  405980:	3b04      	subs	r3, #4
  405982:	b91a      	cbnz	r2, 40598c <quorem+0x118>
  405984:	459b      	cmp	fp, r3
  405986:	f108 38ff 	add.w	r8, r8, #4294967295
  40598a:	d3f8      	bcc.n	40597e <quorem+0x10a>
  40598c:	f8c4 8010 	str.w	r8, [r4, #16]
  405990:	4648      	mov	r0, r9
  405992:	b003      	add	sp, #12
  405994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405998:	2000      	movs	r0, #0
  40599a:	4770      	bx	lr
  40599c:	0000      	movs	r0, r0
	...

004059a0 <_dtoa_r>:
  4059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4059a6:	b09b      	sub	sp, #108	; 0x6c
  4059a8:	4604      	mov	r4, r0
  4059aa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4059ac:	4692      	mov	sl, r2
  4059ae:	469b      	mov	fp, r3
  4059b0:	b141      	cbz	r1, 4059c4 <_dtoa_r+0x24>
  4059b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4059b4:	604a      	str	r2, [r1, #4]
  4059b6:	2301      	movs	r3, #1
  4059b8:	4093      	lsls	r3, r2
  4059ba:	608b      	str	r3, [r1, #8]
  4059bc:	f002 f816 	bl	4079ec <_Bfree>
  4059c0:	2300      	movs	r3, #0
  4059c2:	6423      	str	r3, [r4, #64]	; 0x40
  4059c4:	f1bb 0f00 	cmp.w	fp, #0
  4059c8:	465d      	mov	r5, fp
  4059ca:	db35      	blt.n	405a38 <_dtoa_r+0x98>
  4059cc:	2300      	movs	r3, #0
  4059ce:	6033      	str	r3, [r6, #0]
  4059d0:	4b9d      	ldr	r3, [pc, #628]	; (405c48 <_dtoa_r+0x2a8>)
  4059d2:	43ab      	bics	r3, r5
  4059d4:	d015      	beq.n	405a02 <_dtoa_r+0x62>
  4059d6:	4650      	mov	r0, sl
  4059d8:	4659      	mov	r1, fp
  4059da:	2200      	movs	r2, #0
  4059dc:	2300      	movs	r3, #0
  4059de:	f003 fb71 	bl	4090c4 <__aeabi_dcmpeq>
  4059e2:	4680      	mov	r8, r0
  4059e4:	2800      	cmp	r0, #0
  4059e6:	d02d      	beq.n	405a44 <_dtoa_r+0xa4>
  4059e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4059ea:	2301      	movs	r3, #1
  4059ec:	6013      	str	r3, [r2, #0]
  4059ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4059f0:	2b00      	cmp	r3, #0
  4059f2:	f000 80bd 	beq.w	405b70 <_dtoa_r+0x1d0>
  4059f6:	4895      	ldr	r0, [pc, #596]	; (405c4c <_dtoa_r+0x2ac>)
  4059f8:	6018      	str	r0, [r3, #0]
  4059fa:	3801      	subs	r0, #1
  4059fc:	b01b      	add	sp, #108	; 0x6c
  4059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a02:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405a04:	f242 730f 	movw	r3, #9999	; 0x270f
  405a08:	6013      	str	r3, [r2, #0]
  405a0a:	f1ba 0f00 	cmp.w	sl, #0
  405a0e:	d10d      	bne.n	405a2c <_dtoa_r+0x8c>
  405a10:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405a14:	b955      	cbnz	r5, 405a2c <_dtoa_r+0x8c>
  405a16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405a18:	488d      	ldr	r0, [pc, #564]	; (405c50 <_dtoa_r+0x2b0>)
  405a1a:	2b00      	cmp	r3, #0
  405a1c:	d0ee      	beq.n	4059fc <_dtoa_r+0x5c>
  405a1e:	f100 0308 	add.w	r3, r0, #8
  405a22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405a24:	6013      	str	r3, [r2, #0]
  405a26:	b01b      	add	sp, #108	; 0x6c
  405a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405a2e:	4889      	ldr	r0, [pc, #548]	; (405c54 <_dtoa_r+0x2b4>)
  405a30:	2b00      	cmp	r3, #0
  405a32:	d0e3      	beq.n	4059fc <_dtoa_r+0x5c>
  405a34:	1cc3      	adds	r3, r0, #3
  405a36:	e7f4      	b.n	405a22 <_dtoa_r+0x82>
  405a38:	2301      	movs	r3, #1
  405a3a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405a3e:	6033      	str	r3, [r6, #0]
  405a40:	46ab      	mov	fp, r5
  405a42:	e7c5      	b.n	4059d0 <_dtoa_r+0x30>
  405a44:	aa18      	add	r2, sp, #96	; 0x60
  405a46:	ab19      	add	r3, sp, #100	; 0x64
  405a48:	9201      	str	r2, [sp, #4]
  405a4a:	9300      	str	r3, [sp, #0]
  405a4c:	4652      	mov	r2, sl
  405a4e:	465b      	mov	r3, fp
  405a50:	4620      	mov	r0, r4
  405a52:	f002 fa43 	bl	407edc <__d2b>
  405a56:	0d2b      	lsrs	r3, r5, #20
  405a58:	4681      	mov	r9, r0
  405a5a:	d071      	beq.n	405b40 <_dtoa_r+0x1a0>
  405a5c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405a60:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405a64:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405a66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405a6a:	4650      	mov	r0, sl
  405a6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405a70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405a74:	2200      	movs	r2, #0
  405a76:	4b78      	ldr	r3, [pc, #480]	; (405c58 <_dtoa_r+0x2b8>)
  405a78:	f002 ff08 	bl	40888c <__aeabi_dsub>
  405a7c:	a36c      	add	r3, pc, #432	; (adr r3, 405c30 <_dtoa_r+0x290>)
  405a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a82:	f003 f8b7 	bl	408bf4 <__aeabi_dmul>
  405a86:	a36c      	add	r3, pc, #432	; (adr r3, 405c38 <_dtoa_r+0x298>)
  405a88:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a8c:	f002 ff00 	bl	408890 <__adddf3>
  405a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405a94:	4630      	mov	r0, r6
  405a96:	f003 f847 	bl	408b28 <__aeabi_i2d>
  405a9a:	a369      	add	r3, pc, #420	; (adr r3, 405c40 <_dtoa_r+0x2a0>)
  405a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405aa0:	f003 f8a8 	bl	408bf4 <__aeabi_dmul>
  405aa4:	4602      	mov	r2, r0
  405aa6:	460b      	mov	r3, r1
  405aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405aac:	f002 fef0 	bl	408890 <__adddf3>
  405ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405ab4:	f003 fb4e 	bl	409154 <__aeabi_d2iz>
  405ab8:	2200      	movs	r2, #0
  405aba:	9002      	str	r0, [sp, #8]
  405abc:	2300      	movs	r3, #0
  405abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405ac2:	f003 fb09 	bl	4090d8 <__aeabi_dcmplt>
  405ac6:	2800      	cmp	r0, #0
  405ac8:	f040 8173 	bne.w	405db2 <_dtoa_r+0x412>
  405acc:	9d02      	ldr	r5, [sp, #8]
  405ace:	2d16      	cmp	r5, #22
  405ad0:	f200 815d 	bhi.w	405d8e <_dtoa_r+0x3ee>
  405ad4:	4b61      	ldr	r3, [pc, #388]	; (405c5c <_dtoa_r+0x2bc>)
  405ad6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  405ade:	4652      	mov	r2, sl
  405ae0:	465b      	mov	r3, fp
  405ae2:	f003 fb17 	bl	409114 <__aeabi_dcmpgt>
  405ae6:	2800      	cmp	r0, #0
  405ae8:	f000 81c5 	beq.w	405e76 <_dtoa_r+0x4d6>
  405aec:	1e6b      	subs	r3, r5, #1
  405aee:	9302      	str	r3, [sp, #8]
  405af0:	2300      	movs	r3, #0
  405af2:	930e      	str	r3, [sp, #56]	; 0x38
  405af4:	1bbf      	subs	r7, r7, r6
  405af6:	1e7b      	subs	r3, r7, #1
  405af8:	9306      	str	r3, [sp, #24]
  405afa:	f100 8154 	bmi.w	405da6 <_dtoa_r+0x406>
  405afe:	2300      	movs	r3, #0
  405b00:	9308      	str	r3, [sp, #32]
  405b02:	9b02      	ldr	r3, [sp, #8]
  405b04:	2b00      	cmp	r3, #0
  405b06:	f2c0 8145 	blt.w	405d94 <_dtoa_r+0x3f4>
  405b0a:	9a06      	ldr	r2, [sp, #24]
  405b0c:	930d      	str	r3, [sp, #52]	; 0x34
  405b0e:	4611      	mov	r1, r2
  405b10:	4419      	add	r1, r3
  405b12:	2300      	movs	r3, #0
  405b14:	9106      	str	r1, [sp, #24]
  405b16:	930c      	str	r3, [sp, #48]	; 0x30
  405b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b1a:	2b09      	cmp	r3, #9
  405b1c:	d82a      	bhi.n	405b74 <_dtoa_r+0x1d4>
  405b1e:	2b05      	cmp	r3, #5
  405b20:	f340 865b 	ble.w	4067da <_dtoa_r+0xe3a>
  405b24:	3b04      	subs	r3, #4
  405b26:	9324      	str	r3, [sp, #144]	; 0x90
  405b28:	2500      	movs	r5, #0
  405b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b2c:	3b02      	subs	r3, #2
  405b2e:	2b03      	cmp	r3, #3
  405b30:	f200 8642 	bhi.w	4067b8 <_dtoa_r+0xe18>
  405b34:	e8df f013 	tbh	[pc, r3, lsl #1]
  405b38:	02c903d4 	.word	0x02c903d4
  405b3c:	046103df 	.word	0x046103df
  405b40:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405b42:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405b44:	443e      	add	r6, r7
  405b46:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405b4a:	2b20      	cmp	r3, #32
  405b4c:	f340 818e 	ble.w	405e6c <_dtoa_r+0x4cc>
  405b50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405b54:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405b58:	409d      	lsls	r5, r3
  405b5a:	fa2a f000 	lsr.w	r0, sl, r0
  405b5e:	4328      	orrs	r0, r5
  405b60:	f002 ffd2 	bl	408b08 <__aeabi_ui2d>
  405b64:	2301      	movs	r3, #1
  405b66:	3e01      	subs	r6, #1
  405b68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405b6c:	9314      	str	r3, [sp, #80]	; 0x50
  405b6e:	e781      	b.n	405a74 <_dtoa_r+0xd4>
  405b70:	483b      	ldr	r0, [pc, #236]	; (405c60 <_dtoa_r+0x2c0>)
  405b72:	e743      	b.n	4059fc <_dtoa_r+0x5c>
  405b74:	2100      	movs	r1, #0
  405b76:	6461      	str	r1, [r4, #68]	; 0x44
  405b78:	4620      	mov	r0, r4
  405b7a:	9125      	str	r1, [sp, #148]	; 0x94
  405b7c:	f001 ff10 	bl	4079a0 <_Balloc>
  405b80:	f04f 33ff 	mov.w	r3, #4294967295
  405b84:	930a      	str	r3, [sp, #40]	; 0x28
  405b86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405b88:	930f      	str	r3, [sp, #60]	; 0x3c
  405b8a:	2301      	movs	r3, #1
  405b8c:	9004      	str	r0, [sp, #16]
  405b8e:	6420      	str	r0, [r4, #64]	; 0x40
  405b90:	9224      	str	r2, [sp, #144]	; 0x90
  405b92:	930b      	str	r3, [sp, #44]	; 0x2c
  405b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405b96:	2b00      	cmp	r3, #0
  405b98:	f2c0 80d9 	blt.w	405d4e <_dtoa_r+0x3ae>
  405b9c:	9a02      	ldr	r2, [sp, #8]
  405b9e:	2a0e      	cmp	r2, #14
  405ba0:	f300 80d5 	bgt.w	405d4e <_dtoa_r+0x3ae>
  405ba4:	4b2d      	ldr	r3, [pc, #180]	; (405c5c <_dtoa_r+0x2bc>)
  405ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405baa:	e9d3 2300 	ldrd	r2, r3, [r3]
  405bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405bb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bb4:	2b00      	cmp	r3, #0
  405bb6:	f2c0 83ba 	blt.w	40632e <_dtoa_r+0x98e>
  405bba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405bbe:	4650      	mov	r0, sl
  405bc0:	462a      	mov	r2, r5
  405bc2:	4633      	mov	r3, r6
  405bc4:	4659      	mov	r1, fp
  405bc6:	f003 f93f 	bl	408e48 <__aeabi_ddiv>
  405bca:	f003 fac3 	bl	409154 <__aeabi_d2iz>
  405bce:	4680      	mov	r8, r0
  405bd0:	f002 ffaa 	bl	408b28 <__aeabi_i2d>
  405bd4:	462a      	mov	r2, r5
  405bd6:	4633      	mov	r3, r6
  405bd8:	f003 f80c 	bl	408bf4 <__aeabi_dmul>
  405bdc:	460b      	mov	r3, r1
  405bde:	4602      	mov	r2, r0
  405be0:	4659      	mov	r1, fp
  405be2:	4650      	mov	r0, sl
  405be4:	f002 fe52 	bl	40888c <__aeabi_dsub>
  405be8:	9d04      	ldr	r5, [sp, #16]
  405bea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405bee:	702b      	strb	r3, [r5, #0]
  405bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bf2:	2b01      	cmp	r3, #1
  405bf4:	4606      	mov	r6, r0
  405bf6:	460f      	mov	r7, r1
  405bf8:	f105 0501 	add.w	r5, r5, #1
  405bfc:	d068      	beq.n	405cd0 <_dtoa_r+0x330>
  405bfe:	2200      	movs	r2, #0
  405c00:	4b18      	ldr	r3, [pc, #96]	; (405c64 <_dtoa_r+0x2c4>)
  405c02:	f002 fff7 	bl	408bf4 <__aeabi_dmul>
  405c06:	2200      	movs	r2, #0
  405c08:	2300      	movs	r3, #0
  405c0a:	4606      	mov	r6, r0
  405c0c:	460f      	mov	r7, r1
  405c0e:	f003 fa59 	bl	4090c4 <__aeabi_dcmpeq>
  405c12:	2800      	cmp	r0, #0
  405c14:	f040 8088 	bne.w	405d28 <_dtoa_r+0x388>
  405c18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405c1c:	f04f 0a00 	mov.w	sl, #0
  405c20:	f8df b040 	ldr.w	fp, [pc, #64]	; 405c64 <_dtoa_r+0x2c4>
  405c24:	940c      	str	r4, [sp, #48]	; 0x30
  405c26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405c2a:	e028      	b.n	405c7e <_dtoa_r+0x2de>
  405c2c:	f3af 8000 	nop.w
  405c30:	636f4361 	.word	0x636f4361
  405c34:	3fd287a7 	.word	0x3fd287a7
  405c38:	8b60c8b3 	.word	0x8b60c8b3
  405c3c:	3fc68a28 	.word	0x3fc68a28
  405c40:	509f79fb 	.word	0x509f79fb
  405c44:	3fd34413 	.word	0x3fd34413
  405c48:	7ff00000 	.word	0x7ff00000
  405c4c:	00409641 	.word	0x00409641
  405c50:	00409684 	.word	0x00409684
  405c54:	00409690 	.word	0x00409690
  405c58:	3ff80000 	.word	0x3ff80000
  405c5c:	004096d0 	.word	0x004096d0
  405c60:	00409640 	.word	0x00409640
  405c64:	40240000 	.word	0x40240000
  405c68:	f002 ffc4 	bl	408bf4 <__aeabi_dmul>
  405c6c:	2200      	movs	r2, #0
  405c6e:	2300      	movs	r3, #0
  405c70:	4606      	mov	r6, r0
  405c72:	460f      	mov	r7, r1
  405c74:	f003 fa26 	bl	4090c4 <__aeabi_dcmpeq>
  405c78:	2800      	cmp	r0, #0
  405c7a:	f040 83c1 	bne.w	406400 <_dtoa_r+0xa60>
  405c7e:	4642      	mov	r2, r8
  405c80:	464b      	mov	r3, r9
  405c82:	4630      	mov	r0, r6
  405c84:	4639      	mov	r1, r7
  405c86:	f003 f8df 	bl	408e48 <__aeabi_ddiv>
  405c8a:	f003 fa63 	bl	409154 <__aeabi_d2iz>
  405c8e:	4604      	mov	r4, r0
  405c90:	f002 ff4a 	bl	408b28 <__aeabi_i2d>
  405c94:	4642      	mov	r2, r8
  405c96:	464b      	mov	r3, r9
  405c98:	f002 ffac 	bl	408bf4 <__aeabi_dmul>
  405c9c:	4602      	mov	r2, r0
  405c9e:	460b      	mov	r3, r1
  405ca0:	4630      	mov	r0, r6
  405ca2:	4639      	mov	r1, r7
  405ca4:	f002 fdf2 	bl	40888c <__aeabi_dsub>
  405ca8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405cac:	9e04      	ldr	r6, [sp, #16]
  405cae:	f805 eb01 	strb.w	lr, [r5], #1
  405cb2:	eba5 0e06 	sub.w	lr, r5, r6
  405cb6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405cb8:	45b6      	cmp	lr, r6
  405cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405cbe:	4652      	mov	r2, sl
  405cc0:	465b      	mov	r3, fp
  405cc2:	d1d1      	bne.n	405c68 <_dtoa_r+0x2c8>
  405cc4:	46a0      	mov	r8, r4
  405cc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405cca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405ccc:	4606      	mov	r6, r0
  405cce:	460f      	mov	r7, r1
  405cd0:	4632      	mov	r2, r6
  405cd2:	463b      	mov	r3, r7
  405cd4:	4630      	mov	r0, r6
  405cd6:	4639      	mov	r1, r7
  405cd8:	f002 fdda 	bl	408890 <__adddf3>
  405cdc:	4606      	mov	r6, r0
  405cde:	460f      	mov	r7, r1
  405ce0:	4602      	mov	r2, r0
  405ce2:	460b      	mov	r3, r1
  405ce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405ce8:	f003 f9f6 	bl	4090d8 <__aeabi_dcmplt>
  405cec:	b948      	cbnz	r0, 405d02 <_dtoa_r+0x362>
  405cee:	4632      	mov	r2, r6
  405cf0:	463b      	mov	r3, r7
  405cf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405cf6:	f003 f9e5 	bl	4090c4 <__aeabi_dcmpeq>
  405cfa:	b1a8      	cbz	r0, 405d28 <_dtoa_r+0x388>
  405cfc:	f018 0f01 	tst.w	r8, #1
  405d00:	d012      	beq.n	405d28 <_dtoa_r+0x388>
  405d02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405d06:	9a04      	ldr	r2, [sp, #16]
  405d08:	1e6b      	subs	r3, r5, #1
  405d0a:	e004      	b.n	405d16 <_dtoa_r+0x376>
  405d0c:	429a      	cmp	r2, r3
  405d0e:	f000 8401 	beq.w	406514 <_dtoa_r+0xb74>
  405d12:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405d1a:	f103 0501 	add.w	r5, r3, #1
  405d1e:	d0f5      	beq.n	405d0c <_dtoa_r+0x36c>
  405d20:	f108 0801 	add.w	r8, r8, #1
  405d24:	f883 8000 	strb.w	r8, [r3]
  405d28:	4649      	mov	r1, r9
  405d2a:	4620      	mov	r0, r4
  405d2c:	f001 fe5e 	bl	4079ec <_Bfree>
  405d30:	2200      	movs	r2, #0
  405d32:	9b02      	ldr	r3, [sp, #8]
  405d34:	702a      	strb	r2, [r5, #0]
  405d36:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405d38:	3301      	adds	r3, #1
  405d3a:	6013      	str	r3, [r2, #0]
  405d3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405d3e:	2b00      	cmp	r3, #0
  405d40:	f000 839e 	beq.w	406480 <_dtoa_r+0xae0>
  405d44:	9804      	ldr	r0, [sp, #16]
  405d46:	601d      	str	r5, [r3, #0]
  405d48:	b01b      	add	sp, #108	; 0x6c
  405d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405d50:	2a00      	cmp	r2, #0
  405d52:	d03e      	beq.n	405dd2 <_dtoa_r+0x432>
  405d54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405d56:	2a01      	cmp	r2, #1
  405d58:	f340 8311 	ble.w	40637e <_dtoa_r+0x9de>
  405d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405d60:	1e5f      	subs	r7, r3, #1
  405d62:	42ba      	cmp	r2, r7
  405d64:	f2c0 838f 	blt.w	406486 <_dtoa_r+0xae6>
  405d68:	1bd7      	subs	r7, r2, r7
  405d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d6c:	2b00      	cmp	r3, #0
  405d6e:	f2c0 848b 	blt.w	406688 <_dtoa_r+0xce8>
  405d72:	9d08      	ldr	r5, [sp, #32]
  405d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d76:	9a08      	ldr	r2, [sp, #32]
  405d78:	441a      	add	r2, r3
  405d7a:	9208      	str	r2, [sp, #32]
  405d7c:	9a06      	ldr	r2, [sp, #24]
  405d7e:	2101      	movs	r1, #1
  405d80:	441a      	add	r2, r3
  405d82:	4620      	mov	r0, r4
  405d84:	9206      	str	r2, [sp, #24]
  405d86:	f001 fecb 	bl	407b20 <__i2b>
  405d8a:	4606      	mov	r6, r0
  405d8c:	e024      	b.n	405dd8 <_dtoa_r+0x438>
  405d8e:	2301      	movs	r3, #1
  405d90:	930e      	str	r3, [sp, #56]	; 0x38
  405d92:	e6af      	b.n	405af4 <_dtoa_r+0x154>
  405d94:	9a08      	ldr	r2, [sp, #32]
  405d96:	9b02      	ldr	r3, [sp, #8]
  405d98:	1ad2      	subs	r2, r2, r3
  405d9a:	425b      	negs	r3, r3
  405d9c:	930c      	str	r3, [sp, #48]	; 0x30
  405d9e:	2300      	movs	r3, #0
  405da0:	9208      	str	r2, [sp, #32]
  405da2:	930d      	str	r3, [sp, #52]	; 0x34
  405da4:	e6b8      	b.n	405b18 <_dtoa_r+0x178>
  405da6:	f1c7 0301 	rsb	r3, r7, #1
  405daa:	9308      	str	r3, [sp, #32]
  405dac:	2300      	movs	r3, #0
  405dae:	9306      	str	r3, [sp, #24]
  405db0:	e6a7      	b.n	405b02 <_dtoa_r+0x162>
  405db2:	9d02      	ldr	r5, [sp, #8]
  405db4:	4628      	mov	r0, r5
  405db6:	f002 feb7 	bl	408b28 <__aeabi_i2d>
  405dba:	4602      	mov	r2, r0
  405dbc:	460b      	mov	r3, r1
  405dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405dc2:	f003 f97f 	bl	4090c4 <__aeabi_dcmpeq>
  405dc6:	2800      	cmp	r0, #0
  405dc8:	f47f ae80 	bne.w	405acc <_dtoa_r+0x12c>
  405dcc:	1e6b      	subs	r3, r5, #1
  405dce:	9302      	str	r3, [sp, #8]
  405dd0:	e67c      	b.n	405acc <_dtoa_r+0x12c>
  405dd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405dd4:	9d08      	ldr	r5, [sp, #32]
  405dd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405dd8:	2d00      	cmp	r5, #0
  405dda:	dd0c      	ble.n	405df6 <_dtoa_r+0x456>
  405ddc:	9906      	ldr	r1, [sp, #24]
  405dde:	2900      	cmp	r1, #0
  405de0:	460b      	mov	r3, r1
  405de2:	dd08      	ble.n	405df6 <_dtoa_r+0x456>
  405de4:	42a9      	cmp	r1, r5
  405de6:	9a08      	ldr	r2, [sp, #32]
  405de8:	bfa8      	it	ge
  405dea:	462b      	movge	r3, r5
  405dec:	1ad2      	subs	r2, r2, r3
  405dee:	1aed      	subs	r5, r5, r3
  405df0:	1acb      	subs	r3, r1, r3
  405df2:	9208      	str	r2, [sp, #32]
  405df4:	9306      	str	r3, [sp, #24]
  405df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405df8:	b1d3      	cbz	r3, 405e30 <_dtoa_r+0x490>
  405dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405dfc:	2b00      	cmp	r3, #0
  405dfe:	f000 82b7 	beq.w	406370 <_dtoa_r+0x9d0>
  405e02:	2f00      	cmp	r7, #0
  405e04:	dd10      	ble.n	405e28 <_dtoa_r+0x488>
  405e06:	4631      	mov	r1, r6
  405e08:	463a      	mov	r2, r7
  405e0a:	4620      	mov	r0, r4
  405e0c:	f001 ff24 	bl	407c58 <__pow5mult>
  405e10:	464a      	mov	r2, r9
  405e12:	4601      	mov	r1, r0
  405e14:	4606      	mov	r6, r0
  405e16:	4620      	mov	r0, r4
  405e18:	f001 fe8c 	bl	407b34 <__multiply>
  405e1c:	4649      	mov	r1, r9
  405e1e:	4680      	mov	r8, r0
  405e20:	4620      	mov	r0, r4
  405e22:	f001 fde3 	bl	4079ec <_Bfree>
  405e26:	46c1      	mov	r9, r8
  405e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405e2a:	1bda      	subs	r2, r3, r7
  405e2c:	f040 82a1 	bne.w	406372 <_dtoa_r+0x9d2>
  405e30:	2101      	movs	r1, #1
  405e32:	4620      	mov	r0, r4
  405e34:	f001 fe74 	bl	407b20 <__i2b>
  405e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	4680      	mov	r8, r0
  405e3e:	dd1c      	ble.n	405e7a <_dtoa_r+0x4da>
  405e40:	4601      	mov	r1, r0
  405e42:	461a      	mov	r2, r3
  405e44:	4620      	mov	r0, r4
  405e46:	f001 ff07 	bl	407c58 <__pow5mult>
  405e4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e4c:	2b01      	cmp	r3, #1
  405e4e:	4680      	mov	r8, r0
  405e50:	f340 8254 	ble.w	4062fc <_dtoa_r+0x95c>
  405e54:	2300      	movs	r3, #0
  405e56:	930c      	str	r3, [sp, #48]	; 0x30
  405e58:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405e5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405e60:	6918      	ldr	r0, [r3, #16]
  405e62:	f001 fe0d 	bl	407a80 <__hi0bits>
  405e66:	f1c0 0020 	rsb	r0, r0, #32
  405e6a:	e010      	b.n	405e8e <_dtoa_r+0x4ee>
  405e6c:	f1c3 0520 	rsb	r5, r3, #32
  405e70:	fa0a f005 	lsl.w	r0, sl, r5
  405e74:	e674      	b.n	405b60 <_dtoa_r+0x1c0>
  405e76:	900e      	str	r0, [sp, #56]	; 0x38
  405e78:	e63c      	b.n	405af4 <_dtoa_r+0x154>
  405e7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e7c:	2b01      	cmp	r3, #1
  405e7e:	f340 8287 	ble.w	406390 <_dtoa_r+0x9f0>
  405e82:	2300      	movs	r3, #0
  405e84:	930c      	str	r3, [sp, #48]	; 0x30
  405e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405e88:	2001      	movs	r0, #1
  405e8a:	2b00      	cmp	r3, #0
  405e8c:	d1e4      	bne.n	405e58 <_dtoa_r+0x4b8>
  405e8e:	9a06      	ldr	r2, [sp, #24]
  405e90:	4410      	add	r0, r2
  405e92:	f010 001f 	ands.w	r0, r0, #31
  405e96:	f000 80a1 	beq.w	405fdc <_dtoa_r+0x63c>
  405e9a:	f1c0 0320 	rsb	r3, r0, #32
  405e9e:	2b04      	cmp	r3, #4
  405ea0:	f340 849e 	ble.w	4067e0 <_dtoa_r+0xe40>
  405ea4:	9b08      	ldr	r3, [sp, #32]
  405ea6:	f1c0 001c 	rsb	r0, r0, #28
  405eaa:	4403      	add	r3, r0
  405eac:	9308      	str	r3, [sp, #32]
  405eae:	4613      	mov	r3, r2
  405eb0:	4403      	add	r3, r0
  405eb2:	4405      	add	r5, r0
  405eb4:	9306      	str	r3, [sp, #24]
  405eb6:	9b08      	ldr	r3, [sp, #32]
  405eb8:	2b00      	cmp	r3, #0
  405eba:	dd05      	ble.n	405ec8 <_dtoa_r+0x528>
  405ebc:	4649      	mov	r1, r9
  405ebe:	461a      	mov	r2, r3
  405ec0:	4620      	mov	r0, r4
  405ec2:	f001 ff19 	bl	407cf8 <__lshift>
  405ec6:	4681      	mov	r9, r0
  405ec8:	9b06      	ldr	r3, [sp, #24]
  405eca:	2b00      	cmp	r3, #0
  405ecc:	dd05      	ble.n	405eda <_dtoa_r+0x53a>
  405ece:	4641      	mov	r1, r8
  405ed0:	461a      	mov	r2, r3
  405ed2:	4620      	mov	r0, r4
  405ed4:	f001 ff10 	bl	407cf8 <__lshift>
  405ed8:	4680      	mov	r8, r0
  405eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405edc:	2b00      	cmp	r3, #0
  405ede:	f040 8086 	bne.w	405fee <_dtoa_r+0x64e>
  405ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ee4:	2b00      	cmp	r3, #0
  405ee6:	f340 8266 	ble.w	4063b6 <_dtoa_r+0xa16>
  405eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405eec:	2b00      	cmp	r3, #0
  405eee:	f000 8098 	beq.w	406022 <_dtoa_r+0x682>
  405ef2:	2d00      	cmp	r5, #0
  405ef4:	dd05      	ble.n	405f02 <_dtoa_r+0x562>
  405ef6:	4631      	mov	r1, r6
  405ef8:	462a      	mov	r2, r5
  405efa:	4620      	mov	r0, r4
  405efc:	f001 fefc 	bl	407cf8 <__lshift>
  405f00:	4606      	mov	r6, r0
  405f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f04:	2b00      	cmp	r3, #0
  405f06:	f040 8337 	bne.w	406578 <_dtoa_r+0xbd8>
  405f0a:	9606      	str	r6, [sp, #24]
  405f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f0e:	9a04      	ldr	r2, [sp, #16]
  405f10:	f8dd b018 	ldr.w	fp, [sp, #24]
  405f14:	3b01      	subs	r3, #1
  405f16:	18d3      	adds	r3, r2, r3
  405f18:	930b      	str	r3, [sp, #44]	; 0x2c
  405f1a:	f00a 0301 	and.w	r3, sl, #1
  405f1e:	930c      	str	r3, [sp, #48]	; 0x30
  405f20:	4617      	mov	r7, r2
  405f22:	46c2      	mov	sl, r8
  405f24:	4651      	mov	r1, sl
  405f26:	4648      	mov	r0, r9
  405f28:	f7ff fca4 	bl	405874 <quorem>
  405f2c:	4631      	mov	r1, r6
  405f2e:	4605      	mov	r5, r0
  405f30:	4648      	mov	r0, r9
  405f32:	f001 ff33 	bl	407d9c <__mcmp>
  405f36:	465a      	mov	r2, fp
  405f38:	900a      	str	r0, [sp, #40]	; 0x28
  405f3a:	4651      	mov	r1, sl
  405f3c:	4620      	mov	r0, r4
  405f3e:	f001 ff49 	bl	407dd4 <__mdiff>
  405f42:	68c2      	ldr	r2, [r0, #12]
  405f44:	4680      	mov	r8, r0
  405f46:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405f4a:	2a00      	cmp	r2, #0
  405f4c:	f040 822b 	bne.w	4063a6 <_dtoa_r+0xa06>
  405f50:	4601      	mov	r1, r0
  405f52:	4648      	mov	r0, r9
  405f54:	9308      	str	r3, [sp, #32]
  405f56:	f001 ff21 	bl	407d9c <__mcmp>
  405f5a:	4641      	mov	r1, r8
  405f5c:	9006      	str	r0, [sp, #24]
  405f5e:	4620      	mov	r0, r4
  405f60:	f001 fd44 	bl	4079ec <_Bfree>
  405f64:	9a06      	ldr	r2, [sp, #24]
  405f66:	9b08      	ldr	r3, [sp, #32]
  405f68:	b932      	cbnz	r2, 405f78 <_dtoa_r+0x5d8>
  405f6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  405f6c:	b921      	cbnz	r1, 405f78 <_dtoa_r+0x5d8>
  405f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405f70:	2a00      	cmp	r2, #0
  405f72:	f000 83ef 	beq.w	406754 <_dtoa_r+0xdb4>
  405f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405f78:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f7a:	2900      	cmp	r1, #0
  405f7c:	f2c0 829f 	blt.w	4064be <_dtoa_r+0xb1e>
  405f80:	d105      	bne.n	405f8e <_dtoa_r+0x5ee>
  405f82:	9924      	ldr	r1, [sp, #144]	; 0x90
  405f84:	b919      	cbnz	r1, 405f8e <_dtoa_r+0x5ee>
  405f86:	990c      	ldr	r1, [sp, #48]	; 0x30
  405f88:	2900      	cmp	r1, #0
  405f8a:	f000 8298 	beq.w	4064be <_dtoa_r+0xb1e>
  405f8e:	2a00      	cmp	r2, #0
  405f90:	f300 8306 	bgt.w	4065a0 <_dtoa_r+0xc00>
  405f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405f96:	703b      	strb	r3, [r7, #0]
  405f98:	f107 0801 	add.w	r8, r7, #1
  405f9c:	4297      	cmp	r7, r2
  405f9e:	4645      	mov	r5, r8
  405fa0:	f000 830c 	beq.w	4065bc <_dtoa_r+0xc1c>
  405fa4:	4649      	mov	r1, r9
  405fa6:	2300      	movs	r3, #0
  405fa8:	220a      	movs	r2, #10
  405faa:	4620      	mov	r0, r4
  405fac:	f001 fd28 	bl	407a00 <__multadd>
  405fb0:	455e      	cmp	r6, fp
  405fb2:	4681      	mov	r9, r0
  405fb4:	4631      	mov	r1, r6
  405fb6:	f04f 0300 	mov.w	r3, #0
  405fba:	f04f 020a 	mov.w	r2, #10
  405fbe:	4620      	mov	r0, r4
  405fc0:	f000 81eb 	beq.w	40639a <_dtoa_r+0x9fa>
  405fc4:	f001 fd1c 	bl	407a00 <__multadd>
  405fc8:	4659      	mov	r1, fp
  405fca:	4606      	mov	r6, r0
  405fcc:	2300      	movs	r3, #0
  405fce:	220a      	movs	r2, #10
  405fd0:	4620      	mov	r0, r4
  405fd2:	f001 fd15 	bl	407a00 <__multadd>
  405fd6:	4647      	mov	r7, r8
  405fd8:	4683      	mov	fp, r0
  405fda:	e7a3      	b.n	405f24 <_dtoa_r+0x584>
  405fdc:	201c      	movs	r0, #28
  405fde:	9b08      	ldr	r3, [sp, #32]
  405fe0:	4403      	add	r3, r0
  405fe2:	9308      	str	r3, [sp, #32]
  405fe4:	9b06      	ldr	r3, [sp, #24]
  405fe6:	4403      	add	r3, r0
  405fe8:	4405      	add	r5, r0
  405fea:	9306      	str	r3, [sp, #24]
  405fec:	e763      	b.n	405eb6 <_dtoa_r+0x516>
  405fee:	4641      	mov	r1, r8
  405ff0:	4648      	mov	r0, r9
  405ff2:	f001 fed3 	bl	407d9c <__mcmp>
  405ff6:	2800      	cmp	r0, #0
  405ff8:	f6bf af73 	bge.w	405ee2 <_dtoa_r+0x542>
  405ffc:	9f02      	ldr	r7, [sp, #8]
  405ffe:	4649      	mov	r1, r9
  406000:	2300      	movs	r3, #0
  406002:	220a      	movs	r2, #10
  406004:	4620      	mov	r0, r4
  406006:	3f01      	subs	r7, #1
  406008:	9702      	str	r7, [sp, #8]
  40600a:	f001 fcf9 	bl	407a00 <__multadd>
  40600e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406010:	4681      	mov	r9, r0
  406012:	2b00      	cmp	r3, #0
  406014:	f040 83b6 	bne.w	406784 <_dtoa_r+0xde4>
  406018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40601a:	2b00      	cmp	r3, #0
  40601c:	f340 83bf 	ble.w	40679e <_dtoa_r+0xdfe>
  406020:	930a      	str	r3, [sp, #40]	; 0x28
  406022:	f8dd b010 	ldr.w	fp, [sp, #16]
  406026:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406028:	465d      	mov	r5, fp
  40602a:	e002      	b.n	406032 <_dtoa_r+0x692>
  40602c:	f001 fce8 	bl	407a00 <__multadd>
  406030:	4681      	mov	r9, r0
  406032:	4641      	mov	r1, r8
  406034:	4648      	mov	r0, r9
  406036:	f7ff fc1d 	bl	405874 <quorem>
  40603a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40603e:	f805 ab01 	strb.w	sl, [r5], #1
  406042:	eba5 030b 	sub.w	r3, r5, fp
  406046:	42bb      	cmp	r3, r7
  406048:	f04f 020a 	mov.w	r2, #10
  40604c:	f04f 0300 	mov.w	r3, #0
  406050:	4649      	mov	r1, r9
  406052:	4620      	mov	r0, r4
  406054:	dbea      	blt.n	40602c <_dtoa_r+0x68c>
  406056:	9b04      	ldr	r3, [sp, #16]
  406058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40605a:	2a01      	cmp	r2, #1
  40605c:	bfac      	ite	ge
  40605e:	189b      	addge	r3, r3, r2
  406060:	3301      	addlt	r3, #1
  406062:	461d      	mov	r5, r3
  406064:	f04f 0b00 	mov.w	fp, #0
  406068:	4649      	mov	r1, r9
  40606a:	2201      	movs	r2, #1
  40606c:	4620      	mov	r0, r4
  40606e:	f001 fe43 	bl	407cf8 <__lshift>
  406072:	4641      	mov	r1, r8
  406074:	4681      	mov	r9, r0
  406076:	f001 fe91 	bl	407d9c <__mcmp>
  40607a:	2800      	cmp	r0, #0
  40607c:	f340 823d 	ble.w	4064fa <_dtoa_r+0xb5a>
  406080:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406084:	9904      	ldr	r1, [sp, #16]
  406086:	1e6b      	subs	r3, r5, #1
  406088:	e004      	b.n	406094 <_dtoa_r+0x6f4>
  40608a:	428b      	cmp	r3, r1
  40608c:	f000 81ae 	beq.w	4063ec <_dtoa_r+0xa4c>
  406090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406094:	2a39      	cmp	r2, #57	; 0x39
  406096:	f103 0501 	add.w	r5, r3, #1
  40609a:	d0f6      	beq.n	40608a <_dtoa_r+0x6ea>
  40609c:	3201      	adds	r2, #1
  40609e:	701a      	strb	r2, [r3, #0]
  4060a0:	4641      	mov	r1, r8
  4060a2:	4620      	mov	r0, r4
  4060a4:	f001 fca2 	bl	4079ec <_Bfree>
  4060a8:	2e00      	cmp	r6, #0
  4060aa:	f43f ae3d 	beq.w	405d28 <_dtoa_r+0x388>
  4060ae:	f1bb 0f00 	cmp.w	fp, #0
  4060b2:	d005      	beq.n	4060c0 <_dtoa_r+0x720>
  4060b4:	45b3      	cmp	fp, r6
  4060b6:	d003      	beq.n	4060c0 <_dtoa_r+0x720>
  4060b8:	4659      	mov	r1, fp
  4060ba:	4620      	mov	r0, r4
  4060bc:	f001 fc96 	bl	4079ec <_Bfree>
  4060c0:	4631      	mov	r1, r6
  4060c2:	4620      	mov	r0, r4
  4060c4:	f001 fc92 	bl	4079ec <_Bfree>
  4060c8:	e62e      	b.n	405d28 <_dtoa_r+0x388>
  4060ca:	2300      	movs	r3, #0
  4060cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4060ce:	9b02      	ldr	r3, [sp, #8]
  4060d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4060d2:	4413      	add	r3, r2
  4060d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4060d6:	3301      	adds	r3, #1
  4060d8:	2b01      	cmp	r3, #1
  4060da:	461f      	mov	r7, r3
  4060dc:	461e      	mov	r6, r3
  4060de:	930a      	str	r3, [sp, #40]	; 0x28
  4060e0:	bfb8      	it	lt
  4060e2:	2701      	movlt	r7, #1
  4060e4:	2100      	movs	r1, #0
  4060e6:	2f17      	cmp	r7, #23
  4060e8:	6461      	str	r1, [r4, #68]	; 0x44
  4060ea:	d90a      	bls.n	406102 <_dtoa_r+0x762>
  4060ec:	2201      	movs	r2, #1
  4060ee:	2304      	movs	r3, #4
  4060f0:	005b      	lsls	r3, r3, #1
  4060f2:	f103 0014 	add.w	r0, r3, #20
  4060f6:	4287      	cmp	r7, r0
  4060f8:	4611      	mov	r1, r2
  4060fa:	f102 0201 	add.w	r2, r2, #1
  4060fe:	d2f7      	bcs.n	4060f0 <_dtoa_r+0x750>
  406100:	6461      	str	r1, [r4, #68]	; 0x44
  406102:	4620      	mov	r0, r4
  406104:	f001 fc4c 	bl	4079a0 <_Balloc>
  406108:	2e0e      	cmp	r6, #14
  40610a:	9004      	str	r0, [sp, #16]
  40610c:	6420      	str	r0, [r4, #64]	; 0x40
  40610e:	f63f ad41 	bhi.w	405b94 <_dtoa_r+0x1f4>
  406112:	2d00      	cmp	r5, #0
  406114:	f43f ad3e 	beq.w	405b94 <_dtoa_r+0x1f4>
  406118:	9902      	ldr	r1, [sp, #8]
  40611a:	2900      	cmp	r1, #0
  40611c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406120:	f340 8202 	ble.w	406528 <_dtoa_r+0xb88>
  406124:	4bb8      	ldr	r3, [pc, #736]	; (406408 <_dtoa_r+0xa68>)
  406126:	f001 020f 	and.w	r2, r1, #15
  40612a:	110d      	asrs	r5, r1, #4
  40612c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406130:	06e9      	lsls	r1, r5, #27
  406132:	e9d3 6700 	ldrd	r6, r7, [r3]
  406136:	f140 81ae 	bpl.w	406496 <_dtoa_r+0xaf6>
  40613a:	4bb4      	ldr	r3, [pc, #720]	; (40640c <_dtoa_r+0xa6c>)
  40613c:	4650      	mov	r0, sl
  40613e:	4659      	mov	r1, fp
  406140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406144:	f002 fe80 	bl	408e48 <__aeabi_ddiv>
  406148:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40614c:	f005 050f 	and.w	r5, r5, #15
  406150:	f04f 0a03 	mov.w	sl, #3
  406154:	b18d      	cbz	r5, 40617a <_dtoa_r+0x7da>
  406156:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40640c <_dtoa_r+0xa6c>
  40615a:	07ea      	lsls	r2, r5, #31
  40615c:	d509      	bpl.n	406172 <_dtoa_r+0x7d2>
  40615e:	4630      	mov	r0, r6
  406160:	4639      	mov	r1, r7
  406162:	e9d8 2300 	ldrd	r2, r3, [r8]
  406166:	f002 fd45 	bl	408bf4 <__aeabi_dmul>
  40616a:	f10a 0a01 	add.w	sl, sl, #1
  40616e:	4606      	mov	r6, r0
  406170:	460f      	mov	r7, r1
  406172:	106d      	asrs	r5, r5, #1
  406174:	f108 0808 	add.w	r8, r8, #8
  406178:	d1ef      	bne.n	40615a <_dtoa_r+0x7ba>
  40617a:	463b      	mov	r3, r7
  40617c:	4632      	mov	r2, r6
  40617e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406182:	f002 fe61 	bl	408e48 <__aeabi_ddiv>
  406186:	4607      	mov	r7, r0
  406188:	4688      	mov	r8, r1
  40618a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40618c:	b143      	cbz	r3, 4061a0 <_dtoa_r+0x800>
  40618e:	2200      	movs	r2, #0
  406190:	4b9f      	ldr	r3, [pc, #636]	; (406410 <_dtoa_r+0xa70>)
  406192:	4638      	mov	r0, r7
  406194:	4641      	mov	r1, r8
  406196:	f002 ff9f 	bl	4090d8 <__aeabi_dcmplt>
  40619a:	2800      	cmp	r0, #0
  40619c:	f040 8286 	bne.w	4066ac <_dtoa_r+0xd0c>
  4061a0:	4650      	mov	r0, sl
  4061a2:	f002 fcc1 	bl	408b28 <__aeabi_i2d>
  4061a6:	463a      	mov	r2, r7
  4061a8:	4643      	mov	r3, r8
  4061aa:	f002 fd23 	bl	408bf4 <__aeabi_dmul>
  4061ae:	4b99      	ldr	r3, [pc, #612]	; (406414 <_dtoa_r+0xa74>)
  4061b0:	2200      	movs	r2, #0
  4061b2:	f002 fb6d 	bl	408890 <__adddf3>
  4061b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061b8:	4605      	mov	r5, r0
  4061ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4061be:	2b00      	cmp	r3, #0
  4061c0:	f000 813e 	beq.w	406440 <_dtoa_r+0xaa0>
  4061c4:	9b02      	ldr	r3, [sp, #8]
  4061c6:	9315      	str	r3, [sp, #84]	; 0x54
  4061c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061ca:	9312      	str	r3, [sp, #72]	; 0x48
  4061cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4061ce:	2b00      	cmp	r3, #0
  4061d0:	f000 81fa 	beq.w	4065c8 <_dtoa_r+0xc28>
  4061d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4061d6:	4b8c      	ldr	r3, [pc, #560]	; (406408 <_dtoa_r+0xa68>)
  4061d8:	498f      	ldr	r1, [pc, #572]	; (406418 <_dtoa_r+0xa78>)
  4061da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4061de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4061e2:	2000      	movs	r0, #0
  4061e4:	f002 fe30 	bl	408e48 <__aeabi_ddiv>
  4061e8:	462a      	mov	r2, r5
  4061ea:	4633      	mov	r3, r6
  4061ec:	f002 fb4e 	bl	40888c <__aeabi_dsub>
  4061f0:	4682      	mov	sl, r0
  4061f2:	468b      	mov	fp, r1
  4061f4:	4638      	mov	r0, r7
  4061f6:	4641      	mov	r1, r8
  4061f8:	f002 ffac 	bl	409154 <__aeabi_d2iz>
  4061fc:	4605      	mov	r5, r0
  4061fe:	f002 fc93 	bl	408b28 <__aeabi_i2d>
  406202:	4602      	mov	r2, r0
  406204:	460b      	mov	r3, r1
  406206:	4638      	mov	r0, r7
  406208:	4641      	mov	r1, r8
  40620a:	f002 fb3f 	bl	40888c <__aeabi_dsub>
  40620e:	3530      	adds	r5, #48	; 0x30
  406210:	fa5f f885 	uxtb.w	r8, r5
  406214:	9d04      	ldr	r5, [sp, #16]
  406216:	4606      	mov	r6, r0
  406218:	460f      	mov	r7, r1
  40621a:	f885 8000 	strb.w	r8, [r5]
  40621e:	4602      	mov	r2, r0
  406220:	460b      	mov	r3, r1
  406222:	4650      	mov	r0, sl
  406224:	4659      	mov	r1, fp
  406226:	3501      	adds	r5, #1
  406228:	f002 ff74 	bl	409114 <__aeabi_dcmpgt>
  40622c:	2800      	cmp	r0, #0
  40622e:	d154      	bne.n	4062da <_dtoa_r+0x93a>
  406230:	4632      	mov	r2, r6
  406232:	463b      	mov	r3, r7
  406234:	2000      	movs	r0, #0
  406236:	4976      	ldr	r1, [pc, #472]	; (406410 <_dtoa_r+0xa70>)
  406238:	f002 fb28 	bl	40888c <__aeabi_dsub>
  40623c:	4602      	mov	r2, r0
  40623e:	460b      	mov	r3, r1
  406240:	4650      	mov	r0, sl
  406242:	4659      	mov	r1, fp
  406244:	f002 ff66 	bl	409114 <__aeabi_dcmpgt>
  406248:	2800      	cmp	r0, #0
  40624a:	f040 8270 	bne.w	40672e <_dtoa_r+0xd8e>
  40624e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406250:	2a01      	cmp	r2, #1
  406252:	f000 8111 	beq.w	406478 <_dtoa_r+0xad8>
  406256:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406258:	9a04      	ldr	r2, [sp, #16]
  40625a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40625e:	4413      	add	r3, r2
  406260:	4699      	mov	r9, r3
  406262:	e00d      	b.n	406280 <_dtoa_r+0x8e0>
  406264:	2000      	movs	r0, #0
  406266:	496a      	ldr	r1, [pc, #424]	; (406410 <_dtoa_r+0xa70>)
  406268:	f002 fb10 	bl	40888c <__aeabi_dsub>
  40626c:	4652      	mov	r2, sl
  40626e:	465b      	mov	r3, fp
  406270:	f002 ff32 	bl	4090d8 <__aeabi_dcmplt>
  406274:	2800      	cmp	r0, #0
  406276:	f040 8258 	bne.w	40672a <_dtoa_r+0xd8a>
  40627a:	454d      	cmp	r5, r9
  40627c:	f000 80fa 	beq.w	406474 <_dtoa_r+0xad4>
  406280:	4650      	mov	r0, sl
  406282:	4659      	mov	r1, fp
  406284:	2200      	movs	r2, #0
  406286:	4b65      	ldr	r3, [pc, #404]	; (40641c <_dtoa_r+0xa7c>)
  406288:	f002 fcb4 	bl	408bf4 <__aeabi_dmul>
  40628c:	2200      	movs	r2, #0
  40628e:	4b63      	ldr	r3, [pc, #396]	; (40641c <_dtoa_r+0xa7c>)
  406290:	4682      	mov	sl, r0
  406292:	468b      	mov	fp, r1
  406294:	4630      	mov	r0, r6
  406296:	4639      	mov	r1, r7
  406298:	f002 fcac 	bl	408bf4 <__aeabi_dmul>
  40629c:	460f      	mov	r7, r1
  40629e:	4606      	mov	r6, r0
  4062a0:	f002 ff58 	bl	409154 <__aeabi_d2iz>
  4062a4:	4680      	mov	r8, r0
  4062a6:	f002 fc3f 	bl	408b28 <__aeabi_i2d>
  4062aa:	4602      	mov	r2, r0
  4062ac:	460b      	mov	r3, r1
  4062ae:	4630      	mov	r0, r6
  4062b0:	4639      	mov	r1, r7
  4062b2:	f002 faeb 	bl	40888c <__aeabi_dsub>
  4062b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4062ba:	fa5f f888 	uxtb.w	r8, r8
  4062be:	4652      	mov	r2, sl
  4062c0:	465b      	mov	r3, fp
  4062c2:	f805 8b01 	strb.w	r8, [r5], #1
  4062c6:	4606      	mov	r6, r0
  4062c8:	460f      	mov	r7, r1
  4062ca:	f002 ff05 	bl	4090d8 <__aeabi_dcmplt>
  4062ce:	4632      	mov	r2, r6
  4062d0:	463b      	mov	r3, r7
  4062d2:	2800      	cmp	r0, #0
  4062d4:	d0c6      	beq.n	406264 <_dtoa_r+0x8c4>
  4062d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4062da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4062dc:	9302      	str	r3, [sp, #8]
  4062de:	e523      	b.n	405d28 <_dtoa_r+0x388>
  4062e0:	2300      	movs	r3, #0
  4062e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4062e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	f340 80dc 	ble.w	4064a4 <_dtoa_r+0xb04>
  4062ec:	461f      	mov	r7, r3
  4062ee:	461e      	mov	r6, r3
  4062f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4062f2:	930a      	str	r3, [sp, #40]	; 0x28
  4062f4:	e6f6      	b.n	4060e4 <_dtoa_r+0x744>
  4062f6:	2301      	movs	r3, #1
  4062f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4062fa:	e7f3      	b.n	4062e4 <_dtoa_r+0x944>
  4062fc:	f1ba 0f00 	cmp.w	sl, #0
  406300:	f47f ada8 	bne.w	405e54 <_dtoa_r+0x4b4>
  406304:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406308:	2b00      	cmp	r3, #0
  40630a:	f47f adba 	bne.w	405e82 <_dtoa_r+0x4e2>
  40630e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406312:	0d3f      	lsrs	r7, r7, #20
  406314:	053f      	lsls	r7, r7, #20
  406316:	2f00      	cmp	r7, #0
  406318:	f000 820d 	beq.w	406736 <_dtoa_r+0xd96>
  40631c:	9b08      	ldr	r3, [sp, #32]
  40631e:	3301      	adds	r3, #1
  406320:	9308      	str	r3, [sp, #32]
  406322:	9b06      	ldr	r3, [sp, #24]
  406324:	3301      	adds	r3, #1
  406326:	9306      	str	r3, [sp, #24]
  406328:	2301      	movs	r3, #1
  40632a:	930c      	str	r3, [sp, #48]	; 0x30
  40632c:	e5ab      	b.n	405e86 <_dtoa_r+0x4e6>
  40632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406330:	2b00      	cmp	r3, #0
  406332:	f73f ac42 	bgt.w	405bba <_dtoa_r+0x21a>
  406336:	f040 8221 	bne.w	40677c <_dtoa_r+0xddc>
  40633a:	2200      	movs	r2, #0
  40633c:	4b38      	ldr	r3, [pc, #224]	; (406420 <_dtoa_r+0xa80>)
  40633e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406342:	f002 fc57 	bl	408bf4 <__aeabi_dmul>
  406346:	4652      	mov	r2, sl
  406348:	465b      	mov	r3, fp
  40634a:	f002 fed9 	bl	409100 <__aeabi_dcmpge>
  40634e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406352:	4646      	mov	r6, r8
  406354:	2800      	cmp	r0, #0
  406356:	d041      	beq.n	4063dc <_dtoa_r+0xa3c>
  406358:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40635a:	9d04      	ldr	r5, [sp, #16]
  40635c:	43db      	mvns	r3, r3
  40635e:	9302      	str	r3, [sp, #8]
  406360:	4641      	mov	r1, r8
  406362:	4620      	mov	r0, r4
  406364:	f001 fb42 	bl	4079ec <_Bfree>
  406368:	2e00      	cmp	r6, #0
  40636a:	f43f acdd 	beq.w	405d28 <_dtoa_r+0x388>
  40636e:	e6a7      	b.n	4060c0 <_dtoa_r+0x720>
  406370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406372:	4649      	mov	r1, r9
  406374:	4620      	mov	r0, r4
  406376:	f001 fc6f 	bl	407c58 <__pow5mult>
  40637a:	4681      	mov	r9, r0
  40637c:	e558      	b.n	405e30 <_dtoa_r+0x490>
  40637e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406380:	2a00      	cmp	r2, #0
  406382:	f000 8187 	beq.w	406694 <_dtoa_r+0xcf4>
  406386:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40638a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40638c:	9d08      	ldr	r5, [sp, #32]
  40638e:	e4f2      	b.n	405d76 <_dtoa_r+0x3d6>
  406390:	f1ba 0f00 	cmp.w	sl, #0
  406394:	f47f ad75 	bne.w	405e82 <_dtoa_r+0x4e2>
  406398:	e7b4      	b.n	406304 <_dtoa_r+0x964>
  40639a:	f001 fb31 	bl	407a00 <__multadd>
  40639e:	4647      	mov	r7, r8
  4063a0:	4606      	mov	r6, r0
  4063a2:	4683      	mov	fp, r0
  4063a4:	e5be      	b.n	405f24 <_dtoa_r+0x584>
  4063a6:	4601      	mov	r1, r0
  4063a8:	4620      	mov	r0, r4
  4063aa:	9306      	str	r3, [sp, #24]
  4063ac:	f001 fb1e 	bl	4079ec <_Bfree>
  4063b0:	2201      	movs	r2, #1
  4063b2:	9b06      	ldr	r3, [sp, #24]
  4063b4:	e5e0      	b.n	405f78 <_dtoa_r+0x5d8>
  4063b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063b8:	2b02      	cmp	r3, #2
  4063ba:	f77f ad96 	ble.w	405eea <_dtoa_r+0x54a>
  4063be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4063c0:	2b00      	cmp	r3, #0
  4063c2:	d1c9      	bne.n	406358 <_dtoa_r+0x9b8>
  4063c4:	4641      	mov	r1, r8
  4063c6:	2205      	movs	r2, #5
  4063c8:	4620      	mov	r0, r4
  4063ca:	f001 fb19 	bl	407a00 <__multadd>
  4063ce:	4601      	mov	r1, r0
  4063d0:	4680      	mov	r8, r0
  4063d2:	4648      	mov	r0, r9
  4063d4:	f001 fce2 	bl	407d9c <__mcmp>
  4063d8:	2800      	cmp	r0, #0
  4063da:	ddbd      	ble.n	406358 <_dtoa_r+0x9b8>
  4063dc:	9a02      	ldr	r2, [sp, #8]
  4063de:	9904      	ldr	r1, [sp, #16]
  4063e0:	2331      	movs	r3, #49	; 0x31
  4063e2:	3201      	adds	r2, #1
  4063e4:	9202      	str	r2, [sp, #8]
  4063e6:	700b      	strb	r3, [r1, #0]
  4063e8:	1c4d      	adds	r5, r1, #1
  4063ea:	e7b9      	b.n	406360 <_dtoa_r+0x9c0>
  4063ec:	9a02      	ldr	r2, [sp, #8]
  4063ee:	3201      	adds	r2, #1
  4063f0:	9202      	str	r2, [sp, #8]
  4063f2:	9a04      	ldr	r2, [sp, #16]
  4063f4:	2331      	movs	r3, #49	; 0x31
  4063f6:	7013      	strb	r3, [r2, #0]
  4063f8:	e652      	b.n	4060a0 <_dtoa_r+0x700>
  4063fa:	2301      	movs	r3, #1
  4063fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4063fe:	e666      	b.n	4060ce <_dtoa_r+0x72e>
  406400:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406404:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406406:	e48f      	b.n	405d28 <_dtoa_r+0x388>
  406408:	004096d0 	.word	0x004096d0
  40640c:	004096a8 	.word	0x004096a8
  406410:	3ff00000 	.word	0x3ff00000
  406414:	401c0000 	.word	0x401c0000
  406418:	3fe00000 	.word	0x3fe00000
  40641c:	40240000 	.word	0x40240000
  406420:	40140000 	.word	0x40140000
  406424:	4650      	mov	r0, sl
  406426:	f002 fb7f 	bl	408b28 <__aeabi_i2d>
  40642a:	463a      	mov	r2, r7
  40642c:	4643      	mov	r3, r8
  40642e:	f002 fbe1 	bl	408bf4 <__aeabi_dmul>
  406432:	2200      	movs	r2, #0
  406434:	4bc1      	ldr	r3, [pc, #772]	; (40673c <_dtoa_r+0xd9c>)
  406436:	f002 fa2b 	bl	408890 <__adddf3>
  40643a:	4605      	mov	r5, r0
  40643c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406440:	4641      	mov	r1, r8
  406442:	2200      	movs	r2, #0
  406444:	4bbe      	ldr	r3, [pc, #760]	; (406740 <_dtoa_r+0xda0>)
  406446:	4638      	mov	r0, r7
  406448:	f002 fa20 	bl	40888c <__aeabi_dsub>
  40644c:	462a      	mov	r2, r5
  40644e:	4633      	mov	r3, r6
  406450:	4682      	mov	sl, r0
  406452:	468b      	mov	fp, r1
  406454:	f002 fe5e 	bl	409114 <__aeabi_dcmpgt>
  406458:	4680      	mov	r8, r0
  40645a:	2800      	cmp	r0, #0
  40645c:	f040 8110 	bne.w	406680 <_dtoa_r+0xce0>
  406460:	462a      	mov	r2, r5
  406462:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406466:	4650      	mov	r0, sl
  406468:	4659      	mov	r1, fp
  40646a:	f002 fe35 	bl	4090d8 <__aeabi_dcmplt>
  40646e:	b118      	cbz	r0, 406478 <_dtoa_r+0xad8>
  406470:	4646      	mov	r6, r8
  406472:	e771      	b.n	406358 <_dtoa_r+0x9b8>
  406474:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406478:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40647c:	f7ff bb8a 	b.w	405b94 <_dtoa_r+0x1f4>
  406480:	9804      	ldr	r0, [sp, #16]
  406482:	f7ff babb 	b.w	4059fc <_dtoa_r+0x5c>
  406486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40648a:	970c      	str	r7, [sp, #48]	; 0x30
  40648c:	1afb      	subs	r3, r7, r3
  40648e:	441a      	add	r2, r3
  406490:	920d      	str	r2, [sp, #52]	; 0x34
  406492:	2700      	movs	r7, #0
  406494:	e469      	b.n	405d6a <_dtoa_r+0x3ca>
  406496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40649a:	f04f 0a02 	mov.w	sl, #2
  40649e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4064a2:	e657      	b.n	406154 <_dtoa_r+0x7b4>
  4064a4:	2100      	movs	r1, #0
  4064a6:	2301      	movs	r3, #1
  4064a8:	6461      	str	r1, [r4, #68]	; 0x44
  4064aa:	4620      	mov	r0, r4
  4064ac:	9325      	str	r3, [sp, #148]	; 0x94
  4064ae:	f001 fa77 	bl	4079a0 <_Balloc>
  4064b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4064b4:	9004      	str	r0, [sp, #16]
  4064b6:	6420      	str	r0, [r4, #64]	; 0x40
  4064b8:	930a      	str	r3, [sp, #40]	; 0x28
  4064ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4064bc:	e629      	b.n	406112 <_dtoa_r+0x772>
  4064be:	2a00      	cmp	r2, #0
  4064c0:	46d0      	mov	r8, sl
  4064c2:	f8cd b018 	str.w	fp, [sp, #24]
  4064c6:	469a      	mov	sl, r3
  4064c8:	dd11      	ble.n	4064ee <_dtoa_r+0xb4e>
  4064ca:	4649      	mov	r1, r9
  4064cc:	2201      	movs	r2, #1
  4064ce:	4620      	mov	r0, r4
  4064d0:	f001 fc12 	bl	407cf8 <__lshift>
  4064d4:	4641      	mov	r1, r8
  4064d6:	4681      	mov	r9, r0
  4064d8:	f001 fc60 	bl	407d9c <__mcmp>
  4064dc:	2800      	cmp	r0, #0
  4064de:	f340 8146 	ble.w	40676e <_dtoa_r+0xdce>
  4064e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4064e6:	f000 8106 	beq.w	4066f6 <_dtoa_r+0xd56>
  4064ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4064ee:	46b3      	mov	fp, r6
  4064f0:	f887 a000 	strb.w	sl, [r7]
  4064f4:	1c7d      	adds	r5, r7, #1
  4064f6:	9e06      	ldr	r6, [sp, #24]
  4064f8:	e5d2      	b.n	4060a0 <_dtoa_r+0x700>
  4064fa:	d104      	bne.n	406506 <_dtoa_r+0xb66>
  4064fc:	f01a 0f01 	tst.w	sl, #1
  406500:	d001      	beq.n	406506 <_dtoa_r+0xb66>
  406502:	e5bd      	b.n	406080 <_dtoa_r+0x6e0>
  406504:	4615      	mov	r5, r2
  406506:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40650a:	2b30      	cmp	r3, #48	; 0x30
  40650c:	f105 32ff 	add.w	r2, r5, #4294967295
  406510:	d0f8      	beq.n	406504 <_dtoa_r+0xb64>
  406512:	e5c5      	b.n	4060a0 <_dtoa_r+0x700>
  406514:	9904      	ldr	r1, [sp, #16]
  406516:	2230      	movs	r2, #48	; 0x30
  406518:	700a      	strb	r2, [r1, #0]
  40651a:	9a02      	ldr	r2, [sp, #8]
  40651c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406520:	3201      	adds	r2, #1
  406522:	9202      	str	r2, [sp, #8]
  406524:	f7ff bbfc 	b.w	405d20 <_dtoa_r+0x380>
  406528:	f000 80bb 	beq.w	4066a2 <_dtoa_r+0xd02>
  40652c:	9b02      	ldr	r3, [sp, #8]
  40652e:	425d      	negs	r5, r3
  406530:	4b84      	ldr	r3, [pc, #528]	; (406744 <_dtoa_r+0xda4>)
  406532:	f005 020f 	and.w	r2, r5, #15
  406536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40653a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40653e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406542:	f002 fb57 	bl	408bf4 <__aeabi_dmul>
  406546:	112d      	asrs	r5, r5, #4
  406548:	4607      	mov	r7, r0
  40654a:	4688      	mov	r8, r1
  40654c:	f000 812c 	beq.w	4067a8 <_dtoa_r+0xe08>
  406550:	4e7d      	ldr	r6, [pc, #500]	; (406748 <_dtoa_r+0xda8>)
  406552:	f04f 0a02 	mov.w	sl, #2
  406556:	07eb      	lsls	r3, r5, #31
  406558:	d509      	bpl.n	40656e <_dtoa_r+0xbce>
  40655a:	4638      	mov	r0, r7
  40655c:	4641      	mov	r1, r8
  40655e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406562:	f002 fb47 	bl	408bf4 <__aeabi_dmul>
  406566:	f10a 0a01 	add.w	sl, sl, #1
  40656a:	4607      	mov	r7, r0
  40656c:	4688      	mov	r8, r1
  40656e:	106d      	asrs	r5, r5, #1
  406570:	f106 0608 	add.w	r6, r6, #8
  406574:	d1ef      	bne.n	406556 <_dtoa_r+0xbb6>
  406576:	e608      	b.n	40618a <_dtoa_r+0x7ea>
  406578:	6871      	ldr	r1, [r6, #4]
  40657a:	4620      	mov	r0, r4
  40657c:	f001 fa10 	bl	4079a0 <_Balloc>
  406580:	6933      	ldr	r3, [r6, #16]
  406582:	3302      	adds	r3, #2
  406584:	009a      	lsls	r2, r3, #2
  406586:	4605      	mov	r5, r0
  406588:	f106 010c 	add.w	r1, r6, #12
  40658c:	300c      	adds	r0, #12
  40658e:	f7fc fd4f 	bl	403030 <memcpy>
  406592:	4629      	mov	r1, r5
  406594:	2201      	movs	r2, #1
  406596:	4620      	mov	r0, r4
  406598:	f001 fbae 	bl	407cf8 <__lshift>
  40659c:	9006      	str	r0, [sp, #24]
  40659e:	e4b5      	b.n	405f0c <_dtoa_r+0x56c>
  4065a0:	2b39      	cmp	r3, #57	; 0x39
  4065a2:	f8cd b018 	str.w	fp, [sp, #24]
  4065a6:	46d0      	mov	r8, sl
  4065a8:	f000 80a5 	beq.w	4066f6 <_dtoa_r+0xd56>
  4065ac:	f103 0a01 	add.w	sl, r3, #1
  4065b0:	46b3      	mov	fp, r6
  4065b2:	f887 a000 	strb.w	sl, [r7]
  4065b6:	1c7d      	adds	r5, r7, #1
  4065b8:	9e06      	ldr	r6, [sp, #24]
  4065ba:	e571      	b.n	4060a0 <_dtoa_r+0x700>
  4065bc:	465a      	mov	r2, fp
  4065be:	46d0      	mov	r8, sl
  4065c0:	46b3      	mov	fp, r6
  4065c2:	469a      	mov	sl, r3
  4065c4:	4616      	mov	r6, r2
  4065c6:	e54f      	b.n	406068 <_dtoa_r+0x6c8>
  4065c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4065ca:	495e      	ldr	r1, [pc, #376]	; (406744 <_dtoa_r+0xda4>)
  4065cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4065d0:	462a      	mov	r2, r5
  4065d2:	4633      	mov	r3, r6
  4065d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4065d8:	f002 fb0c 	bl	408bf4 <__aeabi_dmul>
  4065dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4065e0:	4638      	mov	r0, r7
  4065e2:	4641      	mov	r1, r8
  4065e4:	f002 fdb6 	bl	409154 <__aeabi_d2iz>
  4065e8:	4605      	mov	r5, r0
  4065ea:	f002 fa9d 	bl	408b28 <__aeabi_i2d>
  4065ee:	460b      	mov	r3, r1
  4065f0:	4602      	mov	r2, r0
  4065f2:	4641      	mov	r1, r8
  4065f4:	4638      	mov	r0, r7
  4065f6:	f002 f949 	bl	40888c <__aeabi_dsub>
  4065fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4065fc:	460f      	mov	r7, r1
  4065fe:	9904      	ldr	r1, [sp, #16]
  406600:	3530      	adds	r5, #48	; 0x30
  406602:	2b01      	cmp	r3, #1
  406604:	700d      	strb	r5, [r1, #0]
  406606:	4606      	mov	r6, r0
  406608:	f101 0501 	add.w	r5, r1, #1
  40660c:	d026      	beq.n	40665c <_dtoa_r+0xcbc>
  40660e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406610:	9a04      	ldr	r2, [sp, #16]
  406612:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406750 <_dtoa_r+0xdb0>
  406616:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40661a:	4413      	add	r3, r2
  40661c:	f04f 0a00 	mov.w	sl, #0
  406620:	4699      	mov	r9, r3
  406622:	4652      	mov	r2, sl
  406624:	465b      	mov	r3, fp
  406626:	4630      	mov	r0, r6
  406628:	4639      	mov	r1, r7
  40662a:	f002 fae3 	bl	408bf4 <__aeabi_dmul>
  40662e:	460f      	mov	r7, r1
  406630:	4606      	mov	r6, r0
  406632:	f002 fd8f 	bl	409154 <__aeabi_d2iz>
  406636:	4680      	mov	r8, r0
  406638:	f002 fa76 	bl	408b28 <__aeabi_i2d>
  40663c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406640:	4602      	mov	r2, r0
  406642:	460b      	mov	r3, r1
  406644:	4630      	mov	r0, r6
  406646:	4639      	mov	r1, r7
  406648:	f002 f920 	bl	40888c <__aeabi_dsub>
  40664c:	f805 8b01 	strb.w	r8, [r5], #1
  406650:	454d      	cmp	r5, r9
  406652:	4606      	mov	r6, r0
  406654:	460f      	mov	r7, r1
  406656:	d1e4      	bne.n	406622 <_dtoa_r+0xc82>
  406658:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40665c:	4b3b      	ldr	r3, [pc, #236]	; (40674c <_dtoa_r+0xdac>)
  40665e:	2200      	movs	r2, #0
  406660:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406664:	f002 f914 	bl	408890 <__adddf3>
  406668:	4632      	mov	r2, r6
  40666a:	463b      	mov	r3, r7
  40666c:	f002 fd34 	bl	4090d8 <__aeabi_dcmplt>
  406670:	2800      	cmp	r0, #0
  406672:	d046      	beq.n	406702 <_dtoa_r+0xd62>
  406674:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406676:	9302      	str	r3, [sp, #8]
  406678:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40667c:	f7ff bb43 	b.w	405d06 <_dtoa_r+0x366>
  406680:	f04f 0800 	mov.w	r8, #0
  406684:	4646      	mov	r6, r8
  406686:	e6a9      	b.n	4063dc <_dtoa_r+0xa3c>
  406688:	9b08      	ldr	r3, [sp, #32]
  40668a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40668c:	1a9d      	subs	r5, r3, r2
  40668e:	2300      	movs	r3, #0
  406690:	f7ff bb71 	b.w	405d76 <_dtoa_r+0x3d6>
  406694:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406696:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406698:	9d08      	ldr	r5, [sp, #32]
  40669a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40669e:	f7ff bb6a 	b.w	405d76 <_dtoa_r+0x3d6>
  4066a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4066a6:	f04f 0a02 	mov.w	sl, #2
  4066aa:	e56e      	b.n	40618a <_dtoa_r+0x7ea>
  4066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066ae:	2b00      	cmp	r3, #0
  4066b0:	f43f aeb8 	beq.w	406424 <_dtoa_r+0xa84>
  4066b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4066b6:	2b00      	cmp	r3, #0
  4066b8:	f77f aede 	ble.w	406478 <_dtoa_r+0xad8>
  4066bc:	2200      	movs	r2, #0
  4066be:	4b24      	ldr	r3, [pc, #144]	; (406750 <_dtoa_r+0xdb0>)
  4066c0:	4638      	mov	r0, r7
  4066c2:	4641      	mov	r1, r8
  4066c4:	f002 fa96 	bl	408bf4 <__aeabi_dmul>
  4066c8:	4607      	mov	r7, r0
  4066ca:	4688      	mov	r8, r1
  4066cc:	f10a 0001 	add.w	r0, sl, #1
  4066d0:	f002 fa2a 	bl	408b28 <__aeabi_i2d>
  4066d4:	463a      	mov	r2, r7
  4066d6:	4643      	mov	r3, r8
  4066d8:	f002 fa8c 	bl	408bf4 <__aeabi_dmul>
  4066dc:	2200      	movs	r2, #0
  4066de:	4b17      	ldr	r3, [pc, #92]	; (40673c <_dtoa_r+0xd9c>)
  4066e0:	f002 f8d6 	bl	408890 <__adddf3>
  4066e4:	9a02      	ldr	r2, [sp, #8]
  4066e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4066e8:	9312      	str	r3, [sp, #72]	; 0x48
  4066ea:	3a01      	subs	r2, #1
  4066ec:	4605      	mov	r5, r0
  4066ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4066f2:	9215      	str	r2, [sp, #84]	; 0x54
  4066f4:	e56a      	b.n	4061cc <_dtoa_r+0x82c>
  4066f6:	2239      	movs	r2, #57	; 0x39
  4066f8:	46b3      	mov	fp, r6
  4066fa:	703a      	strb	r2, [r7, #0]
  4066fc:	9e06      	ldr	r6, [sp, #24]
  4066fe:	1c7d      	adds	r5, r7, #1
  406700:	e4c0      	b.n	406084 <_dtoa_r+0x6e4>
  406702:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406706:	2000      	movs	r0, #0
  406708:	4910      	ldr	r1, [pc, #64]	; (40674c <_dtoa_r+0xdac>)
  40670a:	f002 f8bf 	bl	40888c <__aeabi_dsub>
  40670e:	4632      	mov	r2, r6
  406710:	463b      	mov	r3, r7
  406712:	f002 fcff 	bl	409114 <__aeabi_dcmpgt>
  406716:	b908      	cbnz	r0, 40671c <_dtoa_r+0xd7c>
  406718:	e6ae      	b.n	406478 <_dtoa_r+0xad8>
  40671a:	4615      	mov	r5, r2
  40671c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406720:	2b30      	cmp	r3, #48	; 0x30
  406722:	f105 32ff 	add.w	r2, r5, #4294967295
  406726:	d0f8      	beq.n	40671a <_dtoa_r+0xd7a>
  406728:	e5d7      	b.n	4062da <_dtoa_r+0x93a>
  40672a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40672e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406730:	9302      	str	r3, [sp, #8]
  406732:	f7ff bae8 	b.w	405d06 <_dtoa_r+0x366>
  406736:	970c      	str	r7, [sp, #48]	; 0x30
  406738:	f7ff bba5 	b.w	405e86 <_dtoa_r+0x4e6>
  40673c:	401c0000 	.word	0x401c0000
  406740:	40140000 	.word	0x40140000
  406744:	004096d0 	.word	0x004096d0
  406748:	004096a8 	.word	0x004096a8
  40674c:	3fe00000 	.word	0x3fe00000
  406750:	40240000 	.word	0x40240000
  406754:	2b39      	cmp	r3, #57	; 0x39
  406756:	f8cd b018 	str.w	fp, [sp, #24]
  40675a:	46d0      	mov	r8, sl
  40675c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406760:	469a      	mov	sl, r3
  406762:	d0c8      	beq.n	4066f6 <_dtoa_r+0xd56>
  406764:	f1bb 0f00 	cmp.w	fp, #0
  406768:	f73f aebf 	bgt.w	4064ea <_dtoa_r+0xb4a>
  40676c:	e6bf      	b.n	4064ee <_dtoa_r+0xb4e>
  40676e:	f47f aebe 	bne.w	4064ee <_dtoa_r+0xb4e>
  406772:	f01a 0f01 	tst.w	sl, #1
  406776:	f43f aeba 	beq.w	4064ee <_dtoa_r+0xb4e>
  40677a:	e6b2      	b.n	4064e2 <_dtoa_r+0xb42>
  40677c:	f04f 0800 	mov.w	r8, #0
  406780:	4646      	mov	r6, r8
  406782:	e5e9      	b.n	406358 <_dtoa_r+0x9b8>
  406784:	4631      	mov	r1, r6
  406786:	2300      	movs	r3, #0
  406788:	220a      	movs	r2, #10
  40678a:	4620      	mov	r0, r4
  40678c:	f001 f938 	bl	407a00 <__multadd>
  406790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406792:	2b00      	cmp	r3, #0
  406794:	4606      	mov	r6, r0
  406796:	dd0a      	ble.n	4067ae <_dtoa_r+0xe0e>
  406798:	930a      	str	r3, [sp, #40]	; 0x28
  40679a:	f7ff bbaa 	b.w	405ef2 <_dtoa_r+0x552>
  40679e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067a0:	2b02      	cmp	r3, #2
  4067a2:	dc23      	bgt.n	4067ec <_dtoa_r+0xe4c>
  4067a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067a6:	e43b      	b.n	406020 <_dtoa_r+0x680>
  4067a8:	f04f 0a02 	mov.w	sl, #2
  4067ac:	e4ed      	b.n	40618a <_dtoa_r+0x7ea>
  4067ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067b0:	2b02      	cmp	r3, #2
  4067b2:	dc1b      	bgt.n	4067ec <_dtoa_r+0xe4c>
  4067b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067b6:	e7ef      	b.n	406798 <_dtoa_r+0xdf8>
  4067b8:	2500      	movs	r5, #0
  4067ba:	6465      	str	r5, [r4, #68]	; 0x44
  4067bc:	4629      	mov	r1, r5
  4067be:	4620      	mov	r0, r4
  4067c0:	f001 f8ee 	bl	4079a0 <_Balloc>
  4067c4:	f04f 33ff 	mov.w	r3, #4294967295
  4067c8:	930a      	str	r3, [sp, #40]	; 0x28
  4067ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4067cc:	2301      	movs	r3, #1
  4067ce:	9004      	str	r0, [sp, #16]
  4067d0:	9525      	str	r5, [sp, #148]	; 0x94
  4067d2:	6420      	str	r0, [r4, #64]	; 0x40
  4067d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4067d6:	f7ff b9dd 	b.w	405b94 <_dtoa_r+0x1f4>
  4067da:	2501      	movs	r5, #1
  4067dc:	f7ff b9a5 	b.w	405b2a <_dtoa_r+0x18a>
  4067e0:	f43f ab69 	beq.w	405eb6 <_dtoa_r+0x516>
  4067e4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4067e8:	f7ff bbf9 	b.w	405fde <_dtoa_r+0x63e>
  4067ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067ee:	930a      	str	r3, [sp, #40]	; 0x28
  4067f0:	e5e5      	b.n	4063be <_dtoa_r+0xa1e>
  4067f2:	bf00      	nop

004067f4 <__sflush_r>:
  4067f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4067f8:	b29a      	uxth	r2, r3
  4067fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067fe:	460d      	mov	r5, r1
  406800:	0711      	lsls	r1, r2, #28
  406802:	4680      	mov	r8, r0
  406804:	d43a      	bmi.n	40687c <__sflush_r+0x88>
  406806:	686a      	ldr	r2, [r5, #4]
  406808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40680c:	2a00      	cmp	r2, #0
  40680e:	81ab      	strh	r3, [r5, #12]
  406810:	dd6f      	ble.n	4068f2 <__sflush_r+0xfe>
  406812:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406814:	2c00      	cmp	r4, #0
  406816:	d049      	beq.n	4068ac <__sflush_r+0xb8>
  406818:	2200      	movs	r2, #0
  40681a:	b29b      	uxth	r3, r3
  40681c:	f8d8 6000 	ldr.w	r6, [r8]
  406820:	f8c8 2000 	str.w	r2, [r8]
  406824:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406828:	d067      	beq.n	4068fa <__sflush_r+0x106>
  40682a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40682c:	075f      	lsls	r7, r3, #29
  40682e:	d505      	bpl.n	40683c <__sflush_r+0x48>
  406830:	6869      	ldr	r1, [r5, #4]
  406832:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406834:	1a52      	subs	r2, r2, r1
  406836:	b10b      	cbz	r3, 40683c <__sflush_r+0x48>
  406838:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40683a:	1ad2      	subs	r2, r2, r3
  40683c:	2300      	movs	r3, #0
  40683e:	69e9      	ldr	r1, [r5, #28]
  406840:	4640      	mov	r0, r8
  406842:	47a0      	blx	r4
  406844:	1c44      	adds	r4, r0, #1
  406846:	d03c      	beq.n	4068c2 <__sflush_r+0xce>
  406848:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40684c:	692a      	ldr	r2, [r5, #16]
  40684e:	602a      	str	r2, [r5, #0]
  406850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406854:	2200      	movs	r2, #0
  406856:	81ab      	strh	r3, [r5, #12]
  406858:	04db      	lsls	r3, r3, #19
  40685a:	606a      	str	r2, [r5, #4]
  40685c:	d447      	bmi.n	4068ee <__sflush_r+0xfa>
  40685e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406860:	f8c8 6000 	str.w	r6, [r8]
  406864:	b311      	cbz	r1, 4068ac <__sflush_r+0xb8>
  406866:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40686a:	4299      	cmp	r1, r3
  40686c:	d002      	beq.n	406874 <__sflush_r+0x80>
  40686e:	4640      	mov	r0, r8
  406870:	f000 f9de 	bl	406c30 <_free_r>
  406874:	2000      	movs	r0, #0
  406876:	6328      	str	r0, [r5, #48]	; 0x30
  406878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40687c:	692e      	ldr	r6, [r5, #16]
  40687e:	b1ae      	cbz	r6, 4068ac <__sflush_r+0xb8>
  406880:	682c      	ldr	r4, [r5, #0]
  406882:	602e      	str	r6, [r5, #0]
  406884:	0791      	lsls	r1, r2, #30
  406886:	bf0c      	ite	eq
  406888:	696b      	ldreq	r3, [r5, #20]
  40688a:	2300      	movne	r3, #0
  40688c:	1ba4      	subs	r4, r4, r6
  40688e:	60ab      	str	r3, [r5, #8]
  406890:	e00a      	b.n	4068a8 <__sflush_r+0xb4>
  406892:	4623      	mov	r3, r4
  406894:	4632      	mov	r2, r6
  406896:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406898:	69e9      	ldr	r1, [r5, #28]
  40689a:	4640      	mov	r0, r8
  40689c:	47b8      	blx	r7
  40689e:	2800      	cmp	r0, #0
  4068a0:	eba4 0400 	sub.w	r4, r4, r0
  4068a4:	4406      	add	r6, r0
  4068a6:	dd04      	ble.n	4068b2 <__sflush_r+0xbe>
  4068a8:	2c00      	cmp	r4, #0
  4068aa:	dcf2      	bgt.n	406892 <__sflush_r+0x9e>
  4068ac:	2000      	movs	r0, #0
  4068ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4068b2:	89ab      	ldrh	r3, [r5, #12]
  4068b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4068b8:	81ab      	strh	r3, [r5, #12]
  4068ba:	f04f 30ff 	mov.w	r0, #4294967295
  4068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4068c2:	f8d8 4000 	ldr.w	r4, [r8]
  4068c6:	2c1d      	cmp	r4, #29
  4068c8:	d8f3      	bhi.n	4068b2 <__sflush_r+0xbe>
  4068ca:	4b19      	ldr	r3, [pc, #100]	; (406930 <__sflush_r+0x13c>)
  4068cc:	40e3      	lsrs	r3, r4
  4068ce:	43db      	mvns	r3, r3
  4068d0:	f013 0301 	ands.w	r3, r3, #1
  4068d4:	d1ed      	bne.n	4068b2 <__sflush_r+0xbe>
  4068d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4068da:	606b      	str	r3, [r5, #4]
  4068dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4068e0:	6929      	ldr	r1, [r5, #16]
  4068e2:	81ab      	strh	r3, [r5, #12]
  4068e4:	04da      	lsls	r2, r3, #19
  4068e6:	6029      	str	r1, [r5, #0]
  4068e8:	d5b9      	bpl.n	40685e <__sflush_r+0x6a>
  4068ea:	2c00      	cmp	r4, #0
  4068ec:	d1b7      	bne.n	40685e <__sflush_r+0x6a>
  4068ee:	6528      	str	r0, [r5, #80]	; 0x50
  4068f0:	e7b5      	b.n	40685e <__sflush_r+0x6a>
  4068f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4068f4:	2a00      	cmp	r2, #0
  4068f6:	dc8c      	bgt.n	406812 <__sflush_r+0x1e>
  4068f8:	e7d8      	b.n	4068ac <__sflush_r+0xb8>
  4068fa:	2301      	movs	r3, #1
  4068fc:	69e9      	ldr	r1, [r5, #28]
  4068fe:	4640      	mov	r0, r8
  406900:	47a0      	blx	r4
  406902:	1c43      	adds	r3, r0, #1
  406904:	4602      	mov	r2, r0
  406906:	d002      	beq.n	40690e <__sflush_r+0x11a>
  406908:	89ab      	ldrh	r3, [r5, #12]
  40690a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40690c:	e78e      	b.n	40682c <__sflush_r+0x38>
  40690e:	f8d8 3000 	ldr.w	r3, [r8]
  406912:	2b00      	cmp	r3, #0
  406914:	d0f8      	beq.n	406908 <__sflush_r+0x114>
  406916:	2b1d      	cmp	r3, #29
  406918:	d001      	beq.n	40691e <__sflush_r+0x12a>
  40691a:	2b16      	cmp	r3, #22
  40691c:	d102      	bne.n	406924 <__sflush_r+0x130>
  40691e:	f8c8 6000 	str.w	r6, [r8]
  406922:	e7c3      	b.n	4068ac <__sflush_r+0xb8>
  406924:	89ab      	ldrh	r3, [r5, #12]
  406926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40692a:	81ab      	strh	r3, [r5, #12]
  40692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406930:	20400001 	.word	0x20400001

00406934 <_fflush_r>:
  406934:	b538      	push	{r3, r4, r5, lr}
  406936:	460d      	mov	r5, r1
  406938:	4604      	mov	r4, r0
  40693a:	b108      	cbz	r0, 406940 <_fflush_r+0xc>
  40693c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40693e:	b1bb      	cbz	r3, 406970 <_fflush_r+0x3c>
  406940:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406944:	b188      	cbz	r0, 40696a <_fflush_r+0x36>
  406946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406948:	07db      	lsls	r3, r3, #31
  40694a:	d401      	bmi.n	406950 <_fflush_r+0x1c>
  40694c:	0581      	lsls	r1, r0, #22
  40694e:	d517      	bpl.n	406980 <_fflush_r+0x4c>
  406950:	4620      	mov	r0, r4
  406952:	4629      	mov	r1, r5
  406954:	f7ff ff4e 	bl	4067f4 <__sflush_r>
  406958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40695a:	07da      	lsls	r2, r3, #31
  40695c:	4604      	mov	r4, r0
  40695e:	d402      	bmi.n	406966 <_fflush_r+0x32>
  406960:	89ab      	ldrh	r3, [r5, #12]
  406962:	059b      	lsls	r3, r3, #22
  406964:	d507      	bpl.n	406976 <_fflush_r+0x42>
  406966:	4620      	mov	r0, r4
  406968:	bd38      	pop	{r3, r4, r5, pc}
  40696a:	4604      	mov	r4, r0
  40696c:	4620      	mov	r0, r4
  40696e:	bd38      	pop	{r3, r4, r5, pc}
  406970:	f000 f838 	bl	4069e4 <__sinit>
  406974:	e7e4      	b.n	406940 <_fflush_r+0xc>
  406976:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406978:	f000 fc04 	bl	407184 <__retarget_lock_release_recursive>
  40697c:	4620      	mov	r0, r4
  40697e:	bd38      	pop	{r3, r4, r5, pc}
  406980:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406982:	f000 fbfd 	bl	407180 <__retarget_lock_acquire_recursive>
  406986:	e7e3      	b.n	406950 <_fflush_r+0x1c>

00406988 <_cleanup_r>:
  406988:	4901      	ldr	r1, [pc, #4]	; (406990 <_cleanup_r+0x8>)
  40698a:	f000 bbaf 	b.w	4070ec <_fwalk_reent>
  40698e:	bf00      	nop
  406990:	0040871d 	.word	0x0040871d

00406994 <std.isra.0>:
  406994:	b510      	push	{r4, lr}
  406996:	2300      	movs	r3, #0
  406998:	4604      	mov	r4, r0
  40699a:	8181      	strh	r1, [r0, #12]
  40699c:	81c2      	strh	r2, [r0, #14]
  40699e:	6003      	str	r3, [r0, #0]
  4069a0:	6043      	str	r3, [r0, #4]
  4069a2:	6083      	str	r3, [r0, #8]
  4069a4:	6643      	str	r3, [r0, #100]	; 0x64
  4069a6:	6103      	str	r3, [r0, #16]
  4069a8:	6143      	str	r3, [r0, #20]
  4069aa:	6183      	str	r3, [r0, #24]
  4069ac:	4619      	mov	r1, r3
  4069ae:	2208      	movs	r2, #8
  4069b0:	305c      	adds	r0, #92	; 0x5c
  4069b2:	f7fc fbd7 	bl	403164 <memset>
  4069b6:	4807      	ldr	r0, [pc, #28]	; (4069d4 <std.isra.0+0x40>)
  4069b8:	4907      	ldr	r1, [pc, #28]	; (4069d8 <std.isra.0+0x44>)
  4069ba:	4a08      	ldr	r2, [pc, #32]	; (4069dc <std.isra.0+0x48>)
  4069bc:	4b08      	ldr	r3, [pc, #32]	; (4069e0 <std.isra.0+0x4c>)
  4069be:	6220      	str	r0, [r4, #32]
  4069c0:	61e4      	str	r4, [r4, #28]
  4069c2:	6261      	str	r1, [r4, #36]	; 0x24
  4069c4:	62a2      	str	r2, [r4, #40]	; 0x28
  4069c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  4069c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4069cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4069d0:	f000 bbd2 	b.w	407178 <__retarget_lock_init_recursive>
  4069d4:	00408305 	.word	0x00408305
  4069d8:	00408329 	.word	0x00408329
  4069dc:	00408365 	.word	0x00408365
  4069e0:	00408385 	.word	0x00408385

004069e4 <__sinit>:
  4069e4:	b510      	push	{r4, lr}
  4069e6:	4604      	mov	r4, r0
  4069e8:	4812      	ldr	r0, [pc, #72]	; (406a34 <__sinit+0x50>)
  4069ea:	f000 fbc9 	bl	407180 <__retarget_lock_acquire_recursive>
  4069ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4069f0:	b9d2      	cbnz	r2, 406a28 <__sinit+0x44>
  4069f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4069f6:	4810      	ldr	r0, [pc, #64]	; (406a38 <__sinit+0x54>)
  4069f8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4069fc:	2103      	movs	r1, #3
  4069fe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406a02:	63e0      	str	r0, [r4, #60]	; 0x3c
  406a04:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406a08:	6860      	ldr	r0, [r4, #4]
  406a0a:	2104      	movs	r1, #4
  406a0c:	f7ff ffc2 	bl	406994 <std.isra.0>
  406a10:	2201      	movs	r2, #1
  406a12:	2109      	movs	r1, #9
  406a14:	68a0      	ldr	r0, [r4, #8]
  406a16:	f7ff ffbd 	bl	406994 <std.isra.0>
  406a1a:	2202      	movs	r2, #2
  406a1c:	2112      	movs	r1, #18
  406a1e:	68e0      	ldr	r0, [r4, #12]
  406a20:	f7ff ffb8 	bl	406994 <std.isra.0>
  406a24:	2301      	movs	r3, #1
  406a26:	63a3      	str	r3, [r4, #56]	; 0x38
  406a28:	4802      	ldr	r0, [pc, #8]	; (406a34 <__sinit+0x50>)
  406a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406a2e:	f000 bba9 	b.w	407184 <__retarget_lock_release_recursive>
  406a32:	bf00      	nop
  406a34:	204084f8 	.word	0x204084f8
  406a38:	00406989 	.word	0x00406989

00406a3c <__sfp_lock_acquire>:
  406a3c:	4801      	ldr	r0, [pc, #4]	; (406a44 <__sfp_lock_acquire+0x8>)
  406a3e:	f000 bb9f 	b.w	407180 <__retarget_lock_acquire_recursive>
  406a42:	bf00      	nop
  406a44:	2040850c 	.word	0x2040850c

00406a48 <__sfp_lock_release>:
  406a48:	4801      	ldr	r0, [pc, #4]	; (406a50 <__sfp_lock_release+0x8>)
  406a4a:	f000 bb9b 	b.w	407184 <__retarget_lock_release_recursive>
  406a4e:	bf00      	nop
  406a50:	2040850c 	.word	0x2040850c

00406a54 <__libc_fini_array>:
  406a54:	b538      	push	{r3, r4, r5, lr}
  406a56:	4c0a      	ldr	r4, [pc, #40]	; (406a80 <__libc_fini_array+0x2c>)
  406a58:	4d0a      	ldr	r5, [pc, #40]	; (406a84 <__libc_fini_array+0x30>)
  406a5a:	1b64      	subs	r4, r4, r5
  406a5c:	10a4      	asrs	r4, r4, #2
  406a5e:	d00a      	beq.n	406a76 <__libc_fini_array+0x22>
  406a60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406a64:	3b01      	subs	r3, #1
  406a66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406a6a:	3c01      	subs	r4, #1
  406a6c:	f855 3904 	ldr.w	r3, [r5], #-4
  406a70:	4798      	blx	r3
  406a72:	2c00      	cmp	r4, #0
  406a74:	d1f9      	bne.n	406a6a <__libc_fini_array+0x16>
  406a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406a7a:	f002 bf1f 	b.w	4098bc <_fini>
  406a7e:	bf00      	nop
  406a80:	004098cc 	.word	0x004098cc
  406a84:	004098c8 	.word	0x004098c8

00406a88 <__fputwc>:
  406a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406a8c:	b082      	sub	sp, #8
  406a8e:	4680      	mov	r8, r0
  406a90:	4689      	mov	r9, r1
  406a92:	4614      	mov	r4, r2
  406a94:	f000 fb54 	bl	407140 <__locale_mb_cur_max>
  406a98:	2801      	cmp	r0, #1
  406a9a:	d036      	beq.n	406b0a <__fputwc+0x82>
  406a9c:	464a      	mov	r2, r9
  406a9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406aa2:	a901      	add	r1, sp, #4
  406aa4:	4640      	mov	r0, r8
  406aa6:	f001 fd47 	bl	408538 <_wcrtomb_r>
  406aaa:	1c42      	adds	r2, r0, #1
  406aac:	4606      	mov	r6, r0
  406aae:	d025      	beq.n	406afc <__fputwc+0x74>
  406ab0:	b3a8      	cbz	r0, 406b1e <__fputwc+0x96>
  406ab2:	f89d e004 	ldrb.w	lr, [sp, #4]
  406ab6:	2500      	movs	r5, #0
  406ab8:	f10d 0a04 	add.w	sl, sp, #4
  406abc:	e009      	b.n	406ad2 <__fputwc+0x4a>
  406abe:	6823      	ldr	r3, [r4, #0]
  406ac0:	1c5a      	adds	r2, r3, #1
  406ac2:	6022      	str	r2, [r4, #0]
  406ac4:	f883 e000 	strb.w	lr, [r3]
  406ac8:	3501      	adds	r5, #1
  406aca:	42b5      	cmp	r5, r6
  406acc:	d227      	bcs.n	406b1e <__fputwc+0x96>
  406ace:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406ad2:	68a3      	ldr	r3, [r4, #8]
  406ad4:	3b01      	subs	r3, #1
  406ad6:	2b00      	cmp	r3, #0
  406ad8:	60a3      	str	r3, [r4, #8]
  406ada:	daf0      	bge.n	406abe <__fputwc+0x36>
  406adc:	69a7      	ldr	r7, [r4, #24]
  406ade:	42bb      	cmp	r3, r7
  406ae0:	4671      	mov	r1, lr
  406ae2:	4622      	mov	r2, r4
  406ae4:	4640      	mov	r0, r8
  406ae6:	db02      	blt.n	406aee <__fputwc+0x66>
  406ae8:	f1be 0f0a 	cmp.w	lr, #10
  406aec:	d1e7      	bne.n	406abe <__fputwc+0x36>
  406aee:	f001 fccb 	bl	408488 <__swbuf_r>
  406af2:	1c43      	adds	r3, r0, #1
  406af4:	d1e8      	bne.n	406ac8 <__fputwc+0x40>
  406af6:	b002      	add	sp, #8
  406af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406afc:	89a3      	ldrh	r3, [r4, #12]
  406afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b02:	81a3      	strh	r3, [r4, #12]
  406b04:	b002      	add	sp, #8
  406b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b0a:	f109 33ff 	add.w	r3, r9, #4294967295
  406b0e:	2bfe      	cmp	r3, #254	; 0xfe
  406b10:	d8c4      	bhi.n	406a9c <__fputwc+0x14>
  406b12:	fa5f fe89 	uxtb.w	lr, r9
  406b16:	4606      	mov	r6, r0
  406b18:	f88d e004 	strb.w	lr, [sp, #4]
  406b1c:	e7cb      	b.n	406ab6 <__fputwc+0x2e>
  406b1e:	4648      	mov	r0, r9
  406b20:	b002      	add	sp, #8
  406b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b26:	bf00      	nop

00406b28 <_fputwc_r>:
  406b28:	b530      	push	{r4, r5, lr}
  406b2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406b2c:	f013 0f01 	tst.w	r3, #1
  406b30:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406b34:	4614      	mov	r4, r2
  406b36:	b083      	sub	sp, #12
  406b38:	4605      	mov	r5, r0
  406b3a:	b29a      	uxth	r2, r3
  406b3c:	d101      	bne.n	406b42 <_fputwc_r+0x1a>
  406b3e:	0590      	lsls	r0, r2, #22
  406b40:	d51c      	bpl.n	406b7c <_fputwc_r+0x54>
  406b42:	0490      	lsls	r0, r2, #18
  406b44:	d406      	bmi.n	406b54 <_fputwc_r+0x2c>
  406b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406b50:	81a3      	strh	r3, [r4, #12]
  406b52:	6662      	str	r2, [r4, #100]	; 0x64
  406b54:	4628      	mov	r0, r5
  406b56:	4622      	mov	r2, r4
  406b58:	f7ff ff96 	bl	406a88 <__fputwc>
  406b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406b5e:	07da      	lsls	r2, r3, #31
  406b60:	4605      	mov	r5, r0
  406b62:	d402      	bmi.n	406b6a <_fputwc_r+0x42>
  406b64:	89a3      	ldrh	r3, [r4, #12]
  406b66:	059b      	lsls	r3, r3, #22
  406b68:	d502      	bpl.n	406b70 <_fputwc_r+0x48>
  406b6a:	4628      	mov	r0, r5
  406b6c:	b003      	add	sp, #12
  406b6e:	bd30      	pop	{r4, r5, pc}
  406b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b72:	f000 fb07 	bl	407184 <__retarget_lock_release_recursive>
  406b76:	4628      	mov	r0, r5
  406b78:	b003      	add	sp, #12
  406b7a:	bd30      	pop	{r4, r5, pc}
  406b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406b7e:	9101      	str	r1, [sp, #4]
  406b80:	f000 fafe 	bl	407180 <__retarget_lock_acquire_recursive>
  406b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b88:	9901      	ldr	r1, [sp, #4]
  406b8a:	b29a      	uxth	r2, r3
  406b8c:	e7d9      	b.n	406b42 <_fputwc_r+0x1a>
  406b8e:	bf00      	nop

00406b90 <_malloc_trim_r>:
  406b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406b92:	4f24      	ldr	r7, [pc, #144]	; (406c24 <_malloc_trim_r+0x94>)
  406b94:	460c      	mov	r4, r1
  406b96:	4606      	mov	r6, r0
  406b98:	f000 fef6 	bl	407988 <__malloc_lock>
  406b9c:	68bb      	ldr	r3, [r7, #8]
  406b9e:	685d      	ldr	r5, [r3, #4]
  406ba0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406ba4:	310f      	adds	r1, #15
  406ba6:	f025 0503 	bic.w	r5, r5, #3
  406baa:	4429      	add	r1, r5
  406bac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406bb0:	f021 010f 	bic.w	r1, r1, #15
  406bb4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406bb8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406bbc:	db07      	blt.n	406bce <_malloc_trim_r+0x3e>
  406bbe:	2100      	movs	r1, #0
  406bc0:	4630      	mov	r0, r6
  406bc2:	f001 fb8d 	bl	4082e0 <_sbrk_r>
  406bc6:	68bb      	ldr	r3, [r7, #8]
  406bc8:	442b      	add	r3, r5
  406bca:	4298      	cmp	r0, r3
  406bcc:	d004      	beq.n	406bd8 <_malloc_trim_r+0x48>
  406bce:	4630      	mov	r0, r6
  406bd0:	f000 fee0 	bl	407994 <__malloc_unlock>
  406bd4:	2000      	movs	r0, #0
  406bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bd8:	4261      	negs	r1, r4
  406bda:	4630      	mov	r0, r6
  406bdc:	f001 fb80 	bl	4082e0 <_sbrk_r>
  406be0:	3001      	adds	r0, #1
  406be2:	d00d      	beq.n	406c00 <_malloc_trim_r+0x70>
  406be4:	4b10      	ldr	r3, [pc, #64]	; (406c28 <_malloc_trim_r+0x98>)
  406be6:	68ba      	ldr	r2, [r7, #8]
  406be8:	6819      	ldr	r1, [r3, #0]
  406bea:	1b2d      	subs	r5, r5, r4
  406bec:	f045 0501 	orr.w	r5, r5, #1
  406bf0:	4630      	mov	r0, r6
  406bf2:	1b09      	subs	r1, r1, r4
  406bf4:	6055      	str	r5, [r2, #4]
  406bf6:	6019      	str	r1, [r3, #0]
  406bf8:	f000 fecc 	bl	407994 <__malloc_unlock>
  406bfc:	2001      	movs	r0, #1
  406bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c00:	2100      	movs	r1, #0
  406c02:	4630      	mov	r0, r6
  406c04:	f001 fb6c 	bl	4082e0 <_sbrk_r>
  406c08:	68ba      	ldr	r2, [r7, #8]
  406c0a:	1a83      	subs	r3, r0, r2
  406c0c:	2b0f      	cmp	r3, #15
  406c0e:	ddde      	ble.n	406bce <_malloc_trim_r+0x3e>
  406c10:	4c06      	ldr	r4, [pc, #24]	; (406c2c <_malloc_trim_r+0x9c>)
  406c12:	4905      	ldr	r1, [pc, #20]	; (406c28 <_malloc_trim_r+0x98>)
  406c14:	6824      	ldr	r4, [r4, #0]
  406c16:	f043 0301 	orr.w	r3, r3, #1
  406c1a:	1b00      	subs	r0, r0, r4
  406c1c:	6053      	str	r3, [r2, #4]
  406c1e:	6008      	str	r0, [r1, #0]
  406c20:	e7d5      	b.n	406bce <_malloc_trim_r+0x3e>
  406c22:	bf00      	nop
  406c24:	204005d8 	.word	0x204005d8
  406c28:	204072b4 	.word	0x204072b4
  406c2c:	204009e0 	.word	0x204009e0

00406c30 <_free_r>:
  406c30:	2900      	cmp	r1, #0
  406c32:	d044      	beq.n	406cbe <_free_r+0x8e>
  406c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c38:	460d      	mov	r5, r1
  406c3a:	4680      	mov	r8, r0
  406c3c:	f000 fea4 	bl	407988 <__malloc_lock>
  406c40:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406c44:	4969      	ldr	r1, [pc, #420]	; (406dec <_free_r+0x1bc>)
  406c46:	f027 0301 	bic.w	r3, r7, #1
  406c4a:	f1a5 0408 	sub.w	r4, r5, #8
  406c4e:	18e2      	adds	r2, r4, r3
  406c50:	688e      	ldr	r6, [r1, #8]
  406c52:	6850      	ldr	r0, [r2, #4]
  406c54:	42b2      	cmp	r2, r6
  406c56:	f020 0003 	bic.w	r0, r0, #3
  406c5a:	d05e      	beq.n	406d1a <_free_r+0xea>
  406c5c:	07fe      	lsls	r6, r7, #31
  406c5e:	6050      	str	r0, [r2, #4]
  406c60:	d40b      	bmi.n	406c7a <_free_r+0x4a>
  406c62:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406c66:	1be4      	subs	r4, r4, r7
  406c68:	f101 0e08 	add.w	lr, r1, #8
  406c6c:	68a5      	ldr	r5, [r4, #8]
  406c6e:	4575      	cmp	r5, lr
  406c70:	443b      	add	r3, r7
  406c72:	d06d      	beq.n	406d50 <_free_r+0x120>
  406c74:	68e7      	ldr	r7, [r4, #12]
  406c76:	60ef      	str	r7, [r5, #12]
  406c78:	60bd      	str	r5, [r7, #8]
  406c7a:	1815      	adds	r5, r2, r0
  406c7c:	686d      	ldr	r5, [r5, #4]
  406c7e:	07ed      	lsls	r5, r5, #31
  406c80:	d53e      	bpl.n	406d00 <_free_r+0xd0>
  406c82:	f043 0201 	orr.w	r2, r3, #1
  406c86:	6062      	str	r2, [r4, #4]
  406c88:	50e3      	str	r3, [r4, r3]
  406c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406c8e:	d217      	bcs.n	406cc0 <_free_r+0x90>
  406c90:	08db      	lsrs	r3, r3, #3
  406c92:	1c58      	adds	r0, r3, #1
  406c94:	109a      	asrs	r2, r3, #2
  406c96:	684d      	ldr	r5, [r1, #4]
  406c98:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406c9c:	60a7      	str	r7, [r4, #8]
  406c9e:	2301      	movs	r3, #1
  406ca0:	4093      	lsls	r3, r2
  406ca2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406ca6:	432b      	orrs	r3, r5
  406ca8:	3a08      	subs	r2, #8
  406caa:	60e2      	str	r2, [r4, #12]
  406cac:	604b      	str	r3, [r1, #4]
  406cae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406cb2:	60fc      	str	r4, [r7, #12]
  406cb4:	4640      	mov	r0, r8
  406cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406cba:	f000 be6b 	b.w	407994 <__malloc_unlock>
  406cbe:	4770      	bx	lr
  406cc0:	0a5a      	lsrs	r2, r3, #9
  406cc2:	2a04      	cmp	r2, #4
  406cc4:	d852      	bhi.n	406d6c <_free_r+0x13c>
  406cc6:	099a      	lsrs	r2, r3, #6
  406cc8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406ccc:	00ff      	lsls	r7, r7, #3
  406cce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406cd2:	19c8      	adds	r0, r1, r7
  406cd4:	59ca      	ldr	r2, [r1, r7]
  406cd6:	3808      	subs	r0, #8
  406cd8:	4290      	cmp	r0, r2
  406cda:	d04f      	beq.n	406d7c <_free_r+0x14c>
  406cdc:	6851      	ldr	r1, [r2, #4]
  406cde:	f021 0103 	bic.w	r1, r1, #3
  406ce2:	428b      	cmp	r3, r1
  406ce4:	d232      	bcs.n	406d4c <_free_r+0x11c>
  406ce6:	6892      	ldr	r2, [r2, #8]
  406ce8:	4290      	cmp	r0, r2
  406cea:	d1f7      	bne.n	406cdc <_free_r+0xac>
  406cec:	68c3      	ldr	r3, [r0, #12]
  406cee:	60a0      	str	r0, [r4, #8]
  406cf0:	60e3      	str	r3, [r4, #12]
  406cf2:	609c      	str	r4, [r3, #8]
  406cf4:	60c4      	str	r4, [r0, #12]
  406cf6:	4640      	mov	r0, r8
  406cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406cfc:	f000 be4a 	b.w	407994 <__malloc_unlock>
  406d00:	6895      	ldr	r5, [r2, #8]
  406d02:	4f3b      	ldr	r7, [pc, #236]	; (406df0 <_free_r+0x1c0>)
  406d04:	42bd      	cmp	r5, r7
  406d06:	4403      	add	r3, r0
  406d08:	d040      	beq.n	406d8c <_free_r+0x15c>
  406d0a:	68d0      	ldr	r0, [r2, #12]
  406d0c:	60e8      	str	r0, [r5, #12]
  406d0e:	f043 0201 	orr.w	r2, r3, #1
  406d12:	6085      	str	r5, [r0, #8]
  406d14:	6062      	str	r2, [r4, #4]
  406d16:	50e3      	str	r3, [r4, r3]
  406d18:	e7b7      	b.n	406c8a <_free_r+0x5a>
  406d1a:	07ff      	lsls	r7, r7, #31
  406d1c:	4403      	add	r3, r0
  406d1e:	d407      	bmi.n	406d30 <_free_r+0x100>
  406d20:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406d24:	1aa4      	subs	r4, r4, r2
  406d26:	4413      	add	r3, r2
  406d28:	68a0      	ldr	r0, [r4, #8]
  406d2a:	68e2      	ldr	r2, [r4, #12]
  406d2c:	60c2      	str	r2, [r0, #12]
  406d2e:	6090      	str	r0, [r2, #8]
  406d30:	4a30      	ldr	r2, [pc, #192]	; (406df4 <_free_r+0x1c4>)
  406d32:	6812      	ldr	r2, [r2, #0]
  406d34:	f043 0001 	orr.w	r0, r3, #1
  406d38:	4293      	cmp	r3, r2
  406d3a:	6060      	str	r0, [r4, #4]
  406d3c:	608c      	str	r4, [r1, #8]
  406d3e:	d3b9      	bcc.n	406cb4 <_free_r+0x84>
  406d40:	4b2d      	ldr	r3, [pc, #180]	; (406df8 <_free_r+0x1c8>)
  406d42:	4640      	mov	r0, r8
  406d44:	6819      	ldr	r1, [r3, #0]
  406d46:	f7ff ff23 	bl	406b90 <_malloc_trim_r>
  406d4a:	e7b3      	b.n	406cb4 <_free_r+0x84>
  406d4c:	4610      	mov	r0, r2
  406d4e:	e7cd      	b.n	406cec <_free_r+0xbc>
  406d50:	1811      	adds	r1, r2, r0
  406d52:	6849      	ldr	r1, [r1, #4]
  406d54:	07c9      	lsls	r1, r1, #31
  406d56:	d444      	bmi.n	406de2 <_free_r+0x1b2>
  406d58:	6891      	ldr	r1, [r2, #8]
  406d5a:	68d2      	ldr	r2, [r2, #12]
  406d5c:	60ca      	str	r2, [r1, #12]
  406d5e:	4403      	add	r3, r0
  406d60:	f043 0001 	orr.w	r0, r3, #1
  406d64:	6091      	str	r1, [r2, #8]
  406d66:	6060      	str	r0, [r4, #4]
  406d68:	50e3      	str	r3, [r4, r3]
  406d6a:	e7a3      	b.n	406cb4 <_free_r+0x84>
  406d6c:	2a14      	cmp	r2, #20
  406d6e:	d816      	bhi.n	406d9e <_free_r+0x16e>
  406d70:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406d74:	00ff      	lsls	r7, r7, #3
  406d76:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406d7a:	e7aa      	b.n	406cd2 <_free_r+0xa2>
  406d7c:	10aa      	asrs	r2, r5, #2
  406d7e:	2301      	movs	r3, #1
  406d80:	684d      	ldr	r5, [r1, #4]
  406d82:	4093      	lsls	r3, r2
  406d84:	432b      	orrs	r3, r5
  406d86:	604b      	str	r3, [r1, #4]
  406d88:	4603      	mov	r3, r0
  406d8a:	e7b0      	b.n	406cee <_free_r+0xbe>
  406d8c:	f043 0201 	orr.w	r2, r3, #1
  406d90:	614c      	str	r4, [r1, #20]
  406d92:	610c      	str	r4, [r1, #16]
  406d94:	60e5      	str	r5, [r4, #12]
  406d96:	60a5      	str	r5, [r4, #8]
  406d98:	6062      	str	r2, [r4, #4]
  406d9a:	50e3      	str	r3, [r4, r3]
  406d9c:	e78a      	b.n	406cb4 <_free_r+0x84>
  406d9e:	2a54      	cmp	r2, #84	; 0x54
  406da0:	d806      	bhi.n	406db0 <_free_r+0x180>
  406da2:	0b1a      	lsrs	r2, r3, #12
  406da4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406da8:	00ff      	lsls	r7, r7, #3
  406daa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406dae:	e790      	b.n	406cd2 <_free_r+0xa2>
  406db0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406db4:	d806      	bhi.n	406dc4 <_free_r+0x194>
  406db6:	0bda      	lsrs	r2, r3, #15
  406db8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406dbc:	00ff      	lsls	r7, r7, #3
  406dbe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406dc2:	e786      	b.n	406cd2 <_free_r+0xa2>
  406dc4:	f240 5054 	movw	r0, #1364	; 0x554
  406dc8:	4282      	cmp	r2, r0
  406dca:	d806      	bhi.n	406dda <_free_r+0x1aa>
  406dcc:	0c9a      	lsrs	r2, r3, #18
  406dce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406dd2:	00ff      	lsls	r7, r7, #3
  406dd4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406dd8:	e77b      	b.n	406cd2 <_free_r+0xa2>
  406dda:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406dde:	257e      	movs	r5, #126	; 0x7e
  406de0:	e777      	b.n	406cd2 <_free_r+0xa2>
  406de2:	f043 0101 	orr.w	r1, r3, #1
  406de6:	6061      	str	r1, [r4, #4]
  406de8:	6013      	str	r3, [r2, #0]
  406dea:	e763      	b.n	406cb4 <_free_r+0x84>
  406dec:	204005d8 	.word	0x204005d8
  406df0:	204005e0 	.word	0x204005e0
  406df4:	204009e4 	.word	0x204009e4
  406df8:	204072e4 	.word	0x204072e4

00406dfc <__sfvwrite_r>:
  406dfc:	6893      	ldr	r3, [r2, #8]
  406dfe:	2b00      	cmp	r3, #0
  406e00:	d073      	beq.n	406eea <__sfvwrite_r+0xee>
  406e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e06:	898b      	ldrh	r3, [r1, #12]
  406e08:	b083      	sub	sp, #12
  406e0a:	460c      	mov	r4, r1
  406e0c:	0719      	lsls	r1, r3, #28
  406e0e:	9000      	str	r0, [sp, #0]
  406e10:	4616      	mov	r6, r2
  406e12:	d526      	bpl.n	406e62 <__sfvwrite_r+0x66>
  406e14:	6922      	ldr	r2, [r4, #16]
  406e16:	b322      	cbz	r2, 406e62 <__sfvwrite_r+0x66>
  406e18:	f013 0002 	ands.w	r0, r3, #2
  406e1c:	6835      	ldr	r5, [r6, #0]
  406e1e:	d02c      	beq.n	406e7a <__sfvwrite_r+0x7e>
  406e20:	f04f 0900 	mov.w	r9, #0
  406e24:	4fb0      	ldr	r7, [pc, #704]	; (4070e8 <__sfvwrite_r+0x2ec>)
  406e26:	46c8      	mov	r8, r9
  406e28:	46b2      	mov	sl, r6
  406e2a:	45b8      	cmp	r8, r7
  406e2c:	4643      	mov	r3, r8
  406e2e:	464a      	mov	r2, r9
  406e30:	bf28      	it	cs
  406e32:	463b      	movcs	r3, r7
  406e34:	9800      	ldr	r0, [sp, #0]
  406e36:	f1b8 0f00 	cmp.w	r8, #0
  406e3a:	d050      	beq.n	406ede <__sfvwrite_r+0xe2>
  406e3c:	69e1      	ldr	r1, [r4, #28]
  406e3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406e40:	47b0      	blx	r6
  406e42:	2800      	cmp	r0, #0
  406e44:	dd58      	ble.n	406ef8 <__sfvwrite_r+0xfc>
  406e46:	f8da 3008 	ldr.w	r3, [sl, #8]
  406e4a:	1a1b      	subs	r3, r3, r0
  406e4c:	4481      	add	r9, r0
  406e4e:	eba8 0800 	sub.w	r8, r8, r0
  406e52:	f8ca 3008 	str.w	r3, [sl, #8]
  406e56:	2b00      	cmp	r3, #0
  406e58:	d1e7      	bne.n	406e2a <__sfvwrite_r+0x2e>
  406e5a:	2000      	movs	r0, #0
  406e5c:	b003      	add	sp, #12
  406e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e62:	4621      	mov	r1, r4
  406e64:	9800      	ldr	r0, [sp, #0]
  406e66:	f7fe fc91 	bl	40578c <__swsetup_r>
  406e6a:	2800      	cmp	r0, #0
  406e6c:	f040 8133 	bne.w	4070d6 <__sfvwrite_r+0x2da>
  406e70:	89a3      	ldrh	r3, [r4, #12]
  406e72:	6835      	ldr	r5, [r6, #0]
  406e74:	f013 0002 	ands.w	r0, r3, #2
  406e78:	d1d2      	bne.n	406e20 <__sfvwrite_r+0x24>
  406e7a:	f013 0901 	ands.w	r9, r3, #1
  406e7e:	d145      	bne.n	406f0c <__sfvwrite_r+0x110>
  406e80:	464f      	mov	r7, r9
  406e82:	9601      	str	r6, [sp, #4]
  406e84:	b337      	cbz	r7, 406ed4 <__sfvwrite_r+0xd8>
  406e86:	059a      	lsls	r2, r3, #22
  406e88:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406e8c:	f140 8083 	bpl.w	406f96 <__sfvwrite_r+0x19a>
  406e90:	4547      	cmp	r7, r8
  406e92:	46c3      	mov	fp, r8
  406e94:	f0c0 80ab 	bcc.w	406fee <__sfvwrite_r+0x1f2>
  406e98:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406e9c:	f040 80ac 	bne.w	406ff8 <__sfvwrite_r+0x1fc>
  406ea0:	6820      	ldr	r0, [r4, #0]
  406ea2:	46ba      	mov	sl, r7
  406ea4:	465a      	mov	r2, fp
  406ea6:	4649      	mov	r1, r9
  406ea8:	f000 fd0a 	bl	4078c0 <memmove>
  406eac:	68a2      	ldr	r2, [r4, #8]
  406eae:	6823      	ldr	r3, [r4, #0]
  406eb0:	eba2 0208 	sub.w	r2, r2, r8
  406eb4:	445b      	add	r3, fp
  406eb6:	60a2      	str	r2, [r4, #8]
  406eb8:	6023      	str	r3, [r4, #0]
  406eba:	9a01      	ldr	r2, [sp, #4]
  406ebc:	6893      	ldr	r3, [r2, #8]
  406ebe:	eba3 030a 	sub.w	r3, r3, sl
  406ec2:	44d1      	add	r9, sl
  406ec4:	eba7 070a 	sub.w	r7, r7, sl
  406ec8:	6093      	str	r3, [r2, #8]
  406eca:	2b00      	cmp	r3, #0
  406ecc:	d0c5      	beq.n	406e5a <__sfvwrite_r+0x5e>
  406ece:	89a3      	ldrh	r3, [r4, #12]
  406ed0:	2f00      	cmp	r7, #0
  406ed2:	d1d8      	bne.n	406e86 <__sfvwrite_r+0x8a>
  406ed4:	f8d5 9000 	ldr.w	r9, [r5]
  406ed8:	686f      	ldr	r7, [r5, #4]
  406eda:	3508      	adds	r5, #8
  406edc:	e7d2      	b.n	406e84 <__sfvwrite_r+0x88>
  406ede:	f8d5 9000 	ldr.w	r9, [r5]
  406ee2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406ee6:	3508      	adds	r5, #8
  406ee8:	e79f      	b.n	406e2a <__sfvwrite_r+0x2e>
  406eea:	2000      	movs	r0, #0
  406eec:	4770      	bx	lr
  406eee:	4621      	mov	r1, r4
  406ef0:	9800      	ldr	r0, [sp, #0]
  406ef2:	f7ff fd1f 	bl	406934 <_fflush_r>
  406ef6:	b370      	cbz	r0, 406f56 <__sfvwrite_r+0x15a>
  406ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f00:	f04f 30ff 	mov.w	r0, #4294967295
  406f04:	81a3      	strh	r3, [r4, #12]
  406f06:	b003      	add	sp, #12
  406f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f0c:	4681      	mov	r9, r0
  406f0e:	4633      	mov	r3, r6
  406f10:	464e      	mov	r6, r9
  406f12:	46a8      	mov	r8, r5
  406f14:	469a      	mov	sl, r3
  406f16:	464d      	mov	r5, r9
  406f18:	b34e      	cbz	r6, 406f6e <__sfvwrite_r+0x172>
  406f1a:	b380      	cbz	r0, 406f7e <__sfvwrite_r+0x182>
  406f1c:	6820      	ldr	r0, [r4, #0]
  406f1e:	6923      	ldr	r3, [r4, #16]
  406f20:	6962      	ldr	r2, [r4, #20]
  406f22:	45b1      	cmp	r9, r6
  406f24:	46cb      	mov	fp, r9
  406f26:	bf28      	it	cs
  406f28:	46b3      	movcs	fp, r6
  406f2a:	4298      	cmp	r0, r3
  406f2c:	465f      	mov	r7, fp
  406f2e:	d904      	bls.n	406f3a <__sfvwrite_r+0x13e>
  406f30:	68a3      	ldr	r3, [r4, #8]
  406f32:	4413      	add	r3, r2
  406f34:	459b      	cmp	fp, r3
  406f36:	f300 80a6 	bgt.w	407086 <__sfvwrite_r+0x28a>
  406f3a:	4593      	cmp	fp, r2
  406f3c:	db4b      	blt.n	406fd6 <__sfvwrite_r+0x1da>
  406f3e:	4613      	mov	r3, r2
  406f40:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406f42:	69e1      	ldr	r1, [r4, #28]
  406f44:	9800      	ldr	r0, [sp, #0]
  406f46:	462a      	mov	r2, r5
  406f48:	47b8      	blx	r7
  406f4a:	1e07      	subs	r7, r0, #0
  406f4c:	ddd4      	ble.n	406ef8 <__sfvwrite_r+0xfc>
  406f4e:	ebb9 0907 	subs.w	r9, r9, r7
  406f52:	d0cc      	beq.n	406eee <__sfvwrite_r+0xf2>
  406f54:	2001      	movs	r0, #1
  406f56:	f8da 3008 	ldr.w	r3, [sl, #8]
  406f5a:	1bdb      	subs	r3, r3, r7
  406f5c:	443d      	add	r5, r7
  406f5e:	1bf6      	subs	r6, r6, r7
  406f60:	f8ca 3008 	str.w	r3, [sl, #8]
  406f64:	2b00      	cmp	r3, #0
  406f66:	f43f af78 	beq.w	406e5a <__sfvwrite_r+0x5e>
  406f6a:	2e00      	cmp	r6, #0
  406f6c:	d1d5      	bne.n	406f1a <__sfvwrite_r+0x11e>
  406f6e:	f108 0308 	add.w	r3, r8, #8
  406f72:	e913 0060 	ldmdb	r3, {r5, r6}
  406f76:	4698      	mov	r8, r3
  406f78:	3308      	adds	r3, #8
  406f7a:	2e00      	cmp	r6, #0
  406f7c:	d0f9      	beq.n	406f72 <__sfvwrite_r+0x176>
  406f7e:	4632      	mov	r2, r6
  406f80:	210a      	movs	r1, #10
  406f82:	4628      	mov	r0, r5
  406f84:	f000 fc4c 	bl	407820 <memchr>
  406f88:	2800      	cmp	r0, #0
  406f8a:	f000 80a1 	beq.w	4070d0 <__sfvwrite_r+0x2d4>
  406f8e:	3001      	adds	r0, #1
  406f90:	eba0 0905 	sub.w	r9, r0, r5
  406f94:	e7c2      	b.n	406f1c <__sfvwrite_r+0x120>
  406f96:	6820      	ldr	r0, [r4, #0]
  406f98:	6923      	ldr	r3, [r4, #16]
  406f9a:	4298      	cmp	r0, r3
  406f9c:	d802      	bhi.n	406fa4 <__sfvwrite_r+0x1a8>
  406f9e:	6963      	ldr	r3, [r4, #20]
  406fa0:	429f      	cmp	r7, r3
  406fa2:	d25d      	bcs.n	407060 <__sfvwrite_r+0x264>
  406fa4:	45b8      	cmp	r8, r7
  406fa6:	bf28      	it	cs
  406fa8:	46b8      	movcs	r8, r7
  406faa:	4642      	mov	r2, r8
  406fac:	4649      	mov	r1, r9
  406fae:	f000 fc87 	bl	4078c0 <memmove>
  406fb2:	68a3      	ldr	r3, [r4, #8]
  406fb4:	6822      	ldr	r2, [r4, #0]
  406fb6:	eba3 0308 	sub.w	r3, r3, r8
  406fba:	4442      	add	r2, r8
  406fbc:	60a3      	str	r3, [r4, #8]
  406fbe:	6022      	str	r2, [r4, #0]
  406fc0:	b10b      	cbz	r3, 406fc6 <__sfvwrite_r+0x1ca>
  406fc2:	46c2      	mov	sl, r8
  406fc4:	e779      	b.n	406eba <__sfvwrite_r+0xbe>
  406fc6:	4621      	mov	r1, r4
  406fc8:	9800      	ldr	r0, [sp, #0]
  406fca:	f7ff fcb3 	bl	406934 <_fflush_r>
  406fce:	2800      	cmp	r0, #0
  406fd0:	d192      	bne.n	406ef8 <__sfvwrite_r+0xfc>
  406fd2:	46c2      	mov	sl, r8
  406fd4:	e771      	b.n	406eba <__sfvwrite_r+0xbe>
  406fd6:	465a      	mov	r2, fp
  406fd8:	4629      	mov	r1, r5
  406fda:	f000 fc71 	bl	4078c0 <memmove>
  406fde:	68a2      	ldr	r2, [r4, #8]
  406fe0:	6823      	ldr	r3, [r4, #0]
  406fe2:	eba2 020b 	sub.w	r2, r2, fp
  406fe6:	445b      	add	r3, fp
  406fe8:	60a2      	str	r2, [r4, #8]
  406fea:	6023      	str	r3, [r4, #0]
  406fec:	e7af      	b.n	406f4e <__sfvwrite_r+0x152>
  406fee:	6820      	ldr	r0, [r4, #0]
  406ff0:	46b8      	mov	r8, r7
  406ff2:	46ba      	mov	sl, r7
  406ff4:	46bb      	mov	fp, r7
  406ff6:	e755      	b.n	406ea4 <__sfvwrite_r+0xa8>
  406ff8:	6962      	ldr	r2, [r4, #20]
  406ffa:	6820      	ldr	r0, [r4, #0]
  406ffc:	6921      	ldr	r1, [r4, #16]
  406ffe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407002:	eba0 0a01 	sub.w	sl, r0, r1
  407006:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40700a:	f10a 0001 	add.w	r0, sl, #1
  40700e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407012:	4438      	add	r0, r7
  407014:	4540      	cmp	r0, r8
  407016:	4642      	mov	r2, r8
  407018:	bf84      	itt	hi
  40701a:	4680      	movhi	r8, r0
  40701c:	4642      	movhi	r2, r8
  40701e:	055b      	lsls	r3, r3, #21
  407020:	d544      	bpl.n	4070ac <__sfvwrite_r+0x2b0>
  407022:	4611      	mov	r1, r2
  407024:	9800      	ldr	r0, [sp, #0]
  407026:	f000 f92f 	bl	407288 <_malloc_r>
  40702a:	4683      	mov	fp, r0
  40702c:	2800      	cmp	r0, #0
  40702e:	d055      	beq.n	4070dc <__sfvwrite_r+0x2e0>
  407030:	4652      	mov	r2, sl
  407032:	6921      	ldr	r1, [r4, #16]
  407034:	f7fb fffc 	bl	403030 <memcpy>
  407038:	89a3      	ldrh	r3, [r4, #12]
  40703a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40703e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407042:	81a3      	strh	r3, [r4, #12]
  407044:	eb0b 000a 	add.w	r0, fp, sl
  407048:	eba8 030a 	sub.w	r3, r8, sl
  40704c:	f8c4 b010 	str.w	fp, [r4, #16]
  407050:	f8c4 8014 	str.w	r8, [r4, #20]
  407054:	6020      	str	r0, [r4, #0]
  407056:	60a3      	str	r3, [r4, #8]
  407058:	46b8      	mov	r8, r7
  40705a:	46ba      	mov	sl, r7
  40705c:	46bb      	mov	fp, r7
  40705e:	e721      	b.n	406ea4 <__sfvwrite_r+0xa8>
  407060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407064:	42b9      	cmp	r1, r7
  407066:	bf28      	it	cs
  407068:	4639      	movcs	r1, r7
  40706a:	464a      	mov	r2, r9
  40706c:	fb91 f1f3 	sdiv	r1, r1, r3
  407070:	9800      	ldr	r0, [sp, #0]
  407072:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407074:	fb03 f301 	mul.w	r3, r3, r1
  407078:	69e1      	ldr	r1, [r4, #28]
  40707a:	47b0      	blx	r6
  40707c:	f1b0 0a00 	subs.w	sl, r0, #0
  407080:	f73f af1b 	bgt.w	406eba <__sfvwrite_r+0xbe>
  407084:	e738      	b.n	406ef8 <__sfvwrite_r+0xfc>
  407086:	461a      	mov	r2, r3
  407088:	4629      	mov	r1, r5
  40708a:	9301      	str	r3, [sp, #4]
  40708c:	f000 fc18 	bl	4078c0 <memmove>
  407090:	6822      	ldr	r2, [r4, #0]
  407092:	9b01      	ldr	r3, [sp, #4]
  407094:	9800      	ldr	r0, [sp, #0]
  407096:	441a      	add	r2, r3
  407098:	6022      	str	r2, [r4, #0]
  40709a:	4621      	mov	r1, r4
  40709c:	f7ff fc4a 	bl	406934 <_fflush_r>
  4070a0:	9b01      	ldr	r3, [sp, #4]
  4070a2:	2800      	cmp	r0, #0
  4070a4:	f47f af28 	bne.w	406ef8 <__sfvwrite_r+0xfc>
  4070a8:	461f      	mov	r7, r3
  4070aa:	e750      	b.n	406f4e <__sfvwrite_r+0x152>
  4070ac:	9800      	ldr	r0, [sp, #0]
  4070ae:	f000 ff71 	bl	407f94 <_realloc_r>
  4070b2:	4683      	mov	fp, r0
  4070b4:	2800      	cmp	r0, #0
  4070b6:	d1c5      	bne.n	407044 <__sfvwrite_r+0x248>
  4070b8:	9d00      	ldr	r5, [sp, #0]
  4070ba:	6921      	ldr	r1, [r4, #16]
  4070bc:	4628      	mov	r0, r5
  4070be:	f7ff fdb7 	bl	406c30 <_free_r>
  4070c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070c6:	220c      	movs	r2, #12
  4070c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4070cc:	602a      	str	r2, [r5, #0]
  4070ce:	e715      	b.n	406efc <__sfvwrite_r+0x100>
  4070d0:	f106 0901 	add.w	r9, r6, #1
  4070d4:	e722      	b.n	406f1c <__sfvwrite_r+0x120>
  4070d6:	f04f 30ff 	mov.w	r0, #4294967295
  4070da:	e6bf      	b.n	406e5c <__sfvwrite_r+0x60>
  4070dc:	9a00      	ldr	r2, [sp, #0]
  4070de:	230c      	movs	r3, #12
  4070e0:	6013      	str	r3, [r2, #0]
  4070e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070e6:	e709      	b.n	406efc <__sfvwrite_r+0x100>
  4070e8:	7ffffc00 	.word	0x7ffffc00

004070ec <_fwalk_reent>:
  4070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4070f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4070f4:	d01f      	beq.n	407136 <_fwalk_reent+0x4a>
  4070f6:	4688      	mov	r8, r1
  4070f8:	4606      	mov	r6, r0
  4070fa:	f04f 0900 	mov.w	r9, #0
  4070fe:	687d      	ldr	r5, [r7, #4]
  407100:	68bc      	ldr	r4, [r7, #8]
  407102:	3d01      	subs	r5, #1
  407104:	d411      	bmi.n	40712a <_fwalk_reent+0x3e>
  407106:	89a3      	ldrh	r3, [r4, #12]
  407108:	2b01      	cmp	r3, #1
  40710a:	f105 35ff 	add.w	r5, r5, #4294967295
  40710e:	d908      	bls.n	407122 <_fwalk_reent+0x36>
  407110:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407114:	3301      	adds	r3, #1
  407116:	4621      	mov	r1, r4
  407118:	4630      	mov	r0, r6
  40711a:	d002      	beq.n	407122 <_fwalk_reent+0x36>
  40711c:	47c0      	blx	r8
  40711e:	ea49 0900 	orr.w	r9, r9, r0
  407122:	1c6b      	adds	r3, r5, #1
  407124:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407128:	d1ed      	bne.n	407106 <_fwalk_reent+0x1a>
  40712a:	683f      	ldr	r7, [r7, #0]
  40712c:	2f00      	cmp	r7, #0
  40712e:	d1e6      	bne.n	4070fe <_fwalk_reent+0x12>
  407130:	4648      	mov	r0, r9
  407132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407136:	46b9      	mov	r9, r7
  407138:	4648      	mov	r0, r9
  40713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40713e:	bf00      	nop

00407140 <__locale_mb_cur_max>:
  407140:	4b04      	ldr	r3, [pc, #16]	; (407154 <__locale_mb_cur_max+0x14>)
  407142:	4a05      	ldr	r2, [pc, #20]	; (407158 <__locale_mb_cur_max+0x18>)
  407144:	681b      	ldr	r3, [r3, #0]
  407146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407148:	2b00      	cmp	r3, #0
  40714a:	bf08      	it	eq
  40714c:	4613      	moveq	r3, r2
  40714e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407152:	4770      	bx	lr
  407154:	2040003c 	.word	0x2040003c
  407158:	2040046c 	.word	0x2040046c

0040715c <_localeconv_r>:
  40715c:	4a04      	ldr	r2, [pc, #16]	; (407170 <_localeconv_r+0x14>)
  40715e:	4b05      	ldr	r3, [pc, #20]	; (407174 <_localeconv_r+0x18>)
  407160:	6812      	ldr	r2, [r2, #0]
  407162:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407164:	2800      	cmp	r0, #0
  407166:	bf08      	it	eq
  407168:	4618      	moveq	r0, r3
  40716a:	30f0      	adds	r0, #240	; 0xf0
  40716c:	4770      	bx	lr
  40716e:	bf00      	nop
  407170:	2040003c 	.word	0x2040003c
  407174:	2040046c 	.word	0x2040046c

00407178 <__retarget_lock_init_recursive>:
  407178:	4770      	bx	lr
  40717a:	bf00      	nop

0040717c <__retarget_lock_close_recursive>:
  40717c:	4770      	bx	lr
  40717e:	bf00      	nop

00407180 <__retarget_lock_acquire_recursive>:
  407180:	4770      	bx	lr
  407182:	bf00      	nop

00407184 <__retarget_lock_release_recursive>:
  407184:	4770      	bx	lr
  407186:	bf00      	nop

00407188 <__swhatbuf_r>:
  407188:	b570      	push	{r4, r5, r6, lr}
  40718a:	460c      	mov	r4, r1
  40718c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407190:	2900      	cmp	r1, #0
  407192:	b090      	sub	sp, #64	; 0x40
  407194:	4615      	mov	r5, r2
  407196:	461e      	mov	r6, r3
  407198:	db14      	blt.n	4071c4 <__swhatbuf_r+0x3c>
  40719a:	aa01      	add	r2, sp, #4
  40719c:	f001 fb20 	bl	4087e0 <_fstat_r>
  4071a0:	2800      	cmp	r0, #0
  4071a2:	db0f      	blt.n	4071c4 <__swhatbuf_r+0x3c>
  4071a4:	9a02      	ldr	r2, [sp, #8]
  4071a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4071aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4071ae:	fab2 f282 	clz	r2, r2
  4071b2:	0952      	lsrs	r2, r2, #5
  4071b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4071b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4071bc:	6032      	str	r2, [r6, #0]
  4071be:	602b      	str	r3, [r5, #0]
  4071c0:	b010      	add	sp, #64	; 0x40
  4071c2:	bd70      	pop	{r4, r5, r6, pc}
  4071c4:	89a2      	ldrh	r2, [r4, #12]
  4071c6:	2300      	movs	r3, #0
  4071c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4071cc:	6033      	str	r3, [r6, #0]
  4071ce:	d004      	beq.n	4071da <__swhatbuf_r+0x52>
  4071d0:	2240      	movs	r2, #64	; 0x40
  4071d2:	4618      	mov	r0, r3
  4071d4:	602a      	str	r2, [r5, #0]
  4071d6:	b010      	add	sp, #64	; 0x40
  4071d8:	bd70      	pop	{r4, r5, r6, pc}
  4071da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4071de:	602b      	str	r3, [r5, #0]
  4071e0:	b010      	add	sp, #64	; 0x40
  4071e2:	bd70      	pop	{r4, r5, r6, pc}

004071e4 <__smakebuf_r>:
  4071e4:	898a      	ldrh	r2, [r1, #12]
  4071e6:	0792      	lsls	r2, r2, #30
  4071e8:	460b      	mov	r3, r1
  4071ea:	d506      	bpl.n	4071fa <__smakebuf_r+0x16>
  4071ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4071f0:	2101      	movs	r1, #1
  4071f2:	601a      	str	r2, [r3, #0]
  4071f4:	611a      	str	r2, [r3, #16]
  4071f6:	6159      	str	r1, [r3, #20]
  4071f8:	4770      	bx	lr
  4071fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4071fc:	b083      	sub	sp, #12
  4071fe:	ab01      	add	r3, sp, #4
  407200:	466a      	mov	r2, sp
  407202:	460c      	mov	r4, r1
  407204:	4606      	mov	r6, r0
  407206:	f7ff ffbf 	bl	407188 <__swhatbuf_r>
  40720a:	9900      	ldr	r1, [sp, #0]
  40720c:	4605      	mov	r5, r0
  40720e:	4630      	mov	r0, r6
  407210:	f000 f83a 	bl	407288 <_malloc_r>
  407214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407218:	b1d8      	cbz	r0, 407252 <__smakebuf_r+0x6e>
  40721a:	9a01      	ldr	r2, [sp, #4]
  40721c:	4f15      	ldr	r7, [pc, #84]	; (407274 <__smakebuf_r+0x90>)
  40721e:	9900      	ldr	r1, [sp, #0]
  407220:	63f7      	str	r7, [r6, #60]	; 0x3c
  407222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407226:	81a3      	strh	r3, [r4, #12]
  407228:	6020      	str	r0, [r4, #0]
  40722a:	6120      	str	r0, [r4, #16]
  40722c:	6161      	str	r1, [r4, #20]
  40722e:	b91a      	cbnz	r2, 407238 <__smakebuf_r+0x54>
  407230:	432b      	orrs	r3, r5
  407232:	81a3      	strh	r3, [r4, #12]
  407234:	b003      	add	sp, #12
  407236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407238:	4630      	mov	r0, r6
  40723a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40723e:	f001 fae3 	bl	408808 <_isatty_r>
  407242:	b1a0      	cbz	r0, 40726e <__smakebuf_r+0x8a>
  407244:	89a3      	ldrh	r3, [r4, #12]
  407246:	f023 0303 	bic.w	r3, r3, #3
  40724a:	f043 0301 	orr.w	r3, r3, #1
  40724e:	b21b      	sxth	r3, r3
  407250:	e7ee      	b.n	407230 <__smakebuf_r+0x4c>
  407252:	059a      	lsls	r2, r3, #22
  407254:	d4ee      	bmi.n	407234 <__smakebuf_r+0x50>
  407256:	f023 0303 	bic.w	r3, r3, #3
  40725a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40725e:	f043 0302 	orr.w	r3, r3, #2
  407262:	2101      	movs	r1, #1
  407264:	81a3      	strh	r3, [r4, #12]
  407266:	6022      	str	r2, [r4, #0]
  407268:	6122      	str	r2, [r4, #16]
  40726a:	6161      	str	r1, [r4, #20]
  40726c:	e7e2      	b.n	407234 <__smakebuf_r+0x50>
  40726e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407272:	e7dd      	b.n	407230 <__smakebuf_r+0x4c>
  407274:	00406989 	.word	0x00406989

00407278 <malloc>:
  407278:	4b02      	ldr	r3, [pc, #8]	; (407284 <malloc+0xc>)
  40727a:	4601      	mov	r1, r0
  40727c:	6818      	ldr	r0, [r3, #0]
  40727e:	f000 b803 	b.w	407288 <_malloc_r>
  407282:	bf00      	nop
  407284:	2040003c 	.word	0x2040003c

00407288 <_malloc_r>:
  407288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40728c:	f101 060b 	add.w	r6, r1, #11
  407290:	2e16      	cmp	r6, #22
  407292:	b083      	sub	sp, #12
  407294:	4605      	mov	r5, r0
  407296:	f240 809e 	bls.w	4073d6 <_malloc_r+0x14e>
  40729a:	f036 0607 	bics.w	r6, r6, #7
  40729e:	f100 80bd 	bmi.w	40741c <_malloc_r+0x194>
  4072a2:	42b1      	cmp	r1, r6
  4072a4:	f200 80ba 	bhi.w	40741c <_malloc_r+0x194>
  4072a8:	f000 fb6e 	bl	407988 <__malloc_lock>
  4072ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4072b0:	f0c0 8293 	bcc.w	4077da <_malloc_r+0x552>
  4072b4:	0a73      	lsrs	r3, r6, #9
  4072b6:	f000 80b8 	beq.w	40742a <_malloc_r+0x1a2>
  4072ba:	2b04      	cmp	r3, #4
  4072bc:	f200 8179 	bhi.w	4075b2 <_malloc_r+0x32a>
  4072c0:	09b3      	lsrs	r3, r6, #6
  4072c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4072c6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4072ca:	00c3      	lsls	r3, r0, #3
  4072cc:	4fbf      	ldr	r7, [pc, #764]	; (4075cc <_malloc_r+0x344>)
  4072ce:	443b      	add	r3, r7
  4072d0:	f1a3 0108 	sub.w	r1, r3, #8
  4072d4:	685c      	ldr	r4, [r3, #4]
  4072d6:	42a1      	cmp	r1, r4
  4072d8:	d106      	bne.n	4072e8 <_malloc_r+0x60>
  4072da:	e00c      	b.n	4072f6 <_malloc_r+0x6e>
  4072dc:	2a00      	cmp	r2, #0
  4072de:	f280 80aa 	bge.w	407436 <_malloc_r+0x1ae>
  4072e2:	68e4      	ldr	r4, [r4, #12]
  4072e4:	42a1      	cmp	r1, r4
  4072e6:	d006      	beq.n	4072f6 <_malloc_r+0x6e>
  4072e8:	6863      	ldr	r3, [r4, #4]
  4072ea:	f023 0303 	bic.w	r3, r3, #3
  4072ee:	1b9a      	subs	r2, r3, r6
  4072f0:	2a0f      	cmp	r2, #15
  4072f2:	ddf3      	ble.n	4072dc <_malloc_r+0x54>
  4072f4:	4670      	mov	r0, lr
  4072f6:	693c      	ldr	r4, [r7, #16]
  4072f8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4075e0 <_malloc_r+0x358>
  4072fc:	4574      	cmp	r4, lr
  4072fe:	f000 81ab 	beq.w	407658 <_malloc_r+0x3d0>
  407302:	6863      	ldr	r3, [r4, #4]
  407304:	f023 0303 	bic.w	r3, r3, #3
  407308:	1b9a      	subs	r2, r3, r6
  40730a:	2a0f      	cmp	r2, #15
  40730c:	f300 8190 	bgt.w	407630 <_malloc_r+0x3a8>
  407310:	2a00      	cmp	r2, #0
  407312:	f8c7 e014 	str.w	lr, [r7, #20]
  407316:	f8c7 e010 	str.w	lr, [r7, #16]
  40731a:	f280 809d 	bge.w	407458 <_malloc_r+0x1d0>
  40731e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407322:	f080 8161 	bcs.w	4075e8 <_malloc_r+0x360>
  407326:	08db      	lsrs	r3, r3, #3
  407328:	f103 0c01 	add.w	ip, r3, #1
  40732c:	1099      	asrs	r1, r3, #2
  40732e:	687a      	ldr	r2, [r7, #4]
  407330:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407334:	f8c4 8008 	str.w	r8, [r4, #8]
  407338:	2301      	movs	r3, #1
  40733a:	408b      	lsls	r3, r1
  40733c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407340:	4313      	orrs	r3, r2
  407342:	3908      	subs	r1, #8
  407344:	60e1      	str	r1, [r4, #12]
  407346:	607b      	str	r3, [r7, #4]
  407348:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40734c:	f8c8 400c 	str.w	r4, [r8, #12]
  407350:	1082      	asrs	r2, r0, #2
  407352:	2401      	movs	r4, #1
  407354:	4094      	lsls	r4, r2
  407356:	429c      	cmp	r4, r3
  407358:	f200 808b 	bhi.w	407472 <_malloc_r+0x1ea>
  40735c:	421c      	tst	r4, r3
  40735e:	d106      	bne.n	40736e <_malloc_r+0xe6>
  407360:	f020 0003 	bic.w	r0, r0, #3
  407364:	0064      	lsls	r4, r4, #1
  407366:	421c      	tst	r4, r3
  407368:	f100 0004 	add.w	r0, r0, #4
  40736c:	d0fa      	beq.n	407364 <_malloc_r+0xdc>
  40736e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407372:	46cc      	mov	ip, r9
  407374:	4680      	mov	r8, r0
  407376:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40737a:	459c      	cmp	ip, r3
  40737c:	d107      	bne.n	40738e <_malloc_r+0x106>
  40737e:	e16d      	b.n	40765c <_malloc_r+0x3d4>
  407380:	2a00      	cmp	r2, #0
  407382:	f280 817b 	bge.w	40767c <_malloc_r+0x3f4>
  407386:	68db      	ldr	r3, [r3, #12]
  407388:	459c      	cmp	ip, r3
  40738a:	f000 8167 	beq.w	40765c <_malloc_r+0x3d4>
  40738e:	6859      	ldr	r1, [r3, #4]
  407390:	f021 0103 	bic.w	r1, r1, #3
  407394:	1b8a      	subs	r2, r1, r6
  407396:	2a0f      	cmp	r2, #15
  407398:	ddf2      	ble.n	407380 <_malloc_r+0xf8>
  40739a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40739e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4073a2:	9300      	str	r3, [sp, #0]
  4073a4:	199c      	adds	r4, r3, r6
  4073a6:	4628      	mov	r0, r5
  4073a8:	f046 0601 	orr.w	r6, r6, #1
  4073ac:	f042 0501 	orr.w	r5, r2, #1
  4073b0:	605e      	str	r6, [r3, #4]
  4073b2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4073b6:	f8cc 8008 	str.w	r8, [ip, #8]
  4073ba:	617c      	str	r4, [r7, #20]
  4073bc:	613c      	str	r4, [r7, #16]
  4073be:	f8c4 e00c 	str.w	lr, [r4, #12]
  4073c2:	f8c4 e008 	str.w	lr, [r4, #8]
  4073c6:	6065      	str	r5, [r4, #4]
  4073c8:	505a      	str	r2, [r3, r1]
  4073ca:	f000 fae3 	bl	407994 <__malloc_unlock>
  4073ce:	9b00      	ldr	r3, [sp, #0]
  4073d0:	f103 0408 	add.w	r4, r3, #8
  4073d4:	e01e      	b.n	407414 <_malloc_r+0x18c>
  4073d6:	2910      	cmp	r1, #16
  4073d8:	d820      	bhi.n	40741c <_malloc_r+0x194>
  4073da:	f000 fad5 	bl	407988 <__malloc_lock>
  4073de:	2610      	movs	r6, #16
  4073e0:	2318      	movs	r3, #24
  4073e2:	2002      	movs	r0, #2
  4073e4:	4f79      	ldr	r7, [pc, #484]	; (4075cc <_malloc_r+0x344>)
  4073e6:	443b      	add	r3, r7
  4073e8:	f1a3 0208 	sub.w	r2, r3, #8
  4073ec:	685c      	ldr	r4, [r3, #4]
  4073ee:	4294      	cmp	r4, r2
  4073f0:	f000 813d 	beq.w	40766e <_malloc_r+0x3e6>
  4073f4:	6863      	ldr	r3, [r4, #4]
  4073f6:	68e1      	ldr	r1, [r4, #12]
  4073f8:	68a6      	ldr	r6, [r4, #8]
  4073fa:	f023 0303 	bic.w	r3, r3, #3
  4073fe:	4423      	add	r3, r4
  407400:	4628      	mov	r0, r5
  407402:	685a      	ldr	r2, [r3, #4]
  407404:	60f1      	str	r1, [r6, #12]
  407406:	f042 0201 	orr.w	r2, r2, #1
  40740a:	608e      	str	r6, [r1, #8]
  40740c:	605a      	str	r2, [r3, #4]
  40740e:	f000 fac1 	bl	407994 <__malloc_unlock>
  407412:	3408      	adds	r4, #8
  407414:	4620      	mov	r0, r4
  407416:	b003      	add	sp, #12
  407418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40741c:	2400      	movs	r4, #0
  40741e:	230c      	movs	r3, #12
  407420:	4620      	mov	r0, r4
  407422:	602b      	str	r3, [r5, #0]
  407424:	b003      	add	sp, #12
  407426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40742a:	2040      	movs	r0, #64	; 0x40
  40742c:	f44f 7300 	mov.w	r3, #512	; 0x200
  407430:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407434:	e74a      	b.n	4072cc <_malloc_r+0x44>
  407436:	4423      	add	r3, r4
  407438:	68e1      	ldr	r1, [r4, #12]
  40743a:	685a      	ldr	r2, [r3, #4]
  40743c:	68a6      	ldr	r6, [r4, #8]
  40743e:	f042 0201 	orr.w	r2, r2, #1
  407442:	60f1      	str	r1, [r6, #12]
  407444:	4628      	mov	r0, r5
  407446:	608e      	str	r6, [r1, #8]
  407448:	605a      	str	r2, [r3, #4]
  40744a:	f000 faa3 	bl	407994 <__malloc_unlock>
  40744e:	3408      	adds	r4, #8
  407450:	4620      	mov	r0, r4
  407452:	b003      	add	sp, #12
  407454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407458:	4423      	add	r3, r4
  40745a:	4628      	mov	r0, r5
  40745c:	685a      	ldr	r2, [r3, #4]
  40745e:	f042 0201 	orr.w	r2, r2, #1
  407462:	605a      	str	r2, [r3, #4]
  407464:	f000 fa96 	bl	407994 <__malloc_unlock>
  407468:	3408      	adds	r4, #8
  40746a:	4620      	mov	r0, r4
  40746c:	b003      	add	sp, #12
  40746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407472:	68bc      	ldr	r4, [r7, #8]
  407474:	6863      	ldr	r3, [r4, #4]
  407476:	f023 0803 	bic.w	r8, r3, #3
  40747a:	45b0      	cmp	r8, r6
  40747c:	d304      	bcc.n	407488 <_malloc_r+0x200>
  40747e:	eba8 0306 	sub.w	r3, r8, r6
  407482:	2b0f      	cmp	r3, #15
  407484:	f300 8085 	bgt.w	407592 <_malloc_r+0x30a>
  407488:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4075e4 <_malloc_r+0x35c>
  40748c:	4b50      	ldr	r3, [pc, #320]	; (4075d0 <_malloc_r+0x348>)
  40748e:	f8d9 2000 	ldr.w	r2, [r9]
  407492:	681b      	ldr	r3, [r3, #0]
  407494:	3201      	adds	r2, #1
  407496:	4433      	add	r3, r6
  407498:	eb04 0a08 	add.w	sl, r4, r8
  40749c:	f000 8155 	beq.w	40774a <_malloc_r+0x4c2>
  4074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4074a4:	330f      	adds	r3, #15
  4074a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4074aa:	f02b 0b0f 	bic.w	fp, fp, #15
  4074ae:	4659      	mov	r1, fp
  4074b0:	4628      	mov	r0, r5
  4074b2:	f000 ff15 	bl	4082e0 <_sbrk_r>
  4074b6:	1c41      	adds	r1, r0, #1
  4074b8:	4602      	mov	r2, r0
  4074ba:	f000 80fc 	beq.w	4076b6 <_malloc_r+0x42e>
  4074be:	4582      	cmp	sl, r0
  4074c0:	f200 80f7 	bhi.w	4076b2 <_malloc_r+0x42a>
  4074c4:	4b43      	ldr	r3, [pc, #268]	; (4075d4 <_malloc_r+0x34c>)
  4074c6:	6819      	ldr	r1, [r3, #0]
  4074c8:	4459      	add	r1, fp
  4074ca:	6019      	str	r1, [r3, #0]
  4074cc:	f000 814d 	beq.w	40776a <_malloc_r+0x4e2>
  4074d0:	f8d9 0000 	ldr.w	r0, [r9]
  4074d4:	3001      	adds	r0, #1
  4074d6:	bf1b      	ittet	ne
  4074d8:	eba2 0a0a 	subne.w	sl, r2, sl
  4074dc:	4451      	addne	r1, sl
  4074de:	f8c9 2000 	streq.w	r2, [r9]
  4074e2:	6019      	strne	r1, [r3, #0]
  4074e4:	f012 0107 	ands.w	r1, r2, #7
  4074e8:	f000 8115 	beq.w	407716 <_malloc_r+0x48e>
  4074ec:	f1c1 0008 	rsb	r0, r1, #8
  4074f0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4074f4:	4402      	add	r2, r0
  4074f6:	3108      	adds	r1, #8
  4074f8:	eb02 090b 	add.w	r9, r2, fp
  4074fc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407500:	eba1 0909 	sub.w	r9, r1, r9
  407504:	4649      	mov	r1, r9
  407506:	4628      	mov	r0, r5
  407508:	9301      	str	r3, [sp, #4]
  40750a:	9200      	str	r2, [sp, #0]
  40750c:	f000 fee8 	bl	4082e0 <_sbrk_r>
  407510:	1c43      	adds	r3, r0, #1
  407512:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407516:	f000 8143 	beq.w	4077a0 <_malloc_r+0x518>
  40751a:	1a80      	subs	r0, r0, r2
  40751c:	4448      	add	r0, r9
  40751e:	f040 0001 	orr.w	r0, r0, #1
  407522:	6819      	ldr	r1, [r3, #0]
  407524:	60ba      	str	r2, [r7, #8]
  407526:	4449      	add	r1, r9
  407528:	42bc      	cmp	r4, r7
  40752a:	6050      	str	r0, [r2, #4]
  40752c:	6019      	str	r1, [r3, #0]
  40752e:	d017      	beq.n	407560 <_malloc_r+0x2d8>
  407530:	f1b8 0f0f 	cmp.w	r8, #15
  407534:	f240 80fb 	bls.w	40772e <_malloc_r+0x4a6>
  407538:	6860      	ldr	r0, [r4, #4]
  40753a:	f1a8 020c 	sub.w	r2, r8, #12
  40753e:	f022 0207 	bic.w	r2, r2, #7
  407542:	eb04 0e02 	add.w	lr, r4, r2
  407546:	f000 0001 	and.w	r0, r0, #1
  40754a:	f04f 0c05 	mov.w	ip, #5
  40754e:	4310      	orrs	r0, r2
  407550:	2a0f      	cmp	r2, #15
  407552:	6060      	str	r0, [r4, #4]
  407554:	f8ce c004 	str.w	ip, [lr, #4]
  407558:	f8ce c008 	str.w	ip, [lr, #8]
  40755c:	f200 8117 	bhi.w	40778e <_malloc_r+0x506>
  407560:	4b1d      	ldr	r3, [pc, #116]	; (4075d8 <_malloc_r+0x350>)
  407562:	68bc      	ldr	r4, [r7, #8]
  407564:	681a      	ldr	r2, [r3, #0]
  407566:	4291      	cmp	r1, r2
  407568:	bf88      	it	hi
  40756a:	6019      	strhi	r1, [r3, #0]
  40756c:	4b1b      	ldr	r3, [pc, #108]	; (4075dc <_malloc_r+0x354>)
  40756e:	681a      	ldr	r2, [r3, #0]
  407570:	4291      	cmp	r1, r2
  407572:	6862      	ldr	r2, [r4, #4]
  407574:	bf88      	it	hi
  407576:	6019      	strhi	r1, [r3, #0]
  407578:	f022 0203 	bic.w	r2, r2, #3
  40757c:	4296      	cmp	r6, r2
  40757e:	eba2 0306 	sub.w	r3, r2, r6
  407582:	d801      	bhi.n	407588 <_malloc_r+0x300>
  407584:	2b0f      	cmp	r3, #15
  407586:	dc04      	bgt.n	407592 <_malloc_r+0x30a>
  407588:	4628      	mov	r0, r5
  40758a:	f000 fa03 	bl	407994 <__malloc_unlock>
  40758e:	2400      	movs	r4, #0
  407590:	e740      	b.n	407414 <_malloc_r+0x18c>
  407592:	19a2      	adds	r2, r4, r6
  407594:	f043 0301 	orr.w	r3, r3, #1
  407598:	f046 0601 	orr.w	r6, r6, #1
  40759c:	6066      	str	r6, [r4, #4]
  40759e:	4628      	mov	r0, r5
  4075a0:	60ba      	str	r2, [r7, #8]
  4075a2:	6053      	str	r3, [r2, #4]
  4075a4:	f000 f9f6 	bl	407994 <__malloc_unlock>
  4075a8:	3408      	adds	r4, #8
  4075aa:	4620      	mov	r0, r4
  4075ac:	b003      	add	sp, #12
  4075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075b2:	2b14      	cmp	r3, #20
  4075b4:	d971      	bls.n	40769a <_malloc_r+0x412>
  4075b6:	2b54      	cmp	r3, #84	; 0x54
  4075b8:	f200 80a3 	bhi.w	407702 <_malloc_r+0x47a>
  4075bc:	0b33      	lsrs	r3, r6, #12
  4075be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4075c2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4075c6:	00c3      	lsls	r3, r0, #3
  4075c8:	e680      	b.n	4072cc <_malloc_r+0x44>
  4075ca:	bf00      	nop
  4075cc:	204005d8 	.word	0x204005d8
  4075d0:	204072e4 	.word	0x204072e4
  4075d4:	204072b4 	.word	0x204072b4
  4075d8:	204072dc 	.word	0x204072dc
  4075dc:	204072e0 	.word	0x204072e0
  4075e0:	204005e0 	.word	0x204005e0
  4075e4:	204009e0 	.word	0x204009e0
  4075e8:	0a5a      	lsrs	r2, r3, #9
  4075ea:	2a04      	cmp	r2, #4
  4075ec:	d95b      	bls.n	4076a6 <_malloc_r+0x41e>
  4075ee:	2a14      	cmp	r2, #20
  4075f0:	f200 80ae 	bhi.w	407750 <_malloc_r+0x4c8>
  4075f4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4075f8:	00c9      	lsls	r1, r1, #3
  4075fa:	325b      	adds	r2, #91	; 0x5b
  4075fc:	eb07 0c01 	add.w	ip, r7, r1
  407600:	5879      	ldr	r1, [r7, r1]
  407602:	f1ac 0c08 	sub.w	ip, ip, #8
  407606:	458c      	cmp	ip, r1
  407608:	f000 8088 	beq.w	40771c <_malloc_r+0x494>
  40760c:	684a      	ldr	r2, [r1, #4]
  40760e:	f022 0203 	bic.w	r2, r2, #3
  407612:	4293      	cmp	r3, r2
  407614:	d273      	bcs.n	4076fe <_malloc_r+0x476>
  407616:	6889      	ldr	r1, [r1, #8]
  407618:	458c      	cmp	ip, r1
  40761a:	d1f7      	bne.n	40760c <_malloc_r+0x384>
  40761c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  407620:	687b      	ldr	r3, [r7, #4]
  407622:	60e2      	str	r2, [r4, #12]
  407624:	f8c4 c008 	str.w	ip, [r4, #8]
  407628:	6094      	str	r4, [r2, #8]
  40762a:	f8cc 400c 	str.w	r4, [ip, #12]
  40762e:	e68f      	b.n	407350 <_malloc_r+0xc8>
  407630:	19a1      	adds	r1, r4, r6
  407632:	f046 0c01 	orr.w	ip, r6, #1
  407636:	f042 0601 	orr.w	r6, r2, #1
  40763a:	f8c4 c004 	str.w	ip, [r4, #4]
  40763e:	4628      	mov	r0, r5
  407640:	6179      	str	r1, [r7, #20]
  407642:	6139      	str	r1, [r7, #16]
  407644:	f8c1 e00c 	str.w	lr, [r1, #12]
  407648:	f8c1 e008 	str.w	lr, [r1, #8]
  40764c:	604e      	str	r6, [r1, #4]
  40764e:	50e2      	str	r2, [r4, r3]
  407650:	f000 f9a0 	bl	407994 <__malloc_unlock>
  407654:	3408      	adds	r4, #8
  407656:	e6dd      	b.n	407414 <_malloc_r+0x18c>
  407658:	687b      	ldr	r3, [r7, #4]
  40765a:	e679      	b.n	407350 <_malloc_r+0xc8>
  40765c:	f108 0801 	add.w	r8, r8, #1
  407660:	f018 0f03 	tst.w	r8, #3
  407664:	f10c 0c08 	add.w	ip, ip, #8
  407668:	f47f ae85 	bne.w	407376 <_malloc_r+0xee>
  40766c:	e02d      	b.n	4076ca <_malloc_r+0x442>
  40766e:	68dc      	ldr	r4, [r3, #12]
  407670:	42a3      	cmp	r3, r4
  407672:	bf08      	it	eq
  407674:	3002      	addeq	r0, #2
  407676:	f43f ae3e 	beq.w	4072f6 <_malloc_r+0x6e>
  40767a:	e6bb      	b.n	4073f4 <_malloc_r+0x16c>
  40767c:	4419      	add	r1, r3
  40767e:	461c      	mov	r4, r3
  407680:	684a      	ldr	r2, [r1, #4]
  407682:	68db      	ldr	r3, [r3, #12]
  407684:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407688:	f042 0201 	orr.w	r2, r2, #1
  40768c:	604a      	str	r2, [r1, #4]
  40768e:	4628      	mov	r0, r5
  407690:	60f3      	str	r3, [r6, #12]
  407692:	609e      	str	r6, [r3, #8]
  407694:	f000 f97e 	bl	407994 <__malloc_unlock>
  407698:	e6bc      	b.n	407414 <_malloc_r+0x18c>
  40769a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40769e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4076a2:	00c3      	lsls	r3, r0, #3
  4076a4:	e612      	b.n	4072cc <_malloc_r+0x44>
  4076a6:	099a      	lsrs	r2, r3, #6
  4076a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4076ac:	00c9      	lsls	r1, r1, #3
  4076ae:	3238      	adds	r2, #56	; 0x38
  4076b0:	e7a4      	b.n	4075fc <_malloc_r+0x374>
  4076b2:	42bc      	cmp	r4, r7
  4076b4:	d054      	beq.n	407760 <_malloc_r+0x4d8>
  4076b6:	68bc      	ldr	r4, [r7, #8]
  4076b8:	6862      	ldr	r2, [r4, #4]
  4076ba:	f022 0203 	bic.w	r2, r2, #3
  4076be:	e75d      	b.n	40757c <_malloc_r+0x2f4>
  4076c0:	f859 3908 	ldr.w	r3, [r9], #-8
  4076c4:	4599      	cmp	r9, r3
  4076c6:	f040 8086 	bne.w	4077d6 <_malloc_r+0x54e>
  4076ca:	f010 0f03 	tst.w	r0, #3
  4076ce:	f100 30ff 	add.w	r0, r0, #4294967295
  4076d2:	d1f5      	bne.n	4076c0 <_malloc_r+0x438>
  4076d4:	687b      	ldr	r3, [r7, #4]
  4076d6:	ea23 0304 	bic.w	r3, r3, r4
  4076da:	607b      	str	r3, [r7, #4]
  4076dc:	0064      	lsls	r4, r4, #1
  4076de:	429c      	cmp	r4, r3
  4076e0:	f63f aec7 	bhi.w	407472 <_malloc_r+0x1ea>
  4076e4:	2c00      	cmp	r4, #0
  4076e6:	f43f aec4 	beq.w	407472 <_malloc_r+0x1ea>
  4076ea:	421c      	tst	r4, r3
  4076ec:	4640      	mov	r0, r8
  4076ee:	f47f ae3e 	bne.w	40736e <_malloc_r+0xe6>
  4076f2:	0064      	lsls	r4, r4, #1
  4076f4:	421c      	tst	r4, r3
  4076f6:	f100 0004 	add.w	r0, r0, #4
  4076fa:	d0fa      	beq.n	4076f2 <_malloc_r+0x46a>
  4076fc:	e637      	b.n	40736e <_malloc_r+0xe6>
  4076fe:	468c      	mov	ip, r1
  407700:	e78c      	b.n	40761c <_malloc_r+0x394>
  407702:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407706:	d815      	bhi.n	407734 <_malloc_r+0x4ac>
  407708:	0bf3      	lsrs	r3, r6, #15
  40770a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40770e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407712:	00c3      	lsls	r3, r0, #3
  407714:	e5da      	b.n	4072cc <_malloc_r+0x44>
  407716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40771a:	e6ed      	b.n	4074f8 <_malloc_r+0x270>
  40771c:	687b      	ldr	r3, [r7, #4]
  40771e:	1092      	asrs	r2, r2, #2
  407720:	2101      	movs	r1, #1
  407722:	fa01 f202 	lsl.w	r2, r1, r2
  407726:	4313      	orrs	r3, r2
  407728:	607b      	str	r3, [r7, #4]
  40772a:	4662      	mov	r2, ip
  40772c:	e779      	b.n	407622 <_malloc_r+0x39a>
  40772e:	2301      	movs	r3, #1
  407730:	6053      	str	r3, [r2, #4]
  407732:	e729      	b.n	407588 <_malloc_r+0x300>
  407734:	f240 5254 	movw	r2, #1364	; 0x554
  407738:	4293      	cmp	r3, r2
  40773a:	d822      	bhi.n	407782 <_malloc_r+0x4fa>
  40773c:	0cb3      	lsrs	r3, r6, #18
  40773e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407742:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407746:	00c3      	lsls	r3, r0, #3
  407748:	e5c0      	b.n	4072cc <_malloc_r+0x44>
  40774a:	f103 0b10 	add.w	fp, r3, #16
  40774e:	e6ae      	b.n	4074ae <_malloc_r+0x226>
  407750:	2a54      	cmp	r2, #84	; 0x54
  407752:	d829      	bhi.n	4077a8 <_malloc_r+0x520>
  407754:	0b1a      	lsrs	r2, r3, #12
  407756:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40775a:	00c9      	lsls	r1, r1, #3
  40775c:	326e      	adds	r2, #110	; 0x6e
  40775e:	e74d      	b.n	4075fc <_malloc_r+0x374>
  407760:	4b20      	ldr	r3, [pc, #128]	; (4077e4 <_malloc_r+0x55c>)
  407762:	6819      	ldr	r1, [r3, #0]
  407764:	4459      	add	r1, fp
  407766:	6019      	str	r1, [r3, #0]
  407768:	e6b2      	b.n	4074d0 <_malloc_r+0x248>
  40776a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40776e:	2800      	cmp	r0, #0
  407770:	f47f aeae 	bne.w	4074d0 <_malloc_r+0x248>
  407774:	eb08 030b 	add.w	r3, r8, fp
  407778:	68ba      	ldr	r2, [r7, #8]
  40777a:	f043 0301 	orr.w	r3, r3, #1
  40777e:	6053      	str	r3, [r2, #4]
  407780:	e6ee      	b.n	407560 <_malloc_r+0x2d8>
  407782:	207f      	movs	r0, #127	; 0x7f
  407784:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407788:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40778c:	e59e      	b.n	4072cc <_malloc_r+0x44>
  40778e:	f104 0108 	add.w	r1, r4, #8
  407792:	4628      	mov	r0, r5
  407794:	9300      	str	r3, [sp, #0]
  407796:	f7ff fa4b 	bl	406c30 <_free_r>
  40779a:	9b00      	ldr	r3, [sp, #0]
  40779c:	6819      	ldr	r1, [r3, #0]
  40779e:	e6df      	b.n	407560 <_malloc_r+0x2d8>
  4077a0:	2001      	movs	r0, #1
  4077a2:	f04f 0900 	mov.w	r9, #0
  4077a6:	e6bc      	b.n	407522 <_malloc_r+0x29a>
  4077a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4077ac:	d805      	bhi.n	4077ba <_malloc_r+0x532>
  4077ae:	0bda      	lsrs	r2, r3, #15
  4077b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4077b4:	00c9      	lsls	r1, r1, #3
  4077b6:	3277      	adds	r2, #119	; 0x77
  4077b8:	e720      	b.n	4075fc <_malloc_r+0x374>
  4077ba:	f240 5154 	movw	r1, #1364	; 0x554
  4077be:	428a      	cmp	r2, r1
  4077c0:	d805      	bhi.n	4077ce <_malloc_r+0x546>
  4077c2:	0c9a      	lsrs	r2, r3, #18
  4077c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4077c8:	00c9      	lsls	r1, r1, #3
  4077ca:	327c      	adds	r2, #124	; 0x7c
  4077cc:	e716      	b.n	4075fc <_malloc_r+0x374>
  4077ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4077d2:	227e      	movs	r2, #126	; 0x7e
  4077d4:	e712      	b.n	4075fc <_malloc_r+0x374>
  4077d6:	687b      	ldr	r3, [r7, #4]
  4077d8:	e780      	b.n	4076dc <_malloc_r+0x454>
  4077da:	08f0      	lsrs	r0, r6, #3
  4077dc:	f106 0308 	add.w	r3, r6, #8
  4077e0:	e600      	b.n	4073e4 <_malloc_r+0x15c>
  4077e2:	bf00      	nop
  4077e4:	204072b4 	.word	0x204072b4

004077e8 <__ascii_mbtowc>:
  4077e8:	b082      	sub	sp, #8
  4077ea:	b149      	cbz	r1, 407800 <__ascii_mbtowc+0x18>
  4077ec:	b15a      	cbz	r2, 407806 <__ascii_mbtowc+0x1e>
  4077ee:	b16b      	cbz	r3, 40780c <__ascii_mbtowc+0x24>
  4077f0:	7813      	ldrb	r3, [r2, #0]
  4077f2:	600b      	str	r3, [r1, #0]
  4077f4:	7812      	ldrb	r2, [r2, #0]
  4077f6:	1c10      	adds	r0, r2, #0
  4077f8:	bf18      	it	ne
  4077fa:	2001      	movne	r0, #1
  4077fc:	b002      	add	sp, #8
  4077fe:	4770      	bx	lr
  407800:	a901      	add	r1, sp, #4
  407802:	2a00      	cmp	r2, #0
  407804:	d1f3      	bne.n	4077ee <__ascii_mbtowc+0x6>
  407806:	4610      	mov	r0, r2
  407808:	b002      	add	sp, #8
  40780a:	4770      	bx	lr
  40780c:	f06f 0001 	mvn.w	r0, #1
  407810:	e7f4      	b.n	4077fc <__ascii_mbtowc+0x14>
  407812:	bf00      	nop
	...

00407820 <memchr>:
  407820:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407824:	2a10      	cmp	r2, #16
  407826:	db2b      	blt.n	407880 <memchr+0x60>
  407828:	f010 0f07 	tst.w	r0, #7
  40782c:	d008      	beq.n	407840 <memchr+0x20>
  40782e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407832:	3a01      	subs	r2, #1
  407834:	428b      	cmp	r3, r1
  407836:	d02d      	beq.n	407894 <memchr+0x74>
  407838:	f010 0f07 	tst.w	r0, #7
  40783c:	b342      	cbz	r2, 407890 <memchr+0x70>
  40783e:	d1f6      	bne.n	40782e <memchr+0xe>
  407840:	b4f0      	push	{r4, r5, r6, r7}
  407842:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407846:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40784a:	f022 0407 	bic.w	r4, r2, #7
  40784e:	f07f 0700 	mvns.w	r7, #0
  407852:	2300      	movs	r3, #0
  407854:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407858:	3c08      	subs	r4, #8
  40785a:	ea85 0501 	eor.w	r5, r5, r1
  40785e:	ea86 0601 	eor.w	r6, r6, r1
  407862:	fa85 f547 	uadd8	r5, r5, r7
  407866:	faa3 f587 	sel	r5, r3, r7
  40786a:	fa86 f647 	uadd8	r6, r6, r7
  40786e:	faa5 f687 	sel	r6, r5, r7
  407872:	b98e      	cbnz	r6, 407898 <memchr+0x78>
  407874:	d1ee      	bne.n	407854 <memchr+0x34>
  407876:	bcf0      	pop	{r4, r5, r6, r7}
  407878:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40787c:	f002 0207 	and.w	r2, r2, #7
  407880:	b132      	cbz	r2, 407890 <memchr+0x70>
  407882:	f810 3b01 	ldrb.w	r3, [r0], #1
  407886:	3a01      	subs	r2, #1
  407888:	ea83 0301 	eor.w	r3, r3, r1
  40788c:	b113      	cbz	r3, 407894 <memchr+0x74>
  40788e:	d1f8      	bne.n	407882 <memchr+0x62>
  407890:	2000      	movs	r0, #0
  407892:	4770      	bx	lr
  407894:	3801      	subs	r0, #1
  407896:	4770      	bx	lr
  407898:	2d00      	cmp	r5, #0
  40789a:	bf06      	itte	eq
  40789c:	4635      	moveq	r5, r6
  40789e:	3803      	subeq	r0, #3
  4078a0:	3807      	subne	r0, #7
  4078a2:	f015 0f01 	tst.w	r5, #1
  4078a6:	d107      	bne.n	4078b8 <memchr+0x98>
  4078a8:	3001      	adds	r0, #1
  4078aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4078ae:	bf02      	ittt	eq
  4078b0:	3001      	addeq	r0, #1
  4078b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4078b6:	3001      	addeq	r0, #1
  4078b8:	bcf0      	pop	{r4, r5, r6, r7}
  4078ba:	3801      	subs	r0, #1
  4078bc:	4770      	bx	lr
  4078be:	bf00      	nop

004078c0 <memmove>:
  4078c0:	4288      	cmp	r0, r1
  4078c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4078c4:	d90d      	bls.n	4078e2 <memmove+0x22>
  4078c6:	188b      	adds	r3, r1, r2
  4078c8:	4298      	cmp	r0, r3
  4078ca:	d20a      	bcs.n	4078e2 <memmove+0x22>
  4078cc:	1884      	adds	r4, r0, r2
  4078ce:	2a00      	cmp	r2, #0
  4078d0:	d051      	beq.n	407976 <memmove+0xb6>
  4078d2:	4622      	mov	r2, r4
  4078d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4078d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4078dc:	4299      	cmp	r1, r3
  4078de:	d1f9      	bne.n	4078d4 <memmove+0x14>
  4078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4078e2:	2a0f      	cmp	r2, #15
  4078e4:	d948      	bls.n	407978 <memmove+0xb8>
  4078e6:	ea41 0300 	orr.w	r3, r1, r0
  4078ea:	079b      	lsls	r3, r3, #30
  4078ec:	d146      	bne.n	40797c <memmove+0xbc>
  4078ee:	f100 0410 	add.w	r4, r0, #16
  4078f2:	f101 0310 	add.w	r3, r1, #16
  4078f6:	4615      	mov	r5, r2
  4078f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4078fc:	f844 6c10 	str.w	r6, [r4, #-16]
  407900:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407904:	f844 6c0c 	str.w	r6, [r4, #-12]
  407908:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40790c:	f844 6c08 	str.w	r6, [r4, #-8]
  407910:	3d10      	subs	r5, #16
  407912:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407916:	f844 6c04 	str.w	r6, [r4, #-4]
  40791a:	2d0f      	cmp	r5, #15
  40791c:	f103 0310 	add.w	r3, r3, #16
  407920:	f104 0410 	add.w	r4, r4, #16
  407924:	d8e8      	bhi.n	4078f8 <memmove+0x38>
  407926:	f1a2 0310 	sub.w	r3, r2, #16
  40792a:	f023 030f 	bic.w	r3, r3, #15
  40792e:	f002 0e0f 	and.w	lr, r2, #15
  407932:	3310      	adds	r3, #16
  407934:	f1be 0f03 	cmp.w	lr, #3
  407938:	4419      	add	r1, r3
  40793a:	4403      	add	r3, r0
  40793c:	d921      	bls.n	407982 <memmove+0xc2>
  40793e:	1f1e      	subs	r6, r3, #4
  407940:	460d      	mov	r5, r1
  407942:	4674      	mov	r4, lr
  407944:	3c04      	subs	r4, #4
  407946:	f855 7b04 	ldr.w	r7, [r5], #4
  40794a:	f846 7f04 	str.w	r7, [r6, #4]!
  40794e:	2c03      	cmp	r4, #3
  407950:	d8f8      	bhi.n	407944 <memmove+0x84>
  407952:	f1ae 0404 	sub.w	r4, lr, #4
  407956:	f024 0403 	bic.w	r4, r4, #3
  40795a:	3404      	adds	r4, #4
  40795c:	4421      	add	r1, r4
  40795e:	4423      	add	r3, r4
  407960:	f002 0203 	and.w	r2, r2, #3
  407964:	b162      	cbz	r2, 407980 <memmove+0xc0>
  407966:	3b01      	subs	r3, #1
  407968:	440a      	add	r2, r1
  40796a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40796e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407972:	428a      	cmp	r2, r1
  407974:	d1f9      	bne.n	40796a <memmove+0xaa>
  407976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407978:	4603      	mov	r3, r0
  40797a:	e7f3      	b.n	407964 <memmove+0xa4>
  40797c:	4603      	mov	r3, r0
  40797e:	e7f2      	b.n	407966 <memmove+0xa6>
  407980:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407982:	4672      	mov	r2, lr
  407984:	e7ee      	b.n	407964 <memmove+0xa4>
  407986:	bf00      	nop

00407988 <__malloc_lock>:
  407988:	4801      	ldr	r0, [pc, #4]	; (407990 <__malloc_lock+0x8>)
  40798a:	f7ff bbf9 	b.w	407180 <__retarget_lock_acquire_recursive>
  40798e:	bf00      	nop
  407990:	204084fc 	.word	0x204084fc

00407994 <__malloc_unlock>:
  407994:	4801      	ldr	r0, [pc, #4]	; (40799c <__malloc_unlock+0x8>)
  407996:	f7ff bbf5 	b.w	407184 <__retarget_lock_release_recursive>
  40799a:	bf00      	nop
  40799c:	204084fc 	.word	0x204084fc

004079a0 <_Balloc>:
  4079a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4079a2:	b570      	push	{r4, r5, r6, lr}
  4079a4:	4605      	mov	r5, r0
  4079a6:	460c      	mov	r4, r1
  4079a8:	b14b      	cbz	r3, 4079be <_Balloc+0x1e>
  4079aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4079ae:	b180      	cbz	r0, 4079d2 <_Balloc+0x32>
  4079b0:	6802      	ldr	r2, [r0, #0]
  4079b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4079b6:	2300      	movs	r3, #0
  4079b8:	6103      	str	r3, [r0, #16]
  4079ba:	60c3      	str	r3, [r0, #12]
  4079bc:	bd70      	pop	{r4, r5, r6, pc}
  4079be:	2221      	movs	r2, #33	; 0x21
  4079c0:	2104      	movs	r1, #4
  4079c2:	f000 fe69 	bl	408698 <_calloc_r>
  4079c6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4079c8:	4603      	mov	r3, r0
  4079ca:	2800      	cmp	r0, #0
  4079cc:	d1ed      	bne.n	4079aa <_Balloc+0xa>
  4079ce:	2000      	movs	r0, #0
  4079d0:	bd70      	pop	{r4, r5, r6, pc}
  4079d2:	2101      	movs	r1, #1
  4079d4:	fa01 f604 	lsl.w	r6, r1, r4
  4079d8:	1d72      	adds	r2, r6, #5
  4079da:	4628      	mov	r0, r5
  4079dc:	0092      	lsls	r2, r2, #2
  4079de:	f000 fe5b 	bl	408698 <_calloc_r>
  4079e2:	2800      	cmp	r0, #0
  4079e4:	d0f3      	beq.n	4079ce <_Balloc+0x2e>
  4079e6:	6044      	str	r4, [r0, #4]
  4079e8:	6086      	str	r6, [r0, #8]
  4079ea:	e7e4      	b.n	4079b6 <_Balloc+0x16>

004079ec <_Bfree>:
  4079ec:	b131      	cbz	r1, 4079fc <_Bfree+0x10>
  4079ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4079f0:	684a      	ldr	r2, [r1, #4]
  4079f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4079f6:	6008      	str	r0, [r1, #0]
  4079f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4079fc:	4770      	bx	lr
  4079fe:	bf00      	nop

00407a00 <__multadd>:
  407a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a02:	690c      	ldr	r4, [r1, #16]
  407a04:	b083      	sub	sp, #12
  407a06:	460d      	mov	r5, r1
  407a08:	4606      	mov	r6, r0
  407a0a:	f101 0e14 	add.w	lr, r1, #20
  407a0e:	2700      	movs	r7, #0
  407a10:	f8de 0000 	ldr.w	r0, [lr]
  407a14:	b281      	uxth	r1, r0
  407a16:	fb02 3301 	mla	r3, r2, r1, r3
  407a1a:	0c01      	lsrs	r1, r0, #16
  407a1c:	0c18      	lsrs	r0, r3, #16
  407a1e:	fb02 0101 	mla	r1, r2, r1, r0
  407a22:	b29b      	uxth	r3, r3
  407a24:	3701      	adds	r7, #1
  407a26:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407a2a:	42bc      	cmp	r4, r7
  407a2c:	f84e 3b04 	str.w	r3, [lr], #4
  407a30:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407a34:	dcec      	bgt.n	407a10 <__multadd+0x10>
  407a36:	b13b      	cbz	r3, 407a48 <__multadd+0x48>
  407a38:	68aa      	ldr	r2, [r5, #8]
  407a3a:	4294      	cmp	r4, r2
  407a3c:	da07      	bge.n	407a4e <__multadd+0x4e>
  407a3e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407a42:	3401      	adds	r4, #1
  407a44:	6153      	str	r3, [r2, #20]
  407a46:	612c      	str	r4, [r5, #16]
  407a48:	4628      	mov	r0, r5
  407a4a:	b003      	add	sp, #12
  407a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a4e:	6869      	ldr	r1, [r5, #4]
  407a50:	9301      	str	r3, [sp, #4]
  407a52:	3101      	adds	r1, #1
  407a54:	4630      	mov	r0, r6
  407a56:	f7ff ffa3 	bl	4079a0 <_Balloc>
  407a5a:	692a      	ldr	r2, [r5, #16]
  407a5c:	3202      	adds	r2, #2
  407a5e:	f105 010c 	add.w	r1, r5, #12
  407a62:	4607      	mov	r7, r0
  407a64:	0092      	lsls	r2, r2, #2
  407a66:	300c      	adds	r0, #12
  407a68:	f7fb fae2 	bl	403030 <memcpy>
  407a6c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407a6e:	6869      	ldr	r1, [r5, #4]
  407a70:	9b01      	ldr	r3, [sp, #4]
  407a72:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407a76:	6028      	str	r0, [r5, #0]
  407a78:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407a7c:	463d      	mov	r5, r7
  407a7e:	e7de      	b.n	407a3e <__multadd+0x3e>

00407a80 <__hi0bits>:
  407a80:	0c02      	lsrs	r2, r0, #16
  407a82:	0412      	lsls	r2, r2, #16
  407a84:	4603      	mov	r3, r0
  407a86:	b9b2      	cbnz	r2, 407ab6 <__hi0bits+0x36>
  407a88:	0403      	lsls	r3, r0, #16
  407a8a:	2010      	movs	r0, #16
  407a8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407a90:	bf04      	itt	eq
  407a92:	021b      	lsleq	r3, r3, #8
  407a94:	3008      	addeq	r0, #8
  407a96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407a9a:	bf04      	itt	eq
  407a9c:	011b      	lsleq	r3, r3, #4
  407a9e:	3004      	addeq	r0, #4
  407aa0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407aa4:	bf04      	itt	eq
  407aa6:	009b      	lsleq	r3, r3, #2
  407aa8:	3002      	addeq	r0, #2
  407aaa:	2b00      	cmp	r3, #0
  407aac:	db02      	blt.n	407ab4 <__hi0bits+0x34>
  407aae:	005b      	lsls	r3, r3, #1
  407ab0:	d403      	bmi.n	407aba <__hi0bits+0x3a>
  407ab2:	2020      	movs	r0, #32
  407ab4:	4770      	bx	lr
  407ab6:	2000      	movs	r0, #0
  407ab8:	e7e8      	b.n	407a8c <__hi0bits+0xc>
  407aba:	3001      	adds	r0, #1
  407abc:	4770      	bx	lr
  407abe:	bf00      	nop

00407ac0 <__lo0bits>:
  407ac0:	6803      	ldr	r3, [r0, #0]
  407ac2:	f013 0207 	ands.w	r2, r3, #7
  407ac6:	4601      	mov	r1, r0
  407ac8:	d007      	beq.n	407ada <__lo0bits+0x1a>
  407aca:	07da      	lsls	r2, r3, #31
  407acc:	d421      	bmi.n	407b12 <__lo0bits+0x52>
  407ace:	0798      	lsls	r0, r3, #30
  407ad0:	d421      	bmi.n	407b16 <__lo0bits+0x56>
  407ad2:	089b      	lsrs	r3, r3, #2
  407ad4:	600b      	str	r3, [r1, #0]
  407ad6:	2002      	movs	r0, #2
  407ad8:	4770      	bx	lr
  407ada:	b298      	uxth	r0, r3
  407adc:	b198      	cbz	r0, 407b06 <__lo0bits+0x46>
  407ade:	4610      	mov	r0, r2
  407ae0:	f013 0fff 	tst.w	r3, #255	; 0xff
  407ae4:	bf04      	itt	eq
  407ae6:	0a1b      	lsreq	r3, r3, #8
  407ae8:	3008      	addeq	r0, #8
  407aea:	071a      	lsls	r2, r3, #28
  407aec:	bf04      	itt	eq
  407aee:	091b      	lsreq	r3, r3, #4
  407af0:	3004      	addeq	r0, #4
  407af2:	079a      	lsls	r2, r3, #30
  407af4:	bf04      	itt	eq
  407af6:	089b      	lsreq	r3, r3, #2
  407af8:	3002      	addeq	r0, #2
  407afa:	07da      	lsls	r2, r3, #31
  407afc:	d407      	bmi.n	407b0e <__lo0bits+0x4e>
  407afe:	085b      	lsrs	r3, r3, #1
  407b00:	d104      	bne.n	407b0c <__lo0bits+0x4c>
  407b02:	2020      	movs	r0, #32
  407b04:	4770      	bx	lr
  407b06:	0c1b      	lsrs	r3, r3, #16
  407b08:	2010      	movs	r0, #16
  407b0a:	e7e9      	b.n	407ae0 <__lo0bits+0x20>
  407b0c:	3001      	adds	r0, #1
  407b0e:	600b      	str	r3, [r1, #0]
  407b10:	4770      	bx	lr
  407b12:	2000      	movs	r0, #0
  407b14:	4770      	bx	lr
  407b16:	085b      	lsrs	r3, r3, #1
  407b18:	600b      	str	r3, [r1, #0]
  407b1a:	2001      	movs	r0, #1
  407b1c:	4770      	bx	lr
  407b1e:	bf00      	nop

00407b20 <__i2b>:
  407b20:	b510      	push	{r4, lr}
  407b22:	460c      	mov	r4, r1
  407b24:	2101      	movs	r1, #1
  407b26:	f7ff ff3b 	bl	4079a0 <_Balloc>
  407b2a:	2201      	movs	r2, #1
  407b2c:	6144      	str	r4, [r0, #20]
  407b2e:	6102      	str	r2, [r0, #16]
  407b30:	bd10      	pop	{r4, pc}
  407b32:	bf00      	nop

00407b34 <__multiply>:
  407b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b38:	690c      	ldr	r4, [r1, #16]
  407b3a:	6915      	ldr	r5, [r2, #16]
  407b3c:	42ac      	cmp	r4, r5
  407b3e:	b083      	sub	sp, #12
  407b40:	468b      	mov	fp, r1
  407b42:	4616      	mov	r6, r2
  407b44:	da04      	bge.n	407b50 <__multiply+0x1c>
  407b46:	4622      	mov	r2, r4
  407b48:	46b3      	mov	fp, r6
  407b4a:	462c      	mov	r4, r5
  407b4c:	460e      	mov	r6, r1
  407b4e:	4615      	mov	r5, r2
  407b50:	f8db 3008 	ldr.w	r3, [fp, #8]
  407b54:	f8db 1004 	ldr.w	r1, [fp, #4]
  407b58:	eb04 0805 	add.w	r8, r4, r5
  407b5c:	4598      	cmp	r8, r3
  407b5e:	bfc8      	it	gt
  407b60:	3101      	addgt	r1, #1
  407b62:	f7ff ff1d 	bl	4079a0 <_Balloc>
  407b66:	f100 0914 	add.w	r9, r0, #20
  407b6a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407b6e:	45d1      	cmp	r9, sl
  407b70:	9000      	str	r0, [sp, #0]
  407b72:	d205      	bcs.n	407b80 <__multiply+0x4c>
  407b74:	464b      	mov	r3, r9
  407b76:	2100      	movs	r1, #0
  407b78:	f843 1b04 	str.w	r1, [r3], #4
  407b7c:	459a      	cmp	sl, r3
  407b7e:	d8fb      	bhi.n	407b78 <__multiply+0x44>
  407b80:	f106 0c14 	add.w	ip, r6, #20
  407b84:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407b88:	f10b 0b14 	add.w	fp, fp, #20
  407b8c:	459c      	cmp	ip, r3
  407b8e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407b92:	d24c      	bcs.n	407c2e <__multiply+0xfa>
  407b94:	f8cd a004 	str.w	sl, [sp, #4]
  407b98:	469a      	mov	sl, r3
  407b9a:	f8dc 5000 	ldr.w	r5, [ip]
  407b9e:	b2af      	uxth	r7, r5
  407ba0:	b1ef      	cbz	r7, 407bde <__multiply+0xaa>
  407ba2:	2100      	movs	r1, #0
  407ba4:	464d      	mov	r5, r9
  407ba6:	465e      	mov	r6, fp
  407ba8:	460c      	mov	r4, r1
  407baa:	f856 2b04 	ldr.w	r2, [r6], #4
  407bae:	6828      	ldr	r0, [r5, #0]
  407bb0:	b293      	uxth	r3, r2
  407bb2:	b281      	uxth	r1, r0
  407bb4:	fb07 1303 	mla	r3, r7, r3, r1
  407bb8:	0c12      	lsrs	r2, r2, #16
  407bba:	0c01      	lsrs	r1, r0, #16
  407bbc:	4423      	add	r3, r4
  407bbe:	fb07 1102 	mla	r1, r7, r2, r1
  407bc2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407bc6:	b29b      	uxth	r3, r3
  407bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407bcc:	45b6      	cmp	lr, r6
  407bce:	f845 3b04 	str.w	r3, [r5], #4
  407bd2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407bd6:	d8e8      	bhi.n	407baa <__multiply+0x76>
  407bd8:	602c      	str	r4, [r5, #0]
  407bda:	f8dc 5000 	ldr.w	r5, [ip]
  407bde:	0c2d      	lsrs	r5, r5, #16
  407be0:	d01d      	beq.n	407c1e <__multiply+0xea>
  407be2:	f8d9 3000 	ldr.w	r3, [r9]
  407be6:	4648      	mov	r0, r9
  407be8:	461c      	mov	r4, r3
  407bea:	4659      	mov	r1, fp
  407bec:	2200      	movs	r2, #0
  407bee:	880e      	ldrh	r6, [r1, #0]
  407bf0:	0c24      	lsrs	r4, r4, #16
  407bf2:	fb05 4406 	mla	r4, r5, r6, r4
  407bf6:	4422      	add	r2, r4
  407bf8:	b29b      	uxth	r3, r3
  407bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407bfe:	f840 3b04 	str.w	r3, [r0], #4
  407c02:	f851 3b04 	ldr.w	r3, [r1], #4
  407c06:	6804      	ldr	r4, [r0, #0]
  407c08:	0c1b      	lsrs	r3, r3, #16
  407c0a:	b2a6      	uxth	r6, r4
  407c0c:	fb05 6303 	mla	r3, r5, r3, r6
  407c10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407c14:	458e      	cmp	lr, r1
  407c16:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407c1a:	d8e8      	bhi.n	407bee <__multiply+0xba>
  407c1c:	6003      	str	r3, [r0, #0]
  407c1e:	f10c 0c04 	add.w	ip, ip, #4
  407c22:	45e2      	cmp	sl, ip
  407c24:	f109 0904 	add.w	r9, r9, #4
  407c28:	d8b7      	bhi.n	407b9a <__multiply+0x66>
  407c2a:	f8dd a004 	ldr.w	sl, [sp, #4]
  407c2e:	f1b8 0f00 	cmp.w	r8, #0
  407c32:	dd0b      	ble.n	407c4c <__multiply+0x118>
  407c34:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407c38:	f1aa 0a04 	sub.w	sl, sl, #4
  407c3c:	b11b      	cbz	r3, 407c46 <__multiply+0x112>
  407c3e:	e005      	b.n	407c4c <__multiply+0x118>
  407c40:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407c44:	b913      	cbnz	r3, 407c4c <__multiply+0x118>
  407c46:	f1b8 0801 	subs.w	r8, r8, #1
  407c4a:	d1f9      	bne.n	407c40 <__multiply+0x10c>
  407c4c:	9800      	ldr	r0, [sp, #0]
  407c4e:	f8c0 8010 	str.w	r8, [r0, #16]
  407c52:	b003      	add	sp, #12
  407c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407c58 <__pow5mult>:
  407c58:	f012 0303 	ands.w	r3, r2, #3
  407c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c60:	4614      	mov	r4, r2
  407c62:	4607      	mov	r7, r0
  407c64:	d12e      	bne.n	407cc4 <__pow5mult+0x6c>
  407c66:	460d      	mov	r5, r1
  407c68:	10a4      	asrs	r4, r4, #2
  407c6a:	d01c      	beq.n	407ca6 <__pow5mult+0x4e>
  407c6c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407c6e:	b396      	cbz	r6, 407cd6 <__pow5mult+0x7e>
  407c70:	07e3      	lsls	r3, r4, #31
  407c72:	f04f 0800 	mov.w	r8, #0
  407c76:	d406      	bmi.n	407c86 <__pow5mult+0x2e>
  407c78:	1064      	asrs	r4, r4, #1
  407c7a:	d014      	beq.n	407ca6 <__pow5mult+0x4e>
  407c7c:	6830      	ldr	r0, [r6, #0]
  407c7e:	b1a8      	cbz	r0, 407cac <__pow5mult+0x54>
  407c80:	4606      	mov	r6, r0
  407c82:	07e3      	lsls	r3, r4, #31
  407c84:	d5f8      	bpl.n	407c78 <__pow5mult+0x20>
  407c86:	4632      	mov	r2, r6
  407c88:	4629      	mov	r1, r5
  407c8a:	4638      	mov	r0, r7
  407c8c:	f7ff ff52 	bl	407b34 <__multiply>
  407c90:	b1b5      	cbz	r5, 407cc0 <__pow5mult+0x68>
  407c92:	686a      	ldr	r2, [r5, #4]
  407c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407c96:	1064      	asrs	r4, r4, #1
  407c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407c9c:	6029      	str	r1, [r5, #0]
  407c9e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407ca2:	4605      	mov	r5, r0
  407ca4:	d1ea      	bne.n	407c7c <__pow5mult+0x24>
  407ca6:	4628      	mov	r0, r5
  407ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407cac:	4632      	mov	r2, r6
  407cae:	4631      	mov	r1, r6
  407cb0:	4638      	mov	r0, r7
  407cb2:	f7ff ff3f 	bl	407b34 <__multiply>
  407cb6:	6030      	str	r0, [r6, #0]
  407cb8:	f8c0 8000 	str.w	r8, [r0]
  407cbc:	4606      	mov	r6, r0
  407cbe:	e7e0      	b.n	407c82 <__pow5mult+0x2a>
  407cc0:	4605      	mov	r5, r0
  407cc2:	e7d9      	b.n	407c78 <__pow5mult+0x20>
  407cc4:	1e5a      	subs	r2, r3, #1
  407cc6:	4d0b      	ldr	r5, [pc, #44]	; (407cf4 <__pow5mult+0x9c>)
  407cc8:	2300      	movs	r3, #0
  407cca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407cce:	f7ff fe97 	bl	407a00 <__multadd>
  407cd2:	4605      	mov	r5, r0
  407cd4:	e7c8      	b.n	407c68 <__pow5mult+0x10>
  407cd6:	2101      	movs	r1, #1
  407cd8:	4638      	mov	r0, r7
  407cda:	f7ff fe61 	bl	4079a0 <_Balloc>
  407cde:	f240 2171 	movw	r1, #625	; 0x271
  407ce2:	2201      	movs	r2, #1
  407ce4:	2300      	movs	r3, #0
  407ce6:	6141      	str	r1, [r0, #20]
  407ce8:	6102      	str	r2, [r0, #16]
  407cea:	4606      	mov	r6, r0
  407cec:	64b8      	str	r0, [r7, #72]	; 0x48
  407cee:	6003      	str	r3, [r0, #0]
  407cf0:	e7be      	b.n	407c70 <__pow5mult+0x18>
  407cf2:	bf00      	nop
  407cf4:	00409798 	.word	0x00409798

00407cf8 <__lshift>:
  407cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407cfc:	4691      	mov	r9, r2
  407cfe:	690a      	ldr	r2, [r1, #16]
  407d00:	688b      	ldr	r3, [r1, #8]
  407d02:	ea4f 1469 	mov.w	r4, r9, asr #5
  407d06:	eb04 0802 	add.w	r8, r4, r2
  407d0a:	f108 0501 	add.w	r5, r8, #1
  407d0e:	429d      	cmp	r5, r3
  407d10:	460e      	mov	r6, r1
  407d12:	4607      	mov	r7, r0
  407d14:	6849      	ldr	r1, [r1, #4]
  407d16:	dd04      	ble.n	407d22 <__lshift+0x2a>
  407d18:	005b      	lsls	r3, r3, #1
  407d1a:	429d      	cmp	r5, r3
  407d1c:	f101 0101 	add.w	r1, r1, #1
  407d20:	dcfa      	bgt.n	407d18 <__lshift+0x20>
  407d22:	4638      	mov	r0, r7
  407d24:	f7ff fe3c 	bl	4079a0 <_Balloc>
  407d28:	2c00      	cmp	r4, #0
  407d2a:	f100 0314 	add.w	r3, r0, #20
  407d2e:	dd06      	ble.n	407d3e <__lshift+0x46>
  407d30:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407d34:	2100      	movs	r1, #0
  407d36:	f843 1b04 	str.w	r1, [r3], #4
  407d3a:	429a      	cmp	r2, r3
  407d3c:	d1fb      	bne.n	407d36 <__lshift+0x3e>
  407d3e:	6934      	ldr	r4, [r6, #16]
  407d40:	f106 0114 	add.w	r1, r6, #20
  407d44:	f019 091f 	ands.w	r9, r9, #31
  407d48:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407d4c:	d01d      	beq.n	407d8a <__lshift+0x92>
  407d4e:	f1c9 0c20 	rsb	ip, r9, #32
  407d52:	2200      	movs	r2, #0
  407d54:	680c      	ldr	r4, [r1, #0]
  407d56:	fa04 f409 	lsl.w	r4, r4, r9
  407d5a:	4314      	orrs	r4, r2
  407d5c:	f843 4b04 	str.w	r4, [r3], #4
  407d60:	f851 2b04 	ldr.w	r2, [r1], #4
  407d64:	458e      	cmp	lr, r1
  407d66:	fa22 f20c 	lsr.w	r2, r2, ip
  407d6a:	d8f3      	bhi.n	407d54 <__lshift+0x5c>
  407d6c:	601a      	str	r2, [r3, #0]
  407d6e:	b10a      	cbz	r2, 407d74 <__lshift+0x7c>
  407d70:	f108 0502 	add.w	r5, r8, #2
  407d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407d76:	6872      	ldr	r2, [r6, #4]
  407d78:	3d01      	subs	r5, #1
  407d7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407d7e:	6105      	str	r5, [r0, #16]
  407d80:	6031      	str	r1, [r6, #0]
  407d82:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407d8a:	3b04      	subs	r3, #4
  407d8c:	f851 2b04 	ldr.w	r2, [r1], #4
  407d90:	f843 2f04 	str.w	r2, [r3, #4]!
  407d94:	458e      	cmp	lr, r1
  407d96:	d8f9      	bhi.n	407d8c <__lshift+0x94>
  407d98:	e7ec      	b.n	407d74 <__lshift+0x7c>
  407d9a:	bf00      	nop

00407d9c <__mcmp>:
  407d9c:	b430      	push	{r4, r5}
  407d9e:	690b      	ldr	r3, [r1, #16]
  407da0:	4605      	mov	r5, r0
  407da2:	6900      	ldr	r0, [r0, #16]
  407da4:	1ac0      	subs	r0, r0, r3
  407da6:	d10f      	bne.n	407dc8 <__mcmp+0x2c>
  407da8:	009b      	lsls	r3, r3, #2
  407daa:	3514      	adds	r5, #20
  407dac:	3114      	adds	r1, #20
  407dae:	4419      	add	r1, r3
  407db0:	442b      	add	r3, r5
  407db2:	e001      	b.n	407db8 <__mcmp+0x1c>
  407db4:	429d      	cmp	r5, r3
  407db6:	d207      	bcs.n	407dc8 <__mcmp+0x2c>
  407db8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407dc0:	4294      	cmp	r4, r2
  407dc2:	d0f7      	beq.n	407db4 <__mcmp+0x18>
  407dc4:	d302      	bcc.n	407dcc <__mcmp+0x30>
  407dc6:	2001      	movs	r0, #1
  407dc8:	bc30      	pop	{r4, r5}
  407dca:	4770      	bx	lr
  407dcc:	f04f 30ff 	mov.w	r0, #4294967295
  407dd0:	e7fa      	b.n	407dc8 <__mcmp+0x2c>
  407dd2:	bf00      	nop

00407dd4 <__mdiff>:
  407dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407dd8:	690f      	ldr	r7, [r1, #16]
  407dda:	460e      	mov	r6, r1
  407ddc:	6911      	ldr	r1, [r2, #16]
  407dde:	1a7f      	subs	r7, r7, r1
  407de0:	2f00      	cmp	r7, #0
  407de2:	4690      	mov	r8, r2
  407de4:	d117      	bne.n	407e16 <__mdiff+0x42>
  407de6:	0089      	lsls	r1, r1, #2
  407de8:	f106 0514 	add.w	r5, r6, #20
  407dec:	f102 0e14 	add.w	lr, r2, #20
  407df0:	186b      	adds	r3, r5, r1
  407df2:	4471      	add	r1, lr
  407df4:	e001      	b.n	407dfa <__mdiff+0x26>
  407df6:	429d      	cmp	r5, r3
  407df8:	d25c      	bcs.n	407eb4 <__mdiff+0xe0>
  407dfa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407dfe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407e02:	42a2      	cmp	r2, r4
  407e04:	d0f7      	beq.n	407df6 <__mdiff+0x22>
  407e06:	d25e      	bcs.n	407ec6 <__mdiff+0xf2>
  407e08:	4633      	mov	r3, r6
  407e0a:	462c      	mov	r4, r5
  407e0c:	4646      	mov	r6, r8
  407e0e:	4675      	mov	r5, lr
  407e10:	4698      	mov	r8, r3
  407e12:	2701      	movs	r7, #1
  407e14:	e005      	b.n	407e22 <__mdiff+0x4e>
  407e16:	db58      	blt.n	407eca <__mdiff+0xf6>
  407e18:	f106 0514 	add.w	r5, r6, #20
  407e1c:	f108 0414 	add.w	r4, r8, #20
  407e20:	2700      	movs	r7, #0
  407e22:	6871      	ldr	r1, [r6, #4]
  407e24:	f7ff fdbc 	bl	4079a0 <_Balloc>
  407e28:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407e2c:	6936      	ldr	r6, [r6, #16]
  407e2e:	60c7      	str	r7, [r0, #12]
  407e30:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407e34:	46a6      	mov	lr, r4
  407e36:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407e3a:	f100 0414 	add.w	r4, r0, #20
  407e3e:	2300      	movs	r3, #0
  407e40:	f85e 1b04 	ldr.w	r1, [lr], #4
  407e44:	f855 8b04 	ldr.w	r8, [r5], #4
  407e48:	b28a      	uxth	r2, r1
  407e4a:	fa13 f388 	uxtah	r3, r3, r8
  407e4e:	0c09      	lsrs	r1, r1, #16
  407e50:	1a9a      	subs	r2, r3, r2
  407e52:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407e56:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407e5a:	b292      	uxth	r2, r2
  407e5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407e60:	45f4      	cmp	ip, lr
  407e62:	f844 2b04 	str.w	r2, [r4], #4
  407e66:	ea4f 4323 	mov.w	r3, r3, asr #16
  407e6a:	d8e9      	bhi.n	407e40 <__mdiff+0x6c>
  407e6c:	42af      	cmp	r7, r5
  407e6e:	d917      	bls.n	407ea0 <__mdiff+0xcc>
  407e70:	46a4      	mov	ip, r4
  407e72:	46ae      	mov	lr, r5
  407e74:	f85e 2b04 	ldr.w	r2, [lr], #4
  407e78:	fa13 f382 	uxtah	r3, r3, r2
  407e7c:	1419      	asrs	r1, r3, #16
  407e7e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407e82:	b29b      	uxth	r3, r3
  407e84:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407e88:	4577      	cmp	r7, lr
  407e8a:	f84c 2b04 	str.w	r2, [ip], #4
  407e8e:	ea4f 4321 	mov.w	r3, r1, asr #16
  407e92:	d8ef      	bhi.n	407e74 <__mdiff+0xa0>
  407e94:	43ed      	mvns	r5, r5
  407e96:	442f      	add	r7, r5
  407e98:	f027 0703 	bic.w	r7, r7, #3
  407e9c:	3704      	adds	r7, #4
  407e9e:	443c      	add	r4, r7
  407ea0:	3c04      	subs	r4, #4
  407ea2:	b922      	cbnz	r2, 407eae <__mdiff+0xda>
  407ea4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407ea8:	3e01      	subs	r6, #1
  407eaa:	2b00      	cmp	r3, #0
  407eac:	d0fa      	beq.n	407ea4 <__mdiff+0xd0>
  407eae:	6106      	str	r6, [r0, #16]
  407eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407eb4:	2100      	movs	r1, #0
  407eb6:	f7ff fd73 	bl	4079a0 <_Balloc>
  407eba:	2201      	movs	r2, #1
  407ebc:	2300      	movs	r3, #0
  407ebe:	6102      	str	r2, [r0, #16]
  407ec0:	6143      	str	r3, [r0, #20]
  407ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ec6:	4674      	mov	r4, lr
  407ec8:	e7ab      	b.n	407e22 <__mdiff+0x4e>
  407eca:	4633      	mov	r3, r6
  407ecc:	f106 0414 	add.w	r4, r6, #20
  407ed0:	f102 0514 	add.w	r5, r2, #20
  407ed4:	4616      	mov	r6, r2
  407ed6:	2701      	movs	r7, #1
  407ed8:	4698      	mov	r8, r3
  407eda:	e7a2      	b.n	407e22 <__mdiff+0x4e>

00407edc <__d2b>:
  407edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ee0:	b082      	sub	sp, #8
  407ee2:	2101      	movs	r1, #1
  407ee4:	461c      	mov	r4, r3
  407ee6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407eea:	4615      	mov	r5, r2
  407eec:	9e08      	ldr	r6, [sp, #32]
  407eee:	f7ff fd57 	bl	4079a0 <_Balloc>
  407ef2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407ef6:	4680      	mov	r8, r0
  407ef8:	b10f      	cbz	r7, 407efe <__d2b+0x22>
  407efa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407efe:	9401      	str	r4, [sp, #4]
  407f00:	b31d      	cbz	r5, 407f4a <__d2b+0x6e>
  407f02:	a802      	add	r0, sp, #8
  407f04:	f840 5d08 	str.w	r5, [r0, #-8]!
  407f08:	f7ff fdda 	bl	407ac0 <__lo0bits>
  407f0c:	2800      	cmp	r0, #0
  407f0e:	d134      	bne.n	407f7a <__d2b+0x9e>
  407f10:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407f14:	f8c8 2014 	str.w	r2, [r8, #20]
  407f18:	2b00      	cmp	r3, #0
  407f1a:	bf0c      	ite	eq
  407f1c:	2101      	moveq	r1, #1
  407f1e:	2102      	movne	r1, #2
  407f20:	f8c8 3018 	str.w	r3, [r8, #24]
  407f24:	f8c8 1010 	str.w	r1, [r8, #16]
  407f28:	b9df      	cbnz	r7, 407f62 <__d2b+0x86>
  407f2a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407f2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407f32:	6030      	str	r0, [r6, #0]
  407f34:	6918      	ldr	r0, [r3, #16]
  407f36:	f7ff fda3 	bl	407a80 <__hi0bits>
  407f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407f40:	6018      	str	r0, [r3, #0]
  407f42:	4640      	mov	r0, r8
  407f44:	b002      	add	sp, #8
  407f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f4a:	a801      	add	r0, sp, #4
  407f4c:	f7ff fdb8 	bl	407ac0 <__lo0bits>
  407f50:	9b01      	ldr	r3, [sp, #4]
  407f52:	f8c8 3014 	str.w	r3, [r8, #20]
  407f56:	2101      	movs	r1, #1
  407f58:	3020      	adds	r0, #32
  407f5a:	f8c8 1010 	str.w	r1, [r8, #16]
  407f5e:	2f00      	cmp	r7, #0
  407f60:	d0e3      	beq.n	407f2a <__d2b+0x4e>
  407f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407f64:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407f68:	4407      	add	r7, r0
  407f6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407f6e:	6037      	str	r7, [r6, #0]
  407f70:	6018      	str	r0, [r3, #0]
  407f72:	4640      	mov	r0, r8
  407f74:	b002      	add	sp, #8
  407f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f7a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407f7e:	f1c0 0220 	rsb	r2, r0, #32
  407f82:	fa03 f202 	lsl.w	r2, r3, r2
  407f86:	430a      	orrs	r2, r1
  407f88:	40c3      	lsrs	r3, r0
  407f8a:	9301      	str	r3, [sp, #4]
  407f8c:	f8c8 2014 	str.w	r2, [r8, #20]
  407f90:	e7c2      	b.n	407f18 <__d2b+0x3c>
  407f92:	bf00      	nop

00407f94 <_realloc_r>:
  407f94:	2900      	cmp	r1, #0
  407f96:	f000 8095 	beq.w	4080c4 <_realloc_r+0x130>
  407f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f9e:	460d      	mov	r5, r1
  407fa0:	4616      	mov	r6, r2
  407fa2:	b083      	sub	sp, #12
  407fa4:	4680      	mov	r8, r0
  407fa6:	f106 070b 	add.w	r7, r6, #11
  407faa:	f7ff fced 	bl	407988 <__malloc_lock>
  407fae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407fb2:	2f16      	cmp	r7, #22
  407fb4:	f02e 0403 	bic.w	r4, lr, #3
  407fb8:	f1a5 0908 	sub.w	r9, r5, #8
  407fbc:	d83c      	bhi.n	408038 <_realloc_r+0xa4>
  407fbe:	2210      	movs	r2, #16
  407fc0:	4617      	mov	r7, r2
  407fc2:	42be      	cmp	r6, r7
  407fc4:	d83d      	bhi.n	408042 <_realloc_r+0xae>
  407fc6:	4294      	cmp	r4, r2
  407fc8:	da43      	bge.n	408052 <_realloc_r+0xbe>
  407fca:	4bc4      	ldr	r3, [pc, #784]	; (4082dc <_realloc_r+0x348>)
  407fcc:	6899      	ldr	r1, [r3, #8]
  407fce:	eb09 0004 	add.w	r0, r9, r4
  407fd2:	4288      	cmp	r0, r1
  407fd4:	f000 80b4 	beq.w	408140 <_realloc_r+0x1ac>
  407fd8:	6843      	ldr	r3, [r0, #4]
  407fda:	f023 0101 	bic.w	r1, r3, #1
  407fde:	4401      	add	r1, r0
  407fe0:	6849      	ldr	r1, [r1, #4]
  407fe2:	07c9      	lsls	r1, r1, #31
  407fe4:	d54c      	bpl.n	408080 <_realloc_r+0xec>
  407fe6:	f01e 0f01 	tst.w	lr, #1
  407fea:	f000 809b 	beq.w	408124 <_realloc_r+0x190>
  407fee:	4631      	mov	r1, r6
  407ff0:	4640      	mov	r0, r8
  407ff2:	f7ff f949 	bl	407288 <_malloc_r>
  407ff6:	4606      	mov	r6, r0
  407ff8:	2800      	cmp	r0, #0
  407ffa:	d03a      	beq.n	408072 <_realloc_r+0xde>
  407ffc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408000:	f023 0301 	bic.w	r3, r3, #1
  408004:	444b      	add	r3, r9
  408006:	f1a0 0208 	sub.w	r2, r0, #8
  40800a:	429a      	cmp	r2, r3
  40800c:	f000 8121 	beq.w	408252 <_realloc_r+0x2be>
  408010:	1f22      	subs	r2, r4, #4
  408012:	2a24      	cmp	r2, #36	; 0x24
  408014:	f200 8107 	bhi.w	408226 <_realloc_r+0x292>
  408018:	2a13      	cmp	r2, #19
  40801a:	f200 80db 	bhi.w	4081d4 <_realloc_r+0x240>
  40801e:	4603      	mov	r3, r0
  408020:	462a      	mov	r2, r5
  408022:	6811      	ldr	r1, [r2, #0]
  408024:	6019      	str	r1, [r3, #0]
  408026:	6851      	ldr	r1, [r2, #4]
  408028:	6059      	str	r1, [r3, #4]
  40802a:	6892      	ldr	r2, [r2, #8]
  40802c:	609a      	str	r2, [r3, #8]
  40802e:	4629      	mov	r1, r5
  408030:	4640      	mov	r0, r8
  408032:	f7fe fdfd 	bl	406c30 <_free_r>
  408036:	e01c      	b.n	408072 <_realloc_r+0xde>
  408038:	f027 0707 	bic.w	r7, r7, #7
  40803c:	2f00      	cmp	r7, #0
  40803e:	463a      	mov	r2, r7
  408040:	dabf      	bge.n	407fc2 <_realloc_r+0x2e>
  408042:	2600      	movs	r6, #0
  408044:	230c      	movs	r3, #12
  408046:	4630      	mov	r0, r6
  408048:	f8c8 3000 	str.w	r3, [r8]
  40804c:	b003      	add	sp, #12
  40804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408052:	462e      	mov	r6, r5
  408054:	1be3      	subs	r3, r4, r7
  408056:	2b0f      	cmp	r3, #15
  408058:	d81e      	bhi.n	408098 <_realloc_r+0x104>
  40805a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40805e:	f003 0301 	and.w	r3, r3, #1
  408062:	4323      	orrs	r3, r4
  408064:	444c      	add	r4, r9
  408066:	f8c9 3004 	str.w	r3, [r9, #4]
  40806a:	6863      	ldr	r3, [r4, #4]
  40806c:	f043 0301 	orr.w	r3, r3, #1
  408070:	6063      	str	r3, [r4, #4]
  408072:	4640      	mov	r0, r8
  408074:	f7ff fc8e 	bl	407994 <__malloc_unlock>
  408078:	4630      	mov	r0, r6
  40807a:	b003      	add	sp, #12
  40807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408080:	f023 0303 	bic.w	r3, r3, #3
  408084:	18e1      	adds	r1, r4, r3
  408086:	4291      	cmp	r1, r2
  408088:	db1f      	blt.n	4080ca <_realloc_r+0x136>
  40808a:	68c3      	ldr	r3, [r0, #12]
  40808c:	6882      	ldr	r2, [r0, #8]
  40808e:	462e      	mov	r6, r5
  408090:	60d3      	str	r3, [r2, #12]
  408092:	460c      	mov	r4, r1
  408094:	609a      	str	r2, [r3, #8]
  408096:	e7dd      	b.n	408054 <_realloc_r+0xc0>
  408098:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40809c:	eb09 0107 	add.w	r1, r9, r7
  4080a0:	f002 0201 	and.w	r2, r2, #1
  4080a4:	444c      	add	r4, r9
  4080a6:	f043 0301 	orr.w	r3, r3, #1
  4080aa:	4317      	orrs	r7, r2
  4080ac:	f8c9 7004 	str.w	r7, [r9, #4]
  4080b0:	604b      	str	r3, [r1, #4]
  4080b2:	6863      	ldr	r3, [r4, #4]
  4080b4:	f043 0301 	orr.w	r3, r3, #1
  4080b8:	3108      	adds	r1, #8
  4080ba:	6063      	str	r3, [r4, #4]
  4080bc:	4640      	mov	r0, r8
  4080be:	f7fe fdb7 	bl	406c30 <_free_r>
  4080c2:	e7d6      	b.n	408072 <_realloc_r+0xde>
  4080c4:	4611      	mov	r1, r2
  4080c6:	f7ff b8df 	b.w	407288 <_malloc_r>
  4080ca:	f01e 0f01 	tst.w	lr, #1
  4080ce:	d18e      	bne.n	407fee <_realloc_r+0x5a>
  4080d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4080d4:	eba9 0a01 	sub.w	sl, r9, r1
  4080d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4080dc:	f021 0103 	bic.w	r1, r1, #3
  4080e0:	440b      	add	r3, r1
  4080e2:	4423      	add	r3, r4
  4080e4:	4293      	cmp	r3, r2
  4080e6:	db25      	blt.n	408134 <_realloc_r+0x1a0>
  4080e8:	68c2      	ldr	r2, [r0, #12]
  4080ea:	6881      	ldr	r1, [r0, #8]
  4080ec:	4656      	mov	r6, sl
  4080ee:	60ca      	str	r2, [r1, #12]
  4080f0:	6091      	str	r1, [r2, #8]
  4080f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4080f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4080fa:	1f22      	subs	r2, r4, #4
  4080fc:	2a24      	cmp	r2, #36	; 0x24
  4080fe:	60c1      	str	r1, [r0, #12]
  408100:	6088      	str	r0, [r1, #8]
  408102:	f200 8094 	bhi.w	40822e <_realloc_r+0x29a>
  408106:	2a13      	cmp	r2, #19
  408108:	d96f      	bls.n	4081ea <_realloc_r+0x256>
  40810a:	6829      	ldr	r1, [r5, #0]
  40810c:	f8ca 1008 	str.w	r1, [sl, #8]
  408110:	6869      	ldr	r1, [r5, #4]
  408112:	f8ca 100c 	str.w	r1, [sl, #12]
  408116:	2a1b      	cmp	r2, #27
  408118:	f200 80a2 	bhi.w	408260 <_realloc_r+0x2cc>
  40811c:	3508      	adds	r5, #8
  40811e:	f10a 0210 	add.w	r2, sl, #16
  408122:	e063      	b.n	4081ec <_realloc_r+0x258>
  408124:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408128:	eba9 0a03 	sub.w	sl, r9, r3
  40812c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408130:	f021 0103 	bic.w	r1, r1, #3
  408134:	1863      	adds	r3, r4, r1
  408136:	4293      	cmp	r3, r2
  408138:	f6ff af59 	blt.w	407fee <_realloc_r+0x5a>
  40813c:	4656      	mov	r6, sl
  40813e:	e7d8      	b.n	4080f2 <_realloc_r+0x15e>
  408140:	6841      	ldr	r1, [r0, #4]
  408142:	f021 0b03 	bic.w	fp, r1, #3
  408146:	44a3      	add	fp, r4
  408148:	f107 0010 	add.w	r0, r7, #16
  40814c:	4583      	cmp	fp, r0
  40814e:	da56      	bge.n	4081fe <_realloc_r+0x26a>
  408150:	f01e 0f01 	tst.w	lr, #1
  408154:	f47f af4b 	bne.w	407fee <_realloc_r+0x5a>
  408158:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40815c:	eba9 0a01 	sub.w	sl, r9, r1
  408160:	f8da 1004 	ldr.w	r1, [sl, #4]
  408164:	f021 0103 	bic.w	r1, r1, #3
  408168:	448b      	add	fp, r1
  40816a:	4558      	cmp	r0, fp
  40816c:	dce2      	bgt.n	408134 <_realloc_r+0x1a0>
  40816e:	4656      	mov	r6, sl
  408170:	f8da 100c 	ldr.w	r1, [sl, #12]
  408174:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408178:	1f22      	subs	r2, r4, #4
  40817a:	2a24      	cmp	r2, #36	; 0x24
  40817c:	60c1      	str	r1, [r0, #12]
  40817e:	6088      	str	r0, [r1, #8]
  408180:	f200 808f 	bhi.w	4082a2 <_realloc_r+0x30e>
  408184:	2a13      	cmp	r2, #19
  408186:	f240 808a 	bls.w	40829e <_realloc_r+0x30a>
  40818a:	6829      	ldr	r1, [r5, #0]
  40818c:	f8ca 1008 	str.w	r1, [sl, #8]
  408190:	6869      	ldr	r1, [r5, #4]
  408192:	f8ca 100c 	str.w	r1, [sl, #12]
  408196:	2a1b      	cmp	r2, #27
  408198:	f200 808a 	bhi.w	4082b0 <_realloc_r+0x31c>
  40819c:	3508      	adds	r5, #8
  40819e:	f10a 0210 	add.w	r2, sl, #16
  4081a2:	6829      	ldr	r1, [r5, #0]
  4081a4:	6011      	str	r1, [r2, #0]
  4081a6:	6869      	ldr	r1, [r5, #4]
  4081a8:	6051      	str	r1, [r2, #4]
  4081aa:	68a9      	ldr	r1, [r5, #8]
  4081ac:	6091      	str	r1, [r2, #8]
  4081ae:	eb0a 0107 	add.w	r1, sl, r7
  4081b2:	ebab 0207 	sub.w	r2, fp, r7
  4081b6:	f042 0201 	orr.w	r2, r2, #1
  4081ba:	6099      	str	r1, [r3, #8]
  4081bc:	604a      	str	r2, [r1, #4]
  4081be:	f8da 3004 	ldr.w	r3, [sl, #4]
  4081c2:	f003 0301 	and.w	r3, r3, #1
  4081c6:	431f      	orrs	r7, r3
  4081c8:	4640      	mov	r0, r8
  4081ca:	f8ca 7004 	str.w	r7, [sl, #4]
  4081ce:	f7ff fbe1 	bl	407994 <__malloc_unlock>
  4081d2:	e751      	b.n	408078 <_realloc_r+0xe4>
  4081d4:	682b      	ldr	r3, [r5, #0]
  4081d6:	6003      	str	r3, [r0, #0]
  4081d8:	686b      	ldr	r3, [r5, #4]
  4081da:	6043      	str	r3, [r0, #4]
  4081dc:	2a1b      	cmp	r2, #27
  4081de:	d82d      	bhi.n	40823c <_realloc_r+0x2a8>
  4081e0:	f100 0308 	add.w	r3, r0, #8
  4081e4:	f105 0208 	add.w	r2, r5, #8
  4081e8:	e71b      	b.n	408022 <_realloc_r+0x8e>
  4081ea:	4632      	mov	r2, r6
  4081ec:	6829      	ldr	r1, [r5, #0]
  4081ee:	6011      	str	r1, [r2, #0]
  4081f0:	6869      	ldr	r1, [r5, #4]
  4081f2:	6051      	str	r1, [r2, #4]
  4081f4:	68a9      	ldr	r1, [r5, #8]
  4081f6:	6091      	str	r1, [r2, #8]
  4081f8:	461c      	mov	r4, r3
  4081fa:	46d1      	mov	r9, sl
  4081fc:	e72a      	b.n	408054 <_realloc_r+0xc0>
  4081fe:	eb09 0107 	add.w	r1, r9, r7
  408202:	ebab 0b07 	sub.w	fp, fp, r7
  408206:	f04b 0201 	orr.w	r2, fp, #1
  40820a:	6099      	str	r1, [r3, #8]
  40820c:	604a      	str	r2, [r1, #4]
  40820e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408212:	f003 0301 	and.w	r3, r3, #1
  408216:	431f      	orrs	r7, r3
  408218:	4640      	mov	r0, r8
  40821a:	f845 7c04 	str.w	r7, [r5, #-4]
  40821e:	f7ff fbb9 	bl	407994 <__malloc_unlock>
  408222:	462e      	mov	r6, r5
  408224:	e728      	b.n	408078 <_realloc_r+0xe4>
  408226:	4629      	mov	r1, r5
  408228:	f7ff fb4a 	bl	4078c0 <memmove>
  40822c:	e6ff      	b.n	40802e <_realloc_r+0x9a>
  40822e:	4629      	mov	r1, r5
  408230:	4630      	mov	r0, r6
  408232:	461c      	mov	r4, r3
  408234:	46d1      	mov	r9, sl
  408236:	f7ff fb43 	bl	4078c0 <memmove>
  40823a:	e70b      	b.n	408054 <_realloc_r+0xc0>
  40823c:	68ab      	ldr	r3, [r5, #8]
  40823e:	6083      	str	r3, [r0, #8]
  408240:	68eb      	ldr	r3, [r5, #12]
  408242:	60c3      	str	r3, [r0, #12]
  408244:	2a24      	cmp	r2, #36	; 0x24
  408246:	d017      	beq.n	408278 <_realloc_r+0x2e4>
  408248:	f100 0310 	add.w	r3, r0, #16
  40824c:	f105 0210 	add.w	r2, r5, #16
  408250:	e6e7      	b.n	408022 <_realloc_r+0x8e>
  408252:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408256:	f023 0303 	bic.w	r3, r3, #3
  40825a:	441c      	add	r4, r3
  40825c:	462e      	mov	r6, r5
  40825e:	e6f9      	b.n	408054 <_realloc_r+0xc0>
  408260:	68a9      	ldr	r1, [r5, #8]
  408262:	f8ca 1010 	str.w	r1, [sl, #16]
  408266:	68e9      	ldr	r1, [r5, #12]
  408268:	f8ca 1014 	str.w	r1, [sl, #20]
  40826c:	2a24      	cmp	r2, #36	; 0x24
  40826e:	d00c      	beq.n	40828a <_realloc_r+0x2f6>
  408270:	3510      	adds	r5, #16
  408272:	f10a 0218 	add.w	r2, sl, #24
  408276:	e7b9      	b.n	4081ec <_realloc_r+0x258>
  408278:	692b      	ldr	r3, [r5, #16]
  40827a:	6103      	str	r3, [r0, #16]
  40827c:	696b      	ldr	r3, [r5, #20]
  40827e:	6143      	str	r3, [r0, #20]
  408280:	f105 0218 	add.w	r2, r5, #24
  408284:	f100 0318 	add.w	r3, r0, #24
  408288:	e6cb      	b.n	408022 <_realloc_r+0x8e>
  40828a:	692a      	ldr	r2, [r5, #16]
  40828c:	f8ca 2018 	str.w	r2, [sl, #24]
  408290:	696a      	ldr	r2, [r5, #20]
  408292:	f8ca 201c 	str.w	r2, [sl, #28]
  408296:	3518      	adds	r5, #24
  408298:	f10a 0220 	add.w	r2, sl, #32
  40829c:	e7a6      	b.n	4081ec <_realloc_r+0x258>
  40829e:	4632      	mov	r2, r6
  4082a0:	e77f      	b.n	4081a2 <_realloc_r+0x20e>
  4082a2:	4629      	mov	r1, r5
  4082a4:	4630      	mov	r0, r6
  4082a6:	9301      	str	r3, [sp, #4]
  4082a8:	f7ff fb0a 	bl	4078c0 <memmove>
  4082ac:	9b01      	ldr	r3, [sp, #4]
  4082ae:	e77e      	b.n	4081ae <_realloc_r+0x21a>
  4082b0:	68a9      	ldr	r1, [r5, #8]
  4082b2:	f8ca 1010 	str.w	r1, [sl, #16]
  4082b6:	68e9      	ldr	r1, [r5, #12]
  4082b8:	f8ca 1014 	str.w	r1, [sl, #20]
  4082bc:	2a24      	cmp	r2, #36	; 0x24
  4082be:	d003      	beq.n	4082c8 <_realloc_r+0x334>
  4082c0:	3510      	adds	r5, #16
  4082c2:	f10a 0218 	add.w	r2, sl, #24
  4082c6:	e76c      	b.n	4081a2 <_realloc_r+0x20e>
  4082c8:	692a      	ldr	r2, [r5, #16]
  4082ca:	f8ca 2018 	str.w	r2, [sl, #24]
  4082ce:	696a      	ldr	r2, [r5, #20]
  4082d0:	f8ca 201c 	str.w	r2, [sl, #28]
  4082d4:	3518      	adds	r5, #24
  4082d6:	f10a 0220 	add.w	r2, sl, #32
  4082da:	e762      	b.n	4081a2 <_realloc_r+0x20e>
  4082dc:	204005d8 	.word	0x204005d8

004082e0 <_sbrk_r>:
  4082e0:	b538      	push	{r3, r4, r5, lr}
  4082e2:	4c07      	ldr	r4, [pc, #28]	; (408300 <_sbrk_r+0x20>)
  4082e4:	2300      	movs	r3, #0
  4082e6:	4605      	mov	r5, r0
  4082e8:	4608      	mov	r0, r1
  4082ea:	6023      	str	r3, [r4, #0]
  4082ec:	f7fa f85a 	bl	4023a4 <_sbrk>
  4082f0:	1c43      	adds	r3, r0, #1
  4082f2:	d000      	beq.n	4082f6 <_sbrk_r+0x16>
  4082f4:	bd38      	pop	{r3, r4, r5, pc}
  4082f6:	6823      	ldr	r3, [r4, #0]
  4082f8:	2b00      	cmp	r3, #0
  4082fa:	d0fb      	beq.n	4082f4 <_sbrk_r+0x14>
  4082fc:	602b      	str	r3, [r5, #0]
  4082fe:	bd38      	pop	{r3, r4, r5, pc}
  408300:	20408510 	.word	0x20408510

00408304 <__sread>:
  408304:	b510      	push	{r4, lr}
  408306:	460c      	mov	r4, r1
  408308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40830c:	f000 faa4 	bl	408858 <_read_r>
  408310:	2800      	cmp	r0, #0
  408312:	db03      	blt.n	40831c <__sread+0x18>
  408314:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408316:	4403      	add	r3, r0
  408318:	6523      	str	r3, [r4, #80]	; 0x50
  40831a:	bd10      	pop	{r4, pc}
  40831c:	89a3      	ldrh	r3, [r4, #12]
  40831e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408322:	81a3      	strh	r3, [r4, #12]
  408324:	bd10      	pop	{r4, pc}
  408326:	bf00      	nop

00408328 <__swrite>:
  408328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40832c:	4616      	mov	r6, r2
  40832e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408332:	461f      	mov	r7, r3
  408334:	05d3      	lsls	r3, r2, #23
  408336:	460c      	mov	r4, r1
  408338:	4605      	mov	r5, r0
  40833a:	d507      	bpl.n	40834c <__swrite+0x24>
  40833c:	2200      	movs	r2, #0
  40833e:	2302      	movs	r3, #2
  408340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408344:	f000 fa72 	bl	40882c <_lseek_r>
  408348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40834c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408354:	81a2      	strh	r2, [r4, #12]
  408356:	463b      	mov	r3, r7
  408358:	4632      	mov	r2, r6
  40835a:	4628      	mov	r0, r5
  40835c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408360:	f000 b922 	b.w	4085a8 <_write_r>

00408364 <__sseek>:
  408364:	b510      	push	{r4, lr}
  408366:	460c      	mov	r4, r1
  408368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40836c:	f000 fa5e 	bl	40882c <_lseek_r>
  408370:	89a3      	ldrh	r3, [r4, #12]
  408372:	1c42      	adds	r2, r0, #1
  408374:	bf0e      	itee	eq
  408376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40837a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40837e:	6520      	strne	r0, [r4, #80]	; 0x50
  408380:	81a3      	strh	r3, [r4, #12]
  408382:	bd10      	pop	{r4, pc}

00408384 <__sclose>:
  408384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408388:	f000 b9b6 	b.w	4086f8 <_close_r>

0040838c <__ssprint_r>:
  40838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408390:	6893      	ldr	r3, [r2, #8]
  408392:	b083      	sub	sp, #12
  408394:	4690      	mov	r8, r2
  408396:	2b00      	cmp	r3, #0
  408398:	d070      	beq.n	40847c <__ssprint_r+0xf0>
  40839a:	4682      	mov	sl, r0
  40839c:	460c      	mov	r4, r1
  40839e:	6817      	ldr	r7, [r2, #0]
  4083a0:	688d      	ldr	r5, [r1, #8]
  4083a2:	6808      	ldr	r0, [r1, #0]
  4083a4:	e042      	b.n	40842c <__ssprint_r+0xa0>
  4083a6:	89a3      	ldrh	r3, [r4, #12]
  4083a8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4083ac:	d02e      	beq.n	40840c <__ssprint_r+0x80>
  4083ae:	6965      	ldr	r5, [r4, #20]
  4083b0:	6921      	ldr	r1, [r4, #16]
  4083b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4083b6:	eba0 0b01 	sub.w	fp, r0, r1
  4083ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4083be:	f10b 0001 	add.w	r0, fp, #1
  4083c2:	106d      	asrs	r5, r5, #1
  4083c4:	4430      	add	r0, r6
  4083c6:	42a8      	cmp	r0, r5
  4083c8:	462a      	mov	r2, r5
  4083ca:	bf84      	itt	hi
  4083cc:	4605      	movhi	r5, r0
  4083ce:	462a      	movhi	r2, r5
  4083d0:	055b      	lsls	r3, r3, #21
  4083d2:	d538      	bpl.n	408446 <__ssprint_r+0xba>
  4083d4:	4611      	mov	r1, r2
  4083d6:	4650      	mov	r0, sl
  4083d8:	f7fe ff56 	bl	407288 <_malloc_r>
  4083dc:	2800      	cmp	r0, #0
  4083de:	d03c      	beq.n	40845a <__ssprint_r+0xce>
  4083e0:	465a      	mov	r2, fp
  4083e2:	6921      	ldr	r1, [r4, #16]
  4083e4:	9001      	str	r0, [sp, #4]
  4083e6:	f7fa fe23 	bl	403030 <memcpy>
  4083ea:	89a2      	ldrh	r2, [r4, #12]
  4083ec:	9b01      	ldr	r3, [sp, #4]
  4083ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4083f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4083f6:	81a2      	strh	r2, [r4, #12]
  4083f8:	eba5 020b 	sub.w	r2, r5, fp
  4083fc:	eb03 000b 	add.w	r0, r3, fp
  408400:	6165      	str	r5, [r4, #20]
  408402:	6123      	str	r3, [r4, #16]
  408404:	6020      	str	r0, [r4, #0]
  408406:	60a2      	str	r2, [r4, #8]
  408408:	4635      	mov	r5, r6
  40840a:	46b3      	mov	fp, r6
  40840c:	465a      	mov	r2, fp
  40840e:	4649      	mov	r1, r9
  408410:	f7ff fa56 	bl	4078c0 <memmove>
  408414:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408418:	68a2      	ldr	r2, [r4, #8]
  40841a:	6820      	ldr	r0, [r4, #0]
  40841c:	1b55      	subs	r5, r2, r5
  40841e:	4458      	add	r0, fp
  408420:	1b9e      	subs	r6, r3, r6
  408422:	60a5      	str	r5, [r4, #8]
  408424:	6020      	str	r0, [r4, #0]
  408426:	f8c8 6008 	str.w	r6, [r8, #8]
  40842a:	b33e      	cbz	r6, 40847c <__ssprint_r+0xf0>
  40842c:	687e      	ldr	r6, [r7, #4]
  40842e:	463b      	mov	r3, r7
  408430:	3708      	adds	r7, #8
  408432:	2e00      	cmp	r6, #0
  408434:	d0fa      	beq.n	40842c <__ssprint_r+0xa0>
  408436:	42ae      	cmp	r6, r5
  408438:	f8d3 9000 	ldr.w	r9, [r3]
  40843c:	46ab      	mov	fp, r5
  40843e:	d2b2      	bcs.n	4083a6 <__ssprint_r+0x1a>
  408440:	4635      	mov	r5, r6
  408442:	46b3      	mov	fp, r6
  408444:	e7e2      	b.n	40840c <__ssprint_r+0x80>
  408446:	4650      	mov	r0, sl
  408448:	f7ff fda4 	bl	407f94 <_realloc_r>
  40844c:	4603      	mov	r3, r0
  40844e:	2800      	cmp	r0, #0
  408450:	d1d2      	bne.n	4083f8 <__ssprint_r+0x6c>
  408452:	6921      	ldr	r1, [r4, #16]
  408454:	4650      	mov	r0, sl
  408456:	f7fe fbeb 	bl	406c30 <_free_r>
  40845a:	230c      	movs	r3, #12
  40845c:	f8ca 3000 	str.w	r3, [sl]
  408460:	89a3      	ldrh	r3, [r4, #12]
  408462:	2200      	movs	r2, #0
  408464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408468:	f04f 30ff 	mov.w	r0, #4294967295
  40846c:	81a3      	strh	r3, [r4, #12]
  40846e:	f8c8 2008 	str.w	r2, [r8, #8]
  408472:	f8c8 2004 	str.w	r2, [r8, #4]
  408476:	b003      	add	sp, #12
  408478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40847c:	2000      	movs	r0, #0
  40847e:	f8c8 0004 	str.w	r0, [r8, #4]
  408482:	b003      	add	sp, #12
  408484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408488 <__swbuf_r>:
  408488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40848a:	460d      	mov	r5, r1
  40848c:	4614      	mov	r4, r2
  40848e:	4606      	mov	r6, r0
  408490:	b110      	cbz	r0, 408498 <__swbuf_r+0x10>
  408492:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408494:	2b00      	cmp	r3, #0
  408496:	d04b      	beq.n	408530 <__swbuf_r+0xa8>
  408498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40849c:	69a3      	ldr	r3, [r4, #24]
  40849e:	60a3      	str	r3, [r4, #8]
  4084a0:	b291      	uxth	r1, r2
  4084a2:	0708      	lsls	r0, r1, #28
  4084a4:	d539      	bpl.n	40851a <__swbuf_r+0x92>
  4084a6:	6923      	ldr	r3, [r4, #16]
  4084a8:	2b00      	cmp	r3, #0
  4084aa:	d036      	beq.n	40851a <__swbuf_r+0x92>
  4084ac:	b2ed      	uxtb	r5, r5
  4084ae:	0489      	lsls	r1, r1, #18
  4084b0:	462f      	mov	r7, r5
  4084b2:	d515      	bpl.n	4084e0 <__swbuf_r+0x58>
  4084b4:	6822      	ldr	r2, [r4, #0]
  4084b6:	6961      	ldr	r1, [r4, #20]
  4084b8:	1ad3      	subs	r3, r2, r3
  4084ba:	428b      	cmp	r3, r1
  4084bc:	da1c      	bge.n	4084f8 <__swbuf_r+0x70>
  4084be:	3301      	adds	r3, #1
  4084c0:	68a1      	ldr	r1, [r4, #8]
  4084c2:	1c50      	adds	r0, r2, #1
  4084c4:	3901      	subs	r1, #1
  4084c6:	60a1      	str	r1, [r4, #8]
  4084c8:	6020      	str	r0, [r4, #0]
  4084ca:	7015      	strb	r5, [r2, #0]
  4084cc:	6962      	ldr	r2, [r4, #20]
  4084ce:	429a      	cmp	r2, r3
  4084d0:	d01a      	beq.n	408508 <__swbuf_r+0x80>
  4084d2:	89a3      	ldrh	r3, [r4, #12]
  4084d4:	07db      	lsls	r3, r3, #31
  4084d6:	d501      	bpl.n	4084dc <__swbuf_r+0x54>
  4084d8:	2d0a      	cmp	r5, #10
  4084da:	d015      	beq.n	408508 <__swbuf_r+0x80>
  4084dc:	4638      	mov	r0, r7
  4084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4084e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4084e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4084e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4084ea:	81a2      	strh	r2, [r4, #12]
  4084ec:	6822      	ldr	r2, [r4, #0]
  4084ee:	6661      	str	r1, [r4, #100]	; 0x64
  4084f0:	6961      	ldr	r1, [r4, #20]
  4084f2:	1ad3      	subs	r3, r2, r3
  4084f4:	428b      	cmp	r3, r1
  4084f6:	dbe2      	blt.n	4084be <__swbuf_r+0x36>
  4084f8:	4621      	mov	r1, r4
  4084fa:	4630      	mov	r0, r6
  4084fc:	f7fe fa1a 	bl	406934 <_fflush_r>
  408500:	b940      	cbnz	r0, 408514 <__swbuf_r+0x8c>
  408502:	6822      	ldr	r2, [r4, #0]
  408504:	2301      	movs	r3, #1
  408506:	e7db      	b.n	4084c0 <__swbuf_r+0x38>
  408508:	4621      	mov	r1, r4
  40850a:	4630      	mov	r0, r6
  40850c:	f7fe fa12 	bl	406934 <_fflush_r>
  408510:	2800      	cmp	r0, #0
  408512:	d0e3      	beq.n	4084dc <__swbuf_r+0x54>
  408514:	f04f 37ff 	mov.w	r7, #4294967295
  408518:	e7e0      	b.n	4084dc <__swbuf_r+0x54>
  40851a:	4621      	mov	r1, r4
  40851c:	4630      	mov	r0, r6
  40851e:	f7fd f935 	bl	40578c <__swsetup_r>
  408522:	2800      	cmp	r0, #0
  408524:	d1f6      	bne.n	408514 <__swbuf_r+0x8c>
  408526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40852a:	6923      	ldr	r3, [r4, #16]
  40852c:	b291      	uxth	r1, r2
  40852e:	e7bd      	b.n	4084ac <__swbuf_r+0x24>
  408530:	f7fe fa58 	bl	4069e4 <__sinit>
  408534:	e7b0      	b.n	408498 <__swbuf_r+0x10>
  408536:	bf00      	nop

00408538 <_wcrtomb_r>:
  408538:	b5f0      	push	{r4, r5, r6, r7, lr}
  40853a:	4606      	mov	r6, r0
  40853c:	b085      	sub	sp, #20
  40853e:	461f      	mov	r7, r3
  408540:	b189      	cbz	r1, 408566 <_wcrtomb_r+0x2e>
  408542:	4c10      	ldr	r4, [pc, #64]	; (408584 <_wcrtomb_r+0x4c>)
  408544:	4d10      	ldr	r5, [pc, #64]	; (408588 <_wcrtomb_r+0x50>)
  408546:	6824      	ldr	r4, [r4, #0]
  408548:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40854a:	2c00      	cmp	r4, #0
  40854c:	bf08      	it	eq
  40854e:	462c      	moveq	r4, r5
  408550:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408554:	47a0      	blx	r4
  408556:	1c43      	adds	r3, r0, #1
  408558:	d103      	bne.n	408562 <_wcrtomb_r+0x2a>
  40855a:	2200      	movs	r2, #0
  40855c:	238a      	movs	r3, #138	; 0x8a
  40855e:	603a      	str	r2, [r7, #0]
  408560:	6033      	str	r3, [r6, #0]
  408562:	b005      	add	sp, #20
  408564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408566:	460c      	mov	r4, r1
  408568:	4906      	ldr	r1, [pc, #24]	; (408584 <_wcrtomb_r+0x4c>)
  40856a:	4a07      	ldr	r2, [pc, #28]	; (408588 <_wcrtomb_r+0x50>)
  40856c:	6809      	ldr	r1, [r1, #0]
  40856e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408570:	2900      	cmp	r1, #0
  408572:	bf08      	it	eq
  408574:	4611      	moveq	r1, r2
  408576:	4622      	mov	r2, r4
  408578:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40857c:	a901      	add	r1, sp, #4
  40857e:	47a0      	blx	r4
  408580:	e7e9      	b.n	408556 <_wcrtomb_r+0x1e>
  408582:	bf00      	nop
  408584:	2040003c 	.word	0x2040003c
  408588:	2040046c 	.word	0x2040046c

0040858c <__ascii_wctomb>:
  40858c:	b121      	cbz	r1, 408598 <__ascii_wctomb+0xc>
  40858e:	2aff      	cmp	r2, #255	; 0xff
  408590:	d804      	bhi.n	40859c <__ascii_wctomb+0x10>
  408592:	700a      	strb	r2, [r1, #0]
  408594:	2001      	movs	r0, #1
  408596:	4770      	bx	lr
  408598:	4608      	mov	r0, r1
  40859a:	4770      	bx	lr
  40859c:	238a      	movs	r3, #138	; 0x8a
  40859e:	6003      	str	r3, [r0, #0]
  4085a0:	f04f 30ff 	mov.w	r0, #4294967295
  4085a4:	4770      	bx	lr
  4085a6:	bf00      	nop

004085a8 <_write_r>:
  4085a8:	b570      	push	{r4, r5, r6, lr}
  4085aa:	460d      	mov	r5, r1
  4085ac:	4c08      	ldr	r4, [pc, #32]	; (4085d0 <_write_r+0x28>)
  4085ae:	4611      	mov	r1, r2
  4085b0:	4606      	mov	r6, r0
  4085b2:	461a      	mov	r2, r3
  4085b4:	4628      	mov	r0, r5
  4085b6:	2300      	movs	r3, #0
  4085b8:	6023      	str	r3, [r4, #0]
  4085ba:	f7f9 f867 	bl	40168c <_write>
  4085be:	1c43      	adds	r3, r0, #1
  4085c0:	d000      	beq.n	4085c4 <_write_r+0x1c>
  4085c2:	bd70      	pop	{r4, r5, r6, pc}
  4085c4:	6823      	ldr	r3, [r4, #0]
  4085c6:	2b00      	cmp	r3, #0
  4085c8:	d0fb      	beq.n	4085c2 <_write_r+0x1a>
  4085ca:	6033      	str	r3, [r6, #0]
  4085cc:	bd70      	pop	{r4, r5, r6, pc}
  4085ce:	bf00      	nop
  4085d0:	20408510 	.word	0x20408510

004085d4 <__register_exitproc>:
  4085d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4085d8:	4d2c      	ldr	r5, [pc, #176]	; (40868c <__register_exitproc+0xb8>)
  4085da:	4606      	mov	r6, r0
  4085dc:	6828      	ldr	r0, [r5, #0]
  4085de:	4698      	mov	r8, r3
  4085e0:	460f      	mov	r7, r1
  4085e2:	4691      	mov	r9, r2
  4085e4:	f7fe fdcc 	bl	407180 <__retarget_lock_acquire_recursive>
  4085e8:	4b29      	ldr	r3, [pc, #164]	; (408690 <__register_exitproc+0xbc>)
  4085ea:	681c      	ldr	r4, [r3, #0]
  4085ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4085f0:	2b00      	cmp	r3, #0
  4085f2:	d03e      	beq.n	408672 <__register_exitproc+0x9e>
  4085f4:	685a      	ldr	r2, [r3, #4]
  4085f6:	2a1f      	cmp	r2, #31
  4085f8:	dc1c      	bgt.n	408634 <__register_exitproc+0x60>
  4085fa:	f102 0e01 	add.w	lr, r2, #1
  4085fe:	b176      	cbz	r6, 40861e <__register_exitproc+0x4a>
  408600:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408604:	2401      	movs	r4, #1
  408606:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40860a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40860e:	4094      	lsls	r4, r2
  408610:	4320      	orrs	r0, r4
  408612:	2e02      	cmp	r6, #2
  408614:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408618:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40861c:	d023      	beq.n	408666 <__register_exitproc+0x92>
  40861e:	3202      	adds	r2, #2
  408620:	f8c3 e004 	str.w	lr, [r3, #4]
  408624:	6828      	ldr	r0, [r5, #0]
  408626:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40862a:	f7fe fdab 	bl	407184 <__retarget_lock_release_recursive>
  40862e:	2000      	movs	r0, #0
  408630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408634:	4b17      	ldr	r3, [pc, #92]	; (408694 <__register_exitproc+0xc0>)
  408636:	b30b      	cbz	r3, 40867c <__register_exitproc+0xa8>
  408638:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40863c:	f7fe fe1c 	bl	407278 <malloc>
  408640:	4603      	mov	r3, r0
  408642:	b1d8      	cbz	r0, 40867c <__register_exitproc+0xa8>
  408644:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408648:	6002      	str	r2, [r0, #0]
  40864a:	2100      	movs	r1, #0
  40864c:	6041      	str	r1, [r0, #4]
  40864e:	460a      	mov	r2, r1
  408650:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408654:	f04f 0e01 	mov.w	lr, #1
  408658:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40865c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408660:	2e00      	cmp	r6, #0
  408662:	d0dc      	beq.n	40861e <__register_exitproc+0x4a>
  408664:	e7cc      	b.n	408600 <__register_exitproc+0x2c>
  408666:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40866a:	430c      	orrs	r4, r1
  40866c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408670:	e7d5      	b.n	40861e <__register_exitproc+0x4a>
  408672:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408676:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40867a:	e7bb      	b.n	4085f4 <__register_exitproc+0x20>
  40867c:	6828      	ldr	r0, [r5, #0]
  40867e:	f7fe fd81 	bl	407184 <__retarget_lock_release_recursive>
  408682:	f04f 30ff 	mov.w	r0, #4294967295
  408686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40868a:	bf00      	nop
  40868c:	20400468 	.word	0x20400468
  408690:	004095fc 	.word	0x004095fc
  408694:	00407279 	.word	0x00407279

00408698 <_calloc_r>:
  408698:	b510      	push	{r4, lr}
  40869a:	fb02 f101 	mul.w	r1, r2, r1
  40869e:	f7fe fdf3 	bl	407288 <_malloc_r>
  4086a2:	4604      	mov	r4, r0
  4086a4:	b1d8      	cbz	r0, 4086de <_calloc_r+0x46>
  4086a6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4086aa:	f022 0203 	bic.w	r2, r2, #3
  4086ae:	3a04      	subs	r2, #4
  4086b0:	2a24      	cmp	r2, #36	; 0x24
  4086b2:	d818      	bhi.n	4086e6 <_calloc_r+0x4e>
  4086b4:	2a13      	cmp	r2, #19
  4086b6:	d914      	bls.n	4086e2 <_calloc_r+0x4a>
  4086b8:	2300      	movs	r3, #0
  4086ba:	2a1b      	cmp	r2, #27
  4086bc:	6003      	str	r3, [r0, #0]
  4086be:	6043      	str	r3, [r0, #4]
  4086c0:	d916      	bls.n	4086f0 <_calloc_r+0x58>
  4086c2:	2a24      	cmp	r2, #36	; 0x24
  4086c4:	6083      	str	r3, [r0, #8]
  4086c6:	60c3      	str	r3, [r0, #12]
  4086c8:	bf11      	iteee	ne
  4086ca:	f100 0210 	addne.w	r2, r0, #16
  4086ce:	6103      	streq	r3, [r0, #16]
  4086d0:	6143      	streq	r3, [r0, #20]
  4086d2:	f100 0218 	addeq.w	r2, r0, #24
  4086d6:	2300      	movs	r3, #0
  4086d8:	6013      	str	r3, [r2, #0]
  4086da:	6053      	str	r3, [r2, #4]
  4086dc:	6093      	str	r3, [r2, #8]
  4086de:	4620      	mov	r0, r4
  4086e0:	bd10      	pop	{r4, pc}
  4086e2:	4602      	mov	r2, r0
  4086e4:	e7f7      	b.n	4086d6 <_calloc_r+0x3e>
  4086e6:	2100      	movs	r1, #0
  4086e8:	f7fa fd3c 	bl	403164 <memset>
  4086ec:	4620      	mov	r0, r4
  4086ee:	bd10      	pop	{r4, pc}
  4086f0:	f100 0208 	add.w	r2, r0, #8
  4086f4:	e7ef      	b.n	4086d6 <_calloc_r+0x3e>
  4086f6:	bf00      	nop

004086f8 <_close_r>:
  4086f8:	b538      	push	{r3, r4, r5, lr}
  4086fa:	4c07      	ldr	r4, [pc, #28]	; (408718 <_close_r+0x20>)
  4086fc:	2300      	movs	r3, #0
  4086fe:	4605      	mov	r5, r0
  408700:	4608      	mov	r0, r1
  408702:	6023      	str	r3, [r4, #0]
  408704:	f7f9 fe6a 	bl	4023dc <_close>
  408708:	1c43      	adds	r3, r0, #1
  40870a:	d000      	beq.n	40870e <_close_r+0x16>
  40870c:	bd38      	pop	{r3, r4, r5, pc}
  40870e:	6823      	ldr	r3, [r4, #0]
  408710:	2b00      	cmp	r3, #0
  408712:	d0fb      	beq.n	40870c <_close_r+0x14>
  408714:	602b      	str	r3, [r5, #0]
  408716:	bd38      	pop	{r3, r4, r5, pc}
  408718:	20408510 	.word	0x20408510

0040871c <_fclose_r>:
  40871c:	b570      	push	{r4, r5, r6, lr}
  40871e:	b159      	cbz	r1, 408738 <_fclose_r+0x1c>
  408720:	4605      	mov	r5, r0
  408722:	460c      	mov	r4, r1
  408724:	b110      	cbz	r0, 40872c <_fclose_r+0x10>
  408726:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408728:	2b00      	cmp	r3, #0
  40872a:	d03c      	beq.n	4087a6 <_fclose_r+0x8a>
  40872c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40872e:	07d8      	lsls	r0, r3, #31
  408730:	d505      	bpl.n	40873e <_fclose_r+0x22>
  408732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408736:	b92b      	cbnz	r3, 408744 <_fclose_r+0x28>
  408738:	2600      	movs	r6, #0
  40873a:	4630      	mov	r0, r6
  40873c:	bd70      	pop	{r4, r5, r6, pc}
  40873e:	89a3      	ldrh	r3, [r4, #12]
  408740:	0599      	lsls	r1, r3, #22
  408742:	d53c      	bpl.n	4087be <_fclose_r+0xa2>
  408744:	4621      	mov	r1, r4
  408746:	4628      	mov	r0, r5
  408748:	f7fe f854 	bl	4067f4 <__sflush_r>
  40874c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40874e:	4606      	mov	r6, r0
  408750:	b133      	cbz	r3, 408760 <_fclose_r+0x44>
  408752:	69e1      	ldr	r1, [r4, #28]
  408754:	4628      	mov	r0, r5
  408756:	4798      	blx	r3
  408758:	2800      	cmp	r0, #0
  40875a:	bfb8      	it	lt
  40875c:	f04f 36ff 	movlt.w	r6, #4294967295
  408760:	89a3      	ldrh	r3, [r4, #12]
  408762:	061a      	lsls	r2, r3, #24
  408764:	d422      	bmi.n	4087ac <_fclose_r+0x90>
  408766:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408768:	b141      	cbz	r1, 40877c <_fclose_r+0x60>
  40876a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40876e:	4299      	cmp	r1, r3
  408770:	d002      	beq.n	408778 <_fclose_r+0x5c>
  408772:	4628      	mov	r0, r5
  408774:	f7fe fa5c 	bl	406c30 <_free_r>
  408778:	2300      	movs	r3, #0
  40877a:	6323      	str	r3, [r4, #48]	; 0x30
  40877c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40877e:	b121      	cbz	r1, 40878a <_fclose_r+0x6e>
  408780:	4628      	mov	r0, r5
  408782:	f7fe fa55 	bl	406c30 <_free_r>
  408786:	2300      	movs	r3, #0
  408788:	6463      	str	r3, [r4, #68]	; 0x44
  40878a:	f7fe f957 	bl	406a3c <__sfp_lock_acquire>
  40878e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408790:	2200      	movs	r2, #0
  408792:	07db      	lsls	r3, r3, #31
  408794:	81a2      	strh	r2, [r4, #12]
  408796:	d50e      	bpl.n	4087b6 <_fclose_r+0x9a>
  408798:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40879a:	f7fe fcef 	bl	40717c <__retarget_lock_close_recursive>
  40879e:	f7fe f953 	bl	406a48 <__sfp_lock_release>
  4087a2:	4630      	mov	r0, r6
  4087a4:	bd70      	pop	{r4, r5, r6, pc}
  4087a6:	f7fe f91d 	bl	4069e4 <__sinit>
  4087aa:	e7bf      	b.n	40872c <_fclose_r+0x10>
  4087ac:	6921      	ldr	r1, [r4, #16]
  4087ae:	4628      	mov	r0, r5
  4087b0:	f7fe fa3e 	bl	406c30 <_free_r>
  4087b4:	e7d7      	b.n	408766 <_fclose_r+0x4a>
  4087b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087b8:	f7fe fce4 	bl	407184 <__retarget_lock_release_recursive>
  4087bc:	e7ec      	b.n	408798 <_fclose_r+0x7c>
  4087be:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087c0:	f7fe fcde 	bl	407180 <__retarget_lock_acquire_recursive>
  4087c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087c8:	2b00      	cmp	r3, #0
  4087ca:	d1bb      	bne.n	408744 <_fclose_r+0x28>
  4087cc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4087ce:	f016 0601 	ands.w	r6, r6, #1
  4087d2:	d1b1      	bne.n	408738 <_fclose_r+0x1c>
  4087d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4087d6:	f7fe fcd5 	bl	407184 <__retarget_lock_release_recursive>
  4087da:	4630      	mov	r0, r6
  4087dc:	bd70      	pop	{r4, r5, r6, pc}
  4087de:	bf00      	nop

004087e0 <_fstat_r>:
  4087e0:	b538      	push	{r3, r4, r5, lr}
  4087e2:	460b      	mov	r3, r1
  4087e4:	4c07      	ldr	r4, [pc, #28]	; (408804 <_fstat_r+0x24>)
  4087e6:	4605      	mov	r5, r0
  4087e8:	4611      	mov	r1, r2
  4087ea:	4618      	mov	r0, r3
  4087ec:	2300      	movs	r3, #0
  4087ee:	6023      	str	r3, [r4, #0]
  4087f0:	f7f9 fdf7 	bl	4023e2 <_fstat>
  4087f4:	1c43      	adds	r3, r0, #1
  4087f6:	d000      	beq.n	4087fa <_fstat_r+0x1a>
  4087f8:	bd38      	pop	{r3, r4, r5, pc}
  4087fa:	6823      	ldr	r3, [r4, #0]
  4087fc:	2b00      	cmp	r3, #0
  4087fe:	d0fb      	beq.n	4087f8 <_fstat_r+0x18>
  408800:	602b      	str	r3, [r5, #0]
  408802:	bd38      	pop	{r3, r4, r5, pc}
  408804:	20408510 	.word	0x20408510

00408808 <_isatty_r>:
  408808:	b538      	push	{r3, r4, r5, lr}
  40880a:	4c07      	ldr	r4, [pc, #28]	; (408828 <_isatty_r+0x20>)
  40880c:	2300      	movs	r3, #0
  40880e:	4605      	mov	r5, r0
  408810:	4608      	mov	r0, r1
  408812:	6023      	str	r3, [r4, #0]
  408814:	f7f9 fdea 	bl	4023ec <_isatty>
  408818:	1c43      	adds	r3, r0, #1
  40881a:	d000      	beq.n	40881e <_isatty_r+0x16>
  40881c:	bd38      	pop	{r3, r4, r5, pc}
  40881e:	6823      	ldr	r3, [r4, #0]
  408820:	2b00      	cmp	r3, #0
  408822:	d0fb      	beq.n	40881c <_isatty_r+0x14>
  408824:	602b      	str	r3, [r5, #0]
  408826:	bd38      	pop	{r3, r4, r5, pc}
  408828:	20408510 	.word	0x20408510

0040882c <_lseek_r>:
  40882c:	b570      	push	{r4, r5, r6, lr}
  40882e:	460d      	mov	r5, r1
  408830:	4c08      	ldr	r4, [pc, #32]	; (408854 <_lseek_r+0x28>)
  408832:	4611      	mov	r1, r2
  408834:	4606      	mov	r6, r0
  408836:	461a      	mov	r2, r3
  408838:	4628      	mov	r0, r5
  40883a:	2300      	movs	r3, #0
  40883c:	6023      	str	r3, [r4, #0]
  40883e:	f7f9 fdd7 	bl	4023f0 <_lseek>
  408842:	1c43      	adds	r3, r0, #1
  408844:	d000      	beq.n	408848 <_lseek_r+0x1c>
  408846:	bd70      	pop	{r4, r5, r6, pc}
  408848:	6823      	ldr	r3, [r4, #0]
  40884a:	2b00      	cmp	r3, #0
  40884c:	d0fb      	beq.n	408846 <_lseek_r+0x1a>
  40884e:	6033      	str	r3, [r6, #0]
  408850:	bd70      	pop	{r4, r5, r6, pc}
  408852:	bf00      	nop
  408854:	20408510 	.word	0x20408510

00408858 <_read_r>:
  408858:	b570      	push	{r4, r5, r6, lr}
  40885a:	460d      	mov	r5, r1
  40885c:	4c08      	ldr	r4, [pc, #32]	; (408880 <_read_r+0x28>)
  40885e:	4611      	mov	r1, r2
  408860:	4606      	mov	r6, r0
  408862:	461a      	mov	r2, r3
  408864:	4628      	mov	r0, r5
  408866:	2300      	movs	r3, #0
  408868:	6023      	str	r3, [r4, #0]
  40886a:	f7f7 fcb3 	bl	4001d4 <_read>
  40886e:	1c43      	adds	r3, r0, #1
  408870:	d000      	beq.n	408874 <_read_r+0x1c>
  408872:	bd70      	pop	{r4, r5, r6, pc}
  408874:	6823      	ldr	r3, [r4, #0]
  408876:	2b00      	cmp	r3, #0
  408878:	d0fb      	beq.n	408872 <_read_r+0x1a>
  40887a:	6033      	str	r3, [r6, #0]
  40887c:	bd70      	pop	{r4, r5, r6, pc}
  40887e:	bf00      	nop
  408880:	20408510 	.word	0x20408510

00408884 <__aeabi_drsub>:
  408884:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408888:	e002      	b.n	408890 <__adddf3>
  40888a:	bf00      	nop

0040888c <__aeabi_dsub>:
  40888c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408890 <__adddf3>:
  408890:	b530      	push	{r4, r5, lr}
  408892:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408896:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40889a:	ea94 0f05 	teq	r4, r5
  40889e:	bf08      	it	eq
  4088a0:	ea90 0f02 	teqeq	r0, r2
  4088a4:	bf1f      	itttt	ne
  4088a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4088aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4088ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4088b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4088b6:	f000 80e2 	beq.w	408a7e <__adddf3+0x1ee>
  4088ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4088be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4088c2:	bfb8      	it	lt
  4088c4:	426d      	neglt	r5, r5
  4088c6:	dd0c      	ble.n	4088e2 <__adddf3+0x52>
  4088c8:	442c      	add	r4, r5
  4088ca:	ea80 0202 	eor.w	r2, r0, r2
  4088ce:	ea81 0303 	eor.w	r3, r1, r3
  4088d2:	ea82 0000 	eor.w	r0, r2, r0
  4088d6:	ea83 0101 	eor.w	r1, r3, r1
  4088da:	ea80 0202 	eor.w	r2, r0, r2
  4088de:	ea81 0303 	eor.w	r3, r1, r3
  4088e2:	2d36      	cmp	r5, #54	; 0x36
  4088e4:	bf88      	it	hi
  4088e6:	bd30      	pophi	{r4, r5, pc}
  4088e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4088ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4088f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4088f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4088f8:	d002      	beq.n	408900 <__adddf3+0x70>
  4088fa:	4240      	negs	r0, r0
  4088fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408900:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408904:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408908:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40890c:	d002      	beq.n	408914 <__adddf3+0x84>
  40890e:	4252      	negs	r2, r2
  408910:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408914:	ea94 0f05 	teq	r4, r5
  408918:	f000 80a7 	beq.w	408a6a <__adddf3+0x1da>
  40891c:	f1a4 0401 	sub.w	r4, r4, #1
  408920:	f1d5 0e20 	rsbs	lr, r5, #32
  408924:	db0d      	blt.n	408942 <__adddf3+0xb2>
  408926:	fa02 fc0e 	lsl.w	ip, r2, lr
  40892a:	fa22 f205 	lsr.w	r2, r2, r5
  40892e:	1880      	adds	r0, r0, r2
  408930:	f141 0100 	adc.w	r1, r1, #0
  408934:	fa03 f20e 	lsl.w	r2, r3, lr
  408938:	1880      	adds	r0, r0, r2
  40893a:	fa43 f305 	asr.w	r3, r3, r5
  40893e:	4159      	adcs	r1, r3
  408940:	e00e      	b.n	408960 <__adddf3+0xd0>
  408942:	f1a5 0520 	sub.w	r5, r5, #32
  408946:	f10e 0e20 	add.w	lr, lr, #32
  40894a:	2a01      	cmp	r2, #1
  40894c:	fa03 fc0e 	lsl.w	ip, r3, lr
  408950:	bf28      	it	cs
  408952:	f04c 0c02 	orrcs.w	ip, ip, #2
  408956:	fa43 f305 	asr.w	r3, r3, r5
  40895a:	18c0      	adds	r0, r0, r3
  40895c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408964:	d507      	bpl.n	408976 <__adddf3+0xe6>
  408966:	f04f 0e00 	mov.w	lr, #0
  40896a:	f1dc 0c00 	rsbs	ip, ip, #0
  40896e:	eb7e 0000 	sbcs.w	r0, lr, r0
  408972:	eb6e 0101 	sbc.w	r1, lr, r1
  408976:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40897a:	d31b      	bcc.n	4089b4 <__adddf3+0x124>
  40897c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408980:	d30c      	bcc.n	40899c <__adddf3+0x10c>
  408982:	0849      	lsrs	r1, r1, #1
  408984:	ea5f 0030 	movs.w	r0, r0, rrx
  408988:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40898c:	f104 0401 	add.w	r4, r4, #1
  408990:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408994:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408998:	f080 809a 	bcs.w	408ad0 <__adddf3+0x240>
  40899c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4089a0:	bf08      	it	eq
  4089a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4089a6:	f150 0000 	adcs.w	r0, r0, #0
  4089aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089ae:	ea41 0105 	orr.w	r1, r1, r5
  4089b2:	bd30      	pop	{r4, r5, pc}
  4089b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4089b8:	4140      	adcs	r0, r0
  4089ba:	eb41 0101 	adc.w	r1, r1, r1
  4089be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089c2:	f1a4 0401 	sub.w	r4, r4, #1
  4089c6:	d1e9      	bne.n	40899c <__adddf3+0x10c>
  4089c8:	f091 0f00 	teq	r1, #0
  4089cc:	bf04      	itt	eq
  4089ce:	4601      	moveq	r1, r0
  4089d0:	2000      	moveq	r0, #0
  4089d2:	fab1 f381 	clz	r3, r1
  4089d6:	bf08      	it	eq
  4089d8:	3320      	addeq	r3, #32
  4089da:	f1a3 030b 	sub.w	r3, r3, #11
  4089de:	f1b3 0220 	subs.w	r2, r3, #32
  4089e2:	da0c      	bge.n	4089fe <__adddf3+0x16e>
  4089e4:	320c      	adds	r2, #12
  4089e6:	dd08      	ble.n	4089fa <__adddf3+0x16a>
  4089e8:	f102 0c14 	add.w	ip, r2, #20
  4089ec:	f1c2 020c 	rsb	r2, r2, #12
  4089f0:	fa01 f00c 	lsl.w	r0, r1, ip
  4089f4:	fa21 f102 	lsr.w	r1, r1, r2
  4089f8:	e00c      	b.n	408a14 <__adddf3+0x184>
  4089fa:	f102 0214 	add.w	r2, r2, #20
  4089fe:	bfd8      	it	le
  408a00:	f1c2 0c20 	rsble	ip, r2, #32
  408a04:	fa01 f102 	lsl.w	r1, r1, r2
  408a08:	fa20 fc0c 	lsr.w	ip, r0, ip
  408a0c:	bfdc      	itt	le
  408a0e:	ea41 010c 	orrle.w	r1, r1, ip
  408a12:	4090      	lslle	r0, r2
  408a14:	1ae4      	subs	r4, r4, r3
  408a16:	bfa2      	ittt	ge
  408a18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408a1c:	4329      	orrge	r1, r5
  408a1e:	bd30      	popge	{r4, r5, pc}
  408a20:	ea6f 0404 	mvn.w	r4, r4
  408a24:	3c1f      	subs	r4, #31
  408a26:	da1c      	bge.n	408a62 <__adddf3+0x1d2>
  408a28:	340c      	adds	r4, #12
  408a2a:	dc0e      	bgt.n	408a4a <__adddf3+0x1ba>
  408a2c:	f104 0414 	add.w	r4, r4, #20
  408a30:	f1c4 0220 	rsb	r2, r4, #32
  408a34:	fa20 f004 	lsr.w	r0, r0, r4
  408a38:	fa01 f302 	lsl.w	r3, r1, r2
  408a3c:	ea40 0003 	orr.w	r0, r0, r3
  408a40:	fa21 f304 	lsr.w	r3, r1, r4
  408a44:	ea45 0103 	orr.w	r1, r5, r3
  408a48:	bd30      	pop	{r4, r5, pc}
  408a4a:	f1c4 040c 	rsb	r4, r4, #12
  408a4e:	f1c4 0220 	rsb	r2, r4, #32
  408a52:	fa20 f002 	lsr.w	r0, r0, r2
  408a56:	fa01 f304 	lsl.w	r3, r1, r4
  408a5a:	ea40 0003 	orr.w	r0, r0, r3
  408a5e:	4629      	mov	r1, r5
  408a60:	bd30      	pop	{r4, r5, pc}
  408a62:	fa21 f004 	lsr.w	r0, r1, r4
  408a66:	4629      	mov	r1, r5
  408a68:	bd30      	pop	{r4, r5, pc}
  408a6a:	f094 0f00 	teq	r4, #0
  408a6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408a72:	bf06      	itte	eq
  408a74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408a78:	3401      	addeq	r4, #1
  408a7a:	3d01      	subne	r5, #1
  408a7c:	e74e      	b.n	40891c <__adddf3+0x8c>
  408a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408a82:	bf18      	it	ne
  408a84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408a88:	d029      	beq.n	408ade <__adddf3+0x24e>
  408a8a:	ea94 0f05 	teq	r4, r5
  408a8e:	bf08      	it	eq
  408a90:	ea90 0f02 	teqeq	r0, r2
  408a94:	d005      	beq.n	408aa2 <__adddf3+0x212>
  408a96:	ea54 0c00 	orrs.w	ip, r4, r0
  408a9a:	bf04      	itt	eq
  408a9c:	4619      	moveq	r1, r3
  408a9e:	4610      	moveq	r0, r2
  408aa0:	bd30      	pop	{r4, r5, pc}
  408aa2:	ea91 0f03 	teq	r1, r3
  408aa6:	bf1e      	ittt	ne
  408aa8:	2100      	movne	r1, #0
  408aaa:	2000      	movne	r0, #0
  408aac:	bd30      	popne	{r4, r5, pc}
  408aae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408ab2:	d105      	bne.n	408ac0 <__adddf3+0x230>
  408ab4:	0040      	lsls	r0, r0, #1
  408ab6:	4149      	adcs	r1, r1
  408ab8:	bf28      	it	cs
  408aba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408abe:	bd30      	pop	{r4, r5, pc}
  408ac0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408ac4:	bf3c      	itt	cc
  408ac6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408aca:	bd30      	popcc	{r4, r5, pc}
  408acc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408ad0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408ad4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408ad8:	f04f 0000 	mov.w	r0, #0
  408adc:	bd30      	pop	{r4, r5, pc}
  408ade:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408ae2:	bf1a      	itte	ne
  408ae4:	4619      	movne	r1, r3
  408ae6:	4610      	movne	r0, r2
  408ae8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408aec:	bf1c      	itt	ne
  408aee:	460b      	movne	r3, r1
  408af0:	4602      	movne	r2, r0
  408af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408af6:	bf06      	itte	eq
  408af8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408afc:	ea91 0f03 	teqeq	r1, r3
  408b00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408b04:	bd30      	pop	{r4, r5, pc}
  408b06:	bf00      	nop

00408b08 <__aeabi_ui2d>:
  408b08:	f090 0f00 	teq	r0, #0
  408b0c:	bf04      	itt	eq
  408b0e:	2100      	moveq	r1, #0
  408b10:	4770      	bxeq	lr
  408b12:	b530      	push	{r4, r5, lr}
  408b14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408b18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408b1c:	f04f 0500 	mov.w	r5, #0
  408b20:	f04f 0100 	mov.w	r1, #0
  408b24:	e750      	b.n	4089c8 <__adddf3+0x138>
  408b26:	bf00      	nop

00408b28 <__aeabi_i2d>:
  408b28:	f090 0f00 	teq	r0, #0
  408b2c:	bf04      	itt	eq
  408b2e:	2100      	moveq	r1, #0
  408b30:	4770      	bxeq	lr
  408b32:	b530      	push	{r4, r5, lr}
  408b34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408b38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408b3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408b40:	bf48      	it	mi
  408b42:	4240      	negmi	r0, r0
  408b44:	f04f 0100 	mov.w	r1, #0
  408b48:	e73e      	b.n	4089c8 <__adddf3+0x138>
  408b4a:	bf00      	nop

00408b4c <__aeabi_f2d>:
  408b4c:	0042      	lsls	r2, r0, #1
  408b4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408b52:	ea4f 0131 	mov.w	r1, r1, rrx
  408b56:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408b5a:	bf1f      	itttt	ne
  408b5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408b60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408b64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408b68:	4770      	bxne	lr
  408b6a:	f092 0f00 	teq	r2, #0
  408b6e:	bf14      	ite	ne
  408b70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408b74:	4770      	bxeq	lr
  408b76:	b530      	push	{r4, r5, lr}
  408b78:	f44f 7460 	mov.w	r4, #896	; 0x380
  408b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408b84:	e720      	b.n	4089c8 <__adddf3+0x138>
  408b86:	bf00      	nop

00408b88 <__aeabi_ul2d>:
  408b88:	ea50 0201 	orrs.w	r2, r0, r1
  408b8c:	bf08      	it	eq
  408b8e:	4770      	bxeq	lr
  408b90:	b530      	push	{r4, r5, lr}
  408b92:	f04f 0500 	mov.w	r5, #0
  408b96:	e00a      	b.n	408bae <__aeabi_l2d+0x16>

00408b98 <__aeabi_l2d>:
  408b98:	ea50 0201 	orrs.w	r2, r0, r1
  408b9c:	bf08      	it	eq
  408b9e:	4770      	bxeq	lr
  408ba0:	b530      	push	{r4, r5, lr}
  408ba2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408ba6:	d502      	bpl.n	408bae <__aeabi_l2d+0x16>
  408ba8:	4240      	negs	r0, r0
  408baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408bae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408bb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408bb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408bba:	f43f aedc 	beq.w	408976 <__adddf3+0xe6>
  408bbe:	f04f 0203 	mov.w	r2, #3
  408bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408bc6:	bf18      	it	ne
  408bc8:	3203      	addne	r2, #3
  408bca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408bce:	bf18      	it	ne
  408bd0:	3203      	addne	r2, #3
  408bd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408bd6:	f1c2 0320 	rsb	r3, r2, #32
  408bda:	fa00 fc03 	lsl.w	ip, r0, r3
  408bde:	fa20 f002 	lsr.w	r0, r0, r2
  408be2:	fa01 fe03 	lsl.w	lr, r1, r3
  408be6:	ea40 000e 	orr.w	r0, r0, lr
  408bea:	fa21 f102 	lsr.w	r1, r1, r2
  408bee:	4414      	add	r4, r2
  408bf0:	e6c1      	b.n	408976 <__adddf3+0xe6>
  408bf2:	bf00      	nop

00408bf4 <__aeabi_dmul>:
  408bf4:	b570      	push	{r4, r5, r6, lr}
  408bf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408bfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408bfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408c02:	bf1d      	ittte	ne
  408c04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408c08:	ea94 0f0c 	teqne	r4, ip
  408c0c:	ea95 0f0c 	teqne	r5, ip
  408c10:	f000 f8de 	bleq	408dd0 <__aeabi_dmul+0x1dc>
  408c14:	442c      	add	r4, r5
  408c16:	ea81 0603 	eor.w	r6, r1, r3
  408c1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408c1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408c22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408c26:	bf18      	it	ne
  408c28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408c34:	d038      	beq.n	408ca8 <__aeabi_dmul+0xb4>
  408c36:	fba0 ce02 	umull	ip, lr, r0, r2
  408c3a:	f04f 0500 	mov.w	r5, #0
  408c3e:	fbe1 e502 	umlal	lr, r5, r1, r2
  408c42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408c46:	fbe0 e503 	umlal	lr, r5, r0, r3
  408c4a:	f04f 0600 	mov.w	r6, #0
  408c4e:	fbe1 5603 	umlal	r5, r6, r1, r3
  408c52:	f09c 0f00 	teq	ip, #0
  408c56:	bf18      	it	ne
  408c58:	f04e 0e01 	orrne.w	lr, lr, #1
  408c5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408c60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408c64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408c68:	d204      	bcs.n	408c74 <__aeabi_dmul+0x80>
  408c6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408c6e:	416d      	adcs	r5, r5
  408c70:	eb46 0606 	adc.w	r6, r6, r6
  408c74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408c78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408c7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408c80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408c84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408c88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408c8c:	bf88      	it	hi
  408c8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408c92:	d81e      	bhi.n	408cd2 <__aeabi_dmul+0xde>
  408c94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408c98:	bf08      	it	eq
  408c9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408c9e:	f150 0000 	adcs.w	r0, r0, #0
  408ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408ca6:	bd70      	pop	{r4, r5, r6, pc}
  408ca8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408cac:	ea46 0101 	orr.w	r1, r6, r1
  408cb0:	ea40 0002 	orr.w	r0, r0, r2
  408cb4:	ea81 0103 	eor.w	r1, r1, r3
  408cb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408cbc:	bfc2      	ittt	gt
  408cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
  408cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408cc6:	bd70      	popgt	{r4, r5, r6, pc}
  408cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408ccc:	f04f 0e00 	mov.w	lr, #0
  408cd0:	3c01      	subs	r4, #1
  408cd2:	f300 80ab 	bgt.w	408e2c <__aeabi_dmul+0x238>
  408cd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408cda:	bfde      	ittt	le
  408cdc:	2000      	movle	r0, #0
  408cde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408ce2:	bd70      	pople	{r4, r5, r6, pc}
  408ce4:	f1c4 0400 	rsb	r4, r4, #0
  408ce8:	3c20      	subs	r4, #32
  408cea:	da35      	bge.n	408d58 <__aeabi_dmul+0x164>
  408cec:	340c      	adds	r4, #12
  408cee:	dc1b      	bgt.n	408d28 <__aeabi_dmul+0x134>
  408cf0:	f104 0414 	add.w	r4, r4, #20
  408cf4:	f1c4 0520 	rsb	r5, r4, #32
  408cf8:	fa00 f305 	lsl.w	r3, r0, r5
  408cfc:	fa20 f004 	lsr.w	r0, r0, r4
  408d00:	fa01 f205 	lsl.w	r2, r1, r5
  408d04:	ea40 0002 	orr.w	r0, r0, r2
  408d08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408d0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408d10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408d14:	fa21 f604 	lsr.w	r6, r1, r4
  408d18:	eb42 0106 	adc.w	r1, r2, r6
  408d1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d20:	bf08      	it	eq
  408d22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d26:	bd70      	pop	{r4, r5, r6, pc}
  408d28:	f1c4 040c 	rsb	r4, r4, #12
  408d2c:	f1c4 0520 	rsb	r5, r4, #32
  408d30:	fa00 f304 	lsl.w	r3, r0, r4
  408d34:	fa20 f005 	lsr.w	r0, r0, r5
  408d38:	fa01 f204 	lsl.w	r2, r1, r4
  408d3c:	ea40 0002 	orr.w	r0, r0, r2
  408d40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408d44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408d48:	f141 0100 	adc.w	r1, r1, #0
  408d4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d50:	bf08      	it	eq
  408d52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d56:	bd70      	pop	{r4, r5, r6, pc}
  408d58:	f1c4 0520 	rsb	r5, r4, #32
  408d5c:	fa00 f205 	lsl.w	r2, r0, r5
  408d60:	ea4e 0e02 	orr.w	lr, lr, r2
  408d64:	fa20 f304 	lsr.w	r3, r0, r4
  408d68:	fa01 f205 	lsl.w	r2, r1, r5
  408d6c:	ea43 0302 	orr.w	r3, r3, r2
  408d70:	fa21 f004 	lsr.w	r0, r1, r4
  408d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408d78:	fa21 f204 	lsr.w	r2, r1, r4
  408d7c:	ea20 0002 	bic.w	r0, r0, r2
  408d80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408d84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d88:	bf08      	it	eq
  408d8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d8e:	bd70      	pop	{r4, r5, r6, pc}
  408d90:	f094 0f00 	teq	r4, #0
  408d94:	d10f      	bne.n	408db6 <__aeabi_dmul+0x1c2>
  408d96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408d9a:	0040      	lsls	r0, r0, #1
  408d9c:	eb41 0101 	adc.w	r1, r1, r1
  408da0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408da4:	bf08      	it	eq
  408da6:	3c01      	subeq	r4, #1
  408da8:	d0f7      	beq.n	408d9a <__aeabi_dmul+0x1a6>
  408daa:	ea41 0106 	orr.w	r1, r1, r6
  408dae:	f095 0f00 	teq	r5, #0
  408db2:	bf18      	it	ne
  408db4:	4770      	bxne	lr
  408db6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408dba:	0052      	lsls	r2, r2, #1
  408dbc:	eb43 0303 	adc.w	r3, r3, r3
  408dc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408dc4:	bf08      	it	eq
  408dc6:	3d01      	subeq	r5, #1
  408dc8:	d0f7      	beq.n	408dba <__aeabi_dmul+0x1c6>
  408dca:	ea43 0306 	orr.w	r3, r3, r6
  408dce:	4770      	bx	lr
  408dd0:	ea94 0f0c 	teq	r4, ip
  408dd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408dd8:	bf18      	it	ne
  408dda:	ea95 0f0c 	teqne	r5, ip
  408dde:	d00c      	beq.n	408dfa <__aeabi_dmul+0x206>
  408de0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408de4:	bf18      	it	ne
  408de6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408dea:	d1d1      	bne.n	408d90 <__aeabi_dmul+0x19c>
  408dec:	ea81 0103 	eor.w	r1, r1, r3
  408df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408df4:	f04f 0000 	mov.w	r0, #0
  408df8:	bd70      	pop	{r4, r5, r6, pc}
  408dfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408dfe:	bf06      	itte	eq
  408e00:	4610      	moveq	r0, r2
  408e02:	4619      	moveq	r1, r3
  408e04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408e08:	d019      	beq.n	408e3e <__aeabi_dmul+0x24a>
  408e0a:	ea94 0f0c 	teq	r4, ip
  408e0e:	d102      	bne.n	408e16 <__aeabi_dmul+0x222>
  408e10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408e14:	d113      	bne.n	408e3e <__aeabi_dmul+0x24a>
  408e16:	ea95 0f0c 	teq	r5, ip
  408e1a:	d105      	bne.n	408e28 <__aeabi_dmul+0x234>
  408e1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408e20:	bf1c      	itt	ne
  408e22:	4610      	movne	r0, r2
  408e24:	4619      	movne	r1, r3
  408e26:	d10a      	bne.n	408e3e <__aeabi_dmul+0x24a>
  408e28:	ea81 0103 	eor.w	r1, r1, r3
  408e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408e30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408e38:	f04f 0000 	mov.w	r0, #0
  408e3c:	bd70      	pop	{r4, r5, r6, pc}
  408e3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408e46:	bd70      	pop	{r4, r5, r6, pc}

00408e48 <__aeabi_ddiv>:
  408e48:	b570      	push	{r4, r5, r6, lr}
  408e4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408e4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408e52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408e56:	bf1d      	ittte	ne
  408e58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408e5c:	ea94 0f0c 	teqne	r4, ip
  408e60:	ea95 0f0c 	teqne	r5, ip
  408e64:	f000 f8a7 	bleq	408fb6 <__aeabi_ddiv+0x16e>
  408e68:	eba4 0405 	sub.w	r4, r4, r5
  408e6c:	ea81 0e03 	eor.w	lr, r1, r3
  408e70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408e74:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408e78:	f000 8088 	beq.w	408f8c <__aeabi_ddiv+0x144>
  408e7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408e80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408e84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408e88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408e8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408e90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408e94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408e98:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408e9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408ea0:	429d      	cmp	r5, r3
  408ea2:	bf08      	it	eq
  408ea4:	4296      	cmpeq	r6, r2
  408ea6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408eaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408eae:	d202      	bcs.n	408eb6 <__aeabi_ddiv+0x6e>
  408eb0:	085b      	lsrs	r3, r3, #1
  408eb2:	ea4f 0232 	mov.w	r2, r2, rrx
  408eb6:	1ab6      	subs	r6, r6, r2
  408eb8:	eb65 0503 	sbc.w	r5, r5, r3
  408ebc:	085b      	lsrs	r3, r3, #1
  408ebe:	ea4f 0232 	mov.w	r2, r2, rrx
  408ec2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408ec6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408eca:	ebb6 0e02 	subs.w	lr, r6, r2
  408ece:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ed2:	bf22      	ittt	cs
  408ed4:	1ab6      	subcs	r6, r6, r2
  408ed6:	4675      	movcs	r5, lr
  408ed8:	ea40 000c 	orrcs.w	r0, r0, ip
  408edc:	085b      	lsrs	r3, r3, #1
  408ede:	ea4f 0232 	mov.w	r2, r2, rrx
  408ee2:	ebb6 0e02 	subs.w	lr, r6, r2
  408ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
  408eea:	bf22      	ittt	cs
  408eec:	1ab6      	subcs	r6, r6, r2
  408eee:	4675      	movcs	r5, lr
  408ef0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408ef4:	085b      	lsrs	r3, r3, #1
  408ef6:	ea4f 0232 	mov.w	r2, r2, rrx
  408efa:	ebb6 0e02 	subs.w	lr, r6, r2
  408efe:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f02:	bf22      	ittt	cs
  408f04:	1ab6      	subcs	r6, r6, r2
  408f06:	4675      	movcs	r5, lr
  408f08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408f0c:	085b      	lsrs	r3, r3, #1
  408f0e:	ea4f 0232 	mov.w	r2, r2, rrx
  408f12:	ebb6 0e02 	subs.w	lr, r6, r2
  408f16:	eb75 0e03 	sbcs.w	lr, r5, r3
  408f1a:	bf22      	ittt	cs
  408f1c:	1ab6      	subcs	r6, r6, r2
  408f1e:	4675      	movcs	r5, lr
  408f20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408f24:	ea55 0e06 	orrs.w	lr, r5, r6
  408f28:	d018      	beq.n	408f5c <__aeabi_ddiv+0x114>
  408f2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408f2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408f32:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408f36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408f3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408f3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408f42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408f46:	d1c0      	bne.n	408eca <__aeabi_ddiv+0x82>
  408f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f4c:	d10b      	bne.n	408f66 <__aeabi_ddiv+0x11e>
  408f4e:	ea41 0100 	orr.w	r1, r1, r0
  408f52:	f04f 0000 	mov.w	r0, #0
  408f56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408f5a:	e7b6      	b.n	408eca <__aeabi_ddiv+0x82>
  408f5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f60:	bf04      	itt	eq
  408f62:	4301      	orreq	r1, r0
  408f64:	2000      	moveq	r0, #0
  408f66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408f6a:	bf88      	it	hi
  408f6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408f70:	f63f aeaf 	bhi.w	408cd2 <__aeabi_dmul+0xde>
  408f74:	ebb5 0c03 	subs.w	ip, r5, r3
  408f78:	bf04      	itt	eq
  408f7a:	ebb6 0c02 	subseq.w	ip, r6, r2
  408f7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408f82:	f150 0000 	adcs.w	r0, r0, #0
  408f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408f8a:	bd70      	pop	{r4, r5, r6, pc}
  408f8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408f90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408f94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408f98:	bfc2      	ittt	gt
  408f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  408f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408fa2:	bd70      	popgt	{r4, r5, r6, pc}
  408fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408fa8:	f04f 0e00 	mov.w	lr, #0
  408fac:	3c01      	subs	r4, #1
  408fae:	e690      	b.n	408cd2 <__aeabi_dmul+0xde>
  408fb0:	ea45 0e06 	orr.w	lr, r5, r6
  408fb4:	e68d      	b.n	408cd2 <__aeabi_dmul+0xde>
  408fb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408fba:	ea94 0f0c 	teq	r4, ip
  408fbe:	bf08      	it	eq
  408fc0:	ea95 0f0c 	teqeq	r5, ip
  408fc4:	f43f af3b 	beq.w	408e3e <__aeabi_dmul+0x24a>
  408fc8:	ea94 0f0c 	teq	r4, ip
  408fcc:	d10a      	bne.n	408fe4 <__aeabi_ddiv+0x19c>
  408fce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408fd2:	f47f af34 	bne.w	408e3e <__aeabi_dmul+0x24a>
  408fd6:	ea95 0f0c 	teq	r5, ip
  408fda:	f47f af25 	bne.w	408e28 <__aeabi_dmul+0x234>
  408fde:	4610      	mov	r0, r2
  408fe0:	4619      	mov	r1, r3
  408fe2:	e72c      	b.n	408e3e <__aeabi_dmul+0x24a>
  408fe4:	ea95 0f0c 	teq	r5, ip
  408fe8:	d106      	bne.n	408ff8 <__aeabi_ddiv+0x1b0>
  408fea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408fee:	f43f aefd 	beq.w	408dec <__aeabi_dmul+0x1f8>
  408ff2:	4610      	mov	r0, r2
  408ff4:	4619      	mov	r1, r3
  408ff6:	e722      	b.n	408e3e <__aeabi_dmul+0x24a>
  408ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408ffc:	bf18      	it	ne
  408ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409002:	f47f aec5 	bne.w	408d90 <__aeabi_dmul+0x19c>
  409006:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40900a:	f47f af0d 	bne.w	408e28 <__aeabi_dmul+0x234>
  40900e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409012:	f47f aeeb 	bne.w	408dec <__aeabi_dmul+0x1f8>
  409016:	e712      	b.n	408e3e <__aeabi_dmul+0x24a>

00409018 <__gedf2>:
  409018:	f04f 3cff 	mov.w	ip, #4294967295
  40901c:	e006      	b.n	40902c <__cmpdf2+0x4>
  40901e:	bf00      	nop

00409020 <__ledf2>:
  409020:	f04f 0c01 	mov.w	ip, #1
  409024:	e002      	b.n	40902c <__cmpdf2+0x4>
  409026:	bf00      	nop

00409028 <__cmpdf2>:
  409028:	f04f 0c01 	mov.w	ip, #1
  40902c:	f84d cd04 	str.w	ip, [sp, #-4]!
  409030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409038:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40903c:	bf18      	it	ne
  40903e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409042:	d01b      	beq.n	40907c <__cmpdf2+0x54>
  409044:	b001      	add	sp, #4
  409046:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40904a:	bf0c      	ite	eq
  40904c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409050:	ea91 0f03 	teqne	r1, r3
  409054:	bf02      	ittt	eq
  409056:	ea90 0f02 	teqeq	r0, r2
  40905a:	2000      	moveq	r0, #0
  40905c:	4770      	bxeq	lr
  40905e:	f110 0f00 	cmn.w	r0, #0
  409062:	ea91 0f03 	teq	r1, r3
  409066:	bf58      	it	pl
  409068:	4299      	cmppl	r1, r3
  40906a:	bf08      	it	eq
  40906c:	4290      	cmpeq	r0, r2
  40906e:	bf2c      	ite	cs
  409070:	17d8      	asrcs	r0, r3, #31
  409072:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409076:	f040 0001 	orr.w	r0, r0, #1
  40907a:	4770      	bx	lr
  40907c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409084:	d102      	bne.n	40908c <__cmpdf2+0x64>
  409086:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40908a:	d107      	bne.n	40909c <__cmpdf2+0x74>
  40908c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409094:	d1d6      	bne.n	409044 <__cmpdf2+0x1c>
  409096:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40909a:	d0d3      	beq.n	409044 <__cmpdf2+0x1c>
  40909c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4090a0:	4770      	bx	lr
  4090a2:	bf00      	nop

004090a4 <__aeabi_cdrcmple>:
  4090a4:	4684      	mov	ip, r0
  4090a6:	4610      	mov	r0, r2
  4090a8:	4662      	mov	r2, ip
  4090aa:	468c      	mov	ip, r1
  4090ac:	4619      	mov	r1, r3
  4090ae:	4663      	mov	r3, ip
  4090b0:	e000      	b.n	4090b4 <__aeabi_cdcmpeq>
  4090b2:	bf00      	nop

004090b4 <__aeabi_cdcmpeq>:
  4090b4:	b501      	push	{r0, lr}
  4090b6:	f7ff ffb7 	bl	409028 <__cmpdf2>
  4090ba:	2800      	cmp	r0, #0
  4090bc:	bf48      	it	mi
  4090be:	f110 0f00 	cmnmi.w	r0, #0
  4090c2:	bd01      	pop	{r0, pc}

004090c4 <__aeabi_dcmpeq>:
  4090c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090c8:	f7ff fff4 	bl	4090b4 <__aeabi_cdcmpeq>
  4090cc:	bf0c      	ite	eq
  4090ce:	2001      	moveq	r0, #1
  4090d0:	2000      	movne	r0, #0
  4090d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4090d6:	bf00      	nop

004090d8 <__aeabi_dcmplt>:
  4090d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090dc:	f7ff ffea 	bl	4090b4 <__aeabi_cdcmpeq>
  4090e0:	bf34      	ite	cc
  4090e2:	2001      	movcc	r0, #1
  4090e4:	2000      	movcs	r0, #0
  4090e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4090ea:	bf00      	nop

004090ec <__aeabi_dcmple>:
  4090ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090f0:	f7ff ffe0 	bl	4090b4 <__aeabi_cdcmpeq>
  4090f4:	bf94      	ite	ls
  4090f6:	2001      	movls	r0, #1
  4090f8:	2000      	movhi	r0, #0
  4090fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4090fe:	bf00      	nop

00409100 <__aeabi_dcmpge>:
  409100:	f84d ed08 	str.w	lr, [sp, #-8]!
  409104:	f7ff ffce 	bl	4090a4 <__aeabi_cdrcmple>
  409108:	bf94      	ite	ls
  40910a:	2001      	movls	r0, #1
  40910c:	2000      	movhi	r0, #0
  40910e:	f85d fb08 	ldr.w	pc, [sp], #8
  409112:	bf00      	nop

00409114 <__aeabi_dcmpgt>:
  409114:	f84d ed08 	str.w	lr, [sp, #-8]!
  409118:	f7ff ffc4 	bl	4090a4 <__aeabi_cdrcmple>
  40911c:	bf34      	ite	cc
  40911e:	2001      	movcc	r0, #1
  409120:	2000      	movcs	r0, #0
  409122:	f85d fb08 	ldr.w	pc, [sp], #8
  409126:	bf00      	nop

00409128 <__aeabi_dcmpun>:
  409128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40912c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409130:	d102      	bne.n	409138 <__aeabi_dcmpun+0x10>
  409132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409136:	d10a      	bne.n	40914e <__aeabi_dcmpun+0x26>
  409138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40913c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409140:	d102      	bne.n	409148 <__aeabi_dcmpun+0x20>
  409142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409146:	d102      	bne.n	40914e <__aeabi_dcmpun+0x26>
  409148:	f04f 0000 	mov.w	r0, #0
  40914c:	4770      	bx	lr
  40914e:	f04f 0001 	mov.w	r0, #1
  409152:	4770      	bx	lr

00409154 <__aeabi_d2iz>:
  409154:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409158:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40915c:	d215      	bcs.n	40918a <__aeabi_d2iz+0x36>
  40915e:	d511      	bpl.n	409184 <__aeabi_d2iz+0x30>
  409160:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409164:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409168:	d912      	bls.n	409190 <__aeabi_d2iz+0x3c>
  40916a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40916e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409172:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409176:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40917a:	fa23 f002 	lsr.w	r0, r3, r2
  40917e:	bf18      	it	ne
  409180:	4240      	negne	r0, r0
  409182:	4770      	bx	lr
  409184:	f04f 0000 	mov.w	r0, #0
  409188:	4770      	bx	lr
  40918a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40918e:	d105      	bne.n	40919c <__aeabi_d2iz+0x48>
  409190:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409194:	bf08      	it	eq
  409196:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40919a:	4770      	bx	lr
  40919c:	f04f 0000 	mov.w	r0, #0
  4091a0:	4770      	bx	lr
  4091a2:	bf00      	nop
  4091a4:	49203a45 	.word	0x49203a45
  4091a8:	20504d43 	.word	0x20504d43
  4091ac:	646e6553 	.word	0x646e6553
  4091b0:	30202d20 	.word	0x30202d20
  4091b4:	0a782578 	.word	0x0a782578
  4091b8:	0000000d 	.word	0x0000000d
  4091bc:	4d202d2d 	.word	0x4d202d2d
  4091c0:	25204341 	.word	0x25204341
  4091c4:	78253a78 	.word	0x78253a78
  4091c8:	3a78253a 	.word	0x3a78253a
  4091cc:	253a7825 	.word	0x253a7825
  4091d0:	78253a78 	.word	0x78253a78
  4091d4:	00000d0a 	.word	0x00000d0a
  4091d8:	41203a45 	.word	0x41203a45
  4091dc:	53205052 	.word	0x53205052
  4091e0:	20646e65 	.word	0x20646e65
  4091e4:	7830202d 	.word	0x7830202d
  4091e8:	0d0a7825 	.word	0x0d0a7825
  4091ec:	00000000 	.word	0x00000000
  4091f0:	20594850 	.word	0x20594850
  4091f4:	74696e49 	.word	0x74696e49
  4091f8:	696c6169 	.word	0x696c6169
  4091fc:	4520657a 	.word	0x4520657a
  409200:	524f5252 	.word	0x524f5252
  409204:	00000d21 	.word	0x00000d21
  409208:	6f747541 	.word	0x6f747541
  40920c:	67654e20 	.word	0x67654e20
  409210:	6169746f 	.word	0x6169746f
  409214:	45206574 	.word	0x45206574
  409218:	524f5252 	.word	0x524f5252
  40921c:	00000d21 	.word	0x00000d21
  409220:	20746553 	.word	0x20746553
  409224:	6b6e696c 	.word	0x6b6e696c
  409228:	52524520 	.word	0x52524520
  40922c:	0d21524f 	.word	0x0d21524f
  409230:	00000000 	.word	0x00000000
  409234:	00007350 	.word	0x00007350
  409238:	20495053 	.word	0x20495053
  40923c:	65657053 	.word	0x65657053
  409240:	3d200964 	.word	0x3d200964
  409244:	646c2520 	.word	0x646c2520
  409248:	7a484d20 	.word	0x7a484d20
  40924c:	00000a0d 	.word	0x00000a0d
  409250:	54415453 	.word	0x54415453
  409254:	09095355 	.word	0x09095355
  409258:	30203d20 	.word	0x30203d20
  40925c:	32302578 	.word	0x32302578
  409260:	58522078 	.word	0x58522078
  409264:	3d52445f 	.word	0x3d52445f
  409268:	54207825 	.word	0x54207825
  40926c:	53445f58 	.word	0x53445f58
  409270:	2078253d 	.word	0x2078253d
  409274:	5f58414d 	.word	0x5f58414d
  409278:	253d5452 	.word	0x253d5452
  40927c:	58522078 	.word	0x58522078
  409280:	4e5f505f 	.word	0x4e5f505f
  409284:	78253d4f 	.word	0x78253d4f
  409288:	5f585420 	.word	0x5f585420
  40928c:	4c4c5546 	.word	0x4c4c5546
  409290:	0d78253d 	.word	0x0d78253d
  409294:	0000000a 	.word	0x0000000a
  409298:	415f5852 	.word	0x415f5852
  40929c:	5f524444 	.word	0x5f524444
  4092a0:	312d3050 	.word	0x312d3050
  4092a4:	00000000 	.word	0x00000000
  4092a8:	415f5852 	.word	0x415f5852
  4092ac:	5f524444 	.word	0x5f524444
  4092b0:	352d3250 	.word	0x352d3250
  4092b4:	00000000 	.word	0x00000000
  4092b8:	415f5854 	.word	0x415f5854
  4092bc:	09524444 	.word	0x09524444
  4092c0:	00000000 	.word	0x00000000
  4092c4:	505f5852 	.word	0x505f5852
  4092c8:	30505f57 	.word	0x30505f57
  4092cc:	0000352d 	.word	0x0000352d
  4092d0:	55544553 	.word	0x55544553
  4092d4:	57415f50 	.word	0x57415f50
  4092d8:	00000000 	.word	0x00000000
  4092dc:	415f4e45 	.word	0x415f4e45
  4092e0:	00000941 	.word	0x00000941
  4092e4:	525f4e45 	.word	0x525f4e45
  4092e8:	44444158 	.word	0x44444158
  4092ec:	00000052 	.word	0x00000052
  4092f0:	435f4652 	.word	0x435f4652
  4092f4:	00000948 	.word	0x00000948
  4092f8:	535f4652 	.word	0x535f4652
  4092fc:	50555445 	.word	0x50555445
  409300:	00000000 	.word	0x00000000
  409304:	464e4f43 	.word	0x464e4f43
  409308:	00094749 	.word	0x00094749
  40930c:	504e5944 	.word	0x504e5944
  409310:	45462f44 	.word	0x45462f44
  409314:	52555441 	.word	0x52555441
  409318:	00000045 	.word	0x00000045
  40931c:	61746144 	.word	0x61746144
  409320:	74615220 	.word	0x74615220
  409324:	3d200965 	.word	0x3d200965
  409328:	0d732520 	.word	0x0d732520
  40932c:	0000000a 	.word	0x0000000a
  409330:	65646f4d 	.word	0x65646f4d
  409334:	2009096c 	.word	0x2009096c
  409338:	7325203d 	.word	0x7325203d
  40933c:	00000a0d 	.word	0x00000a0d
  409340:	20435243 	.word	0x20435243
  409344:	676e654c 	.word	0x676e654c
  409348:	20096874 	.word	0x20096874
  40934c:	7325203d 	.word	0x7325203d
  409350:	00000a0d 	.word	0x00000a0d
  409354:	50204150 	.word	0x50204150
  409358:	7265776f 	.word	0x7265776f
  40935c:	203d2009 	.word	0x203d2009
  409360:	0a0d7325 	.word	0x0a0d7325
  409364:	00000000 	.word	0x00000000
  409368:	00097325 	.word	0x00097325
  40936c:	00783020 	.word	0x00783020
  409370:	78323025 	.word	0x78323025
  409374:	00000000 	.word	0x00000000
  409378:	25783020 	.word	0x25783020
  40937c:	00783230 	.word	0x00783230

00409380 <rf24_crclength_e_str_0>:
  409380:	61736944 64656c62 00000000              Disabled....

0040938c <rf24_crclength_e_str_1>:
  40938c:	69622038 00007374                       8 bits..

00409394 <rf24_crclength_e_str_2>:
  409394:	62203631 00737469                       16 bits.

0040939c <rf24_crclength_e_str_P>:
  40939c:	00409380 0040938c 00409394              ..@...@...@.

004093a8 <rf24_datarate_e_str_0>:
  4093a8:	50424d31 00000053                       1MBPS...

004093b0 <rf24_datarate_e_str_1>:
  4093b0:	50424d32 00000053                       2MBPS...

004093b8 <rf24_datarate_e_str_2>:
  4093b8:	4b303532 00535042                       250KBPS.

004093c0 <rf24_datarate_e_str_P>:
  4093c0:	004093a8 004093b0 004093b8              ..@...@...@.

004093cc <rf24_model_e_str_1>:
  4093cc:	3246526e 31304c34 0000002b              nRF24L01+...

004093d8 <rf24_pa_dbm_e_str_0>:
  4093d8:	4d5f4150 00004e49                       PA_MIN..

004093e0 <rf24_pa_dbm_e_str_1>:
  4093e0:	4c5f4150 0000574f                       PA_LOW..

004093e8 <rf24_pa_dbm_e_str_2>:
  4093e8:	485f4150 00484749                       PA_HIGH.

004093f0 <rf24_pa_dbm_e_str_3>:
  4093f0:	4d5f4150 00005841                       PA_MAX..

004093f8 <rf24_pa_dbm_e_str_P>:
  4093f8:	004093d8 004093e0 004093e8 004093f0     ..@...@...@...@.
  409408:	74746553 20676e69 20495053 636f6c63     Setting SPI cloc
  409418:	6c25206b 7a482075 00000d0a 202d492d     k %lu Hz....-I- 
  409428:	74696e49 696c6169 5320657a 61204950     Initialize SPI a
  409438:	616d2073 72657473 0000000d 2d747241     s master....Art-
  409448:	0074654e 00000000 746e6f43 206c6f72     Net.....Control 
  409458:	65646f6e 00000000 65746e49 74636172     node....Interact
  409468:	20657669 74737953 4d206d65 65747361     ive System Maste
  409478:	6f432072 6f72746e 6f4e206c 28206564     r Control Node (
  409488:	52202963 6962626f 6d532065 73746465     c) Robbie Smedts
  409498:	00000000 6e206925 6f204652 75707475     ....%i nRF outpu
  4094a8:	6e752074 72657669 61206573 76697463     t universe activ
  4094b8:	00002e65 00000053 41203a4d 6f507472     e...S...M: ArtPo
  4094c8:	0a0d6c6c 00000000 203d3d3d 61666544     ll......=== Defa
  4094d8:	20746c75 6b705f77 6f665f74 74616d72     ult w_pkt_format
  4094e8:	7830203d 3d3d5825 000d0a3d 41203a4d     = 0x%X===...M: A
  4094f8:	65726464 75207373 6163696e 0a0d7473     ddress unicast..
  409508:	00000000 4d202d2d 65747361 646f4e72     ....-- MasterNod
  409518:	65525f65 312d3076 0d2d2d20 202d2d0a     e_Rev0-1 --..-- 
  409528:	454d4153 582d3037 20444c50 0a0d2d2d     SAME70-XPLD --..
  409538:	43202d2d 69706d6f 3a64656c 72704120     -- Compiled: Apr
  409548:	20352020 31323032 3a323220 353a3335       5 2021 22:53:5
  409558:	2d2d2039 0000000d 49202d2d 25202050     9 --....-- IP  %
  409568:	64252e64 2e64252e 0d0a6425 00000000     d.%d.%d.%d......
  409578:	6b6e696c 74656420 65746365 00000d64     link detected...
  409588:	65646f4e 20642520 64616572 6e776f20     Node %d read own
  409598:	6e657320 0d726f73 0000000a 6e6e6f63      sensor.....conn
  4095a8:	20746365 6b736564 206f7420 65646f6e     ect desk to node
  4095b8:	20642520 20726f66 0a0d6425 00000000      %d for %d......
  4095c8:	41203a45 6f507472 65526c6c 20796c70     E: ArtPollReply 
  4095d8:	20746f6e 646e6573 00000000 41203a4d     not send....M: A
  4095e8:	6f507472 65526c6c 20796c70 646e6573     rtPollReply send
  4095f8:	00000a0d                                ....

004095fc <_global_impure_ptr>:
  4095fc:	20400040 00464e49 00666e69 004e414e     @.@ INF.inf.NAN.
  40960c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40961c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40962c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40963c:	0000296c 00000030                       l)..0...

00409644 <blanks.7223>:
  409644:	20202020 20202020 20202020 20202020                     

00409654 <zeroes.7224>:
  409654:	30303030 30303030 30303030 30303030     0000000000000000

00409664 <blanks.7217>:
  409664:	20202020 20202020 20202020 20202020                     

00409674 <zeroes.7218>:
  409674:	30303030 30303030 30303030 30303030     0000000000000000
  409684:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409694:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  4096a4:	00000000                                ....

004096a8 <__mprec_bigtens>:
  4096a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4096b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4096c8:	7f73bf3c 75154fdd                       <.s..O.u

004096d0 <__mprec_tens>:
  4096d0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4096e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4096f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409700:	00000000 412e8480 00000000 416312d0     .......A......cA
  409710:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409720:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409730:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409740:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409750:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409760:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409770:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409780:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409790:	79d99db4 44ea7843                       ...yCx.D

00409798 <p05.6055>:
  409798:	00000005 00000019 0000007d              ........}...

004097a4 <_ctype_>:
  4097a4:	20202000 20202020 28282020 20282828     .         ((((( 
  4097b4:	20202020 20202020 20202020 20202020                     
  4097c4:	10108820 10101010 10101010 10101010      ...............
  4097d4:	04040410 04040404 10040404 10101010     ................
  4097e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4097f4:	01010101 01010101 01010101 10101010     ................
  409804:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409814:	02020202 02020202 02020202 10101010     ................
  409824:	00000020 00000000 00000000 00000000      ...............
	...

004098a8 <_init>:
  4098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4098aa:	bf00      	nop
  4098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4098ae:	bc08      	pop	{r3}
  4098b0:	469e      	mov	lr, r3
  4098b2:	4770      	bx	lr

004098b4 <__init_array_start>:
  4098b4:	00405855 	.word	0x00405855

004098b8 <__frame_dummy_init_array_entry>:
  4098b8:	0040018d                                ..@.

004098bc <_fini>:
  4098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4098be:	bf00      	nop
  4098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4098c2:	bc08      	pop	{r3}
  4098c4:	469e      	mov	lr, r3
  4098c6:	4770      	bx	lr

004098c8 <__fini_array_start>:
  4098c8:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <gs_uc_ip_address>:
2040000c:	0202 0b02                                   ....

20400010 <gs_uc_mac_address>:
20400010:	0400 1c25 02a0                              ..%...

20400016 <payload_size>:
20400016:	0020                                         .

20400018 <gs_ul_spi_clock>:
20400018:	4b40 004c                                   @KL.

2040001c <g_interrupt_enabled>:
2040001c:	0001 0000                                   ....

20400020 <SystemCoreClock>:
20400020:	0900 003d                                   ..=.

20400024 <factory_broadcastIp>:
20400024:	ff02 ffff                                   ....

20400028 <factory_gateway>:
20400028:	0202 fe02                                   ....

2040002c <factory_localIp>:
2040002c:	0202 0b02                                   ....

20400030 <factory_mac>:
20400030:	0400 1c25 02a0 0000                         ..%.....

20400038 <factory_subnetMask>:
20400038:	00ff 0000                                   ....

2040003c <_impure_ptr>:
2040003c:	0040 2040                                   @.@ 

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__atexit_recursive_mutex>:
20400468:	84ec 2040                                   ..@ 

2040046c <__global_locale>:
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	858d 0040 77e9 0040 0000 0000 97a4 0040     ..@..w@.......@.
2040055c:	96a0 0040 92c0 0040 92c0 0040 92c0 0040     ..@...@...@...@.
2040056c:	92c0 0040 92c0 0040 92c0 0040 92c0 0040     ..@...@...@...@.
2040057c:	92c0 0040 92c0 0040 ffff ffff ffff ffff     ..@...@.........
2040058c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005d8 <__malloc_av_>:
	...
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 

204009e0 <__malloc_sbrk_base>:
204009e0:	ffff ffff                                   ....

204009e4 <__malloc_trim_threshold>:
204009e4:	0000 0002                                   ....
