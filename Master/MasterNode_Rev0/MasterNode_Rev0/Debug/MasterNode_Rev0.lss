
MasterNode_Rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006030  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406030  00406030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00406038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004278  204009d8  00406a10  000209d8  2**3
                  ALLOC
  4 .stack        00002000  20404c50  0040ac88  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20406c50  0040cc88  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002551e  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000048f1  00000000  00000000  00045f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009a7a  00000000  00000000  0004a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dd8  00000000  00000000  000542e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ef0  00000000  00000000  000550c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b5f1  00000000  00000000  00055fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012126  00000000  00000000  000615a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00097e3b  00000000  00000000  000736c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d48  00000000  00000000  0010b504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 6c 40 20 21 24 40 00 1d 24 40 00 1d 24 40 00     Pl@ !$@..$@..$@.
  400010:	1d 24 40 00 1d 24 40 00 1d 24 40 00 00 00 00 00     .$@..$@..$@.....
	...
  40002c:	1d 24 40 00 1d 24 40 00 00 00 00 00 1d 24 40 00     .$@..$@......$@.
  40003c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40004c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40005c:	1d 24 40 00 1d 24 40 00 00 00 00 00 79 22 40 00     .$@..$@.....y"@.
  40006c:	8d 22 40 00 a1 22 40 00 1d 24 40 00 1d 24 40 00     ."@.."@..$@..$@.
  40007c:	1d 24 40 00 b5 22 40 00 c9 22 40 00 1d 24 40 00     .$@.."@.."@..$@.
  40008c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40009c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  4000ac:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  4000bc:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  4000cc:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  4000dc:	91 0f 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     ..@..$@..$@..$@.
  4000ec:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  4000fc:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40010c:	1d 24 40 00 1d 24 40 00 00 00 00 00 00 00 00 00     .$@..$@.........
  40011c:	00 00 00 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .....$@..$@..$@.
  40012c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40013c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40014c:	1d 24 40 00 1d 24 40 00 1d 24 40 00 1d 24 40 00     .$@..$@..$@..$@.
  40015c:	1d 24 40 00 1d 24 40 00 1d 24 40 00                 .$@..$@..$@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009d8 	.word	0x204009d8
  400184:	00000000 	.word	0x00000000
  400188:	00406038 	.word	0x00406038

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406038 	.word	0x00406038
  4001c8:	204009dc 	.word	0x204009dc
  4001cc:	00406038 	.word	0x00406038
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
  4001f0:	3401      	adds	r4, #1
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20404c24 	.word	0x20404c24
  40020c:	20404308 	.word	0x20404308

00400210 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  400210:	b5f0      	push	{r4, r5, r6, r7, lr}
  400212:	b083      	sub	sp, #12
  400214:	4604      	mov	r4, r0
  400216:	460f      	mov	r7, r1
  400218:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40021a:	6803      	ldr	r3, [r0, #0]
  40021c:	f043 0310 	orr.w	r3, r3, #16
  400220:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  400222:	ab01      	add	r3, sp, #4
  400224:	2201      	movs	r2, #1
  400226:	4d36      	ldr	r5, [pc, #216]	; (400300 <ethernet_phy_set_link+0xf0>)
  400228:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40022a:	b958      	cbnz	r0, 400244 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  40022c:	9b01      	ldr	r3, [sp, #4]
  40022e:	f013 0f04 	tst.w	r3, #4
  400232:	d10d      	bne.n	400250 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400234:	6823      	ldr	r3, [r4, #0]
  400236:	f023 0310 	bic.w	r3, r3, #16
  40023a:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  40023c:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40023e:	4618      	mov	r0, r3
  400240:	b003      	add	sp, #12
  400242:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400244:	4603      	mov	r3, r0
  400246:	6822      	ldr	r2, [r4, #0]
  400248:	f022 0210 	bic.w	r2, r2, #16
  40024c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40024e:	e7f6      	b.n	40023e <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  400250:	b92e      	cbnz	r6, 40025e <ethernet_phy_set_link+0x4e>
  400252:	6823      	ldr	r3, [r4, #0]
  400254:	f023 0310 	bic.w	r3, r3, #16
  400258:	6023      	str	r3, [r4, #0]
		return uc_rc;
  40025a:	4633      	mov	r3, r6
  40025c:	e7ef      	b.n	40023e <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  40025e:	466b      	mov	r3, sp
  400260:	221e      	movs	r2, #30
  400262:	4639      	mov	r1, r7
  400264:	4620      	mov	r0, r4
  400266:	4d26      	ldr	r5, [pc, #152]	; (400300 <ethernet_phy_set_link+0xf0>)
  400268:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40026a:	4603      	mov	r3, r0
  40026c:	b950      	cbnz	r0, 400284 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40026e:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400270:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  400274:	d00b      	beq.n	40028e <ethernet_phy_set_link+0x7e>
  400276:	9900      	ldr	r1, [sp, #0]
  400278:	f011 0f05 	tst.w	r1, #5
  40027c:	bf0c      	ite	eq
  40027e:	2101      	moveq	r1, #1
  400280:	2100      	movne	r1, #0
  400282:	e005      	b.n	400290 <ethernet_phy_set_link+0x80>
  400284:	6822      	ldr	r2, [r4, #0]
  400286:	f022 0210 	bic.w	r2, r2, #16
  40028a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40028c:	e7d7      	b.n	40023e <ethernet_phy_set_link+0x2e>
  40028e:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400290:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  400294:	d003      	beq.n	40029e <ethernet_phy_set_link+0x8e>
  400296:	9800      	ldr	r0, [sp, #0]
  400298:	f010 0f02 	tst.w	r0, #2
  40029c:	d127      	bne.n	4002ee <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40029e:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4002a2:	d003      	beq.n	4002ac <ethernet_phy_set_link+0x9c>
  4002a4:	9a00      	ldr	r2, [sp, #0]
  4002a6:	f012 0f01 	tst.w	r2, #1
  4002aa:	d111      	bne.n	4002d0 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  4002ac:	b191      	cbz	r1, 4002d4 <ethernet_phy_set_link+0xc4>
  4002ae:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  4002b0:	6861      	ldr	r1, [r4, #4]
  4002b2:	f041 0101 	orr.w	r1, r1, #1
  4002b6:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  4002b8:	b1a2      	cbz	r2, 4002e4 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  4002ba:	6862      	ldr	r2, [r4, #4]
  4002bc:	f042 0202 	orr.w	r2, r2, #2
  4002c0:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4002c2:	6822      	ldr	r2, [r4, #0]
  4002c4:	f022 0210 	bic.w	r2, r2, #16
  4002c8:	6022      	str	r2, [r4, #0]
	return uc_rc;
  4002ca:	e7b8      	b.n	40023e <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  4002cc:	461a      	mov	r2, r3
  4002ce:	e7ef      	b.n	4002b0 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  4002d0:	461a      	mov	r2, r3
  4002d2:	e000      	b.n	4002d6 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4002d4:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4002d6:	6861      	ldr	r1, [r4, #4]
  4002d8:	f021 0101 	bic.w	r1, r1, #1
  4002dc:	6061      	str	r1, [r4, #4]
  4002de:	e7eb      	b.n	4002b8 <ethernet_phy_set_link+0xa8>
  4002e0:	461a      	mov	r2, r3
  4002e2:	e7f8      	b.n	4002d6 <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4002e4:	6862      	ldr	r2, [r4, #4]
  4002e6:	f022 0202 	bic.w	r2, r2, #2
  4002ea:	6062      	str	r2, [r4, #4]
  4002ec:	e7e9      	b.n	4002c2 <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4002ee:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4002f2:	d0eb      	beq.n	4002cc <ethernet_phy_set_link+0xbc>
  4002f4:	9a00      	ldr	r2, [sp, #0]
  4002f6:	f012 0f01 	tst.w	r2, #1
  4002fa:	d1f1      	bne.n	4002e0 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4002fc:	461a      	mov	r2, r3
  4002fe:	e7d7      	b.n	4002b0 <ethernet_phy_set_link+0xa0>
  400300:	00401ae9 	.word	0x00401ae9

00400304 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400308:	b082      	sub	sp, #8
  40030a:	4604      	mov	r4, r0
  40030c:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40030e:	6803      	ldr	r3, [r0, #0]
  400310:	f043 0310 	orr.w	r3, r3, #16
  400314:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400316:	ab01      	add	r3, sp, #4
  400318:	2200      	movs	r2, #0
  40031a:	4e5d      	ldr	r6, [pc, #372]	; (400490 <ethernet_phy_auto_negotiate+0x18c>)
  40031c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40031e:	b140      	cbz	r0, 400332 <ethernet_phy_auto_negotiate+0x2e>
  400320:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400322:	6822      	ldr	r2, [r4, #0]
  400324:	f022 0210 	bic.w	r2, r2, #16
  400328:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40032a:	4618      	mov	r0, r3
  40032c:	b002      	add	sp, #8
  40032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400332:	9b01      	ldr	r3, [sp, #4]
  400334:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40033c:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40033e:	2200      	movs	r2, #0
  400340:	4629      	mov	r1, r5
  400342:	4620      	mov	r0, r4
  400344:	4e53      	ldr	r6, [pc, #332]	; (400494 <ethernet_phy_auto_negotiate+0x190>)
  400346:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400348:	4603      	mov	r3, r0
  40034a:	b120      	cbz	r0, 400356 <ethernet_phy_auto_negotiate+0x52>
  40034c:	6822      	ldr	r2, [r4, #0]
  40034e:	f022 0210 	bic.w	r2, r2, #16
  400352:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400354:	e7e9      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400356:	f240 13e1 	movw	r3, #481	; 0x1e1
  40035a:	2204      	movs	r2, #4
  40035c:	4629      	mov	r1, r5
  40035e:	4620      	mov	r0, r4
  400360:	4e4c      	ldr	r6, [pc, #304]	; (400494 <ethernet_phy_auto_negotiate+0x190>)
  400362:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400364:	4603      	mov	r3, r0
  400366:	b120      	cbz	r0, 400372 <ethernet_phy_auto_negotiate+0x6e>
  400368:	6822      	ldr	r2, [r4, #0]
  40036a:	f022 0210 	bic.w	r2, r2, #16
  40036e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400370:	e7db      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400372:	ab01      	add	r3, sp, #4
  400374:	2200      	movs	r2, #0
  400376:	4629      	mov	r1, r5
  400378:	4620      	mov	r0, r4
  40037a:	4e45      	ldr	r6, [pc, #276]	; (400490 <ethernet_phy_auto_negotiate+0x18c>)
  40037c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40037e:	4603      	mov	r3, r0
  400380:	b120      	cbz	r0, 40038c <ethernet_phy_auto_negotiate+0x88>
  400382:	6822      	ldr	r2, [r4, #0]
  400384:	f022 0210 	bic.w	r2, r2, #16
  400388:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40038a:	e7ce      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  40038c:	9b01      	ldr	r3, [sp, #4]
  40038e:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400392:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400394:	2200      	movs	r2, #0
  400396:	4629      	mov	r1, r5
  400398:	4620      	mov	r0, r4
  40039a:	4e3e      	ldr	r6, [pc, #248]	; (400494 <ethernet_phy_auto_negotiate+0x190>)
  40039c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40039e:	4603      	mov	r3, r0
  4003a0:	b120      	cbz	r0, 4003ac <ethernet_phy_auto_negotiate+0xa8>
  4003a2:	6822      	ldr	r2, [r4, #0]
  4003a4:	f022 0210 	bic.w	r2, r2, #16
  4003a8:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4003aa:	e7be      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  4003ac:	9b01      	ldr	r3, [sp, #4]
  4003ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4003b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  4003b6:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  4003b8:	2200      	movs	r2, #0
  4003ba:	4629      	mov	r1, r5
  4003bc:	4620      	mov	r0, r4
  4003be:	4e35      	ldr	r6, [pc, #212]	; (400494 <ethernet_phy_auto_negotiate+0x190>)
  4003c0:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4003c2:	4603      	mov	r3, r0
  4003c4:	b9b0      	cbnz	r0, 4003f4 <ethernet_phy_auto_negotiate+0xf0>
  4003c6:	4e34      	ldr	r6, [pc, #208]	; (400498 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  4003c8:	f04f 0801 	mov.w	r8, #1
  4003cc:	4f30      	ldr	r7, [pc, #192]	; (400490 <ethernet_phy_auto_negotiate+0x18c>)
  4003ce:	ab01      	add	r3, sp, #4
  4003d0:	4642      	mov	r2, r8
  4003d2:	4629      	mov	r1, r5
  4003d4:	4620      	mov	r0, r4
  4003d6:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4003d8:	4603      	mov	r3, r0
  4003da:	b980      	cbnz	r0, 4003fe <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4003dc:	9b01      	ldr	r3, [sp, #4]
  4003de:	f013 0f20 	tst.w	r3, #32
  4003e2:	d111      	bne.n	400408 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4003e4:	3e01      	subs	r6, #1
  4003e6:	d1f2      	bne.n	4003ce <ethernet_phy_auto_negotiate+0xca>
  4003e8:	6823      	ldr	r3, [r4, #0]
  4003ea:	f023 0310 	bic.w	r3, r3, #16
  4003ee:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4003f0:	2301      	movs	r3, #1
  4003f2:	e79a      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
  4003f4:	6822      	ldr	r2, [r4, #0]
  4003f6:	f022 0210 	bic.w	r2, r2, #16
  4003fa:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4003fc:	e795      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
  4003fe:	6822      	ldr	r2, [r4, #0]
  400400:	f022 0210 	bic.w	r2, r2, #16
  400404:	6022      	str	r2, [r4, #0]
			return uc_rc;
  400406:	e790      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  400408:	466b      	mov	r3, sp
  40040a:	2205      	movs	r2, #5
  40040c:	4629      	mov	r1, r5
  40040e:	4620      	mov	r0, r4
  400410:	4d1f      	ldr	r5, [pc, #124]	; (400490 <ethernet_phy_auto_negotiate+0x18c>)
  400412:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400414:	4603      	mov	r3, r0
  400416:	b980      	cbnz	r0, 40043a <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  400418:	9a00      	ldr	r2, [sp, #0]
  40041a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40041e:	d113      	bne.n	400448 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  400420:	f012 0f40 	tst.w	r2, #64	; 0x40
  400424:	d12c      	bne.n	400480 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  400426:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  40042a:	bf08      	it	eq
  40042c:	4602      	moveq	r2, r0
  40042e:	d109      	bne.n	400444 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400430:	6861      	ldr	r1, [r4, #4]
  400432:	f021 0101 	bic.w	r1, r1, #1
  400436:	6061      	str	r1, [r4, #4]
  400438:	e00b      	b.n	400452 <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40043a:	6822      	ldr	r2, [r4, #0]
  40043c:	f022 0210 	bic.w	r2, r2, #16
  400440:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400442:	e772      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  400444:	4602      	mov	r2, r0
  400446:	e000      	b.n	40044a <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  400448:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40044a:	6861      	ldr	r1, [r4, #4]
  40044c:	f041 0101 	orr.w	r1, r1, #1
  400450:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  400452:	b1ba      	cbz	r2, 400484 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400454:	6862      	ldr	r2, [r4, #4]
  400456:	f042 0202 	orr.w	r2, r2, #2
  40045a:	6062      	str	r2, [r4, #4]
#else
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
	switch (mode) {
		case GMAC_PHY_MII:
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
  40045c:	68e2      	ldr	r2, [r4, #12]
  40045e:	f042 0201 	orr.w	r2, r2, #1
  400462:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400464:	4a0d      	ldr	r2, [pc, #52]	; (40049c <ethernet_phy_auto_negotiate+0x198>)
  400466:	6811      	ldr	r1, [r2, #0]
  400468:	f041 0108 	orr.w	r1, r1, #8
  40046c:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40046e:	6811      	ldr	r1, [r2, #0]
  400470:	f041 0104 	orr.w	r1, r1, #4
  400474:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400476:	6822      	ldr	r2, [r4, #0]
  400478:	f022 0210 	bic.w	r2, r2, #16
  40047c:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40047e:	e754      	b.n	40032a <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  400480:	2201      	movs	r2, #1
  400482:	e7d5      	b.n	400430 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400484:	6862      	ldr	r2, [r4, #4]
  400486:	f022 0202 	bic.w	r2, r2, #2
  40048a:	6062      	str	r2, [r4, #4]
  40048c:	e7e6      	b.n	40045c <ethernet_phy_auto_negotiate+0x158>
  40048e:	bf00      	nop
  400490:	00401ae9 	.word	0x00401ae9
  400494:	00401b49 	.word	0x00401b49
  400498:	000f4240 	.word	0x000f4240
  40049c:	40050000 	.word	0x40050000

004004a0 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4004a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4004a4:	b083      	sub	sp, #12
  4004a6:	4605      	mov	r5, r0
  4004a8:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004aa:	6803      	ldr	r3, [r0, #0]
  4004ac:	f043 0310 	orr.w	r3, r3, #16
  4004b0:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  4004b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004b6:	ae02      	add	r6, sp, #8
  4004b8:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  4004bc:	2200      	movs	r2, #0
  4004be:	4c0e      	ldr	r4, [pc, #56]	; (4004f8 <ethernet_phy_reset+0x58>)
  4004c0:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  4004c2:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  4004c4:	f04f 0800 	mov.w	r8, #0
  4004c8:	4f0c      	ldr	r7, [pc, #48]	; (4004fc <ethernet_phy_reset+0x5c>)
  4004ca:	4633      	mov	r3, r6
  4004cc:	4642      	mov	r2, r8
  4004ce:	4649      	mov	r1, r9
  4004d0:	4628      	mov	r0, r5
  4004d2:	47b8      	blx	r7
		ul_timeout--;
  4004d4:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4004d6:	9b01      	ldr	r3, [sp, #4]
  4004d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4004dc:	d001      	beq.n	4004e2 <ethernet_phy_reset+0x42>
  4004de:	2c00      	cmp	r4, #0
  4004e0:	d1f3      	bne.n	4004ca <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4004e2:	682b      	ldr	r3, [r5, #0]
  4004e4:	f023 0310 	bic.w	r3, r3, #16
  4004e8:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4004ea:	fab4 f084 	clz	r0, r4
  4004ee:	0940      	lsrs	r0, r0, #5
  4004f0:	b003      	add	sp, #12
  4004f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4004f6:	bf00      	nop
  4004f8:	00401b49 	.word	0x00401b49
  4004fc:	00401ae9 	.word	0x00401ae9

00400500 <ethernet_phy_init>:
{
  400500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400504:	b085      	sub	sp, #20
  400506:	4606      	mov	r6, r0
  400508:	4688      	mov	r8, r1
  40050a:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  40050c:	2401      	movs	r4, #1
  40050e:	9400      	str	r4, [sp, #0]
  400510:	2300      	movs	r3, #0
  400512:	4622      	mov	r2, r4
  400514:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400518:	4843      	ldr	r0, [pc, #268]	; (400628 <ethernet_phy_init+0x128>)
  40051a:	4f44      	ldr	r7, [pc, #272]	; (40062c <ethernet_phy_init+0x12c>)
  40051c:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  40051e:	4622      	mov	r2, r4
  400520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  400524:	4842      	ldr	r0, [pc, #264]	; (400630 <ethernet_phy_init+0x130>)
  400526:	4b43      	ldr	r3, [pc, #268]	; (400634 <ethernet_phy_init+0x134>)
  400528:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  40052a:	f240 32ff 	movw	r2, #1023	; 0x3ff
  40052e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400532:	4841      	ldr	r0, [pc, #260]	; (400638 <ethernet_phy_init+0x138>)
  400534:	4b41      	ldr	r3, [pc, #260]	; (40063c <ethernet_phy_init+0x13c>)
  400536:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  400538:	4641      	mov	r1, r8
  40053a:	4841      	ldr	r0, [pc, #260]	; (400640 <ethernet_phy_init+0x140>)
  40053c:	4b41      	ldr	r3, [pc, #260]	; (400644 <ethernet_phy_init+0x144>)
  40053e:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400540:	4b41      	ldr	r3, [pc, #260]	; (400648 <ethernet_phy_init+0x148>)
  400542:	429d      	cmp	r5, r3
  400544:	d85d      	bhi.n	400602 <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400546:	4b41      	ldr	r3, [pc, #260]	; (40064c <ethernet_phy_init+0x14c>)
  400548:	429d      	cmp	r5, r3
  40054a:	d80f      	bhi.n	40056c <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  40054c:	4b40      	ldr	r3, [pc, #256]	; (400650 <ethernet_phy_init+0x150>)
  40054e:	429d      	cmp	r5, r3
  400550:	d83e      	bhi.n	4005d0 <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400552:	4b40      	ldr	r3, [pc, #256]	; (400654 <ethernet_phy_init+0x154>)
  400554:	429d      	cmp	r5, r3
  400556:	d83e      	bhi.n	4005d6 <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400558:	4b3f      	ldr	r3, [pc, #252]	; (400658 <ethernet_phy_init+0x158>)
  40055a:	429d      	cmp	r5, r3
  40055c:	d83e      	bhi.n	4005dc <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  40055e:	4b3f      	ldr	r3, [pc, #252]	; (40065c <ethernet_phy_init+0x15c>)
  400560:	429d      	cmp	r5, r3
  400562:	bf8c      	ite	hi
  400564:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  400568:	2300      	movls	r3, #0
  40056a:	e001      	b.n	400570 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  40056c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400570:	6872      	ldr	r2, [r6, #4]
  400572:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  400576:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400578:	6875      	ldr	r5, [r6, #4]
  40057a:	431d      	orrs	r5, r3
  40057c:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  40057e:	ab04      	add	r3, sp, #16
  400580:	2200      	movs	r2, #0
  400582:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400586:	6832      	ldr	r2, [r6, #0]
  400588:	f042 0210 	orr.w	r2, r2, #16
  40058c:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  40058e:	2202      	movs	r2, #2
  400590:	4641      	mov	r1, r8
  400592:	4630      	mov	r0, r6
  400594:	4c32      	ldr	r4, [pc, #200]	; (400660 <ethernet_phy_init+0x160>)
  400596:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  400598:	9b03      	ldr	r3, [sp, #12]
  40059a:	2b22      	cmp	r3, #34	; 0x22
  40059c:	d035      	beq.n	40060a <ethernet_phy_init+0x10a>
  40059e:	4644      	mov	r4, r8
  4005a0:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  4005a2:	f04f 0902 	mov.w	r9, #2
  4005a6:	4f2e      	ldr	r7, [pc, #184]	; (400660 <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  4005a8:	3401      	adds	r4, #1
  4005aa:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  4005ae:	ab03      	add	r3, sp, #12
  4005b0:	464a      	mov	r2, r9
  4005b2:	4621      	mov	r1, r4
  4005b4:	4630      	mov	r0, r6
  4005b6:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  4005b8:	9b03      	ldr	r3, [sp, #12]
  4005ba:	2b22      	cmp	r3, #34	; 0x22
  4005bc:	d011      	beq.n	4005e2 <ethernet_phy_init+0xe2>
  4005be:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  4005c0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  4005c4:	d1f0      	bne.n	4005a8 <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4005c6:	6833      	ldr	r3, [r6, #0]
  4005c8:	f023 0310 	bic.w	r3, r3, #16
  4005cc:	6033      	str	r3, [r6, #0]
  4005ce:	e018      	b.n	400602 <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  4005d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4005d4:	e7cc      	b.n	400570 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  4005d6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4005da:	e7c9      	b.n	400570 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  4005dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4005e0:	e7c6      	b.n	400570 <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4005e2:	6833      	ldr	r3, [r6, #0]
  4005e4:	f023 0310 	bic.w	r3, r3, #16
  4005e8:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4005ea:	ab03      	add	r3, sp, #12
  4005ec:	2201      	movs	r2, #1
  4005ee:	4621      	mov	r1, r4
  4005f0:	4630      	mov	r0, r6
  4005f2:	4d1b      	ldr	r5, [pc, #108]	; (400660 <ethernet_phy_init+0x160>)
  4005f4:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  4005f6:	45a0      	cmp	r8, r4
  4005f8:	d003      	beq.n	400602 <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4005fa:	4641      	mov	r1, r8
  4005fc:	4630      	mov	r0, r6
  4005fe:	4b11      	ldr	r3, [pc, #68]	; (400644 <ethernet_phy_init+0x144>)
  400600:	4798      	blx	r3
}
  400602:	2000      	movs	r0, #0
  400604:	b005      	add	sp, #20
  400606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40060a:	6833      	ldr	r3, [r6, #0]
  40060c:	f023 0310 	bic.w	r3, r3, #16
  400610:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  400612:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  400616:	d0f4      	beq.n	400602 <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400618:	ab03      	add	r3, sp, #12
  40061a:	2201      	movs	r2, #1
  40061c:	4641      	mov	r1, r8
  40061e:	4630      	mov	r0, r6
  400620:	4c0f      	ldr	r4, [pc, #60]	; (400660 <ethernet_phy_init+0x160>)
  400622:	47a0      	blx	r4
  400624:	e7ed      	b.n	400602 <ethernet_phy_init+0x102>
  400626:	bf00      	nop
  400628:	400e1200 	.word	0x400e1200
  40062c:	004021f9 	.word	0x004021f9
  400630:	400e0e00 	.word	0x400e0e00
  400634:	004021c3 	.word	0x004021c3
  400638:	400e1400 	.word	0x400e1400
  40063c:	00402131 	.word	0x00402131
  400640:	40050000 	.word	0x40050000
  400644:	004004a1 	.word	0x004004a1
  400648:	0e4e1c00 	.word	0x0e4e1c00
  40064c:	09896800 	.word	0x09896800
  400650:	07270e00 	.word	0x07270e00
  400654:	04c4b400 	.word	0x04c4b400
  400658:	02625a00 	.word	0x02625a00
  40065c:	01312d00 	.word	0x01312d00
  400660:	00401ae9 	.word	0x00401ae9

00400664 <circ_inc>:
#endif

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
  400664:	8803      	ldrh	r3, [r0, #0]
  400666:	3301      	adds	r3, #1
  400668:	b29b      	uxth	r3, r3
        if((*headortail) >= size) {
            (*headortail) = 0;
  40066a:	428b      	cmp	r3, r1
  40066c:	bf28      	it	cs
  40066e:	2300      	movcs	r3, #0
  400670:	8003      	strh	r3, [r0, #0]
  400672:	4770      	bx	lr

00400674 <gmac_reset_tx_mem>:
 *
 * \param p_dev Pointer to GMAC driver instance.
 *
 */
static void gmac_reset_tx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400674:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400676:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_tx_buff = p_dev->gmac_queue_list[queue_idx].p_tx_buffer;
  40067a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40067e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400682:	685a      	ldr	r2, [r3, #4]
	gmac_tx_descriptor_t *p_td = p_dev->gmac_queue_list[queue_idx].p_tx_dscr;
  400684:	691e      	ldr	r6, [r3, #16]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400686:	f8de 4000 	ldr.w	r4, [lr]
  40068a:	f024 0408 	bic.w	r4, r4, #8
  40068e:	f8ce 4000 	str.w	r4, [lr]

	/* Disable TX */
	gmac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->gmac_queue_list[queue_idx].us_tx_head, p_dev->gmac_queue_list[queue_idx].us_tx_tail);
  400692:	2400      	movs	r4, #0
  400694:	851c      	strh	r4, [r3, #40]	; 0x28
  400696:	84dc      	strh	r4, [r3, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400698:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  40069a:	b1fb      	cbz	r3, 4006dc <gmac_reset_tx_mem+0x68>
  40069c:	4634      	mov	r4, r6
  40069e:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * GMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = GMAC_TXD_USED;
  4006a0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  4006a4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  4006a8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		p_td[ul_index].addr = ul_address;
  4006ac:	f846 2033 	str.w	r2, [r6, r3, lsl #3]
		p_td[ul_index].status.val = GMAC_TXD_USED;
  4006b0:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  4006b2:	3301      	adds	r3, #1
  4006b4:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  4006b6:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
  4006ba:	3408      	adds	r4, #8
  4006bc:	429d      	cmp	r5, r3
  4006be:	d8f5      	bhi.n	4006ac <gmac_reset_tx_mem+0x38>
	}
	p_td[p_dev->gmac_queue_list[queue_idx].us_tx_list_size - 1].status.val =
  4006c0:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  4006c4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  4006c8:	f845 3c04 	str.w	r3, [r5, #-4]
			GMAC_TXD_USED | GMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  4006cc:	b141      	cbz	r1, 4006e0 <gmac_reset_tx_mem+0x6c>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  4006ce:	f026 0603 	bic.w	r6, r6, #3
  4006d2:	f201 110f 	addw	r1, r1, #271	; 0x10f
  4006d6:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  4006da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  4006dc:	2500      	movs	r5, #0
  4006de:	e7ef      	b.n	4006c0 <gmac_reset_tx_mem+0x4c>
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  4006e0:	f026 0603 	bic.w	r6, r6, #3
  4006e4:	f8ce 601c 	str.w	r6, [lr, #28]
  4006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

004006ea <gmac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_dev Pointer to GMAC Driver instance.
 */
static void gmac_reset_rx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  4006ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  4006ec:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_rx_buff = p_dev->gmac_queue_list[queue_idx].p_rx_buffer;
  4006f0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4006f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4006f8:	689a      	ldr	r2, [r3, #8]
	gmac_rx_descriptor_t *pRd = p_dev->gmac_queue_list[queue_idx].p_rx_dscr;
  4006fa:	68de      	ldr	r6, [r3, #12]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  4006fc:	f8de 4000 	ldr.w	r4, [lr]
  400700:	f024 0404 	bic.w	r4, r4, #4
  400704:	f8ce 4000 	str.w	r4, [lr]

	/* Disable RX */
	gmac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->gmac_queue_list[queue_idx].us_rx_idx = 0;
  400708:	2400      	movs	r4, #0
  40070a:	845c      	strh	r4, [r3, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  40070c:	8c1b      	ldrh	r3, [r3, #32]
  40070e:	b313      	cbz	r3, 400756 <gmac_reset_rx_mem+0x6c>
  400710:	4634      	mov	r4, r6
  400712:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * GMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
  400714:	461f      	mov	r7, r3
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400716:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  40071a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
  40071e:	f022 0503 	bic.w	r5, r2, #3
  400722:	f846 5033 	str.w	r5, [r6, r3, lsl #3]
		pRd[ul_index].status.val = 0;
  400726:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400728:	3301      	adds	r3, #1
  40072a:	8c05      	ldrh	r5, [r0, #32]
  40072c:	3280      	adds	r2, #128	; 0x80
  40072e:	3408      	adds	r4, #8
  400730:	429d      	cmp	r5, r3
  400732:	d8f4      	bhi.n	40071e <gmac_reset_rx_mem+0x34>
	}
	pRd[p_dev->gmac_queue_list[queue_idx].us_rx_list_size - 1].addr.val |= GMAC_RXD_WRAP;
  400734:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  400738:	442b      	add	r3, r5
  40073a:	f856 2033 	ldr.w	r2, [r6, r3, lsl #3]
  40073e:	f042 0202 	orr.w	r2, r2, #2
  400742:	f846 2033 	str.w	r2, [r6, r3, lsl #3]

	/* Set receive buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  400746:	b141      	cbz	r1, 40075a <gmac_reset_rx_mem+0x70>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  400748:	f026 0603 	bic.w	r6, r6, #3
  40074c:	f201 111f 	addw	r1, r1, #287	; 0x11f
  400750:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400756:	2500      	movs	r5, #0
  400758:	e7ec      	b.n	400734 <gmac_reset_rx_mem+0x4a>
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40075a:	f026 0603 	bic.w	r6, r6, #3
  40075e:	f8ce 6018 	str.w	r6, [lr, #24]
  400762:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400764 <gmac_dev_init>:
 * \param p_gmac_dev Pointer to the GMAC device instance.
 * \param p_opt GMAC configure options.
 */
void gmac_dev_init(Gmac* p_gmac, gmac_device_t* p_gmac_dev,
		gmac_options_t* p_opt)
{
  400764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400766:	4604      	mov	r4, r0
  400768:	460e      	mov	r6, r1
  40076a:	4615      	mov	r5, r2
	p_gmac->GMAC_NCR = ul_ncr;
  40076c:	2300      	movs	r3, #0
  40076e:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_IDR = ul_source;
  400770:	f04f 33ff 	mov.w	r3, #4294967295
  400774:	62c3      	str	r3, [r0, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  400776:	6803      	ldr	r3, [r0, #0]
  400778:	f043 0320 	orr.w	r3, r3, #32
  40077c:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_RSR = ul_status;
  40077e:	230f      	movs	r3, #15
  400780:	6203      	str	r3, [r0, #32]
	p_gmac->GMAC_TSR = ul_status;
  400782:	f240 133f 	movw	r3, #319	; 0x13f
  400786:	6143      	str	r3, [r0, #20]
	return p_gmac->GMAC_NCFGR;
  400788:	6842      	ldr	r2, [r0, #4]
	gmac_clear_tx_status(p_gmac, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
            | GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP | GMAC_TSR_HRESP );

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	gmac_set_config(p_gmac, gmac_get_config(p_gmac) |
  40078a:	4b45      	ldr	r3, [pc, #276]	; (4008a0 <gmac_dev_init+0x13c>)
  40078c:	4313      	orrs	r3, r2
	p_gmac->GMAC_NCFGR = ul_cfg;
  40078e:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  400790:	782b      	ldrb	r3, [r5, #0]
  400792:	2b00      	cmp	r3, #0
  400794:	d07a      	beq.n	40088c <gmac_dev_init+0x128>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  400796:	6843      	ldr	r3, [r0, #4]
  400798:	f043 0310 	orr.w	r3, r3, #16
  40079c:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  40079e:	786b      	ldrb	r3, [r5, #1]
  4007a0:	2b00      	cmp	r3, #0
  4007a2:	d178      	bne.n	400896 <gmac_dev_init+0x132>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	f023 0320 	bic.w	r3, r3, #32
  4007aa:	6063      	str	r3, [r4, #4]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  4007ac:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  4007b0:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  4007b4:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  4007b8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  4007bc:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  4007c0:	4b38      	ldr	r3, [pc, #224]	; (4008a4 <gmac_dev_init+0x140>)
  4007c2:	f04f 32ff 	mov.w	r2, #4294967295
  4007c6:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  4007c8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  4007cc:	605a      	str	r2, [r3, #4]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  4007ce:	f023 0303 	bic.w	r3, r3, #3
  4007d2:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  4007d6:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  4007da:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  4007de:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  4007e2:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  4007e6:	4b30      	ldr	r3, [pc, #192]	; (4008a8 <gmac_dev_init+0x144>)
  4007e8:	f06f 0201 	mvn.w	r2, #1
  4007ec:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  4007ee:	2700      	movs	r7, #0
  4007f0:	605f      	str	r7, [r3, #4]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  4007f2:	f023 0303 	bic.w	r3, r3, #3
  4007f6:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  4007fa:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  4007fe:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  400802:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  400806:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	return p_gmac->GMAC_ISR;
  40080a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
  40080c:	4b27      	ldr	r3, [pc, #156]	; (4008ac <gmac_dev_init+0x148>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
  40080e:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_buffer =
  400812:	60b3      	str	r3, [r6, #8]
			(gmac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr
  400814:	4b26      	ldr	r3, [pc, #152]	; (4008b0 <gmac_dev_init+0x14c>)
			& 0xFFFFFFF8);
  400816:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_dscr =
  40081a:	60f3      	str	r3, [r6, #12]
	p_gmac_queue->us_rx_list_size = p_dev_mm->us_rx_size;
  40081c:	2310      	movs	r3, #16
  40081e:	8433      	strh	r3, [r6, #32]
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
  400820:	4b24      	ldr	r3, [pc, #144]	; (4008b4 <gmac_dev_init+0x150>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
  400822:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_buffer =
  400826:	6073      	str	r3, [r6, #4]
			(gmac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr
  400828:	4b23      	ldr	r3, [pc, #140]	; (4008b8 <gmac_dev_init+0x154>)
			& 0xFFFFFFF8);
  40082a:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_dscr =
  40082e:	6133      	str	r3, [r6, #16]
	p_gmac_queue->us_tx_list_size = p_dev_mm->us_tx_size;
  400830:	2308      	movs	r3, #8
  400832:	84b3      	strh	r3, [r6, #36]	; 0x24
	p_gmac_queue->func_tx_cb_list = p_tx_cb;
  400834:	4b21      	ldr	r3, [pc, #132]	; (4008bc <gmac_dev_init+0x158>)
  400836:	61f3      	str	r3, [r6, #28]
	gmac_reset_rx_mem(p_gmac_dev, queue_idx);
  400838:	4639      	mov	r1, r7
  40083a:	4630      	mov	r0, r6
  40083c:	4b20      	ldr	r3, [pc, #128]	; (4008c0 <gmac_dev_init+0x15c>)
  40083e:	4798      	blx	r3
	gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  400840:	4639      	mov	r1, r7
  400842:	4630      	mov	r0, r6
  400844:	4b1f      	ldr	r3, [pc, #124]	; (4008c4 <gmac_dev_init+0x160>)
  400846:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400848:	6823      	ldr	r3, [r4, #0]
  40084a:	f043 0308 	orr.w	r3, r3, #8
  40084e:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400850:	6823      	ldr	r3, [r4, #0]
  400852:	f043 0304 	orr.w	r3, r3, #4
  400856:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  400858:	6823      	ldr	r3, [r4, #0]
  40085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40085e:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  400860:	f643 43f6 	movw	r3, #15606	; 0x3cf6
  400864:	62a3      	str	r3, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400866:	796a      	ldrb	r2, [r5, #5]
			| (p_mac_addr[2] << 16)
  400868:	792b      	ldrb	r3, [r5, #4]
  40086a:	041b      	lsls	r3, r3, #16
  40086c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  400870:	78aa      	ldrb	r2, [r5, #2]
  400872:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  400874:	78ea      	ldrb	r2, [r5, #3]
			| (p_mac_addr[0]);
  400876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40087a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40087e:	79ea      	ldrb	r2, [r5, #7]
			| (p_mac_addr[4]);
  400880:	79ab      	ldrb	r3, [r5, #6]
  400882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400886:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  40088c:	6843      	ldr	r3, [r0, #4]
  40088e:	f023 0310 	bic.w	r3, r3, #16
  400892:	6043      	str	r3, [r0, #4]
  400894:	e783      	b.n	40079e <gmac_dev_init+0x3a>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  400896:	6863      	ldr	r3, [r4, #4]
  400898:	f043 0320 	orr.w	r3, r3, #32
  40089c:	6063      	str	r3, [r4, #4]
  40089e:	e785      	b.n	4007ac <gmac_dev_init+0x48>
  4008a0:	00022102 	.word	0x00022102
  4008a4:	20400ae0 	.word	0x20400ae0
  4008a8:	20400a78 	.word	0x20400a78
  4008ac:	20400ae8 	.word	0x20400ae8
  4008b0:	204009f8 	.word	0x204009f8
  4008b4:	204012e8 	.word	0x204012e8
  4008b8:	20400aa0 	.word	0x20400aa0
  4008bc:	20400a80 	.word	0x20400a80
  4008c0:	004006eb 	.word	0x004006eb
  4008c4:	00400675 	.word	0x00400675

004008c8 <gmac_dev_read>:
 *
 * \return GMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t gmac_dev_read(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
  4008c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008cc:	b087      	sub	sp, #28
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  4008ce:	9102      	str	r1, [sp, #8]
	uint16_t us_tmp_idx = p_gmac_queue->us_rx_idx;
  4008d0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  4008d4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  4008d8:	8c66      	ldrh	r6, [r4, #34]	; 0x22
  4008da:	f8ad 6016 	strh.w	r6, [sp, #22]
	gmac_rx_descriptor_t *p_rx_td =
			&p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
  4008de:	2a00      	cmp	r2, #0
  4008e0:	f000 80cb 	beq.w	400a7a <gmac_dev_read+0x1b2>
  4008e4:	468e      	mov	lr, r1
  4008e6:	4615      	mov	r5, r2
	gmac_rx_descriptor_t *p_rx_td =
  4008e8:	68e2      	ldr	r2, [r4, #12]
  4008ea:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
		return GMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
  4008ee:	f04f 0c00 	mov.w	ip, #0
  4008f2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  4008f4:	f8c7 c000 	str.w	ip, [r7]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  4008f8:	f852 2036 	ldr.w	r2, [r2, r6, lsl #3]
  4008fc:	f012 0f01 	tst.w	r2, #1
  400900:	f000 80bd 	beq.w	400a7e <gmac_dev_read+0x1b6>
  400904:	9501      	str	r5, [sp, #4]
  400906:	469b      	mov	fp, r3
  400908:	9103      	str	r1, [sp, #12]
  40090a:	4605      	mov	r5, r0
			/* Skip previous fragment */
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);

				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  40090c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400910:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400914:	3322      	adds	r3, #34	; 0x22
  400916:	9300      	str	r3, [sp, #0]
  400918:	46e0      	mov	r8, ip
  40091a:	46e1      	mov	r9, ip
  40091c:	4667      	mov	r7, ip
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			/* A complete turn has been made but no EOF found */
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  40091e:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  400922:	00f6      	lsls	r6, r6, #3
  400924:	e01c      	b.n	400960 <gmac_dev_read+0x98>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  400926:	19ab      	adds	r3, r5, r6
  400928:	8c19      	ldrh	r1, [r3, #32]
  40092a:	f10d 0016 	add.w	r0, sp, #22
  40092e:	4b55      	ldr	r3, [pc, #340]	; (400a84 <gmac_dev_read+0x1bc>)
  400930:	4798      	blx	r3
		if (c_is_frame) {
  400932:	f1b8 0f00 	cmp.w	r8, #0
  400936:	d13a      	bne.n	4009ae <gmac_dev_read+0xe6>
				return GMAC_OK;
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400938:	6823      	ldr	r3, [r4, #0]
  40093a:	f023 0301 	bic.w	r3, r3, #1
  40093e:	6023      	str	r3, [r4, #0]
			p_gmac_queue->us_rx_idx = us_tmp_idx;
  400940:	19ab      	adds	r3, r5, r6
  400942:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400946:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_gmac_queue->p_rx_dscr[us_tmp_idx];
  400948:	19ab      	adds	r3, r5, r6
  40094a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40094e:	68db      	ldr	r3, [r3, #12]
  400950:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  400954:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400958:	f013 0f01 	tst.w	r3, #1
  40095c:	f000 8089 	beq.w	400a72 <gmac_dev_read+0x1aa>
		if ((p_rx_td->status.val & GMAC_RXD_SOF) == GMAC_RXD_SOF) {
  400960:	6863      	ldr	r3, [r4, #4]
  400962:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400966:	d0de      	beq.n	400926 <gmac_dev_read+0x5e>
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400968:	19ab      	adds	r3, r5, r6
  40096a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  40096c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400970:	429a      	cmp	r2, r3
  400972:	d013      	beq.n	40099c <gmac_dev_read+0xd4>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400974:	19af      	adds	r7, r5, r6
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400976:	f8df 810c 	ldr.w	r8, [pc, #268]	; 400a84 <gmac_dev_read+0x1bc>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  40097a:	68fa      	ldr	r2, [r7, #12]
  40097c:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400980:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
  400984:	f021 0101 	bic.w	r1, r1, #1
  400988:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  40098c:	8c39      	ldrh	r1, [r7, #32]
  40098e:	9800      	ldr	r0, [sp, #0]
  400990:	47c0      	blx	r8
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  400994:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400998:	429a      	cmp	r2, r3
  40099a:	d1ee      	bne.n	40097a <gmac_dev_read+0xb2>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  40099c:	19ab      	adds	r3, r5, r6
  40099e:	8c19      	ldrh	r1, [r3, #32]
  4009a0:	f10d 0016 	add.w	r0, sp, #22
  4009a4:	4b37      	ldr	r3, [pc, #220]	; (400a84 <gmac_dev_read+0x1bc>)
  4009a6:	4798      	blx	r3
  4009a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
  4009ac:	2700      	movs	r7, #0
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  4009ae:	f8bd a016 	ldrh.w	sl, [sp, #22]
  4009b2:	19ab      	adds	r3, r5, r6
  4009b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  4009b6:	4553      	cmp	r3, sl
  4009b8:	d008      	beq.n	4009cc <gmac_dev_read+0x104>
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
  4009ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
  4009be:	455b      	cmp	r3, fp
  4009c0:	d91d      	bls.n	4009fe <gmac_dev_read+0x136>
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
  4009c2:	ebab 0807 	sub.w	r8, fp, r7
  4009c6:	fa1f f888 	uxth.w	r8, r8
  4009ca:	e01a      	b.n	400a02 <gmac_dev_read+0x13a>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4009cc:	9b02      	ldr	r3, [sp, #8]
  4009ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009d2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4009d6:	4c2b      	ldr	r4, [pc, #172]	; (400a84 <gmac_dev_read+0x1bc>)
  4009d8:	9e00      	ldr	r6, [sp, #0]
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  4009da:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  4009dc:	68ea      	ldr	r2, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  4009de:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  4009e2:	f023 0301 	bic.w	r3, r3, #1
  4009e6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  4009ea:	8c29      	ldrh	r1, [r5, #32]
  4009ec:	4630      	mov	r0, r6
  4009ee:	47a0      	blx	r4
				} while (us_tmp_idx != p_gmac_queue->us_rx_idx);
  4009f0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  4009f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4009f6:	429a      	cmp	r2, r3
  4009f8:	d1ef      	bne.n	4009da <gmac_dev_read+0x112>
				return GMAC_RX_ERROR;
  4009fa:	2003      	movs	r0, #3
  4009fc:	e03a      	b.n	400a74 <gmac_dev_read+0x1ac>
			us_buffer_length = GMAC_RX_UNITSIZE;
  4009fe:	f04f 0880 	mov.w	r8, #128	; 0x80
					(void *)(p_rx_td->addr.val & GMAC_RXD_ADDR_MASK),
  400a02:	6821      	ldr	r1, [r4, #0]
			memcpy(p_tmp_frame,
  400a04:	4642      	mov	r2, r8
  400a06:	f021 0103 	bic.w	r1, r1, #3
  400a0a:	4648      	mov	r0, r9
  400a0c:	4b1e      	ldr	r3, [pc, #120]	; (400a88 <gmac_dev_read+0x1c0>)
  400a0e:	4798      	blx	r3
			p_tmp_frame += us_buffer_length;
  400a10:	44c1      	add	r9, r8
			tmp_ul_frame_size += us_buffer_length;
  400a12:	4447      	add	r7, r8
			if ((p_rx_td->status.val & GMAC_RXD_EOF) == GMAC_RXD_EOF) {
  400a14:	6863      	ldr	r3, [r4, #4]
  400a16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  400a1a:	d102      	bne.n	400a22 <gmac_dev_read+0x15a>
  400a1c:	f04f 0801 	mov.w	r8, #1
  400a20:	e792      	b.n	400948 <gmac_dev_read+0x80>
				*p_rcv_size = (p_rx_td->status.val & GMAC_RXD_LEN_MASK);
  400a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400a26:	9a10      	ldr	r2, [sp, #64]	; 0x40
  400a28:	6013      	str	r3, [r2, #0]
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400a2a:	9b03      	ldr	r3, [sp, #12]
  400a2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400a30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400a34:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400a36:	459a      	cmp	sl, r3
  400a38:	d014      	beq.n	400a64 <gmac_dev_read+0x19c>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400a3a:	9a02      	ldr	r2, [sp, #8]
  400a3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400a40:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400a44:	4c0f      	ldr	r4, [pc, #60]	; (400a84 <gmac_dev_read+0x1bc>)
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400a46:	68e9      	ldr	r1, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400a48:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  400a4c:	f022 0201 	bic.w	r2, r2, #1
  400a50:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400a54:	8c29      	ldrh	r1, [r5, #32]
  400a56:	9800      	ldr	r0, [sp, #0]
  400a58:	47a0      	blx	r4
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400a5a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  400a5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400a60:	429a      	cmp	r2, r3
  400a62:	d1f0      	bne.n	400a46 <gmac_dev_read+0x17e>
				if (tmp_ul_frame_size < *p_rcv_size) {
  400a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400a66:	6818      	ldr	r0, [r3, #0]
				return GMAC_OK;
  400a68:	4287      	cmp	r7, r0
  400a6a:	bf34      	ite	cc
  400a6c:	2005      	movcc	r0, #5
  400a6e:	2000      	movcs	r0, #0
  400a70:	e000      	b.n	400a74 <gmac_dev_read+0x1ac>
	}

	return GMAC_RX_NO_DATA;
  400a72:	2004      	movs	r0, #4
}
  400a74:	b007      	add	sp, #28
  400a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return GMAC_PARAM;
  400a7a:	2006      	movs	r0, #6
  400a7c:	e7fa      	b.n	400a74 <gmac_dev_read+0x1ac>
	return GMAC_RX_NO_DATA;
  400a7e:	2004      	movs	r0, #4
  400a80:	e7f8      	b.n	400a74 <gmac_dev_read+0x1ac>
  400a82:	bf00      	nop
  400a84:	00400665 	.word	0x00400665
  400a88:	00402d61 	.word	0x00402d61

00400a8c <gmac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t gmac_dev_write(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, void *p_buffer,
		uint32_t ul_size, gmac_dev_tx_cb_t func_tx_cb)
{
  400a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	Gmac *p_hw = p_gmac_dev->p_hw;
	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];

	/* Check parameter */
	if (ul_size > GMAC_TX_UNITSIZE) {
  400a90:	f240 56ee 	movw	r6, #1518	; 0x5ee
  400a94:	42b3      	cmp	r3, r6
  400a96:	d902      	bls.n	400a9e <gmac_dev_write+0x12>
		return GMAC_PARAM;
  400a98:	2006      	movs	r0, #6
  400a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_head];
  400a9e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400aa2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
  400aa6:	8cef      	ldrh	r7, [r5, #38]	; 0x26
  400aa8:	00fe      	lsls	r6, r7, #3
  400aaa:	f8d5 e010 	ldr.w	lr, [r5, #16]
  400aae:	eb0e 0806 	add.w	r8, lr, r6

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400ab2:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
  400ab4:	f107 0c01 	add.w	ip, r7, #1
  400ab8:	eba4 040c 	sub.w	r4, r4, ip
  400abc:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
  400ac0:	fb94 f5fc 	sdiv	r5, r4, ip
  400ac4:	fb0c 4415 	mls	r4, ip, r5, r4
  400ac8:	b91c      	cbnz	r4, 400ad2 <gmac_dev_write+0x46>
					p_gmac_queue->us_tx_list_size) == 0) {
		if (p_tx_td[p_gmac_queue->us_tx_head].status.val & GMAC_TXD_USED)
  400aca:	4446      	add	r6, r8
  400acc:	6874      	ldr	r4, [r6, #4]
  400ace:	2c00      	cmp	r4, #0
  400ad0:	db41      	blt.n	400b56 <gmac_dev_write+0xca>
  400ad2:	461e      	mov	r6, r3
  400ad4:	4694      	mov	ip, r2
  400ad6:	460c      	mov	r4, r1
  400ad8:	4605      	mov	r5, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  400ada:	f8d0 9000 	ldr.w	r9, [r0]
			return GMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_head];
  400ade:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400ae2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400ae6:	f8d3 a01c 	ldr.w	sl, [r3, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
  400aea:	b102      	cbz	r2, 400aee <gmac_dev_write+0x62>
  400aec:	bb2e      	cbnz	r6, 400b3a <gmac_dev_write+0xae>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
  400aee:	9b08      	ldr	r3, [sp, #32]
  400af0:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_gmac_queue->us_tx_head == p_gmac_queue->us_tx_list_size - 1) {
  400af4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  400af8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400afc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  400afe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400b00:	3b01      	subs	r3, #1
  400b02:	429a      	cmp	r2, r3
  400b04:	d020      	beq.n	400b48 <gmac_dev_write+0xbc>
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
				| GMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST;
  400b06:	f3c6 030c 	ubfx	r3, r6, #0, #13
  400b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		p_tx_td->status.val =
  400b0e:	f8c8 3004 	str.w	r3, [r8, #4]
	}

	circ_inc(&p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_list_size);
  400b12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  400b16:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400b1a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  400b1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
  400b20:	4b0e      	ldr	r3, [pc, #56]	; (400b5c <gmac_dev_write+0xd0>)
  400b22:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400b24:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  400b28:	f8d9 3000 	ldr.w	r3, [r9]
  400b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400b30:	f8c9 3000 	str.w	r3, [r9]

	/* Now start to transmit if it is still not done */
	gmac_start_transmission(p_hw);

	return GMAC_OK;
  400b34:	2000      	movs	r0, #0
  400b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
  400b3a:	f85e 0037 	ldr.w	r0, [lr, r7, lsl #3]
  400b3e:	4632      	mov	r2, r6
  400b40:	4661      	mov	r1, ip
  400b42:	4b07      	ldr	r3, [pc, #28]	; (400b60 <gmac_dev_write+0xd4>)
  400b44:	4798      	blx	r3
  400b46:	e7d2      	b.n	400aee <gmac_dev_write+0x62>
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
  400b48:	f3c6 030c 	ubfx	r3, r6, #0, #13
				| GMAC_TXD_WRAP;
  400b4c:	4a05      	ldr	r2, [pc, #20]	; (400b64 <gmac_dev_write+0xd8>)
  400b4e:	431a      	orrs	r2, r3
		p_tx_td->status.val =
  400b50:	f8c8 2004 	str.w	r2, [r8, #4]
  400b54:	e7dd      	b.n	400b12 <gmac_dev_write+0x86>
			return GMAC_TX_BUSY;
  400b56:	2002      	movs	r0, #2
}
  400b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b5c:	00400665 	.word	0x00400665
  400b60:	00402d61 	.word	0x00402d61
  400b64:	40008000 	.word	0x40008000

00400b68 <gmac_handler>:
 * \brief GMAC Interrupt handler.
 *
 * \param p_gmac_dev   Pointer to GMAC device instance.
 */
void gmac_handler(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx)
{
  400b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400b6c:	b085      	sub	sp, #20
  400b6e:	4607      	mov	r7, r0
  400b70:	460d      	mov	r5, r1
	Gmac *p_hw = p_gmac_dev->p_hw;
  400b72:	6806      	ldr	r6, [r0, #0]
	uint32_t ul_tx_status_flag;
#ifdef FREERTOS_USED
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
#endif

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  400b74:	460c      	mov	r4, r1

	if(queue_idx == GMAC_QUE_0) {
  400b76:	2900      	cmp	r1, #0
  400b78:	d153      	bne.n	400c22 <gmac_handler+0xba>
	return p_gmac->GMAC_ISR;
  400b7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ul_isr = gmac_get_interrupt_status(p_hw);
  400b7c:	9303      	str	r3, [sp, #12]
	return p_gmac->GMAC_RSR;
  400b7e:	6a33      	ldr	r3, [r6, #32]
	} else {
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
	}
	ul_rsr = gmac_get_rx_status(p_hw);
  400b80:	9302      	str	r3, [sp, #8]
	return p_gmac->GMAC_TSR;
  400b82:	6973      	ldr	r3, [r6, #20]
	ul_tsr = gmac_get_tx_status(p_hw);
  400b84:	9301      	str	r3, [sp, #4]
	return p_gmac->GMAC_IMR;
  400b86:	6b31      	ldr	r1, [r6, #48]	; 0x30

	ul_isr &= ~(gmac_get_interrupt_mask(p_hw) | 0xF8030300);
  400b88:	9b03      	ldr	r3, [sp, #12]
  400b8a:	4a49      	ldr	r2, [pc, #292]	; (400cb0 <gmac_handler+0x148>)
  400b8c:	430a      	orrs	r2, r1
  400b8e:	ea23 0302 	bic.w	r3, r3, r2
  400b92:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & GMAC_ISR_RCOMP) || (ul_rsr & GMAC_RSR_REC)) {
  400b94:	9b03      	ldr	r3, [sp, #12]
  400b96:	f013 0f02 	tst.w	r3, #2
  400b9a:	d103      	bne.n	400ba4 <gmac_handler+0x3c>
  400b9c:	9b02      	ldr	r3, [sp, #8]
  400b9e:	f013 0f02 	tst.w	r3, #2
  400ba2:	d014      	beq.n	400bce <gmac_handler+0x66>
		ul_rx_status_flag = GMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & GMAC_RSR_RXOVR) {
  400ba4:	9b02      	ldr	r3, [sp, #8]
  400ba6:	f003 0304 	and.w	r3, r3, #4
			ul_rx_status_flag |= GMAC_RSR_RXOVR;
  400baa:	2b00      	cmp	r3, #0
  400bac:	bf0c      	ite	eq
  400bae:	2002      	moveq	r0, #2
  400bb0:	2006      	movne	r0, #6
		}
		/* Check BNA */
		if (ul_rsr & GMAC_RSR_BNA) {
  400bb2:	9b02      	ldr	r3, [sp, #8]
  400bb4:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= GMAC_RSR_BNA;
  400bb8:	bf18      	it	ne
  400bba:	f040 0001 	orrne.w	r0, r0, #1
	p_gmac->GMAC_RSR = ul_status;
  400bbe:	6230      	str	r0, [r6, #32]
		}
		/* Clear status */
		gmac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_gmac_queue->func_rx_cb) {
  400bc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400bc4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400bc8:	695b      	ldr	r3, [r3, #20]
  400bca:	b103      	cbz	r3, 400bce <gmac_handler+0x66>
			p_gmac_queue->func_rx_cb(ul_rx_status_flag);
  400bcc:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & GMAC_ISR_TCOMP) || (ul_tsr & GMAC_TSR_TXCOMP)) {
  400bce:	9b03      	ldr	r3, [sp, #12]
  400bd0:	f013 0f80 	tst.w	r3, #128	; 0x80
  400bd4:	d103      	bne.n	400bde <gmac_handler+0x76>
  400bd6:	9b01      	ldr	r3, [sp, #4]
  400bd8:	f013 0f20 	tst.w	r3, #32
  400bdc:	d065      	beq.n	400caa <gmac_handler+0x142>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;

		/* Check RLE */
		if (ul_tsr & GMAC_TSR_RLE) {
  400bde:	9b01      	ldr	r3, [sp, #4]
  400be0:	f013 0f04 	tst.w	r3, #4
  400be4:	d123      	bne.n	400c2e <gmac_handler+0xc6>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;
  400be6:	f04f 0920 	mov.w	r9, #32
			p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
			gmac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & GMAC_TSR_COL) {
  400bea:	9b01      	ldr	r3, [sp, #4]
  400bec:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= GMAC_TSR_COL;
  400bf0:	bf18      	it	ne
  400bf2:	f049 0902 	orrne.w	r9, r9, #2
	p_gmac->GMAC_TSR = ul_status;
  400bf6:	f8c6 9014 	str.w	r9, [r6, #20]
		}

		/* Clear status */
		gmac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail)) {
  400bfa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400bfe:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400c02:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  400c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  400c06:	429a      	cmp	r2, r3
  400c08:	d037      	beq.n	400c7a <gmac_handler+0x112>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400c0a:	1c6e      	adds	r6, r5, #1
  400c0c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400c10:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400c14:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400c18:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400c1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 400cb8 <gmac_handler+0x150>
  400c20:	e01c      	b.n	400c5c <gmac_handler+0xf4>
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  400c22:	f101 03ff 	add.w	r3, r1, #255	; 0xff
  400c26:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
  400c2a:	9303      	str	r3, [sp, #12]
  400c2c:	e7a7      	b.n	400b7e <gmac_handler+0x16>
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  400c2e:	4629      	mov	r1, r5
  400c30:	4638      	mov	r0, r7
  400c32:	4b20      	ldr	r3, [pc, #128]	; (400cb4 <gmac_handler+0x14c>)
  400c34:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400c36:	6833      	ldr	r3, [r6, #0]
  400c38:	f043 0308 	orr.w	r3, r3, #8
  400c3c:	6033      	str	r3, [r6, #0]
			ul_tx_status_flag = GMAC_TSR_RLE;
  400c3e:	f04f 0904 	mov.w	r9, #4
  400c42:	e7d2      	b.n	400bea <gmac_handler+0x82>
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400c44:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  400c46:	4630      	mov	r0, r6
  400c48:	47c0      	blx	r8
			} while (CIRC_CNT(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400c4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  400c4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  400c4e:	1a9b      	subs	r3, r3, r2
  400c50:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  400c52:	fb93 f2f1 	sdiv	r2, r3, r1
  400c56:	fb01 3312 	mls	r3, r1, r2, r3
  400c5a:	b173      	cbz	r3, 400c7a <gmac_handler+0x112>
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400c5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
  400c5e:	69e1      	ldr	r1, [r4, #28]
				if ((p_tx_td->status.val & GMAC_TXD_USED) == 0) {
  400c60:	6923      	ldr	r3, [r4, #16]
  400c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  400c66:	685b      	ldr	r3, [r3, #4]
  400c68:	2b00      	cmp	r3, #0
  400c6a:	da06      	bge.n	400c7a <gmac_handler+0x112>
				if (*p_tx_cb) {
  400c6c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
  400c70:	2b00      	cmp	r3, #0
  400c72:	d0e7      	beq.n	400c44 <gmac_handler+0xdc>
					(*p_tx_cb) (ul_tx_status_flag);
  400c74:	4648      	mov	r0, r9
  400c76:	4798      	blx	r3
  400c78:	e7e4      	b.n	400c44 <gmac_handler+0xdc>
							p_gmac_queue->us_tx_list_size));
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400c7a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400c7e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400c82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  400c84:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
  400c86:	3101      	adds	r1, #1
  400c88:	1a52      	subs	r2, r2, r1
  400c8a:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  400c8c:	fb92 f1f0 	sdiv	r1, r2, r0
  400c90:	fb00 2211 	mls	r2, r0, r1, r2
				p_gmac_queue->us_tx_list_size) >= p_gmac_queue->uc_wakeup_threshold)
  400c94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400c98:	429a      	cmp	r2, r3
  400c9a:	db06      	blt.n	400caa <gmac_handler+0x142>
				&& p_gmac_queue->func_wakeup_cb) {
  400c9c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400ca0:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  400ca4:	69ab      	ldr	r3, [r5, #24]
  400ca6:	b103      	cbz	r3, 400caa <gmac_handler+0x142>
			p_gmac_queue->func_wakeup_cb();
  400ca8:	4798      	blx	r3
		/* the complete IP stack. */
		xSemaphoreGiveFromISR(netif_notification_semaphore,
				&xHigherPriorityTaskWoken);
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
}
  400caa:	b005      	add	sp, #20
  400cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400cb0:	f8030300 	.word	0xf8030300
  400cb4:	00400675 	.word	0x00400675
  400cb8:	00400665 	.word	0x00400665

00400cbc <read_dev_gmac>:
	}
	return 1;
}

uint32_t read_dev_gmac(void)
{
  400cbc:	b510      	push	{r4, lr}
  400cbe:	b082      	sub	sp, #8
	return gmac_dev_read(&gs_gmac_dev, GMAC_QUE_0, (uint8_t *) gs_uc_eth_buffer, sizeof(gs_uc_eth_buffer), &ul_frm_size);
  400cc0:	4b05      	ldr	r3, [pc, #20]	; (400cd8 <read_dev_gmac+0x1c>)
  400cc2:	9300      	str	r3, [sp, #0]
  400cc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  400cc8:	4a04      	ldr	r2, [pc, #16]	; (400cdc <read_dev_gmac+0x20>)
  400cca:	2100      	movs	r1, #0
  400ccc:	4804      	ldr	r0, [pc, #16]	; (400ce0 <read_dev_gmac+0x24>)
  400cce:	4c05      	ldr	r4, [pc, #20]	; (400ce4 <read_dev_gmac+0x28>)
  400cd0:	47a0      	blx	r4
}
  400cd2:	b002      	add	sp, #8
  400cd4:	bd10      	pop	{r4, pc}
  400cd6:	bf00      	nop
  400cd8:	2040490c 	.word	0x2040490c
  400cdc:	2040430c 	.word	0x2040430c
  400ce0:	20404b10 	.word	0x20404b10
  400ce4:	004008c9 	.word	0x004008c9

00400ce8 <gmac_display_ip_packet>:
 *
 * \param p_ip_header Pointer to the IP header.
 * \param ul_size    The data size.
 */
void gmac_display_ip_packet(p_ip_header_t p_ip_header, uint32_t ul_size)
{
  400ce8:	b530      	push	{r4, r5, lr}
  400cea:	b083      	sub	sp, #12
  400cec:	4604      	mov	r4, r0
	printf("======= IP %4d bytes, HEADER ==========\n\r", (int)ul_size);
  400cee:	482f      	ldr	r0, [pc, #188]	; (400dac <gmac_display_ip_packet+0xc4>)
  400cf0:	4d2f      	ldr	r5, [pc, #188]	; (400db0 <gmac_display_ip_packet+0xc8>)
  400cf2:	47a8      	blx	r5
	printf(" IP Version        = v.%d", (p_ip_header->ip_hl_v & 0xF0) >> 4);
  400cf4:	7821      	ldrb	r1, [r4, #0]
  400cf6:	0909      	lsrs	r1, r1, #4
  400cf8:	482e      	ldr	r0, [pc, #184]	; (400db4 <gmac_display_ip_packet+0xcc>)
  400cfa:	47a8      	blx	r5
	printf("\n\r Header Length     = %d", p_ip_header->ip_hl_v & 0x0F);
  400cfc:	7821      	ldrb	r1, [r4, #0]
  400cfe:	f001 010f 	and.w	r1, r1, #15
  400d02:	482d      	ldr	r0, [pc, #180]	; (400db8 <gmac_display_ip_packet+0xd0>)
  400d04:	47a8      	blx	r5
	printf("\n\r Type of service   = 0x%x", p_ip_header->ip_tos);
  400d06:	7861      	ldrb	r1, [r4, #1]
  400d08:	482c      	ldr	r0, [pc, #176]	; (400dbc <gmac_display_ip_packet+0xd4>)
  400d0a:	47a8      	blx	r5
	printf("\n\r Total IP Length   = 0x%X",
	(((p_ip_header->ip_len) >> 8) & 0xff) +
  400d0c:	8861      	ldrh	r1, [r4, #2]
	(((p_ip_header->ip_len) << 8) & 0xff00));
  400d0e:	020b      	lsls	r3, r1, #8
  400d10:	b29b      	uxth	r3, r3
	printf("\n\r Total IP Length   = 0x%X",
  400d12:	eb03 2111 	add.w	r1, r3, r1, lsr #8
  400d16:	482a      	ldr	r0, [pc, #168]	; (400dc0 <gmac_display_ip_packet+0xd8>)
  400d18:	47a8      	blx	r5
	printf("\n\r ID                = 0x%X",
	(((p_ip_header->ip_id) >> 8) & 0xff) +
  400d1a:	88a1      	ldrh	r1, [r4, #4]
	(((p_ip_header->ip_id) << 8) & 0xff00));
  400d1c:	020b      	lsls	r3, r1, #8
  400d1e:	b29b      	uxth	r3, r3
	printf("\n\r ID                = 0x%X",
  400d20:	eb03 2111 	add.w	r1, r3, r1, lsr #8
  400d24:	4827      	ldr	r0, [pc, #156]	; (400dc4 <gmac_display_ip_packet+0xdc>)
  400d26:	47a8      	blx	r5
	printf("\n\r Header Checksum   = 0x%X",
	(((p_ip_header->ip_sum) >> 8) & 0xff) +
  400d28:	8961      	ldrh	r1, [r4, #10]
	(((p_ip_header->ip_sum) << 8) & 0xff00));
  400d2a:	020b      	lsls	r3, r1, #8
  400d2c:	b29b      	uxth	r3, r3
	printf("\n\r Header Checksum   = 0x%X",
  400d2e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
  400d32:	4825      	ldr	r0, [pc, #148]	; (400dc8 <gmac_display_ip_packet+0xe0>)
  400d34:	47a8      	blx	r5
	puts("\r Protocol          = ");
  400d36:	4825      	ldr	r0, [pc, #148]	; (400dcc <gmac_display_ip_packet+0xe4>)
  400d38:	4b25      	ldr	r3, [pc, #148]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d3a:	4798      	blx	r3

	switch (p_ip_header->ip_p) {
  400d3c:	7a61      	ldrb	r1, [r4, #9]
  400d3e:	1e4b      	subs	r3, r1, #1
  400d40:	2b10      	cmp	r3, #16
  400d42:	d82d      	bhi.n	400da0 <gmac_display_ip_packet+0xb8>
  400d44:	e8df f003 	tbb	[pc, r3]
  400d48:	202c2c09 	.word	0x202c2c09
  400d4c:	2c2c242c 	.word	0x2c2c242c
  400d50:	2c2c2c2c 	.word	0x2c2c2c2c
  400d54:	2c2c2c2c 	.word	0x2c2c2c2c
  400d58:	28          	.byte	0x28
  400d59:	00          	.byte	0x00
		case IP_PROT_ICMP:
		puts("ICMP");
  400d5a:	481e      	ldr	r0, [pc, #120]	; (400dd4 <gmac_display_ip_packet+0xec>)
  400d5c:	4b1c      	ldr	r3, [pc, #112]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d5e:	4798      	blx	r3
		default:
		printf("%d (0x%X)", p_ip_header->ip_p, p_ip_header->ip_p);
		break;
	}

	printf("\n\r IP Src Address    = %d:%d:%d:%d",
  400d60:	7ba3      	ldrb	r3, [r4, #14]
  400d62:	7b62      	ldrb	r2, [r4, #13]
  400d64:	7b21      	ldrb	r1, [r4, #12]
  400d66:	7be0      	ldrb	r0, [r4, #15]
  400d68:	9000      	str	r0, [sp, #0]
  400d6a:	481b      	ldr	r0, [pc, #108]	; (400dd8 <gmac_display_ip_packet+0xf0>)
  400d6c:	4d10      	ldr	r5, [pc, #64]	; (400db0 <gmac_display_ip_packet+0xc8>)
  400d6e:	47a8      	blx	r5
	p_ip_header->ip_src[0],
	p_ip_header->ip_src[1],
	p_ip_header->ip_src[2], p_ip_header->ip_src[3]);

	printf("\n\r IP Dest Address   = %d:%d:%d:%d",
  400d70:	7ca3      	ldrb	r3, [r4, #18]
  400d72:	7c62      	ldrb	r2, [r4, #17]
  400d74:	7c21      	ldrb	r1, [r4, #16]
  400d76:	7ce0      	ldrb	r0, [r4, #19]
  400d78:	9000      	str	r0, [sp, #0]
  400d7a:	4818      	ldr	r0, [pc, #96]	; (400ddc <gmac_display_ip_packet+0xf4>)
  400d7c:	47a8      	blx	r5
	p_ip_header->ip_dst[0],
	p_ip_header->ip_dst[1],
	p_ip_header->ip_dst[2], p_ip_header->ip_dst[3]);
	puts("\n\r----------------------------------------\r");
  400d7e:	4818      	ldr	r0, [pc, #96]	; (400de0 <gmac_display_ip_packet+0xf8>)
  400d80:	4b13      	ldr	r3, [pc, #76]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d82:	4798      	blx	r3
}
  400d84:	b003      	add	sp, #12
  400d86:	bd30      	pop	{r4, r5, pc}
		puts("IP");
  400d88:	4816      	ldr	r0, [pc, #88]	; (400de4 <gmac_display_ip_packet+0xfc>)
  400d8a:	4b11      	ldr	r3, [pc, #68]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d8c:	4798      	blx	r3
		break;
  400d8e:	e7e7      	b.n	400d60 <gmac_display_ip_packet+0x78>
		puts("TCP");
  400d90:	4815      	ldr	r0, [pc, #84]	; (400de8 <gmac_display_ip_packet+0x100>)
  400d92:	4b0f      	ldr	r3, [pc, #60]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d94:	4798      	blx	r3
		break;
  400d96:	e7e3      	b.n	400d60 <gmac_display_ip_packet+0x78>
		puts("UDP");
  400d98:	4814      	ldr	r0, [pc, #80]	; (400dec <gmac_display_ip_packet+0x104>)
  400d9a:	4b0d      	ldr	r3, [pc, #52]	; (400dd0 <gmac_display_ip_packet+0xe8>)
  400d9c:	4798      	blx	r3
		break;
  400d9e:	e7df      	b.n	400d60 <gmac_display_ip_packet+0x78>
		printf("%d (0x%X)", p_ip_header->ip_p, p_ip_header->ip_p);
  400da0:	460a      	mov	r2, r1
  400da2:	4813      	ldr	r0, [pc, #76]	; (400df0 <gmac_display_ip_packet+0x108>)
  400da4:	4b02      	ldr	r3, [pc, #8]	; (400db0 <gmac_display_ip_packet+0xc8>)
  400da6:	4798      	blx	r3
		break;
  400da8:	e7da      	b.n	400d60 <gmac_display_ip_packet+0x78>
  400daa:	bf00      	nop
  400dac:	004059f4 	.word	0x004059f4
  400db0:	00402d39 	.word	0x00402d39
  400db4:	00405a20 	.word	0x00405a20
  400db8:	00405a3c 	.word	0x00405a3c
  400dbc:	00405a58 	.word	0x00405a58
  400dc0:	00405a74 	.word	0x00405a74
  400dc4:	00405a90 	.word	0x00405a90
  400dc8:	00405aac 	.word	0x00405aac
  400dcc:	00405ac8 	.word	0x00405ac8
  400dd0:	00402fcd 	.word	0x00402fcd
  400dd4:	00405ae0 	.word	0x00405ae0
  400dd8:	00405b00 	.word	0x00405b00
  400ddc:	00405b24 	.word	0x00405b24
  400de0:	00405b48 	.word	0x00405b48
  400de4:	00405ae8 	.word	0x00405ae8
  400de8:	00405aec 	.word	0x00405aec
  400dec:	00405af0 	.word	0x00405af0
  400df0:	00405af4 	.word	0x00405af4

00400df4 <at24mac_get_mac_address>:
	}
}

#ifdef ETH_SUPPORT_AT24MAC
void at24mac_get_mac_address(void)
{
  400df4:	b510      	push	{r4, lr}
  400df6:	b08c      	sub	sp, #48	; 0x30
	twihs_options_t opt;
	twihs_packet_t packet_mac_addr;
	uint8_t orginal_mac_addr[BOARD_AT24MAC_PAGE_SIZE];

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_TWIHS0);
  400df8:	2013      	movs	r0, #19
  400dfa:	4b1a      	ldr	r3, [pc, #104]	; (400e64 <at24mac_get_mac_address+0x70>)
  400dfc:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  400dfe:	4b1a      	ldr	r3, [pc, #104]	; (400e68 <at24mac_get_mac_address+0x74>)
  400e00:	9309      	str	r3, [sp, #36]	; 0x24
	opt.speed = BOARD_AT24MAC_TWIHS_CLK;
  400e02:	4b1a      	ldr	r3, [pc, #104]	; (400e6c <at24mac_get_mac_address+0x78>)
  400e04:	930a      	str	r3, [sp, #40]	; 0x28
	twihs_master_init(BOARD_AT24MAC_TWIHS, &opt);
  400e06:	4c1a      	ldr	r4, [pc, #104]	; (400e70 <at24mac_get_mac_address+0x7c>)
  400e08:	a909      	add	r1, sp, #36	; 0x24
  400e0a:	4620      	mov	r0, r4
  400e0c:	4b19      	ldr	r3, [pc, #100]	; (400e74 <at24mac_get_mac_address+0x80>)
  400e0e:	4798      	blx	r3

	/* MAC address */
	packet_mac_addr.chip = BOARD_AT24MAC_ADDRESS;
  400e10:	2357      	movs	r3, #87	; 0x57
  400e12:	f88d 3020 	strb.w	r3, [sp, #32]
	packet_mac_addr.addr[0] = 0x9A;
  400e16:	239a      	movs	r3, #154	; 0x9a
  400e18:	f88d 3010 	strb.w	r3, [sp, #16]
	packet_mac_addr.addr_length = 1;
  400e1c:	2301      	movs	r3, #1
  400e1e:	9305      	str	r3, [sp, #20]
	packet_mac_addr.buffer = orginal_mac_addr;
  400e20:	f8cd d018 	str.w	sp, [sp, #24]
	packet_mac_addr.length = BOARD_AT24MAC_PAGE_SIZE;
  400e24:	2310      	movs	r3, #16
  400e26:	9307      	str	r3, [sp, #28]

	twihs_master_read(BOARD_AT24MAC_TWIHS, &packet_mac_addr);
  400e28:	eb0d 0103 	add.w	r1, sp, r3
  400e2c:	4620      	mov	r0, r4
  400e2e:	4b12      	ldr	r3, [pc, #72]	; (400e78 <at24mac_get_mac_address+0x84>)
  400e30:	4798      	blx	r3

	if ((orginal_mac_addr[0] == 0xFC) && (orginal_mac_addr[1] == 0xC2)
  400e32:	f89d 3000 	ldrb.w	r3, [sp]
  400e36:	2bfc      	cmp	r3, #252	; 0xfc
  400e38:	d001      	beq.n	400e3e <at24mac_get_mac_address+0x4a>
	&& (orginal_mac_addr[2] == 0x3D)) {
		for (uint8_t i = 0; i < 6; i++)
		gs_uc_mac_address[i] = orginal_mac_addr[i];
	}
}
  400e3a:	b00c      	add	sp, #48	; 0x30
  400e3c:	bd10      	pop	{r4, pc}
	if ((orginal_mac_addr[0] == 0xFC) && (orginal_mac_addr[1] == 0xC2)
  400e3e:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e42:	2bc2      	cmp	r3, #194	; 0xc2
  400e44:	d1f9      	bne.n	400e3a <at24mac_get_mac_address+0x46>
	&& (orginal_mac_addr[2] == 0x3D)) {
  400e46:	f89d 3002 	ldrb.w	r3, [sp, #2]
  400e4a:	2b3d      	cmp	r3, #61	; 0x3d
  400e4c:	d1f5      	bne.n	400e3a <at24mac_get_mac_address+0x46>
  400e4e:	466b      	mov	r3, sp
  400e50:	4a0a      	ldr	r2, [pc, #40]	; (400e7c <at24mac_get_mac_address+0x88>)
  400e52:	f10d 0006 	add.w	r0, sp, #6
		gs_uc_mac_address[i] = orginal_mac_addr[i];
  400e56:	f813 1b01 	ldrb.w	r1, [r3], #1
  400e5a:	f802 1b01 	strb.w	r1, [r2], #1
		for (uint8_t i = 0; i < 6; i++)
  400e5e:	4283      	cmp	r3, r0
  400e60:	d1f9      	bne.n	400e56 <at24mac_get_mac_address+0x62>
  400e62:	e7ea      	b.n	400e3a <at24mac_get_mac_address+0x46>
  400e64:	004023fd 	.word	0x004023fd
  400e68:	11e1a300 	.word	0x11e1a300
  400e6c:	00061a80 	.word	0x00061a80
  400e70:	40018000 	.word	0x40018000
  400e74:	00401a05 	.word	0x00401a05
  400e78:	00401a39 	.word	0x00401a39
  400e7c:	20400018 	.word	0x20400018

00400e80 <init_gmac_ethernet>:
{
  400e80:	b530      	push	{r4, r5, lr}
  400e82:	b085      	sub	sp, #20
	at24mac_get_mac_address();
  400e84:	4b2c      	ldr	r3, [pc, #176]	; (400f38 <init_gmac_ethernet+0xb8>)
  400e86:	4798      	blx	r3
	gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
  400e88:	482c      	ldr	r0, [pc, #176]	; (400f3c <init_gmac_ethernet+0xbc>)
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  400e8a:	7883      	ldrb	r3, [r0, #2]
  400e8c:	7842      	ldrb	r2, [r0, #1]
  400e8e:	7801      	ldrb	r1, [r0, #0]
  400e90:	7944      	ldrb	r4, [r0, #5]
  400e92:	9402      	str	r4, [sp, #8]
  400e94:	7904      	ldrb	r4, [r0, #4]
  400e96:	9401      	str	r4, [sp, #4]
  400e98:	78c0      	ldrb	r0, [r0, #3]
  400e9a:	9000      	str	r0, [sp, #0]
  400e9c:	4828      	ldr	r0, [pc, #160]	; (400f40 <init_gmac_ethernet+0xc0>)
  400e9e:	4c29      	ldr	r4, [pc, #164]	; (400f44 <init_gmac_ethernet+0xc4>)
  400ea0:	47a0      	blx	r4
	gs_uc_ip_address[2], gs_uc_ip_address[3]);
  400ea2:	4829      	ldr	r0, [pc, #164]	; (400f48 <init_gmac_ethernet+0xc8>)
	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
  400ea4:	7883      	ldrb	r3, [r0, #2]
  400ea6:	7842      	ldrb	r2, [r0, #1]
  400ea8:	7801      	ldrb	r1, [r0, #0]
  400eaa:	78c0      	ldrb	r0, [r0, #3]
  400eac:	9000      	str	r0, [sp, #0]
  400eae:	4827      	ldr	r0, [pc, #156]	; (400f4c <init_gmac_ethernet+0xcc>)
  400eb0:	47a0      	blx	r4
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  400eb2:	4a27      	ldr	r2, [pc, #156]	; (400f50 <init_gmac_ethernet+0xd0>)
  400eb4:	4b27      	ldr	r3, [pc, #156]	; (400f54 <init_gmac_ethernet+0xd4>)
  400eb6:	601a      	str	r2, [r3, #0]
	while (ul_delay--);
  400eb8:	461a      	mov	r2, r3
  400eba:	6813      	ldr	r3, [r2, #0]
  400ebc:	1e59      	subs	r1, r3, #1
  400ebe:	6011      	str	r1, [r2, #0]
  400ec0:	2b00      	cmp	r3, #0
  400ec2:	d1fa      	bne.n	400eba <init_gmac_ethernet+0x3a>
	pmc_enable_periph_clk(ID_GMAC);
  400ec4:	2027      	movs	r0, #39	; 0x27
  400ec6:	4b24      	ldr	r3, [pc, #144]	; (400f58 <init_gmac_ethernet+0xd8>)
  400ec8:	4798      	blx	r3
	gmac_option.uc_copy_all_frame = 0;
  400eca:	4a24      	ldr	r2, [pc, #144]	; (400f5c <init_gmac_ethernet+0xdc>)
  400ecc:	2500      	movs	r5, #0
  400ece:	7015      	strb	r5, [r2, #0]
	gmac_option.uc_no_boardcast = 0;
  400ed0:	7055      	strb	r5, [r2, #1]
	memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
  400ed2:	4b1a      	ldr	r3, [pc, #104]	; (400f3c <init_gmac_ethernet+0xbc>)
  400ed4:	6818      	ldr	r0, [r3, #0]
  400ed6:	f8c2 0002 	str.w	r0, [r2, #2]
  400eda:	889b      	ldrh	r3, [r3, #4]
  400edc:	80d3      	strh	r3, [r2, #6]
	gs_gmac_dev.p_hw = GMAC;
  400ede:	4920      	ldr	r1, [pc, #128]	; (400f60 <init_gmac_ethernet+0xe0>)
  400ee0:	4c20      	ldr	r4, [pc, #128]	; (400f64 <init_gmac_ethernet+0xe4>)
  400ee2:	600c      	str	r4, [r1, #0]
	gmac_dev_init(GMAC, &gs_gmac_dev, &gmac_option);
  400ee4:	4620      	mov	r0, r4
  400ee6:	4b20      	ldr	r3, [pc, #128]	; (400f68 <init_gmac_ethernet+0xe8>)
  400ee8:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400eea:	2280      	movs	r2, #128	; 0x80
  400eec:	4b1f      	ldr	r3, [pc, #124]	; (400f6c <init_gmac_ethernet+0xec>)
  400eee:	605a      	str	r2, [r3, #4]
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz())
  400ef0:	4a1f      	ldr	r2, [pc, #124]	; (400f70 <init_gmac_ethernet+0xf0>)
  400ef2:	4629      	mov	r1, r5
  400ef4:	4620      	mov	r0, r4
  400ef6:	4b1f      	ldr	r3, [pc, #124]	; (400f74 <init_gmac_ethernet+0xf4>)
  400ef8:	4798      	blx	r3
  400efa:	b960      	cbnz	r0, 400f16 <init_gmac_ethernet+0x96>
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  400efc:	2100      	movs	r1, #0
  400efe:	4819      	ldr	r0, [pc, #100]	; (400f64 <init_gmac_ethernet+0xe4>)
  400f00:	4b1d      	ldr	r3, [pc, #116]	; (400f78 <init_gmac_ethernet+0xf8>)
  400f02:	4798      	blx	r3
  400f04:	b968      	cbnz	r0, 400f22 <init_gmac_ethernet+0xa2>
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  400f06:	2201      	movs	r2, #1
  400f08:	2100      	movs	r1, #0
  400f0a:	4816      	ldr	r0, [pc, #88]	; (400f64 <init_gmac_ethernet+0xe4>)
  400f0c:	4b1b      	ldr	r3, [pc, #108]	; (400f7c <init_gmac_ethernet+0xfc>)
  400f0e:	4798      	blx	r3
  400f10:	b960      	cbnz	r0, 400f2c <init_gmac_ethernet+0xac>
	return 1;
  400f12:	2001      	movs	r0, #1
  400f14:	e003      	b.n	400f1e <init_gmac_ethernet+0x9e>
		puts("PHY Initialize ERROR!\r");
  400f16:	481a      	ldr	r0, [pc, #104]	; (400f80 <init_gmac_ethernet+0x100>)
  400f18:	4b1a      	ldr	r3, [pc, #104]	; (400f84 <init_gmac_ethernet+0x104>)
  400f1a:	4798      	blx	r3
		return 0;
  400f1c:	4628      	mov	r0, r5
}
  400f1e:	b005      	add	sp, #20
  400f20:	bd30      	pop	{r4, r5, pc}
		puts("Auto Negotiate ERROR!\r");
  400f22:	4819      	ldr	r0, [pc, #100]	; (400f88 <init_gmac_ethernet+0x108>)
  400f24:	4b17      	ldr	r3, [pc, #92]	; (400f84 <init_gmac_ethernet+0x104>)
  400f26:	4798      	blx	r3
		return 0;
  400f28:	2000      	movs	r0, #0
  400f2a:	e7f8      	b.n	400f1e <init_gmac_ethernet+0x9e>
		puts("Set link ERROR!\r");
  400f2c:	4817      	ldr	r0, [pc, #92]	; (400f8c <init_gmac_ethernet+0x10c>)
  400f2e:	4b15      	ldr	r3, [pc, #84]	; (400f84 <init_gmac_ethernet+0x104>)
  400f30:	4798      	blx	r3
		return 0;
  400f32:	2000      	movs	r0, #0
  400f34:	e7f3      	b.n	400f1e <init_gmac_ethernet+0x9e>
  400f36:	bf00      	nop
  400f38:	00400df5 	.word	0x00400df5
  400f3c:	20400018 	.word	0x20400018
  400f40:	00405bc8 	.word	0x00405bc8
  400f44:	00402d39 	.word	0x00402d39
  400f48:	20400014 	.word	0x20400014
  400f4c:	00405be4 	.word	0x00405be4
  400f50:	02625a00 	.word	0x02625a00
  400f54:	20404c04 	.word	0x20404c04
  400f58:	004023fd 	.word	0x004023fd
  400f5c:	20404c08 	.word	0x20404c08
  400f60:	20404b10 	.word	0x20404b10
  400f64:	40050000 	.word	0x40050000
  400f68:	00400765 	.word	0x00400765
  400f6c:	e000e100 	.word	0xe000e100
  400f70:	11e1a300 	.word	0x11e1a300
  400f74:	00400501 	.word	0x00400501
  400f78:	00400305 	.word	0x00400305
  400f7c:	00400211 	.word	0x00400211
  400f80:	00405bfc 	.word	0x00405bfc
  400f84:	00402fcd 	.word	0x00402fcd
  400f88:	00405c14 	.word	0x00405c14
  400f8c:	00405c2c 	.word	0x00405c2c

00400f90 <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  400f90:	b508      	push	{r3, lr}
	gmac_handler(&gs_gmac_dev, GMAC_QUE_0);
  400f92:	2100      	movs	r1, #0
  400f94:	4801      	ldr	r0, [pc, #4]	; (400f9c <GMAC_Handler+0xc>)
  400f96:	4b02      	ldr	r3, [pc, #8]	; (400fa0 <GMAC_Handler+0x10>)
  400f98:	4798      	blx	r3
  400f9a:	bd08      	pop	{r3, pc}
  400f9c:	20404b10 	.word	0x20404b10
  400fa0:	00400b69 	.word	0x00400b69

00400fa4 <compareArray>:
}

char compareArray(uint8_t a[],uint8_t b[],uint8_t size)	
{
	int i;
	for(i=0;i<size;i++){
  400fa4:	b1a2      	cbz	r2, 400fd0 <compareArray+0x2c>
{
  400fa6:	b430      	push	{r4, r5}
  400fa8:	4614      	mov	r4, r2
		if(a[i]!=b[i])
  400faa:	7802      	ldrb	r2, [r0, #0]
  400fac:	780b      	ldrb	r3, [r1, #0]
  400fae:	429a      	cmp	r2, r3
  400fb0:	d110      	bne.n	400fd4 <compareArray+0x30>
  400fb2:	1c43      	adds	r3, r0, #1
  400fb4:	4420      	add	r0, r4
	for(i=0;i<size;i++){
  400fb6:	4283      	cmp	r3, r0
  400fb8:	d007      	beq.n	400fca <compareArray+0x26>
		if(a[i]!=b[i])
  400fba:	f813 4b01 	ldrb.w	r4, [r3], #1
  400fbe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  400fc2:	42a5      	cmp	r5, r4
  400fc4:	d0f7      	beq.n	400fb6 <compareArray+0x12>
		return 1;
  400fc6:	2001      	movs	r0, #1
  400fc8:	e000      	b.n	400fcc <compareArray+0x28>
	}
	return 0;
  400fca:	2000      	movs	r0, #0
}
  400fcc:	bc30      	pop	{r4, r5}
  400fce:	4770      	bx	lr
	return 0;
  400fd0:	2000      	movs	r0, #0
  400fd2:	4770      	bx	lr
		return 1;
  400fd4:	2001      	movs	r0, #1
  400fd6:	e7f9      	b.n	400fcc <compareArray+0x28>

00400fd8 <gmac_process_eth_packet>:
{
  400fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fda:	b08d      	sub	sp, #52	; 0x34
  400fdc:	4604      	mov	r4, r0
  400fde:	460d      	mov	r5, r1
	us_pkt_format = SWAP16(p_eth->et_protlen);
  400fe0:	8983      	ldrh	r3, [r0, #12]
  400fe2:	0a19      	lsrs	r1, r3, #8
  400fe4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  400fe8:	b209      	sxth	r1, r1
	switch (us_pkt_format) {
  400fea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  400fee:	d052      	beq.n	401096 <gmac_process_eth_packet+0xbe>
  400ff0:	f640 0306 	movw	r3, #2054	; 0x806
  400ff4:	4299      	cmp	r1, r3
  400ff6:	f040 80e0 	bne.w	4011ba <gmac_process_eth_packet+0x1e2>
	if (SWAP16(p_arp->ar_op) == ARP_REQUEST) {
  400ffa:	8a82      	ldrh	r2, [r0, #20]
  400ffc:	0213      	lsls	r3, r2, #8
  400ffe:	b29b      	uxth	r3, r3
  401000:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  401004:	2b01      	cmp	r3, #1
  401006:	d16f      	bne.n	4010e8 <gmac_process_eth_packet+0x110>
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  401008:	7883      	ldrb	r3, [r0, #2]
  40100a:	7842      	ldrb	r2, [r0, #1]
  40100c:	7801      	ldrb	r1, [r0, #0]
  40100e:	4f6d      	ldr	r7, [pc, #436]	; (4011c4 <gmac_process_eth_packet+0x1ec>)
  401010:	7940      	ldrb	r0, [r0, #5]
  401012:	9002      	str	r0, [sp, #8]
  401014:	7920      	ldrb	r0, [r4, #4]
  401016:	9001      	str	r0, [sp, #4]
  401018:	78e0      	ldrb	r0, [r4, #3]
  40101a:	9000      	str	r0, [sp, #0]
  40101c:	4638      	mov	r0, r7
  40101e:	4e6a      	ldr	r6, [pc, #424]	; (4011c8 <gmac_process_eth_packet+0x1f0>)
  401020:	47b0      	blx	r6
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  401022:	7a23      	ldrb	r3, [r4, #8]
  401024:	79e2      	ldrb	r2, [r4, #7]
  401026:	79a1      	ldrb	r1, [r4, #6]
  401028:	7ae0      	ldrb	r0, [r4, #11]
  40102a:	9002      	str	r0, [sp, #8]
  40102c:	7aa0      	ldrb	r0, [r4, #10]
  40102e:	9001      	str	r0, [sp, #4]
  401030:	7a60      	ldrb	r0, [r4, #9]
  401032:	9000      	str	r0, [sp, #0]
  401034:	4638      	mov	r0, r7
  401036:	47b0      	blx	r6
		p_arp->ar_op = SWAP16(ARP_REPLY);
  401038:	2300      	movs	r3, #0
  40103a:	7523      	strb	r3, [r4, #20]
  40103c:	2302      	movs	r3, #2
  40103e:	7563      	strb	r3, [r4, #21]
  401040:	1e63      	subs	r3, r4, #1
  401042:	4962      	ldr	r1, [pc, #392]	; (4011cc <gmac_process_eth_packet+0x1f4>)
  401044:	1d66      	adds	r6, r4, #5
			p_eth->et_dest[i] = p_eth->et_src[i];
  401046:	79da      	ldrb	r2, [r3, #7]
  401048:	f803 2f01 	strb.w	r2, [r3, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  40104c:	f811 2b01 	ldrb.w	r2, [r1], #1
  401050:	719a      	strb	r2, [r3, #6]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
  401052:	7d98      	ldrb	r0, [r3, #22]
  401054:	f883 0020 	strb.w	r0, [r3, #32]
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
  401058:	759a      	strb	r2, [r3, #22]
		for (i = 0; i < 6; i++) {
  40105a:	42b3      	cmp	r3, r6
  40105c:	d1f3      	bne.n	401046 <gmac_process_eth_packet+0x6e>
  40105e:	f104 031b 	add.w	r3, r4, #27
  401062:	4a5b      	ldr	r2, [pc, #364]	; (4011d0 <gmac_process_eth_packet+0x1f8>)
  401064:	f104 001f 	add.w	r0, r4, #31
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
  401068:	7859      	ldrb	r1, [r3, #1]
  40106a:	72d9      	strb	r1, [r3, #11]
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
  40106c:	f812 1b01 	ldrb.w	r1, [r2], #1
  401070:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  401074:	4283      	cmp	r3, r0
  401076:	d1f7      	bne.n	401068 <gmac_process_eth_packet+0x90>
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data, ul_size, NULL);
  401078:	2100      	movs	r1, #0
  40107a:	9100      	str	r1, [sp, #0]
  40107c:	462b      	mov	r3, r5
  40107e:	4622      	mov	r2, r4
  401080:	4854      	ldr	r0, [pc, #336]	; (4011d4 <gmac_process_eth_packet+0x1fc>)
  401082:	4c55      	ldr	r4, [pc, #340]	; (4011d8 <gmac_process_eth_packet+0x200>)
  401084:	47a0      	blx	r4
		if (ul_rc != GMAC_OK) {
  401086:	f010 0fff 	tst.w	r0, #255	; 0xff
  40108a:	d02d      	beq.n	4010e8 <gmac_process_eth_packet+0x110>
			printf("E: ARP Send - 0x%x\n\r", ul_rc);
  40108c:	b2c1      	uxtb	r1, r0
  40108e:	4853      	ldr	r0, [pc, #332]	; (4011dc <gmac_process_eth_packet+0x204>)
  401090:	4b4d      	ldr	r3, [pc, #308]	; (4011c8 <gmac_process_eth_packet+0x1f0>)
  401092:	4798      	blx	r3
  401094:	e028      	b.n	4010e8 <gmac_process_eth_packet+0x110>
		memcpy(&ip_header, p_ip_header, sizeof(ip_header_t));
  401096:	ae07      	add	r6, sp, #28
  401098:	4607      	mov	r7, r0
  40109a:	f857 0f0e 	ldr.w	r0, [r7, #14]!
  40109e:	6879      	ldr	r1, [r7, #4]
  4010a0:	68ba      	ldr	r2, [r7, #8]
  4010a2:	68fb      	ldr	r3, [r7, #12]
  4010a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4010a6:	6938      	ldr	r0, [r7, #16]
  4010a8:	6030      	str	r0, [r6, #0]
	if (ul_size > hdr_len)
  4010aa:	2d2a      	cmp	r5, #42	; 0x2a
  4010ac:	d911      	bls.n	4010d2 <gmac_process_eth_packet+0xfa>
  4010ae:	f104 0329 	add.w	r3, r4, #41	; 0x29
  4010b2:	f10d 0213 	add.w	r2, sp, #19
  4010b6:	f104 0031 	add.w	r0, r4, #49	; 0x31
			controle[i] = p_uc_data[hdr_len+i];
  4010ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4010be:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (i = 0; i < 8; i++)
  4010c2:	4283      	cmp	r3, r0
  4010c4:	d1f9      	bne.n	4010ba <gmac_process_eth_packet+0xe2>
		if (!compareArray(controle, artnet_id, 8))
  4010c6:	2208      	movs	r2, #8
  4010c8:	4945      	ldr	r1, [pc, #276]	; (4011e0 <gmac_process_eth_packet+0x208>)
  4010ca:	a805      	add	r0, sp, #20
  4010cc:	4b45      	ldr	r3, [pc, #276]	; (4011e4 <gmac_process_eth_packet+0x20c>)
  4010ce:	4798      	blx	r3
  4010d0:	b160      	cbz	r0, 4010ec <gmac_process_eth_packet+0x114>
	switch (p_ip_header->ip_p) {
  4010d2:	7de3      	ldrb	r3, [r4, #23]
  4010d4:	2b01      	cmp	r3, #1
  4010d6:	d103      	bne.n	4010e0 <gmac_process_eth_packet+0x108>
		if (p_icmp_echo->type == ICMP_ECHO_REQUEST) {
  4010d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4010dc:	2b08      	cmp	r3, #8
  4010de:	d00d      	beq.n	4010fc <gmac_process_eth_packet+0x124>
		gmac_display_ip_packet(&ip_header, ul_size);
  4010e0:	4629      	mov	r1, r5
  4010e2:	a807      	add	r0, sp, #28
  4010e4:	4b40      	ldr	r3, [pc, #256]	; (4011e8 <gmac_process_eth_packet+0x210>)
  4010e6:	4798      	blx	r3
}
  4010e8:	b00d      	add	sp, #52	; 0x34
  4010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(artnet_data_buffer, p_art_packet->art_data, sizeof(artnet_data_buffer));
  4010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
  4010f0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  4010f4:	483d      	ldr	r0, [pc, #244]	; (4011ec <gmac_process_eth_packet+0x214>)
  4010f6:	4b3e      	ldr	r3, [pc, #248]	; (4011f0 <gmac_process_eth_packet+0x218>)
  4010f8:	4798      	blx	r3
  4010fa:	e7ea      	b.n	4010d2 <gmac_process_eth_packet+0xfa>
	p_icmp_echo_header_t p_icmp_echo =
  4010fc:	f104 0622 	add.w	r6, r4, #34	; 0x22
			p_icmp_echo->type = ICMP_ECHO_REPLY;
  401100:	2300      	movs	r3, #0
  401102:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			p_icmp_echo->code = 0;
  401106:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			p_icmp_echo->cksum = 0;
  40110a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  40110e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
			ul_icmp_len = (SWAP16(p_ip_header->ip_len) - ETH_IP_HEADER_SIZE);
  401112:	8a22      	ldrh	r2, [r4, #16]
  401114:	0213      	lsls	r3, r2, #8
  401116:	b29b      	uxth	r3, r3
  401118:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  40111c:	f1a3 0714 	sub.w	r7, r3, #20
			if (ul_icmp_len % 2) {
  401120:	f017 0f01 	tst.w	r7, #1
  401124:	d003      	beq.n	40112e <gmac_process_eth_packet+0x156>
				*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
  401126:	2200      	movs	r2, #0
  401128:	55f2      	strb	r2, [r6, r7]
				ul_icmp_len++;
  40112a:	f1a3 0713 	sub.w	r7, r3, #19
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  40112e:	087f      	lsrs	r7, r7, #1
  401130:	d041      	beq.n	4011b6 <gmac_process_eth_packet+0x1de>
  401132:	2200      	movs	r2, #0
  401134:	4610      	mov	r0, r2
		ul_tmp += SWAP16(*p_buff);
  401136:	f836 1b02 	ldrh.w	r1, [r6], #2
  40113a:	020b      	lsls	r3, r1, #8
  40113c:	b29b      	uxth	r3, r3
  40113e:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
  401142:	4418      	add	r0, r3
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  401144:	3201      	adds	r2, #1
  401146:	4297      	cmp	r7, r2
  401148:	d1f5      	bne.n	401136 <gmac_process_eth_packet+0x15e>
	ul_tmp = (ul_tmp & 0xffff) + (ul_tmp >> 16);
  40114a:	0c03      	lsrs	r3, r0, #16
  40114c:	fa13 f380 	uxtah	r3, r3, r0
	return (uint16_t) (~ul_tmp);
  401150:	43db      	mvns	r3, r3
  401152:	b29b      	uxth	r3, r3
			p_icmp_echo->cksum = SWAP16(
  401154:	0a1a      	lsrs	r2, r3, #8
  401156:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  40115a:	84a3      	strh	r3, [r4, #36]	; 0x24
  40115c:	f104 0319 	add.w	r3, r4, #25
  401160:	4a1b      	ldr	r2, [pc, #108]	; (4011d0 <gmac_process_eth_packet+0x1f8>)
  401162:	f104 001d 	add.w	r0, r4, #29
				p_ip_header->ip_dst[i] =
  401166:	7859      	ldrb	r1, [r3, #1]
  401168:	7159      	strb	r1, [r3, #5]
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
  40116a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40116e:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (i = 0; i < 4; i++) {
  401172:	4283      	cmp	r3, r0
  401174:	d1f7      	bne.n	401166 <gmac_process_eth_packet+0x18e>
  401176:	1e62      	subs	r2, r4, #1
  401178:	4914      	ldr	r1, [pc, #80]	; (4011cc <gmac_process_eth_packet+0x1f4>)
  40117a:	1d66      	adds	r6, r4, #5
  40117c:	4633      	mov	r3, r6
				p_eth->et_dest[i] = p_eth->et_src[i];
  40117e:	7858      	ldrb	r0, [r3, #1]
  401180:	f802 0f01 	strb.w	r0, [r2, #1]!
				p_eth->et_src[i] = gs_uc_mac_address[i];
  401184:	f811 0b01 	ldrb.w	r0, [r1], #1
  401188:	f803 0f01 	strb.w	r0, [r3, #1]!
			for (i = 0; i < 6; i++) {
  40118c:	42b2      	cmp	r2, r6
  40118e:	d1f6      	bne.n	40117e <gmac_process_eth_packet+0x1a6>
					SWAP16(p_ip_header->ip_len) + 14, NULL);
  401190:	8a22      	ldrh	r2, [r4, #16]
  401192:	0213      	lsls	r3, r2, #8
  401194:	b29b      	uxth	r3, r3
  401196:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
			ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
  40119a:	2100      	movs	r1, #0
  40119c:	9100      	str	r1, [sp, #0]
  40119e:	330e      	adds	r3, #14
  4011a0:	4622      	mov	r2, r4
  4011a2:	480c      	ldr	r0, [pc, #48]	; (4011d4 <gmac_process_eth_packet+0x1fc>)
  4011a4:	4c0c      	ldr	r4, [pc, #48]	; (4011d8 <gmac_process_eth_packet+0x200>)
  4011a6:	47a0      	blx	r4
			if (ul_rc != GMAC_OK) {
  4011a8:	4601      	mov	r1, r0
  4011aa:	2800      	cmp	r0, #0
  4011ac:	d098      	beq.n	4010e0 <gmac_process_eth_packet+0x108>
				printf("E: ICMP Send - 0x%x\n\r", ul_rc);
  4011ae:	4811      	ldr	r0, [pc, #68]	; (4011f4 <gmac_process_eth_packet+0x21c>)
  4011b0:	4b05      	ldr	r3, [pc, #20]	; (4011c8 <gmac_process_eth_packet+0x1f0>)
  4011b2:	4798      	blx	r3
  4011b4:	e794      	b.n	4010e0 <gmac_process_eth_packet+0x108>
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  4011b6:	4638      	mov	r0, r7
  4011b8:	e7c7      	b.n	40114a <gmac_process_eth_packet+0x172>
		printf("=== Default w_pkt_format= 0x%X===\n\r", us_pkt_format);
  4011ba:	b289      	uxth	r1, r1
  4011bc:	480e      	ldr	r0, [pc, #56]	; (4011f8 <gmac_process_eth_packet+0x220>)
  4011be:	4b02      	ldr	r3, [pc, #8]	; (4011c8 <gmac_process_eth_packet+0x1f0>)
  4011c0:	4798      	blx	r3
}
  4011c2:	e791      	b.n	4010e8 <gmac_process_eth_packet+0x110>
  4011c4:	00405bc8 	.word	0x00405bc8
  4011c8:	00402d39 	.word	0x00402d39
  4011cc:	20400018 	.word	0x20400018
  4011d0:	20400014 	.word	0x20400014
  4011d4:	20404b10 	.word	0x20404b10
  4011d8:	00400a8d 	.word	0x00400a8d
  4011dc:	00405b74 	.word	0x00405b74
  4011e0:	2040000c 	.word	0x2040000c
  4011e4:	00400fa5 	.word	0x00400fa5
  4011e8:	00400ce9 	.word	0x00400ce9
  4011ec:	20404910 	.word	0x20404910
  4011f0:	00402d61 	.word	0x00402d61
  4011f4:	00405b8c 	.word	0x00405b8c
  4011f8:	00405ba4 	.word	0x00405ba4

004011fc <proces_artnet_packet>:

void proces_artnet_packet(uint8_t *p_uc_data, uint32_t ul_size)
{
  4011fc:	b508      	push	{r3, lr}
	gmac_process_eth_packet(p_uc_data, ul_size);
  4011fe:	4b01      	ldr	r3, [pc, #4]	; (401204 <proces_artnet_packet+0x8>)
  401200:	4798      	blx	r3
  401202:	bd08      	pop	{r3, pc}
  401204:	00400fd9 	.word	0x00400fd9

00401208 <print_address_register>:
{
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
}

static void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  401208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40120c:	b083      	sub	sp, #12
  40120e:	af00      	add	r7, sp, #0
  401210:	460e      	mov	r6, r1
  401212:	4614      	mov	r4, r2
	printf("%s\t", name);
  401214:	4601      	mov	r1, r0
  401216:	4829      	ldr	r0, [pc, #164]	; (4012bc <print_address_register+0xb4>)
  401218:	4b29      	ldr	r3, [pc, #164]	; (4012c0 <print_address_register+0xb8>)
  40121a:	4798      	blx	r3
	while(qty--){
  40121c:	2c00      	cmp	r4, #0
  40121e:	d045      	beq.n	4012ac <print_address_register+0xa4>
  401220:	4434      	add	r4, r6
  401222:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  401226:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4012d0 <print_address_register+0xc8>
	while(qty--){
  40122a:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  40122e:	f89b 4000 	ldrb.w	r4, [fp]
  401232:	1de3      	adds	r3, r4, #7
  401234:	f023 0307 	bic.w	r3, r3, #7
  401238:	ebad 0d03 	sub.w	sp, sp, r3
  40123c:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  40123e:	f106 0901 	add.w	r9, r6, #1
  401242:	fa5f f989 	uxtb.w	r9, r9
{
  401246:	f8c7 d000 	str.w	sp, [r7]
	uint8_t status[len+1];
  40124a:	f104 0308 	add.w	r3, r4, #8
  40124e:	f023 0307 	bic.w	r3, r3, #7
  401252:	ebad 0d03 	sub.w	sp, sp, r3
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  401256:	f006 061f 	and.w	r6, r6, #31
  40125a:	f88d 6000 	strb.w	r6, [sp]
	spi_master_transfer(&status, sizeof(status));
  40125e:	1c61      	adds	r1, r4, #1
  401260:	4668      	mov	r0, sp
  401262:	4b18      	ldr	r3, [pc, #96]	; (4012c4 <print_address_register+0xbc>)
  401264:	4798      	blx	r3
	for (uint8_t i = 0; i< len; i++)
  401266:	b15c      	cbz	r4, 401280 <print_address_register+0x78>
  401268:	f10d 0801 	add.w	r8, sp, #1
  40126c:	1e6b      	subs	r3, r5, #1
  40126e:	1e61      	subs	r1, r4, #1
  401270:	fa55 f181 	uxtab	r1, r5, r1
		buf[i] = status[i+1];
  401274:	f818 2b01 	ldrb.w	r2, [r8], #1
  401278:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  40127c:	428b      	cmp	r3, r1
  40127e:	d1f9      	bne.n	401274 <print_address_register+0x6c>
  401280:	f8d7 d000 	ldr.w	sp, [r7]
		
		printf(" 0x");
  401284:	4810      	ldr	r0, [pc, #64]	; (4012c8 <print_address_register+0xc0>)
  401286:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <print_address_register+0xb8>)
  401288:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  40128a:	3c01      	subs	r4, #1
  40128c:	192c      	adds	r4, r5, r4
  40128e:	d208      	bcs.n	4012a2 <print_address_register+0x9a>
			printf("%02x", *bufptr);
  401290:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4012d4 <print_address_register+0xcc>
  401294:	4e0a      	ldr	r6, [pc, #40]	; (4012c0 <print_address_register+0xb8>)
  401296:	f814 1901 	ldrb.w	r1, [r4], #-1
  40129a:	4640      	mov	r0, r8
  40129c:	47b0      	blx	r6
		while(--bufptr >= buffer){
  40129e:	42a5      	cmp	r5, r4
  4012a0:	d9f9      	bls.n	401296 <print_address_register+0x8e>
  4012a2:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  4012a6:	464e      	mov	r6, r9
	while(qty--){
  4012a8:	45d1      	cmp	r9, sl
  4012aa:	d1be      	bne.n	40122a <print_address_register+0x22>
		}
	}
	printf("\r\n");
  4012ac:	4807      	ldr	r0, [pc, #28]	; (4012cc <print_address_register+0xc4>)
  4012ae:	4b04      	ldr	r3, [pc, #16]	; (4012c0 <print_address_register+0xb8>)
  4012b0:	4798      	blx	r3
}
  4012b2:	370c      	adds	r7, #12
  4012b4:	46bd      	mov	sp, r7
  4012b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ba:	bf00      	nop
  4012bc:	00405d74 	.word	0x00405d74
  4012c0:	00402d39 	.word	0x00402d39
  4012c4:	004018f5 	.word	0x004018f5
  4012c8:	00405d78 	.word	0x00405d78
  4012cc:	00405d48 	.word	0x00405d48
  4012d0:	20404c10 	.word	0x20404c10
  4012d4:	00405d7c 	.word	0x00405d7c

004012d8 <nRF24_readRegister>:
{
  4012d8:	b500      	push	{lr}
  4012da:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  4012dc:	f000 001f 	and.w	r0, r0, #31
  4012e0:	f88d 0004 	strb.w	r0, [sp, #4]
  4012e4:	23ff      	movs	r3, #255	; 0xff
  4012e6:	f88d 3005 	strb.w	r3, [sp, #5]
	spi_master_transfer(&cmd, sizeof(cmd));
  4012ea:	2102      	movs	r1, #2
  4012ec:	a801      	add	r0, sp, #4
  4012ee:	4b03      	ldr	r3, [pc, #12]	; (4012fc <nRF24_readRegister+0x24>)
  4012f0:	4798      	blx	r3
}
  4012f2:	f89d 0005 	ldrb.w	r0, [sp, #5]
  4012f6:	b003      	add	sp, #12
  4012f8:	f85d fb04 	ldr.w	pc, [sp], #4
  4012fc:	004018f5 	.word	0x004018f5

00401300 <print_byte_register>:

static void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  401300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401304:	460d      	mov	r5, r1
  401306:	4616      	mov	r6, r2
	printf("%s\t", name);
  401308:	4601      	mov	r1, r0
  40130a:	480d      	ldr	r0, [pc, #52]	; (401340 <print_byte_register+0x40>)
  40130c:	4b0d      	ldr	r3, [pc, #52]	; (401344 <print_byte_register+0x44>)
  40130e:	4798      	blx	r3
	while (qty--)
  401310:	b186      	cbz	r6, 401334 <print_byte_register+0x34>
  401312:	442e      	add	r6, r5
  401314:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  401316:	f8df 9034 	ldr.w	r9, [pc, #52]	; 40134c <print_byte_register+0x4c>
  40131a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401350 <print_byte_register+0x50>
  40131e:	4f09      	ldr	r7, [pc, #36]	; (401344 <print_byte_register+0x44>)
  401320:	1c6c      	adds	r4, r5, #1
  401322:	b2e4      	uxtb	r4, r4
  401324:	4628      	mov	r0, r5
  401326:	47c8      	blx	r9
  401328:	4601      	mov	r1, r0
  40132a:	4640      	mov	r0, r8
  40132c:	47b8      	blx	r7
  40132e:	4625      	mov	r5, r4
	while (qty--)
  401330:	42a6      	cmp	r6, r4
  401332:	d1f5      	bne.n	401320 <print_byte_register+0x20>
	}
	printf("\r\n");
  401334:	4804      	ldr	r0, [pc, #16]	; (401348 <print_byte_register+0x48>)
  401336:	4b03      	ldr	r3, [pc, #12]	; (401344 <print_byte_register+0x44>)
  401338:	4798      	blx	r3
  40133a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40133e:	bf00      	nop
  401340:	00405d74 	.word	0x00405d74
  401344:	00402d39 	.word	0x00402d39
  401348:	00405d48 	.word	0x00405d48
  40134c:	004012d9 	.word	0x004012d9
  401350:	00405d84 	.word	0x00405d84

00401354 <nRF24_writeRegister>:
{
  401354:	b500      	push	{lr}
  401356:	b083      	sub	sp, #12
	p_buf[0] = (W_REGISTER | (REGISTER_MASK & reg));
  401358:	f000 001f 	and.w	r0, r0, #31
  40135c:	f040 0020 	orr.w	r0, r0, #32
  401360:	f88d 0004 	strb.w	r0, [sp, #4]
	p_buf[1] = val;
  401364:	f88d 1005 	strb.w	r1, [sp, #5]
	spi_master_transfer(p_buf, sizeof(p_buf));
  401368:	2102      	movs	r1, #2
  40136a:	a801      	add	r0, sp, #4
  40136c:	4b03      	ldr	r3, [pc, #12]	; (40137c <nRF24_writeRegister+0x28>)
  40136e:	4798      	blx	r3
}
  401370:	f89d 0004 	ldrb.w	r0, [sp, #4]
  401374:	b003      	add	sp, #12
  401376:	f85d fb04 	ldr.w	pc, [sp], #4
  40137a:	bf00      	nop
  40137c:	004018f5 	.word	0x004018f5

00401380 <nRF24_FlushRx>:
{
  401380:	b500      	push	{lr}
  401382:	b083      	sub	sp, #12
	cmd = FLUSH_RX;
  401384:	a802      	add	r0, sp, #8
  401386:	23e2      	movs	r3, #226	; 0xe2
  401388:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  40138c:	2101      	movs	r1, #1
  40138e:	4b03      	ldr	r3, [pc, #12]	; (40139c <nRF24_FlushRx+0x1c>)
  401390:	4798      	blx	r3
}
  401392:	f89d 0007 	ldrb.w	r0, [sp, #7]
  401396:	b003      	add	sp, #12
  401398:	f85d fb04 	ldr.w	pc, [sp], #4
  40139c:	004018f5 	.word	0x004018f5

004013a0 <nRF24_FlushTx>:
{
  4013a0:	b500      	push	{lr}
  4013a2:	b083      	sub	sp, #12
	cmd = FLUSH_TX;
  4013a4:	a802      	add	r0, sp, #8
  4013a6:	23e1      	movs	r3, #225	; 0xe1
  4013a8:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  4013ac:	2101      	movs	r1, #1
  4013ae:	4b03      	ldr	r3, [pc, #12]	; (4013bc <nRF24_FlushTx+0x1c>)
  4013b0:	4798      	blx	r3
}
  4013b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4013b6:	b003      	add	sp, #12
  4013b8:	f85d fb04 	ldr.w	pc, [sp], #4
  4013bc:	004018f5 	.word	0x004018f5

004013c0 <nRF24_getStatus>:
{
  4013c0:	b500      	push	{lr}
  4013c2:	b083      	sub	sp, #12
	cmd = RF24_NOP;
  4013c4:	a802      	add	r0, sp, #8
  4013c6:	23ff      	movs	r3, #255	; 0xff
  4013c8:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  4013cc:	2101      	movs	r1, #1
  4013ce:	4b03      	ldr	r3, [pc, #12]	; (4013dc <nRF24_getStatus+0x1c>)
  4013d0:	4798      	blx	r3
}
  4013d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4013d6:	b003      	add	sp, #12
  4013d8:	f85d fb04 	ldr.w	pc, [sp], #4
  4013dc:	004018f5 	.word	0x004018f5

004013e0 <nRF24_setDataRate>:
{
  4013e0:	b538      	push	{r3, r4, r5, lr}
  4013e2:	4605      	mov	r5, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP);
  4013e4:	2006      	movs	r0, #6
  4013e6:	4b0c      	ldr	r3, [pc, #48]	; (401418 <nRF24_setDataRate+0x38>)
  4013e8:	4798      	blx	r3
	setup &= ~((1<<RF_DR));
  4013ea:	f000 04f7 	and.w	r4, r0, #247	; 0xf7
	if (speed == RF24_2MBPS) {
  4013ee:	2d01      	cmp	r5, #1
  4013f0:	d00b      	beq.n	40140a <nRF24_setDataRate+0x2a>
	nRF24_writeRegister(RF_SETUP, setup);
  4013f2:	4621      	mov	r1, r4
  4013f4:	2006      	movs	r0, #6
  4013f6:	4b09      	ldr	r3, [pc, #36]	; (40141c <nRF24_setDataRate+0x3c>)
  4013f8:	4798      	blx	r3
	if(nRF24_readRegister(RF_SETUP) == setup)
  4013fa:	2006      	movs	r0, #6
  4013fc:	4b06      	ldr	r3, [pc, #24]	; (401418 <nRF24_setDataRate+0x38>)
  4013fe:	4798      	blx	r3
}
  401400:	4284      	cmp	r4, r0
  401402:	bf14      	ite	ne
  401404:	2000      	movne	r0, #0
  401406:	2001      	moveq	r0, #1
  401408:	bd38      	pop	{r3, r4, r5, pc}
		setup |= (1<<RF_DR);
  40140a:	f044 0408 	orr.w	r4, r4, #8
		txDelay = 65;
  40140e:	2241      	movs	r2, #65	; 0x41
  401410:	4b03      	ldr	r3, [pc, #12]	; (401420 <nRF24_setDataRate+0x40>)
  401412:	601a      	str	r2, [r3, #0]
  401414:	e7ed      	b.n	4013f2 <nRF24_setDataRate+0x12>
  401416:	bf00      	nop
  401418:	004012d9 	.word	0x004012d9
  40141c:	00401355 	.word	0x00401355
  401420:	20404c1c 	.word	0x20404c1c

00401424 <getDataRate>:
{
  401424:	b508      	push	{r3, lr}
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  401426:	2006      	movs	r0, #6
  401428:	4b04      	ldr	r3, [pc, #16]	; (40143c <getDataRate+0x18>)
  40142a:	4798      	blx	r3
	if (dr == (1<<RF_DR_HIGH)) {
  40142c:	f000 0028 	and.w	r0, r0, #40	; 0x28
}
  401430:	2808      	cmp	r0, #8
  401432:	bf14      	ite	ne
  401434:	2000      	movne	r0, #0
  401436:	2001      	moveq	r0, #1
  401438:	bd08      	pop	{r3, pc}
  40143a:	bf00      	nop
  40143c:	004012d9 	.word	0x004012d9

00401440 <nRF24_setCRCLength>:
{
  401440:	b510      	push	{r4, lr}
  401442:	4604      	mov	r4, r0
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ~((1<<CRCO) | (1<<EN_CRC));
  401444:	2000      	movs	r0, #0
  401446:	4b07      	ldr	r3, [pc, #28]	; (401464 <nRF24_setCRCLength+0x24>)
  401448:	4798      	blx	r3
  40144a:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	if (length == RF24_CRC_DISABLED){
  40144e:	b12c      	cbz	r4, 40145c <nRF24_setCRCLength+0x1c>
	else if (length == RF24_CRC_8){
  401450:	2c01      	cmp	r4, #1
		config |= (1<<EN_CRC);
  401452:	bf0c      	ite	eq
  401454:	f041 0108 	orreq.w	r1, r1, #8
		config |= (1<<CRCO);
  401458:	f041 010c 	orrne.w	r1, r1, #12
	nRF24_writeRegister(NRF_CONFIG, config);
  40145c:	2000      	movs	r0, #0
  40145e:	4b02      	ldr	r3, [pc, #8]	; (401468 <nRF24_setCRCLength+0x28>)
  401460:	4798      	blx	r3
  401462:	bd10      	pop	{r4, pc}
  401464:	004012d9 	.word	0x004012d9
  401468:	00401355 	.word	0x00401355

0040146c <getCRCLength>:
{
  40146c:	b538      	push	{r3, r4, r5, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  40146e:	2000      	movs	r0, #0
  401470:	4d08      	ldr	r5, [pc, #32]	; (401494 <getCRCLength+0x28>)
  401472:	47a8      	blx	r5
  401474:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  401476:	2001      	movs	r0, #1
  401478:	47a8      	blx	r5
    if (config & (1<<EN_CRC) || AA) {
  40147a:	f014 0f08 	tst.w	r4, #8
  40147e:	d102      	bne.n	401486 <getCRCLength+0x1a>
  401480:	b908      	cbnz	r0, 401486 <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  401482:	2000      	movs	r0, #0
}
  401484:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  401486:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  40148a:	2c00      	cmp	r4, #0
  40148c:	bf14      	ite	ne
  40148e:	2002      	movne	r0, #2
  401490:	2001      	moveq	r0, #1
  401492:	bd38      	pop	{r3, r4, r5, pc}
  401494:	004012d9 	.word	0x004012d9

00401498 <nRF24_setPALevel>:
{
  401498:	b510      	push	{r4, lr}
  40149a:	4604      	mov	r4, r0
	uint8_t setup = nRF24_readRegister(RF_SETUP) & 0xF8;
  40149c:	2006      	movs	r0, #6
  40149e:	4b08      	ldr	r3, [pc, #32]	; (4014c0 <nRF24_setPALevel+0x28>)
  4014a0:	4798      	blx	r3
  4014a2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	if (level > 3) {
  4014a6:	2c03      	cmp	r4, #3
  4014a8:	d808      	bhi.n	4014bc <nRF24_setPALevel+0x24>
		level = (level << 1) + 1;
  4014aa:	0064      	lsls	r4, r4, #1
  4014ac:	3401      	adds	r4, #1
  4014ae:	f004 04ff 	and.w	r4, r4, #255	; 0xff
	nRF24_writeRegister(RF_SETUP, setup |= level);
  4014b2:	4321      	orrs	r1, r4
  4014b4:	2006      	movs	r0, #6
  4014b6:	4b03      	ldr	r3, [pc, #12]	; (4014c4 <nRF24_setPALevel+0x2c>)
  4014b8:	4798      	blx	r3
  4014ba:	bd10      	pop	{r4, pc}
		level = (RF_PA_MAX << 1) + 1;
  4014bc:	2407      	movs	r4, #7
  4014be:	e7f8      	b.n	4014b2 <nRF24_setPALevel+0x1a>
  4014c0:	004012d9 	.word	0x004012d9
  4014c4:	00401355 	.word	0x00401355

004014c8 <nRF24_getPALevel>:
{
  4014c8:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  4014ca:	2006      	movs	r0, #6
  4014cc:	4b02      	ldr	r3, [pc, #8]	; (4014d8 <nRF24_getPALevel+0x10>)
  4014ce:	4798      	blx	r3
}
  4014d0:	f3c0 0041 	ubfx	r0, r0, #1, #2
  4014d4:	bd08      	pop	{r3, pc}
  4014d6:	bf00      	nop
  4014d8:	004012d9 	.word	0x004012d9

004014dc <printDetails>:
}

void printDetails(void)
{
  4014dc:	b570      	push	{r4, r5, r6, lr}
  4014de:	b084      	sub	sp, #16
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  4014e0:	4b31      	ldr	r3, [pc, #196]	; (4015a8 <printDetails+0xcc>)
  4014e2:	6819      	ldr	r1, [r3, #0]
  4014e4:	4b31      	ldr	r3, [pc, #196]	; (4015ac <printDetails+0xd0>)
  4014e6:	fba3 3101 	umull	r3, r1, r3, r1
  4014ea:	0c89      	lsrs	r1, r1, #18
  4014ec:	4830      	ldr	r0, [pc, #192]	; (4015b0 <printDetails+0xd4>)
  4014ee:	4d31      	ldr	r5, [pc, #196]	; (4015b4 <printDetails+0xd8>)
  4014f0:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  4014f2:	4b31      	ldr	r3, [pc, #196]	; (4015b8 <printDetails+0xdc>)
  4014f4:	4798      	blx	r3
  4014f6:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  4014f8:	f000 0301 	and.w	r3, r0, #1
  4014fc:	9302      	str	r3, [sp, #8]
  4014fe:	f3c0 0340 	ubfx	r3, r0, #1, #1
  401502:	9301      	str	r3, [sp, #4]
  401504:	f3c0 1300 	ubfx	r3, r0, #4, #1
  401508:	9300      	str	r3, [sp, #0]
  40150a:	f3c0 1340 	ubfx	r3, r0, #5, #1
  40150e:	f3c0 1280 	ubfx	r2, r0, #6, #1
  401512:	482a      	ldr	r0, [pc, #168]	; (4015bc <printDetails+0xe0>)
  401514:	47a8      	blx	r5
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  401516:	2202      	movs	r2, #2
  401518:	210a      	movs	r1, #10
  40151a:	4829      	ldr	r0, [pc, #164]	; (4015c0 <printDetails+0xe4>)
  40151c:	4e29      	ldr	r6, [pc, #164]	; (4015c4 <printDetails+0xe8>)
  40151e:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  401520:	2204      	movs	r2, #4
  401522:	210c      	movs	r1, #12
  401524:	4828      	ldr	r0, [pc, #160]	; (4015c8 <printDetails+0xec>)
  401526:	4c29      	ldr	r4, [pc, #164]	; (4015cc <printDetails+0xf0>)
  401528:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  40152a:	2201      	movs	r2, #1
  40152c:	2110      	movs	r1, #16
  40152e:	4828      	ldr	r0, [pc, #160]	; (4015d0 <printDetails+0xf4>)
  401530:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  401532:	2206      	movs	r2, #6
  401534:	2111      	movs	r1, #17
  401536:	4827      	ldr	r0, [pc, #156]	; (4015d4 <printDetails+0xf8>)
  401538:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  40153a:	2201      	movs	r2, #1
  40153c:	2103      	movs	r1, #3
  40153e:	4826      	ldr	r0, [pc, #152]	; (4015d8 <printDetails+0xfc>)
  401540:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  401542:	2201      	movs	r2, #1
  401544:	4611      	mov	r1, r2
  401546:	4825      	ldr	r0, [pc, #148]	; (4015dc <printDetails+0x100>)
  401548:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  40154a:	2201      	movs	r2, #1
  40154c:	2102      	movs	r1, #2
  40154e:	4824      	ldr	r0, [pc, #144]	; (4015e0 <printDetails+0x104>)
  401550:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  401552:	2201      	movs	r2, #1
  401554:	2105      	movs	r1, #5
  401556:	4823      	ldr	r0, [pc, #140]	; (4015e4 <printDetails+0x108>)
  401558:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  40155a:	2201      	movs	r2, #1
  40155c:	2106      	movs	r1, #6
  40155e:	4822      	ldr	r0, [pc, #136]	; (4015e8 <printDetails+0x10c>)
  401560:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  401562:	2201      	movs	r2, #1
  401564:	2100      	movs	r1, #0
  401566:	4821      	ldr	r0, [pc, #132]	; (4015ec <printDetails+0x110>)
  401568:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  40156a:	2202      	movs	r2, #2
  40156c:	211c      	movs	r1, #28
  40156e:	4820      	ldr	r0, [pc, #128]	; (4015f0 <printDetails+0x114>)
  401570:	47a0      	blx	r4
	
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  401572:	4b20      	ldr	r3, [pc, #128]	; (4015f4 <printDetails+0x118>)
  401574:	4798      	blx	r3
  401576:	4b20      	ldr	r3, [pc, #128]	; (4015f8 <printDetails+0x11c>)
  401578:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  40157c:	481f      	ldr	r0, [pc, #124]	; (4015fc <printDetails+0x120>)
  40157e:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  401580:	491f      	ldr	r1, [pc, #124]	; (401600 <printDetails+0x124>)
  401582:	4820      	ldr	r0, [pc, #128]	; (401604 <printDetails+0x128>)
  401584:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  401586:	4b20      	ldr	r3, [pc, #128]	; (401608 <printDetails+0x12c>)
  401588:	4798      	blx	r3
  40158a:	4b20      	ldr	r3, [pc, #128]	; (40160c <printDetails+0x130>)
  40158c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401590:	481f      	ldr	r0, [pc, #124]	; (401610 <printDetails+0x134>)
  401592:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  401594:	4b1f      	ldr	r3, [pc, #124]	; (401614 <printDetails+0x138>)
  401596:	4798      	blx	r3
  401598:	4b1f      	ldr	r3, [pc, #124]	; (401618 <printDetails+0x13c>)
  40159a:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  40159e:	481f      	ldr	r0, [pc, #124]	; (40161c <printDetails+0x140>)
  4015a0:	47a8      	blx	r5
}
  4015a2:	b004      	add	sp, #16
  4015a4:	bd70      	pop	{r4, r5, r6, pc}
  4015a6:	bf00      	nop
  4015a8:	20400020 	.word	0x20400020
  4015ac:	431bde83 	.word	0x431bde83
  4015b0:	00405c44 	.word	0x00405c44
  4015b4:	00402d39 	.word	0x00402d39
  4015b8:	004013c1 	.word	0x004013c1
  4015bc:	00405c5c 	.word	0x00405c5c
  4015c0:	00405ca4 	.word	0x00405ca4
  4015c4:	00401209 	.word	0x00401209
  4015c8:	00405cb4 	.word	0x00405cb4
  4015cc:	00401301 	.word	0x00401301
  4015d0:	00405cc4 	.word	0x00405cc4
  4015d4:	00405cd0 	.word	0x00405cd0
  4015d8:	00405cdc 	.word	0x00405cdc
  4015dc:	00405ce8 	.word	0x00405ce8
  4015e0:	00405cf0 	.word	0x00405cf0
  4015e4:	00405cfc 	.word	0x00405cfc
  4015e8:	00405d04 	.word	0x00405d04
  4015ec:	00405d10 	.word	0x00405d10
  4015f0:	00405d18 	.word	0x00405d18
  4015f4:	00401425 	.word	0x00401425
  4015f8:	00405dcc 	.word	0x00405dcc
  4015fc:	00405d28 	.word	0x00405d28
  401600:	00405dd8 	.word	0x00405dd8
  401604:	00405d3c 	.word	0x00405d3c
  401608:	0040146d 	.word	0x0040146d
  40160c:	00405da8 	.word	0x00405da8
  401610:	00405d4c 	.word	0x00405d4c
  401614:	004014c9 	.word	0x004014c9
  401618:	00405e04 	.word	0x00405e04
  40161c:	00405d60 	.word	0x00405d60

00401620 <nRF24_setAddressWidth>:
 * 
 * \param width address width
 *
 */
void nRF24_setAddressWidth(uint8_t width)
{
  401620:	b510      	push	{r4, lr}
	if (width -= 2){
  401622:	3802      	subs	r0, #2
  401624:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
  401628:	d107      	bne.n	40163a <nRF24_setAddressWidth+0x1a>
		nRF24_writeRegister(SETUP_AW, width % 4);
		addr_width = (width % 4) + 2;
		} else {
		nRF24_writeRegister(SETUP_AW, 0);
  40162a:	2100      	movs	r1, #0
  40162c:	2003      	movs	r0, #3
  40162e:	4b08      	ldr	r3, [pc, #32]	; (401650 <nRF24_setAddressWidth+0x30>)
  401630:	4798      	blx	r3
		addr_width = 2;
  401632:	2202      	movs	r2, #2
  401634:	4b07      	ldr	r3, [pc, #28]	; (401654 <nRF24_setAddressWidth+0x34>)
  401636:	701a      	strb	r2, [r3, #0]
  401638:	bd10      	pop	{r4, pc}
		nRF24_writeRegister(SETUP_AW, width % 4);
  40163a:	f000 0403 	and.w	r4, r0, #3
  40163e:	4621      	mov	r1, r4
  401640:	2003      	movs	r0, #3
  401642:	4b03      	ldr	r3, [pc, #12]	; (401650 <nRF24_setAddressWidth+0x30>)
  401644:	4798      	blx	r3
		addr_width = (width % 4) + 2;
  401646:	1ca0      	adds	r0, r4, #2
  401648:	4b02      	ldr	r3, [pc, #8]	; (401654 <nRF24_setAddressWidth+0x34>)
  40164a:	7018      	strb	r0, [r3, #0]
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401355 	.word	0x00401355
  401654:	20404c10 	.word	0x20404c10

00401658 <toggle_features>:
/**
 * \brief toggels ACK features
 *
 */
void toggle_features(void)
{
  401658:	b500      	push	{lr}
  40165a:	b083      	sub	sp, #12
	uint8_t config[2] = {ACTIVATE, 0x73};
  40165c:	4b05      	ldr	r3, [pc, #20]	; (401674 <toggle_features+0x1c>)
  40165e:	881b      	ldrh	r3, [r3, #0]
  401660:	a802      	add	r0, sp, #8
  401662:	f820 3d04 	strh.w	r3, [r0, #-4]!
	
	spi_master_transfer(config, sizeof(config));
  401666:	2102      	movs	r1, #2
  401668:	4b03      	ldr	r3, [pc, #12]	; (401678 <toggle_features+0x20>)
  40166a:	4798      	blx	r3
}
  40166c:	b003      	add	sp, #12
  40166e:	f85d fb04 	ldr.w	pc, [sp], #4
  401672:	bf00      	nop
  401674:	00405c40 	.word	0x00405c40
  401678:	004018f5 	.word	0x004018f5

0040167c <nRF24_setChannel>:
 * 
 * \param channel ferquency channel used
 *
 */
void nRF24_setChannel(uint8_t channel)
{
  40167c:	b508      	push	{r3, lr}
	const uint8_t max_channel = 125;
	if (channel > max_channel)
  40167e:	287d      	cmp	r0, #125	; 0x7d
		nRF24_writeRegister(RF_CH, max_channel);
  401680:	bf8c      	ite	hi
  401682:	217d      	movhi	r1, #125	; 0x7d
	else
		nRF24_writeRegister(RF_CH, channel);
  401684:	4601      	movls	r1, r0
  401686:	2005      	movs	r0, #5
  401688:	4b01      	ldr	r3, [pc, #4]	; (401690 <nRF24_setChannel+0x14>)
  40168a:	4798      	blx	r3
  40168c:	bd08      	pop	{r3, pc}
  40168e:	bf00      	nop
  401690:	00401355 	.word	0x00401355

00401694 <nRF24_powerUp>:
/**
 * \brief power up the internal logic of the nRF24 chip
 * 
 */
void nRF24_powerUp(void)
{
  401694:	b508      	push	{r3, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG);
  401696:	2000      	movs	r0, #0
  401698:	4b07      	ldr	r3, [pc, #28]	; (4016b8 <nRF24_powerUp+0x24>)
  40169a:	4798      	blx	r3
	
	if (!(config & (1<<PWR_UP))){
  40169c:	f010 0f02 	tst.w	r0, #2
  4016a0:	d000      	beq.n	4016a4 <nRF24_powerUp+0x10>
  4016a2:	bd08      	pop	{r3, pc}
		nRF24_writeRegister(NRF_CONFIG, config | (1<<PWR_UP));
  4016a4:	f040 0102 	orr.w	r1, r0, #2
  4016a8:	b2c9      	uxtb	r1, r1
  4016aa:	2000      	movs	r0, #0
  4016ac:	4b03      	ldr	r3, [pc, #12]	; (4016bc <nRF24_powerUp+0x28>)
  4016ae:	4798      	blx	r3
		delay_ms(5);
  4016b0:	4803      	ldr	r0, [pc, #12]	; (4016c0 <nRF24_powerUp+0x2c>)
  4016b2:	4b04      	ldr	r3, [pc, #16]	; (4016c4 <nRF24_powerUp+0x30>)
  4016b4:	4798      	blx	r3
	}
}
  4016b6:	e7f4      	b.n	4016a2 <nRF24_powerUp+0xe>
  4016b8:	004012d9 	.word	0x004012d9
  4016bc:	00401355 	.word	0x00401355
  4016c0:	0003dbc2 	.word	0x0003dbc2
  4016c4:	20400001 	.word	0x20400001

004016c8 <nRF24_stopListening>:
/**
 * \brief use the nRF24 module as transmitter
 *
 */
void nRF24_stopListening(void)
{
  4016c8:	b538      	push	{r3, r4, r5, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  4016ce:	4b21      	ldr	r3, [pc, #132]	; (401754 <nRF24_stopListening+0x8c>)
  4016d0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(CE, 0);
	
	delay_us(txDelay);
  4016d2:	4b21      	ldr	r3, [pc, #132]	; (401758 <nRF24_stopListening+0x90>)
  4016d4:	6819      	ldr	r1, [r3, #0]
  4016d6:	2900      	cmp	r1, #0
  4016d8:	d034      	beq.n	401744 <nRF24_stopListening+0x7c>
  4016da:	4a20      	ldr	r2, [pc, #128]	; (40175c <nRF24_stopListening+0x94>)
  4016dc:	2300      	movs	r3, #0
  4016de:	4c20      	ldr	r4, [pc, #128]	; (401760 <nRF24_stopListening+0x98>)
  4016e0:	2500      	movs	r5, #0
  4016e2:	4820      	ldr	r0, [pc, #128]	; (401764 <nRF24_stopListening+0x9c>)
  4016e4:	fbe0 4501 	umlal	r4, r5, r0, r1
  4016e8:	4620      	mov	r0, r4
  4016ea:	4629      	mov	r1, r5
  4016ec:	4c1e      	ldr	r4, [pc, #120]	; (401768 <nRF24_stopListening+0xa0>)
  4016ee:	47a0      	blx	r4
  4016f0:	4b1e      	ldr	r3, [pc, #120]	; (40176c <nRF24_stopListening+0xa4>)
  4016f2:	4798      	blx	r3
	if (nRF24_readRegister(FEATURE) & 1<<(EN_ACK_PAY))
  4016f4:	201d      	movs	r0, #29
  4016f6:	4b1e      	ldr	r3, [pc, #120]	; (401770 <nRF24_stopListening+0xa8>)
  4016f8:	4798      	blx	r3
  4016fa:	f010 0f02 	tst.w	r0, #2
  4016fe:	d011      	beq.n	401724 <nRF24_stopListening+0x5c>
	{
		delay_us(txDelay);
  401700:	4b15      	ldr	r3, [pc, #84]	; (401758 <nRF24_stopListening+0x90>)
  401702:	6819      	ldr	r1, [r3, #0]
  401704:	b311      	cbz	r1, 40174c <nRF24_stopListening+0x84>
  401706:	4a15      	ldr	r2, [pc, #84]	; (40175c <nRF24_stopListening+0x94>)
  401708:	2300      	movs	r3, #0
  40170a:	4c15      	ldr	r4, [pc, #84]	; (401760 <nRF24_stopListening+0x98>)
  40170c:	2500      	movs	r5, #0
  40170e:	4815      	ldr	r0, [pc, #84]	; (401764 <nRF24_stopListening+0x9c>)
  401710:	fbe0 4501 	umlal	r4, r5, r0, r1
  401714:	4620      	mov	r0, r4
  401716:	4629      	mov	r1, r5
  401718:	4c13      	ldr	r4, [pc, #76]	; (401768 <nRF24_stopListening+0xa0>)
  40171a:	47a0      	blx	r4
  40171c:	4b13      	ldr	r3, [pc, #76]	; (40176c <nRF24_stopListening+0xa4>)
  40171e:	4798      	blx	r3
		nRF24_FlushTx();
  401720:	4b14      	ldr	r3, [pc, #80]	; (401774 <nRF24_stopListening+0xac>)
  401722:	4798      	blx	r3
	}
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  401724:	2000      	movs	r0, #0
  401726:	4d12      	ldr	r5, [pc, #72]	; (401770 <nRF24_stopListening+0xa8>)
  401728:	47a8      	blx	r5
  40172a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  40172e:	2000      	movs	r0, #0
  401730:	4c11      	ldr	r4, [pc, #68]	; (401778 <nRF24_stopListening+0xb0>)
  401732:	47a0      	blx	r4
	nRF24_writeRegister(EN_RXADDR, nRF24_readRegister(EN_RXADDR) | (1<< pipe_enable_s[0])); 
  401734:	2002      	movs	r0, #2
  401736:	47a8      	blx	r5
  401738:	f040 0101 	orr.w	r1, r0, #1
  40173c:	b2c9      	uxtb	r1, r1
  40173e:	2002      	movs	r0, #2
  401740:	47a0      	blx	r4
  401742:	bd38      	pop	{r3, r4, r5, pc}
	delay_us(txDelay);
  401744:	2033      	movs	r0, #51	; 0x33
  401746:	4b09      	ldr	r3, [pc, #36]	; (40176c <nRF24_stopListening+0xa4>)
  401748:	4798      	blx	r3
  40174a:	e7d3      	b.n	4016f4 <nRF24_stopListening+0x2c>
		delay_us(txDelay);
  40174c:	2033      	movs	r0, #51	; 0x33
  40174e:	4b07      	ldr	r3, [pc, #28]	; (40176c <nRF24_stopListening+0xa4>)
  401750:	4798      	blx	r3
  401752:	e7e5      	b.n	401720 <nRF24_stopListening+0x58>
  401754:	400e1200 	.word	0x400e1200
  401758:	20404c1c 	.word	0x20404c1c
  40175c:	005a83e0 	.word	0x005a83e0
  401760:	005a83df 	.word	0x005a83df
  401764:	11e1a300 	.word	0x11e1a300
  401768:	004029d9 	.word	0x004029d9
  40176c:	20400001 	.word	0x20400001
  401770:	004012d9 	.word	0x004012d9
  401774:	004013a1 	.word	0x004013a1
  401778:	00401355 	.word	0x00401355

0040177c <nRF24_begin>:
 * address width: 32 bit / 4 bytes
 * 
 * \return 1 if nRF24 module reacts to data
 */
bool nRF24_begin(void)
{
  40177c:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40177e:	4b1a      	ldr	r3, [pc, #104]	; (4017e8 <nRF24_begin+0x6c>)
  401780:	f44f 7200 	mov.w	r2, #512	; 0x200
  401784:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401786:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40178a:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t setup = 0;
	ioport_set_pin_dir(CE, IOPORT_DIR_OUTPUT);//ce_pin PC9
	ioport_set_pin_level(CE, 0);
	
	nRF24_writeRegister(NRF_CONFIG, 0x0C);
  40178c:	210c      	movs	r1, #12
  40178e:	2000      	movs	r0, #0
  401790:	4c16      	ldr	r4, [pc, #88]	; (4017ec <nRF24_begin+0x70>)
  401792:	47a0      	blx	r4
	nRF24_writeRegister(SETUP_RETR, (delay & 0xF) << ARD | (count & 0xF) <<ARC );
  401794:	215f      	movs	r1, #95	; 0x5f
  401796:	2004      	movs	r0, #4
  401798:	47a0      	blx	r4
	nRF24_setRetries(5, 15);
	
	nRF24_setDataRate(RF24_1MBPS);
  40179a:	2000      	movs	r0, #0
  40179c:	4b14      	ldr	r3, [pc, #80]	; (4017f0 <nRF24_begin+0x74>)
  40179e:	4798      	blx	r3
	nRF24_setCRCLength(RF24_CRC_16);
  4017a0:	2002      	movs	r0, #2
  4017a2:	4b14      	ldr	r3, [pc, #80]	; (4017f4 <nRF24_begin+0x78>)
  4017a4:	4798      	blx	r3
	toggle_features();
  4017a6:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <nRF24_begin+0x7c>)
  4017a8:	4798      	blx	r3
	
	//reset current status
	nRF24_writeRegister(NRF_STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
  4017aa:	2170      	movs	r1, #112	; 0x70
  4017ac:	2007      	movs	r0, #7
  4017ae:	47a0      	blx	r4
	
	nRF24_setChannel(76);
  4017b0:	204c      	movs	r0, #76	; 0x4c
  4017b2:	4b12      	ldr	r3, [pc, #72]	; (4017fc <nRF24_begin+0x80>)
  4017b4:	4798      	blx	r3
	nRF24_setAddressWidth(ADDR_4bytes);
  4017b6:	2004      	movs	r0, #4
  4017b8:	4b11      	ldr	r3, [pc, #68]	; (401800 <nRF24_begin+0x84>)
  4017ba:	4798      	blx	r3
	
	nRF24_FlushRx();
  4017bc:	4b11      	ldr	r3, [pc, #68]	; (401804 <nRF24_begin+0x88>)
  4017be:	4798      	blx	r3
	nRF24_FlushTx();
  4017c0:	4b11      	ldr	r3, [pc, #68]	; (401808 <nRF24_begin+0x8c>)
  4017c2:	4798      	blx	r3
	
	nRF24_powerUp();
  4017c4:	4b11      	ldr	r3, [pc, #68]	; (40180c <nRF24_begin+0x90>)
  4017c6:	4798      	blx	r3
	
	nRF24_writeRegister(NRF_CONFIG, (nRF24_readRegister(NRF_CONFIG)) & ~(1<<PRIM_RX));
  4017c8:	2000      	movs	r0, #0
  4017ca:	4d11      	ldr	r5, [pc, #68]	; (401810 <nRF24_begin+0x94>)
  4017cc:	47a8      	blx	r5
  4017ce:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
  4017d2:	2000      	movs	r0, #0
  4017d4:	47a0      	blx	r4
	setup = nRF24_readRegister(RF_SETUP);
  4017d6:	2006      	movs	r0, #6
  4017d8:	47a8      	blx	r5
	
	return (setup != 0 && setup != 0xFF);
  4017da:	3801      	subs	r0, #1
  4017dc:	b2c0      	uxtb	r0, r0
}
  4017de:	28fd      	cmp	r0, #253	; 0xfd
  4017e0:	bf8c      	ite	hi
  4017e2:	2000      	movhi	r0, #0
  4017e4:	2001      	movls	r0, #1
  4017e6:	bd38      	pop	{r3, r4, r5, pc}
  4017e8:	400e1200 	.word	0x400e1200
  4017ec:	00401355 	.word	0x00401355
  4017f0:	004013e1 	.word	0x004013e1
  4017f4:	00401441 	.word	0x00401441
  4017f8:	00401659 	.word	0x00401659
  4017fc:	0040167d 	.word	0x0040167d
  401800:	00401621 	.word	0x00401621
  401804:	00401381 	.word	0x00401381
  401808:	004013a1 	.word	0x004013a1
  40180c:	00401695 	.word	0x00401695
  401810:	004012d9 	.word	0x004012d9

00401814 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
void spi_master_initialize(void)
{
  401814:	b570      	push	{r4, r5, r6, lr}
	puts("-I- Initialize SPI as master\r");
  401816:	4828      	ldr	r0, [pc, #160]	; (4018b8 <spi_master_initialize+0xa4>)
  401818:	4b28      	ldr	r3, [pc, #160]	; (4018bc <spi_master_initialize+0xa8>)
  40181a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40181c:	4b28      	ldr	r3, [pc, #160]	; (4018c0 <spi_master_initialize+0xac>)
  40181e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401822:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40182a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40182e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401832:	2500      	movs	r5, #0
  401834:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401838:	601a      	str	r2, [r3, #0]
	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  40183a:	4e22      	ldr	r6, [pc, #136]	; (4018c4 <spi_master_initialize+0xb0>)
  40183c:	6831      	ldr	r1, [r6, #0]
  40183e:	4822      	ldr	r0, [pc, #136]	; (4018c8 <spi_master_initialize+0xb4>)
  401840:	4b22      	ldr	r3, [pc, #136]	; (4018cc <spi_master_initialize+0xb8>)
  401842:	4798      	blx	r3
	spi_master_initialize();
  401844:	f7ff ffe6 	bl	401814 <spi_master_initialize>
	
	spi_set_clock_configuration(gs_ul_spi_clock);
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
  401848:	4c21      	ldr	r4, [pc, #132]	; (4018d0 <spi_master_initialize+0xbc>)
  40184a:	4620      	mov	r0, r4
  40184c:	4b21      	ldr	r3, [pc, #132]	; (4018d4 <spi_master_initialize+0xc0>)
  40184e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401850:	2302      	movs	r3, #2
  401852:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401854:	2380      	movs	r3, #128	; 0x80
  401856:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40185c:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40185e:	6863      	ldr	r3, [r4, #4]
  401860:	f043 0301 	orr.w	r3, r3, #1
  401864:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401866:	6863      	ldr	r3, [r4, #4]
  401868:	f043 0310 	orr.w	r3, r3, #16
  40186c:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_PCS);
  40186e:	210d      	movs	r1, #13
  401870:	4620      	mov	r0, r4
  401872:	4b19      	ldr	r3, [pc, #100]	; (4018d8 <spi_master_initialize+0xc4>)
  401874:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  401876:	462a      	mov	r2, r5
  401878:	2101      	movs	r1, #1
  40187a:	4620      	mov	r0, r4
  40187c:	4b17      	ldr	r3, [pc, #92]	; (4018dc <spi_master_initialize+0xc8>)
  40187e:	4798      	blx	r3
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
  401880:	2201      	movs	r2, #1
  401882:	4611      	mov	r1, r2
  401884:	4620      	mov	r0, r4
  401886:	4b16      	ldr	r3, [pc, #88]	; (4018e0 <spi_master_initialize+0xcc>)
  401888:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL,
  40188a:	462a      	mov	r2, r5
  40188c:	2101      	movs	r1, #1
  40188e:	4620      	mov	r0, r4
  401890:	4b14      	ldr	r3, [pc, #80]	; (4018e4 <spi_master_initialize+0xd0>)
  401892:	4798      	blx	r3
	SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
	(sysclk_get_peripheral_hz() / gs_ul_spi_clock));
  401894:	6833      	ldr	r3, [r6, #0]
  401896:	4a14      	ldr	r2, [pc, #80]	; (4018e8 <spi_master_initialize+0xd4>)
  401898:	fbb2 f2f3 	udiv	r2, r2, r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
  40189c:	b2d2      	uxtb	r2, r2
  40189e:	2101      	movs	r1, #1
  4018a0:	4620      	mov	r0, r4
  4018a2:	4b12      	ldr	r3, [pc, #72]	; (4018ec <spi_master_initialize+0xd8>)
  4018a4:	4798      	blx	r3
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS,
  4018a6:	2304      	movs	r3, #4
  4018a8:	2210      	movs	r2, #16
  4018aa:	2101      	movs	r1, #1
  4018ac:	4620      	mov	r0, r4
  4018ae:	4d10      	ldr	r5, [pc, #64]	; (4018f0 <spi_master_initialize+0xdc>)
  4018b0:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4018b2:	2301      	movs	r3, #1
  4018b4:	6023      	str	r3, [r4, #0]
  4018b6:	bd70      	pop	{r4, r5, r6, pc}
  4018b8:	00405e14 	.word	0x00405e14
  4018bc:	00402fcd 	.word	0x00402fcd
  4018c0:	e000e100 	.word	0xe000e100
  4018c4:	20400020 	.word	0x20400020
  4018c8:	00405e34 	.word	0x00405e34
  4018cc:	00402d39 	.word	0x00402d39
  4018d0:	40008000 	.word	0x40008000
  4018d4:	00401b9d 	.word	0x00401b9d
  4018d8:	00401bc9 	.word	0x00401bc9
  4018dc:	00401c43 	.word	0x00401c43
  4018e0:	00401c61 	.word	0x00401c61
  4018e4:	00401c7f 	.word	0x00401c7f
  4018e8:	08f0d180 	.word	0x08f0d180
  4018ec:	00401c93 	.word	0x00401c93
  4018f0:	00401cbb 	.word	0x00401cbb

004018f4 <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
  4018f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018f8:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  4018fa:	b1d9      	cbz	r1, 401934 <spi_master_transfer+0x40>
  4018fc:	4688      	mov	r8, r1
  4018fe:	4605      	mov	r5, r0
  401900:	4480      	add	r8, r0
		spi_write(SPI0, p_buffer[i], 0, 0);
  401902:	4c0f      	ldr	r4, [pc, #60]	; (401940 <spi_master_transfer+0x4c>)
  401904:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401950 <spi_master_transfer+0x5c>
		
		/* Wait transfer done. */
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
		spi_read(SPI0, &data, &uc_pcs);
  401908:	4e0e      	ldr	r6, [pc, #56]	; (401944 <spi_master_transfer+0x50>)
  40190a:	462f      	mov	r7, r5
		spi_write(SPI0, p_buffer[i], 0, 0);
  40190c:	2300      	movs	r3, #0
  40190e:	461a      	mov	r2, r3
  401910:	7829      	ldrb	r1, [r5, #0]
  401912:	4620      	mov	r0, r4
  401914:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  401916:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
  401918:	f013 0f01 	tst.w	r3, #1
  40191c:	d0fb      	beq.n	401916 <spi_master_transfer+0x22>
		spi_read(SPI0, &data, &uc_pcs);
  40191e:	f10d 0207 	add.w	r2, sp, #7
  401922:	4631      	mov	r1, r6
  401924:	4620      	mov	r0, r4
  401926:	4b08      	ldr	r3, [pc, #32]	; (401948 <spi_master_transfer+0x54>)
  401928:	4798      	blx	r3
		p_buffer[i] = data;
  40192a:	8833      	ldrh	r3, [r6, #0]
  40192c:	703b      	strb	r3, [r7, #0]
  40192e:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  401930:	4545      	cmp	r5, r8
  401932:	d1ea      	bne.n	40190a <spi_master_transfer+0x16>
	}
	delay_us(5);
  401934:	20fd      	movs	r0, #253	; 0xfd
  401936:	4b05      	ldr	r3, [pc, #20]	; (40194c <spi_master_transfer+0x58>)
  401938:	4798      	blx	r3
  40193a:	b003      	add	sp, #12
  40193c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401940:	40008000 	.word	0x40008000
  401944:	20404258 	.word	0x20404258
  401948:	00401bdf 	.word	0x00401bdf
  40194c:	20400001 	.word	0x20400001
  401950:	00401c0f 	.word	0x00401c0f

00401954 <twihs_set_speed>:
  401954:	4b28      	ldr	r3, [pc, #160]	; (4019f8 <twihs_set_speed+0xa4>)
  401956:	4299      	cmp	r1, r3
  401958:	d84b      	bhi.n	4019f2 <twihs_set_speed+0x9e>
  40195a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40195e:	4299      	cmp	r1, r3
  401960:	d92d      	bls.n	4019be <twihs_set_speed+0x6a>
  401962:	b410      	push	{r4}
  401964:	4c25      	ldr	r4, [pc, #148]	; (4019fc <twihs_set_speed+0xa8>)
  401966:	fba4 3402 	umull	r3, r4, r4, r2
  40196a:	0ba4      	lsrs	r4, r4, #14
  40196c:	3c03      	subs	r4, #3
  40196e:	4b24      	ldr	r3, [pc, #144]	; (401a00 <twihs_set_speed+0xac>)
  401970:	440b      	add	r3, r1
  401972:	009b      	lsls	r3, r3, #2
  401974:	fbb2 f2f3 	udiv	r2, r2, r3
  401978:	3a03      	subs	r2, #3
  40197a:	2cff      	cmp	r4, #255	; 0xff
  40197c:	d91d      	bls.n	4019ba <twihs_set_speed+0x66>
  40197e:	2100      	movs	r1, #0
  401980:	3101      	adds	r1, #1
  401982:	0864      	lsrs	r4, r4, #1
  401984:	2cff      	cmp	r4, #255	; 0xff
  401986:	d901      	bls.n	40198c <twihs_set_speed+0x38>
  401988:	2906      	cmp	r1, #6
  40198a:	d9f9      	bls.n	401980 <twihs_set_speed+0x2c>
  40198c:	2aff      	cmp	r2, #255	; 0xff
  40198e:	d907      	bls.n	4019a0 <twihs_set_speed+0x4c>
  401990:	2906      	cmp	r1, #6
  401992:	d805      	bhi.n	4019a0 <twihs_set_speed+0x4c>
  401994:	3101      	adds	r1, #1
  401996:	0852      	lsrs	r2, r2, #1
  401998:	2aff      	cmp	r2, #255	; 0xff
  40199a:	d901      	bls.n	4019a0 <twihs_set_speed+0x4c>
  40199c:	2906      	cmp	r1, #6
  40199e:	d9f9      	bls.n	401994 <twihs_set_speed+0x40>
  4019a0:	0213      	lsls	r3, r2, #8
  4019a2:	b29b      	uxth	r3, r3
  4019a4:	0409      	lsls	r1, r1, #16
  4019a6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
  4019aa:	430b      	orrs	r3, r1
  4019ac:	b2e4      	uxtb	r4, r4
  4019ae:	4323      	orrs	r3, r4
  4019b0:	6103      	str	r3, [r0, #16]
  4019b2:	2000      	movs	r0, #0
  4019b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4019b8:	4770      	bx	lr
  4019ba:	2100      	movs	r1, #0
  4019bc:	e7e6      	b.n	40198c <twihs_set_speed+0x38>
  4019be:	0049      	lsls	r1, r1, #1
  4019c0:	fbb2 f2f1 	udiv	r2, r2, r1
  4019c4:	3a03      	subs	r2, #3
  4019c6:	2aff      	cmp	r2, #255	; 0xff
  4019c8:	d911      	bls.n	4019ee <twihs_set_speed+0x9a>
  4019ca:	2300      	movs	r3, #0
  4019cc:	3301      	adds	r3, #1
  4019ce:	0852      	lsrs	r2, r2, #1
  4019d0:	2aff      	cmp	r2, #255	; 0xff
  4019d2:	d901      	bls.n	4019d8 <twihs_set_speed+0x84>
  4019d4:	2b06      	cmp	r3, #6
  4019d6:	d9f9      	bls.n	4019cc <twihs_set_speed+0x78>
  4019d8:	0211      	lsls	r1, r2, #8
  4019da:	b289      	uxth	r1, r1
  4019dc:	041b      	lsls	r3, r3, #16
  4019de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4019e2:	430b      	orrs	r3, r1
  4019e4:	b2d2      	uxtb	r2, r2
  4019e6:	431a      	orrs	r2, r3
  4019e8:	6102      	str	r2, [r0, #16]
  4019ea:	2000      	movs	r0, #0
  4019ec:	4770      	bx	lr
  4019ee:	2300      	movs	r3, #0
  4019f0:	e7f2      	b.n	4019d8 <twihs_set_speed+0x84>
  4019f2:	2001      	movs	r0, #1
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	00061a80 	.word	0x00061a80
  4019fc:	057619f1 	.word	0x057619f1
  401a00:	3ffd1200 	.word	0x3ffd1200

00401a04 <twihs_master_init>:
  401a04:	b508      	push	{r3, lr}
  401a06:	f04f 32ff 	mov.w	r2, #4294967295
  401a0a:	6282      	str	r2, [r0, #40]	; 0x28
  401a0c:	6a02      	ldr	r2, [r0, #32]
  401a0e:	2280      	movs	r2, #128	; 0x80
  401a10:	6002      	str	r2, [r0, #0]
  401a12:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401a14:	2208      	movs	r2, #8
  401a16:	6002      	str	r2, [r0, #0]
  401a18:	2220      	movs	r2, #32
  401a1a:	6002      	str	r2, [r0, #0]
  401a1c:	2204      	movs	r2, #4
  401a1e:	6002      	str	r2, [r0, #0]
  401a20:	680a      	ldr	r2, [r1, #0]
  401a22:	6849      	ldr	r1, [r1, #4]
  401a24:	4b03      	ldr	r3, [pc, #12]	; (401a34 <twihs_master_init+0x30>)
  401a26:	4798      	blx	r3
  401a28:	2801      	cmp	r0, #1
  401a2a:	bf14      	ite	ne
  401a2c:	2000      	movne	r0, #0
  401a2e:	2001      	moveq	r0, #1
  401a30:	bd08      	pop	{r3, pc}
  401a32:	bf00      	nop
  401a34:	00401955 	.word	0x00401955

00401a38 <twihs_master_read>:
  401a38:	68cb      	ldr	r3, [r1, #12]
  401a3a:	2b00      	cmp	r3, #0
  401a3c:	d04b      	beq.n	401ad6 <twihs_master_read+0x9e>
  401a3e:	b470      	push	{r4, r5, r6}
  401a40:	688c      	ldr	r4, [r1, #8]
  401a42:	2600      	movs	r6, #0
  401a44:	6046      	str	r6, [r0, #4]
  401a46:	684a      	ldr	r2, [r1, #4]
  401a48:	0212      	lsls	r2, r2, #8
  401a4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401a52:	7c0d      	ldrb	r5, [r1, #16]
  401a54:	042d      	lsls	r5, r5, #16
  401a56:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401a5a:	432a      	orrs	r2, r5
  401a5c:	6042      	str	r2, [r0, #4]
  401a5e:	60c6      	str	r6, [r0, #12]
  401a60:	684d      	ldr	r5, [r1, #4]
  401a62:	b15d      	cbz	r5, 401a7c <twihs_master_read+0x44>
  401a64:	780a      	ldrb	r2, [r1, #0]
  401a66:	2d01      	cmp	r5, #1
  401a68:	dd02      	ble.n	401a70 <twihs_master_read+0x38>
  401a6a:	784e      	ldrb	r6, [r1, #1]
  401a6c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  401a70:	2d02      	cmp	r5, #2
  401a72:	dd04      	ble.n	401a7e <twihs_master_read+0x46>
  401a74:	7889      	ldrb	r1, [r1, #2]
  401a76:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401a7a:	e000      	b.n	401a7e <twihs_master_read+0x46>
  401a7c:	2200      	movs	r2, #0
  401a7e:	60c2      	str	r2, [r0, #12]
  401a80:	2201      	movs	r2, #1
  401a82:	6002      	str	r2, [r0, #0]
  401a84:	e006      	b.n	401a94 <twihs_master_read+0x5c>
  401a86:	2b01      	cmp	r3, #1
  401a88:	d019      	beq.n	401abe <twihs_master_read+0x86>
  401a8a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401a8c:	f804 2b01 	strb.w	r2, [r4], #1
  401a90:	3b01      	subs	r3, #1
  401a92:	d018      	beq.n	401ac6 <twihs_master_read+0x8e>
  401a94:	6a02      	ldr	r2, [r0, #32]
  401a96:	f412 7f80 	tst.w	r2, #256	; 0x100
  401a9a:	d122      	bne.n	401ae2 <twihs_master_read+0xaa>
  401a9c:	f012 0f02 	tst.w	r2, #2
  401aa0:	d1f1      	bne.n	401a86 <twihs_master_read+0x4e>
  401aa2:	f247 5230 	movw	r2, #30000	; 0x7530
  401aa6:	6a01      	ldr	r1, [r0, #32]
  401aa8:	f411 7f80 	tst.w	r1, #256	; 0x100
  401aac:	d115      	bne.n	401ada <twihs_master_read+0xa2>
  401aae:	3a01      	subs	r2, #1
  401ab0:	d015      	beq.n	401ade <twihs_master_read+0xa6>
  401ab2:	f011 0f02 	tst.w	r1, #2
  401ab6:	d1e6      	bne.n	401a86 <twihs_master_read+0x4e>
  401ab8:	2b00      	cmp	r3, #0
  401aba:	d1f4      	bne.n	401aa6 <twihs_master_read+0x6e>
  401abc:	e003      	b.n	401ac6 <twihs_master_read+0x8e>
  401abe:	2302      	movs	r3, #2
  401ac0:	6003      	str	r3, [r0, #0]
  401ac2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ac4:	7023      	strb	r3, [r4, #0]
  401ac6:	6a03      	ldr	r3, [r0, #32]
  401ac8:	f013 0f01 	tst.w	r3, #1
  401acc:	d0fb      	beq.n	401ac6 <twihs_master_read+0x8e>
  401ace:	6a03      	ldr	r3, [r0, #32]
  401ad0:	2000      	movs	r0, #0
  401ad2:	bc70      	pop	{r4, r5, r6}
  401ad4:	4770      	bx	lr
  401ad6:	2001      	movs	r0, #1
  401ad8:	4770      	bx	lr
  401ada:	2005      	movs	r0, #5
  401adc:	e7f9      	b.n	401ad2 <twihs_master_read+0x9a>
  401ade:	2009      	movs	r0, #9
  401ae0:	e7f7      	b.n	401ad2 <twihs_master_read+0x9a>
  401ae2:	2005      	movs	r0, #5
  401ae4:	e7f5      	b.n	401ad2 <twihs_master_read+0x9a>
	...

00401ae8 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401ae8:	b410      	push	{r4}
  401aea:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401aec:	6884      	ldr	r4, [r0, #8]
  401aee:	f014 0f04 	tst.w	r4, #4
  401af2:	d0fb      	beq.n	401aec <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401af4:	0492      	lsls	r2, r2, #18
  401af6:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401afa:	4a11      	ldr	r2, [pc, #68]	; (401b40 <gmac_phy_read+0x58>)
  401afc:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401afe:	05c9      	lsls	r1, r1, #23
  401b00:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401b04:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401b06:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401b08:	2200      	movs	r2, #0
  401b0a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b0c:	490d      	ldr	r1, [pc, #52]	; (401b44 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401b0e:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401b10:	f012 0f04 	tst.w	r2, #4
  401b14:	d107      	bne.n	401b26 <gmac_phy_read+0x3e>
		ul_retry_count++;
  401b16:	9a01      	ldr	r2, [sp, #4]
  401b18:	3201      	adds	r2, #1
  401b1a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b1c:	9a01      	ldr	r2, [sp, #4]
  401b1e:	428a      	cmp	r2, r1
  401b20:	d9f5      	bls.n	401b0e <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  401b22:	2001      	movs	r0, #1
  401b24:	e007      	b.n	401b36 <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b26:	6882      	ldr	r2, [r0, #8]
  401b28:	f012 0f04 	tst.w	r2, #4
  401b2c:	d0fb      	beq.n	401b26 <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  401b2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401b30:	b292      	uxth	r2, r2
  401b32:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401b34:	2000      	movs	r0, #0
}
  401b36:	b003      	add	sp, #12
  401b38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b3c:	4770      	bx	lr
  401b3e:	bf00      	nop
  401b40:	60020000 	.word	0x60020000
  401b44:	000f423f 	.word	0x000f423f

00401b48 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401b48:	b410      	push	{r4}
  401b4a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401b4c:	6884      	ldr	r4, [r0, #8]
  401b4e:	f014 0f04 	tst.w	r4, #4
  401b52:	d0fb      	beq.n	401b4c <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401b54:	0492      	lsls	r2, r2, #18
  401b56:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401b5a:	4a0e      	ldr	r2, [pc, #56]	; (401b94 <gmac_phy_write+0x4c>)
  401b5c:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401b5e:	05c9      	lsls	r1, r1, #23
  401b60:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401b64:	430a      	orrs	r2, r1
  401b66:	b29b      	uxth	r3, r3
  401b68:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401b6a:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401b6c:	2300      	movs	r3, #0
  401b6e:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b70:	4a09      	ldr	r2, [pc, #36]	; (401b98 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401b72:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401b74:	f013 0f04 	tst.w	r3, #4
  401b78:	d107      	bne.n	401b8a <gmac_phy_write+0x42>
		ul_retry_count++;
  401b7a:	9b01      	ldr	r3, [sp, #4]
  401b7c:	3301      	adds	r3, #1
  401b7e:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401b80:	9b01      	ldr	r3, [sp, #4]
  401b82:	4293      	cmp	r3, r2
  401b84:	d9f5      	bls.n	401b72 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  401b86:	2001      	movs	r0, #1
  401b88:	e000      	b.n	401b8c <gmac_phy_write+0x44>
	return GMAC_OK;
  401b8a:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  401b8c:	b003      	add	sp, #12
  401b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b92:	4770      	bx	lr
  401b94:	50020000 	.word	0x50020000
  401b98:	000f423f 	.word	0x000f423f

00401b9c <spi_enable_clock>:
  401b9c:	b508      	push	{r3, lr}
  401b9e:	4b07      	ldr	r3, [pc, #28]	; (401bbc <spi_enable_clock+0x20>)
  401ba0:	4298      	cmp	r0, r3
  401ba2:	d003      	beq.n	401bac <spi_enable_clock+0x10>
  401ba4:	4b06      	ldr	r3, [pc, #24]	; (401bc0 <spi_enable_clock+0x24>)
  401ba6:	4298      	cmp	r0, r3
  401ba8:	d004      	beq.n	401bb4 <spi_enable_clock+0x18>
  401baa:	bd08      	pop	{r3, pc}
  401bac:	2015      	movs	r0, #21
  401bae:	4b05      	ldr	r3, [pc, #20]	; (401bc4 <spi_enable_clock+0x28>)
  401bb0:	4798      	blx	r3
  401bb2:	bd08      	pop	{r3, pc}
  401bb4:	202a      	movs	r0, #42	; 0x2a
  401bb6:	4b03      	ldr	r3, [pc, #12]	; (401bc4 <spi_enable_clock+0x28>)
  401bb8:	4798      	blx	r3
  401bba:	e7f6      	b.n	401baa <spi_enable_clock+0xe>
  401bbc:	40008000 	.word	0x40008000
  401bc0:	40058000 	.word	0x40058000
  401bc4:	004023fd 	.word	0x004023fd

00401bc8 <spi_set_peripheral_chip_select_value>:
  401bc8:	6843      	ldr	r3, [r0, #4]
  401bca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401bce:	6043      	str	r3, [r0, #4]
  401bd0:	6843      	ldr	r3, [r0, #4]
  401bd2:	0409      	lsls	r1, r1, #16
  401bd4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401bd8:	4319      	orrs	r1, r3
  401bda:	6041      	str	r1, [r0, #4]
  401bdc:	4770      	bx	lr

00401bde <spi_read>:
  401bde:	b410      	push	{r4}
  401be0:	f643 2399 	movw	r3, #15001	; 0x3a99
  401be4:	6904      	ldr	r4, [r0, #16]
  401be6:	f014 0f01 	tst.w	r4, #1
  401bea:	d103      	bne.n	401bf4 <spi_read+0x16>
  401bec:	3b01      	subs	r3, #1
  401bee:	d1f9      	bne.n	401be4 <spi_read+0x6>
  401bf0:	2001      	movs	r0, #1
  401bf2:	e009      	b.n	401c08 <spi_read+0x2a>
  401bf4:	6883      	ldr	r3, [r0, #8]
  401bf6:	6840      	ldr	r0, [r0, #4]
  401bf8:	f010 0f02 	tst.w	r0, #2
  401bfc:	d002      	beq.n	401c04 <spi_read+0x26>
  401bfe:	f3c3 4003 	ubfx	r0, r3, #16, #4
  401c02:	7010      	strb	r0, [r2, #0]
  401c04:	800b      	strh	r3, [r1, #0]
  401c06:	2000      	movs	r0, #0
  401c08:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c0c:	4770      	bx	lr

00401c0e <spi_write>:
  401c0e:	b430      	push	{r4, r5}
  401c10:	f643 2499 	movw	r4, #15001	; 0x3a99
  401c14:	6905      	ldr	r5, [r0, #16]
  401c16:	f015 0f02 	tst.w	r5, #2
  401c1a:	d103      	bne.n	401c24 <spi_write+0x16>
  401c1c:	3c01      	subs	r4, #1
  401c1e:	d1f9      	bne.n	401c14 <spi_write+0x6>
  401c20:	2001      	movs	r0, #1
  401c22:	e00c      	b.n	401c3e <spi_write+0x30>
  401c24:	6844      	ldr	r4, [r0, #4]
  401c26:	f014 0f02 	tst.w	r4, #2
  401c2a:	d006      	beq.n	401c3a <spi_write+0x2c>
  401c2c:	0412      	lsls	r2, r2, #16
  401c2e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401c32:	4311      	orrs	r1, r2
  401c34:	b10b      	cbz	r3, 401c3a <spi_write+0x2c>
  401c36:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  401c3a:	60c1      	str	r1, [r0, #12]
  401c3c:	2000      	movs	r0, #0
  401c3e:	bc30      	pop	{r4, r5}
  401c40:	4770      	bx	lr

00401c42 <spi_set_clock_polarity>:
  401c42:	b932      	cbnz	r2, 401c52 <spi_set_clock_polarity+0x10>
  401c44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  401c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c4a:	f023 0301 	bic.w	r3, r3, #1
  401c4e:	6303      	str	r3, [r0, #48]	; 0x30
  401c50:	4770      	bx	lr
  401c52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  401c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c58:	f043 0301 	orr.w	r3, r3, #1
  401c5c:	6303      	str	r3, [r0, #48]	; 0x30
  401c5e:	4770      	bx	lr

00401c60 <spi_set_clock_phase>:
  401c60:	b932      	cbnz	r2, 401c70 <spi_set_clock_phase+0x10>
  401c62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  401c66:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c68:	f023 0302 	bic.w	r3, r3, #2
  401c6c:	6303      	str	r3, [r0, #48]	; 0x30
  401c6e:	4770      	bx	lr
  401c70:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  401c74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c76:	f043 0302 	orr.w	r3, r3, #2
  401c7a:	6303      	str	r3, [r0, #48]	; 0x30
  401c7c:	4770      	bx	lr

00401c7e <spi_set_bits_per_transfer>:
  401c7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401c82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401c88:	630b      	str	r3, [r1, #48]	; 0x30
  401c8a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c8c:	431a      	orrs	r2, r3
  401c8e:	630a      	str	r2, [r1, #48]	; 0x30
  401c90:	4770      	bx	lr

00401c92 <spi_set_baudrate_div>:
  401c92:	b17a      	cbz	r2, 401cb4 <spi_set_baudrate_div+0x22>
  401c94:	b410      	push	{r4}
  401c96:	4614      	mov	r4, r2
  401c98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401c9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401ca2:	630b      	str	r3, [r1, #48]	; 0x30
  401ca4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401ca6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401caa:	630a      	str	r2, [r1, #48]	; 0x30
  401cac:	2000      	movs	r0, #0
  401cae:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cb2:	4770      	bx	lr
  401cb4:	f04f 30ff 	mov.w	r0, #4294967295
  401cb8:	4770      	bx	lr

00401cba <spi_set_transfer_delay>:
  401cba:	b410      	push	{r4}
  401cbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401cc0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401cc2:	b280      	uxth	r0, r0
  401cc4:	6308      	str	r0, [r1, #48]	; 0x30
  401cc6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401cc8:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401cd0:	630b      	str	r3, [r1, #48]	; 0x30
  401cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cd6:	4770      	bx	lr

00401cd8 <usart_set_async_baudrate>:
  401cd8:	b410      	push	{r4}
  401cda:	010b      	lsls	r3, r1, #4
  401cdc:	4293      	cmp	r3, r2
  401cde:	d914      	bls.n	401d0a <usart_set_async_baudrate+0x32>
  401ce0:	00c9      	lsls	r1, r1, #3
  401ce2:	084b      	lsrs	r3, r1, #1
  401ce4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401ce8:	fbb2 f2f1 	udiv	r2, r2, r1
  401cec:	08d3      	lsrs	r3, r2, #3
  401cee:	1e5c      	subs	r4, r3, #1
  401cf0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401cf4:	428c      	cmp	r4, r1
  401cf6:	d901      	bls.n	401cfc <usart_set_async_baudrate+0x24>
  401cf8:	2001      	movs	r0, #1
  401cfa:	e017      	b.n	401d2c <usart_set_async_baudrate+0x54>
  401cfc:	6841      	ldr	r1, [r0, #4]
  401cfe:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401d02:	6041      	str	r1, [r0, #4]
  401d04:	e00c      	b.n	401d20 <usart_set_async_baudrate+0x48>
  401d06:	2001      	movs	r0, #1
  401d08:	e010      	b.n	401d2c <usart_set_async_baudrate+0x54>
  401d0a:	0859      	lsrs	r1, r3, #1
  401d0c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401d10:	fbb2 f2f3 	udiv	r2, r2, r3
  401d14:	08d3      	lsrs	r3, r2, #3
  401d16:	1e5c      	subs	r4, r3, #1
  401d18:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401d1c:	428c      	cmp	r4, r1
  401d1e:	d8f2      	bhi.n	401d06 <usart_set_async_baudrate+0x2e>
  401d20:	0412      	lsls	r2, r2, #16
  401d22:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401d26:	431a      	orrs	r2, r3
  401d28:	6202      	str	r2, [r0, #32]
  401d2a:	2000      	movs	r0, #0
  401d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d30:	4770      	bx	lr
	...

00401d34 <usart_reset>:
  401d34:	4b08      	ldr	r3, [pc, #32]	; (401d58 <usart_reset+0x24>)
  401d36:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  401d3a:	2300      	movs	r3, #0
  401d3c:	6043      	str	r3, [r0, #4]
  401d3e:	6243      	str	r3, [r0, #36]	; 0x24
  401d40:	6283      	str	r3, [r0, #40]	; 0x28
  401d42:	2388      	movs	r3, #136	; 0x88
  401d44:	6003      	str	r3, [r0, #0]
  401d46:	2324      	movs	r3, #36	; 0x24
  401d48:	6003      	str	r3, [r0, #0]
  401d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
  401d4e:	6003      	str	r3, [r0, #0]
  401d50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401d54:	6003      	str	r3, [r0, #0]
  401d56:	4770      	bx	lr
  401d58:	55534100 	.word	0x55534100

00401d5c <usart_init_rs232>:
  401d5c:	b570      	push	{r4, r5, r6, lr}
  401d5e:	4605      	mov	r5, r0
  401d60:	460c      	mov	r4, r1
  401d62:	4616      	mov	r6, r2
  401d64:	4b0f      	ldr	r3, [pc, #60]	; (401da4 <usart_init_rs232+0x48>)
  401d66:	4798      	blx	r3
  401d68:	2200      	movs	r2, #0
  401d6a:	4b0f      	ldr	r3, [pc, #60]	; (401da8 <usart_init_rs232+0x4c>)
  401d6c:	601a      	str	r2, [r3, #0]
  401d6e:	b1a4      	cbz	r4, 401d9a <usart_init_rs232+0x3e>
  401d70:	4632      	mov	r2, r6
  401d72:	6821      	ldr	r1, [r4, #0]
  401d74:	4628      	mov	r0, r5
  401d76:	4b0d      	ldr	r3, [pc, #52]	; (401dac <usart_init_rs232+0x50>)
  401d78:	4798      	blx	r3
  401d7a:	4602      	mov	r2, r0
  401d7c:	b978      	cbnz	r0, 401d9e <usart_init_rs232+0x42>
  401d7e:	6863      	ldr	r3, [r4, #4]
  401d80:	68a1      	ldr	r1, [r4, #8]
  401d82:	430b      	orrs	r3, r1
  401d84:	6921      	ldr	r1, [r4, #16]
  401d86:	430b      	orrs	r3, r1
  401d88:	68e1      	ldr	r1, [r4, #12]
  401d8a:	430b      	orrs	r3, r1
  401d8c:	4906      	ldr	r1, [pc, #24]	; (401da8 <usart_init_rs232+0x4c>)
  401d8e:	600b      	str	r3, [r1, #0]
  401d90:	6869      	ldr	r1, [r5, #4]
  401d92:	430b      	orrs	r3, r1
  401d94:	606b      	str	r3, [r5, #4]
  401d96:	4610      	mov	r0, r2
  401d98:	bd70      	pop	{r4, r5, r6, pc}
  401d9a:	2201      	movs	r2, #1
  401d9c:	e7fb      	b.n	401d96 <usart_init_rs232+0x3a>
  401d9e:	2201      	movs	r2, #1
  401da0:	e7f9      	b.n	401d96 <usart_init_rs232+0x3a>
  401da2:	bf00      	nop
  401da4:	00401d35 	.word	0x00401d35
  401da8:	2040425c 	.word	0x2040425c
  401dac:	00401cd9 	.word	0x00401cd9

00401db0 <usart_enable_tx>:
  401db0:	2340      	movs	r3, #64	; 0x40
  401db2:	6003      	str	r3, [r0, #0]
  401db4:	4770      	bx	lr

00401db6 <usart_enable_rx>:
  401db6:	2310      	movs	r3, #16
  401db8:	6003      	str	r3, [r0, #0]
  401dba:	4770      	bx	lr

00401dbc <usart_write>:
  401dbc:	6943      	ldr	r3, [r0, #20]
  401dbe:	f013 0f02 	tst.w	r3, #2
  401dc2:	d004      	beq.n	401dce <usart_write+0x12>
  401dc4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401dc8:	61c1      	str	r1, [r0, #28]
  401dca:	2000      	movs	r0, #0
  401dcc:	4770      	bx	lr
  401dce:	2001      	movs	r0, #1
  401dd0:	4770      	bx	lr

00401dd2 <usart_read>:
  401dd2:	6943      	ldr	r3, [r0, #20]
  401dd4:	f013 0f01 	tst.w	r3, #1
  401dd8:	d005      	beq.n	401de6 <usart_read+0x14>
  401dda:	6983      	ldr	r3, [r0, #24]
  401ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401de0:	600b      	str	r3, [r1, #0]
  401de2:	2000      	movs	r0, #0
  401de4:	4770      	bx	lr
  401de6:	2001      	movs	r0, #1
  401de8:	4770      	bx	lr
	...

00401dec <_write>:
  401dec:	3801      	subs	r0, #1
  401dee:	2802      	cmp	r0, #2
  401df0:	d815      	bhi.n	401e1e <_write+0x32>
  401df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401df6:	460e      	mov	r6, r1
  401df8:	4614      	mov	r4, r2
  401dfa:	b19a      	cbz	r2, 401e24 <_write+0x38>
  401dfc:	460d      	mov	r5, r1
  401dfe:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401e38 <_write+0x4c>
  401e02:	4f0c      	ldr	r7, [pc, #48]	; (401e34 <_write+0x48>)
  401e04:	f8d8 0000 	ldr.w	r0, [r8]
  401e08:	f815 1b01 	ldrb.w	r1, [r5], #1
  401e0c:	683b      	ldr	r3, [r7, #0]
  401e0e:	4798      	blx	r3
  401e10:	2800      	cmp	r0, #0
  401e12:	db0a      	blt.n	401e2a <_write+0x3e>
  401e14:	1ba8      	subs	r0, r5, r6
  401e16:	3c01      	subs	r4, #1
  401e18:	d1f4      	bne.n	401e04 <_write+0x18>
  401e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e1e:	f04f 30ff 	mov.w	r0, #4294967295
  401e22:	4770      	bx	lr
  401e24:	4610      	mov	r0, r2
  401e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e2a:	f04f 30ff 	mov.w	r0, #4294967295
  401e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e32:	bf00      	nop
  401e34:	20404c20 	.word	0x20404c20
  401e38:	20404c24 	.word	0x20404c24

00401e3c <uart_write>:
  401e3c:	6943      	ldr	r3, [r0, #20]
  401e3e:	f013 0f02 	tst.w	r3, #2
  401e42:	d002      	beq.n	401e4a <uart_write+0xe>
  401e44:	61c1      	str	r1, [r0, #28]
  401e46:	2000      	movs	r0, #0
  401e48:	4770      	bx	lr
  401e4a:	2001      	movs	r0, #1
  401e4c:	4770      	bx	lr

00401e4e <uart_read>:
  401e4e:	6943      	ldr	r3, [r0, #20]
  401e50:	f013 0f01 	tst.w	r3, #1
  401e54:	d003      	beq.n	401e5e <uart_read+0x10>
  401e56:	6983      	ldr	r3, [r0, #24]
  401e58:	700b      	strb	r3, [r1, #0]
  401e5a:	2000      	movs	r0, #0
  401e5c:	4770      	bx	lr
  401e5e:	2001      	movs	r0, #1
  401e60:	4770      	bx	lr
	...

00401e64 <sysclk_init>:
  401e64:	b510      	push	{r4, lr}
  401e66:	4810      	ldr	r0, [pc, #64]	; (401ea8 <sysclk_init+0x44>)
  401e68:	4b10      	ldr	r3, [pc, #64]	; (401eac <sysclk_init+0x48>)
  401e6a:	4798      	blx	r3
  401e6c:	213e      	movs	r1, #62	; 0x3e
  401e6e:	2000      	movs	r0, #0
  401e70:	4b0f      	ldr	r3, [pc, #60]	; (401eb0 <sysclk_init+0x4c>)
  401e72:	4798      	blx	r3
  401e74:	4c0f      	ldr	r4, [pc, #60]	; (401eb4 <sysclk_init+0x50>)
  401e76:	47a0      	blx	r4
  401e78:	2800      	cmp	r0, #0
  401e7a:	d0fc      	beq.n	401e76 <sysclk_init+0x12>
  401e7c:	4b0e      	ldr	r3, [pc, #56]	; (401eb8 <sysclk_init+0x54>)
  401e7e:	4798      	blx	r3
  401e80:	4a0e      	ldr	r2, [pc, #56]	; (401ebc <sysclk_init+0x58>)
  401e82:	4b0f      	ldr	r3, [pc, #60]	; (401ec0 <sysclk_init+0x5c>)
  401e84:	629a      	str	r2, [r3, #40]	; 0x28
  401e86:	4c0f      	ldr	r4, [pc, #60]	; (401ec4 <sysclk_init+0x60>)
  401e88:	47a0      	blx	r4
  401e8a:	2800      	cmp	r0, #0
  401e8c:	d0fc      	beq.n	401e88 <sysclk_init+0x24>
  401e8e:	2002      	movs	r0, #2
  401e90:	4b0d      	ldr	r3, [pc, #52]	; (401ec8 <sysclk_init+0x64>)
  401e92:	4798      	blx	r3
  401e94:	2000      	movs	r0, #0
  401e96:	4b0d      	ldr	r3, [pc, #52]	; (401ecc <sysclk_init+0x68>)
  401e98:	4798      	blx	r3
  401e9a:	4b0d      	ldr	r3, [pc, #52]	; (401ed0 <sysclk_init+0x6c>)
  401e9c:	4798      	blx	r3
  401e9e:	4802      	ldr	r0, [pc, #8]	; (401ea8 <sysclk_init+0x44>)
  401ea0:	4b02      	ldr	r3, [pc, #8]	; (401eac <sysclk_init+0x48>)
  401ea2:	4798      	blx	r3
  401ea4:	bd10      	pop	{r4, pc}
  401ea6:	bf00      	nop
  401ea8:	08f0d180 	.word	0x08f0d180
  401eac:	004025f5 	.word	0x004025f5
  401eb0:	00402379 	.word	0x00402379
  401eb4:	004023cd 	.word	0x004023cd
  401eb8:	004023dd 	.word	0x004023dd
  401ebc:	20183f01 	.word	0x20183f01
  401ec0:	400e0600 	.word	0x400e0600
  401ec4:	004023ed 	.word	0x004023ed
  401ec8:	004022dd 	.word	0x004022dd
  401ecc:	00402315 	.word	0x00402315
  401ed0:	004024e9 	.word	0x004024e9

00401ed4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401ed6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401eda:	4b8e      	ldr	r3, [pc, #568]	; (402114 <board_init+0x240>)
  401edc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  401ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ee2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  401ee6:	4b8c      	ldr	r3, [pc, #560]	; (402118 <board_init+0x244>)
  401ee8:	2100      	movs	r1, #0
  401eea:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  401eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ef2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  401ef6:	695a      	ldr	r2, [r3, #20]
  401ef8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401efc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  401efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f02:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  401f06:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  401f0a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  401f0e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  401f12:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  401f16:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  401f1a:	016e      	lsls	r6, r5, #5
  401f1c:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  401f20:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  401f24:	461c      	mov	r4, r3
  401f26:	ea06 000e 	and.w	r0, r6, lr
  401f2a:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  401f2c:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  401f2e:	ea40 0102 	orr.w	r1, r0, r2
  401f32:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  401f36:	3b01      	subs	r3, #1
  401f38:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  401f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f40:	d1f5      	bne.n	401f2e <board_init+0x5a>
    } while(sets-- != 0U);
  401f42:	3d01      	subs	r5, #1
  401f44:	3e20      	subs	r6, #32
  401f46:	f1b5 3fff 	cmp.w	r5, #4294967295
  401f4a:	d1ec      	bne.n	401f26 <board_init+0x52>
  401f4c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  401f50:	4b71      	ldr	r3, [pc, #452]	; (402118 <board_init+0x244>)
  401f52:	695a      	ldr	r2, [r3, #20]
  401f54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401f58:	615a      	str	r2, [r3, #20]
  401f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f5e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401f62:	4a6e      	ldr	r2, [pc, #440]	; (40211c <board_init+0x248>)
  401f64:	496e      	ldr	r1, [pc, #440]	; (402120 <board_init+0x24c>)
  401f66:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401f68:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401f6c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  401f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f72:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401f76:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401f7a:	f022 0201 	bic.w	r2, r2, #1
  401f7e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401f82:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401f86:	f022 0201 	bic.w	r2, r2, #1
  401f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  401f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f92:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401f96:	200a      	movs	r0, #10
  401f98:	4c62      	ldr	r4, [pc, #392]	; (402124 <board_init+0x250>)
  401f9a:	47a0      	blx	r4
  401f9c:	200b      	movs	r0, #11
  401f9e:	47a0      	blx	r4
  401fa0:	200c      	movs	r0, #12
  401fa2:	47a0      	blx	r4
  401fa4:	2010      	movs	r0, #16
  401fa6:	47a0      	blx	r4
  401fa8:	2011      	movs	r0, #17
  401faa:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401fac:	4b5e      	ldr	r3, [pc, #376]	; (402128 <board_init+0x254>)
  401fae:	f44f 7280 	mov.w	r2, #256	; 0x100
  401fb2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401fb8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401fba:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fc2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401fc8:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401fce:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401fd0:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401fd6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401fd8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401fdc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401fde:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401fe0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401fe4:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401fe6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401fea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401fee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401ff2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401ff6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ffc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ffe:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402004:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402006:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40200a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40200c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40200e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  402012:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402014:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  402016:	4845      	ldr	r0, [pc, #276]	; (40212c <board_init+0x258>)
  402018:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  40201c:	f041 0110 	orr.w	r1, r1, #16
  402020:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  402024:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  402028:	2110      	movs	r1, #16
  40202a:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40202c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  402030:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  402032:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402034:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402038:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40203a:	430c      	orrs	r4, r1
  40203c:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40203e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402040:	430c      	orrs	r4, r1
  402042:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402044:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  402046:	2008      	movs	r0, #8
  402048:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40204a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40204e:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402050:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402052:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402056:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402058:	f024 0408 	bic.w	r4, r4, #8
  40205c:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40205e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  402060:	f024 0408 	bic.w	r4, r4, #8
  402064:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402066:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  402068:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40206a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40206e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402070:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402072:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402076:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402078:	f020 0010 	bic.w	r0, r0, #16
  40207c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40207e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402080:	f020 0010 	bic.w	r0, r0, #16
  402084:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402086:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  402088:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40208c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402090:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402092:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402096:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402098:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40209a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40209e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4020a0:	4308      	orrs	r0, r1
  4020a2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020a4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4020a6:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  4020aa:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020ac:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4020ae:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020b4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020b6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4020bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4020be:	4311      	orrs	r1, r2
  4020c0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4020c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4020c8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020ca:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4020cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4020d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4020de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4020e0:	4311      	orrs	r1, r2
  4020e2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020e4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4020e6:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  4020ea:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020ec:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4020ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4020f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402100:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402102:	4311      	orrs	r1, r2
  402104:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402106:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402108:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  40210c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40210e:	605a      	str	r2, [r3, #4]
  402110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402112:	bf00      	nop
  402114:	400e1850 	.word	0x400e1850
  402118:	e000ed00 	.word	0xe000ed00
  40211c:	400e0c00 	.word	0x400e0c00
  402120:	5a00080c 	.word	0x5a00080c
  402124:	004023fd 	.word	0x004023fd
  402128:	400e1200 	.word	0x400e1200
  40212c:	40088000 	.word	0x40088000

00402130 <pio_set_peripheral>:
  402130:	6442      	str	r2, [r0, #68]	; 0x44
  402132:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402136:	d03a      	beq.n	4021ae <pio_set_peripheral+0x7e>
  402138:	d813      	bhi.n	402162 <pio_set_peripheral+0x32>
  40213a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40213e:	d025      	beq.n	40218c <pio_set_peripheral+0x5c>
  402140:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402144:	d10a      	bne.n	40215c <pio_set_peripheral+0x2c>
  402146:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402148:	4313      	orrs	r3, r2
  40214a:	6703      	str	r3, [r0, #112]	; 0x70
  40214c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40214e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402150:	400b      	ands	r3, r1
  402152:	ea23 0302 	bic.w	r3, r3, r2
  402156:	6743      	str	r3, [r0, #116]	; 0x74
  402158:	6042      	str	r2, [r0, #4]
  40215a:	4770      	bx	lr
  40215c:	2900      	cmp	r1, #0
  40215e:	d1fb      	bne.n	402158 <pio_set_peripheral+0x28>
  402160:	4770      	bx	lr
  402162:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402166:	d021      	beq.n	4021ac <pio_set_peripheral+0x7c>
  402168:	d809      	bhi.n	40217e <pio_set_peripheral+0x4e>
  40216a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40216e:	d1f3      	bne.n	402158 <pio_set_peripheral+0x28>
  402170:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402172:	4313      	orrs	r3, r2
  402174:	6703      	str	r3, [r0, #112]	; 0x70
  402176:	6f43      	ldr	r3, [r0, #116]	; 0x74
  402178:	4313      	orrs	r3, r2
  40217a:	6743      	str	r3, [r0, #116]	; 0x74
  40217c:	e7ec      	b.n	402158 <pio_set_peripheral+0x28>
  40217e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402182:	d013      	beq.n	4021ac <pio_set_peripheral+0x7c>
  402184:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402188:	d010      	beq.n	4021ac <pio_set_peripheral+0x7c>
  40218a:	e7e5      	b.n	402158 <pio_set_peripheral+0x28>
  40218c:	b410      	push	{r4}
  40218e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402190:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402192:	43d3      	mvns	r3, r2
  402194:	4021      	ands	r1, r4
  402196:	461c      	mov	r4, r3
  402198:	4019      	ands	r1, r3
  40219a:	6701      	str	r1, [r0, #112]	; 0x70
  40219c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40219e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4021a0:	400b      	ands	r3, r1
  4021a2:	4023      	ands	r3, r4
  4021a4:	6743      	str	r3, [r0, #116]	; 0x74
  4021a6:	6042      	str	r2, [r0, #4]
  4021a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4021ac:	4770      	bx	lr
  4021ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4021b0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4021b2:	400b      	ands	r3, r1
  4021b4:	ea23 0302 	bic.w	r3, r3, r2
  4021b8:	6703      	str	r3, [r0, #112]	; 0x70
  4021ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4021bc:	4313      	orrs	r3, r2
  4021be:	6743      	str	r3, [r0, #116]	; 0x74
  4021c0:	e7ca      	b.n	402158 <pio_set_peripheral+0x28>

004021c2 <pio_set_input>:
  4021c2:	6441      	str	r1, [r0, #68]	; 0x44
  4021c4:	f012 0f01 	tst.w	r2, #1
  4021c8:	d10d      	bne.n	4021e6 <pio_set_input+0x24>
  4021ca:	6601      	str	r1, [r0, #96]	; 0x60
  4021cc:	f012 0f0a 	tst.w	r2, #10
  4021d0:	d00b      	beq.n	4021ea <pio_set_input+0x28>
  4021d2:	6201      	str	r1, [r0, #32]
  4021d4:	f012 0f02 	tst.w	r2, #2
  4021d8:	d109      	bne.n	4021ee <pio_set_input+0x2c>
  4021da:	f012 0f08 	tst.w	r2, #8
  4021de:	d008      	beq.n	4021f2 <pio_set_input+0x30>
  4021e0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4021e4:	e005      	b.n	4021f2 <pio_set_input+0x30>
  4021e6:	6641      	str	r1, [r0, #100]	; 0x64
  4021e8:	e7f0      	b.n	4021cc <pio_set_input+0xa>
  4021ea:	6241      	str	r1, [r0, #36]	; 0x24
  4021ec:	e7f2      	b.n	4021d4 <pio_set_input+0x12>
  4021ee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4021f2:	6141      	str	r1, [r0, #20]
  4021f4:	6001      	str	r1, [r0, #0]
  4021f6:	4770      	bx	lr

004021f8 <pio_set_output>:
  4021f8:	b410      	push	{r4}
  4021fa:	9c01      	ldr	r4, [sp, #4]
  4021fc:	6441      	str	r1, [r0, #68]	; 0x44
  4021fe:	b94c      	cbnz	r4, 402214 <pio_set_output+0x1c>
  402200:	6601      	str	r1, [r0, #96]	; 0x60
  402202:	b14b      	cbz	r3, 402218 <pio_set_output+0x20>
  402204:	6501      	str	r1, [r0, #80]	; 0x50
  402206:	b94a      	cbnz	r2, 40221c <pio_set_output+0x24>
  402208:	6341      	str	r1, [r0, #52]	; 0x34
  40220a:	6101      	str	r1, [r0, #16]
  40220c:	6001      	str	r1, [r0, #0]
  40220e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402212:	4770      	bx	lr
  402214:	6641      	str	r1, [r0, #100]	; 0x64
  402216:	e7f4      	b.n	402202 <pio_set_output+0xa>
  402218:	6541      	str	r1, [r0, #84]	; 0x54
  40221a:	e7f4      	b.n	402206 <pio_set_output+0xe>
  40221c:	6301      	str	r1, [r0, #48]	; 0x30
  40221e:	e7f4      	b.n	40220a <pio_set_output+0x12>

00402220 <pio_get_interrupt_status>:
  402220:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402222:	4770      	bx	lr

00402224 <pio_get_interrupt_mask>:
  402224:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402226:	4770      	bx	lr

00402228 <pio_handler_process>:
  402228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40222c:	4604      	mov	r4, r0
  40222e:	4688      	mov	r8, r1
  402230:	4b0e      	ldr	r3, [pc, #56]	; (40226c <pio_handler_process+0x44>)
  402232:	4798      	blx	r3
  402234:	4605      	mov	r5, r0
  402236:	4620      	mov	r0, r4
  402238:	4b0d      	ldr	r3, [pc, #52]	; (402270 <pio_handler_process+0x48>)
  40223a:	4798      	blx	r3
  40223c:	4005      	ands	r5, r0
  40223e:	d013      	beq.n	402268 <pio_handler_process+0x40>
  402240:	4c0c      	ldr	r4, [pc, #48]	; (402274 <pio_handler_process+0x4c>)
  402242:	f104 0660 	add.w	r6, r4, #96	; 0x60
  402246:	e003      	b.n	402250 <pio_handler_process+0x28>
  402248:	42b4      	cmp	r4, r6
  40224a:	d00d      	beq.n	402268 <pio_handler_process+0x40>
  40224c:	3410      	adds	r4, #16
  40224e:	b15d      	cbz	r5, 402268 <pio_handler_process+0x40>
  402250:	6820      	ldr	r0, [r4, #0]
  402252:	4540      	cmp	r0, r8
  402254:	d1f8      	bne.n	402248 <pio_handler_process+0x20>
  402256:	6861      	ldr	r1, [r4, #4]
  402258:	4229      	tst	r1, r5
  40225a:	d0f5      	beq.n	402248 <pio_handler_process+0x20>
  40225c:	68e3      	ldr	r3, [r4, #12]
  40225e:	4798      	blx	r3
  402260:	6863      	ldr	r3, [r4, #4]
  402262:	ea25 0503 	bic.w	r5, r5, r3
  402266:	e7ef      	b.n	402248 <pio_handler_process+0x20>
  402268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40226c:	00402221 	.word	0x00402221
  402270:	00402225 	.word	0x00402225
  402274:	20404260 	.word	0x20404260

00402278 <PIOA_Handler>:
  402278:	b508      	push	{r3, lr}
  40227a:	210a      	movs	r1, #10
  40227c:	4801      	ldr	r0, [pc, #4]	; (402284 <PIOA_Handler+0xc>)
  40227e:	4b02      	ldr	r3, [pc, #8]	; (402288 <PIOA_Handler+0x10>)
  402280:	4798      	blx	r3
  402282:	bd08      	pop	{r3, pc}
  402284:	400e0e00 	.word	0x400e0e00
  402288:	00402229 	.word	0x00402229

0040228c <PIOB_Handler>:
  40228c:	b508      	push	{r3, lr}
  40228e:	210b      	movs	r1, #11
  402290:	4801      	ldr	r0, [pc, #4]	; (402298 <PIOB_Handler+0xc>)
  402292:	4b02      	ldr	r3, [pc, #8]	; (40229c <PIOB_Handler+0x10>)
  402294:	4798      	blx	r3
  402296:	bd08      	pop	{r3, pc}
  402298:	400e1000 	.word	0x400e1000
  40229c:	00402229 	.word	0x00402229

004022a0 <PIOC_Handler>:
  4022a0:	b508      	push	{r3, lr}
  4022a2:	210c      	movs	r1, #12
  4022a4:	4801      	ldr	r0, [pc, #4]	; (4022ac <PIOC_Handler+0xc>)
  4022a6:	4b02      	ldr	r3, [pc, #8]	; (4022b0 <PIOC_Handler+0x10>)
  4022a8:	4798      	blx	r3
  4022aa:	bd08      	pop	{r3, pc}
  4022ac:	400e1200 	.word	0x400e1200
  4022b0:	00402229 	.word	0x00402229

004022b4 <PIOD_Handler>:
  4022b4:	b508      	push	{r3, lr}
  4022b6:	2110      	movs	r1, #16
  4022b8:	4801      	ldr	r0, [pc, #4]	; (4022c0 <PIOD_Handler+0xc>)
  4022ba:	4b02      	ldr	r3, [pc, #8]	; (4022c4 <PIOD_Handler+0x10>)
  4022bc:	4798      	blx	r3
  4022be:	bd08      	pop	{r3, pc}
  4022c0:	400e1400 	.word	0x400e1400
  4022c4:	00402229 	.word	0x00402229

004022c8 <PIOE_Handler>:
  4022c8:	b508      	push	{r3, lr}
  4022ca:	2111      	movs	r1, #17
  4022cc:	4801      	ldr	r0, [pc, #4]	; (4022d4 <PIOE_Handler+0xc>)
  4022ce:	4b02      	ldr	r3, [pc, #8]	; (4022d8 <PIOE_Handler+0x10>)
  4022d0:	4798      	blx	r3
  4022d2:	bd08      	pop	{r3, pc}
  4022d4:	400e1600 	.word	0x400e1600
  4022d8:	00402229 	.word	0x00402229

004022dc <pmc_mck_set_division>:
  4022dc:	2803      	cmp	r0, #3
  4022de:	d011      	beq.n	402304 <pmc_mck_set_division+0x28>
  4022e0:	2804      	cmp	r0, #4
  4022e2:	d012      	beq.n	40230a <pmc_mck_set_division+0x2e>
  4022e4:	2802      	cmp	r0, #2
  4022e6:	bf0c      	ite	eq
  4022e8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4022ec:	2100      	movne	r1, #0
  4022ee:	4a08      	ldr	r2, [pc, #32]	; (402310 <pmc_mck_set_division+0x34>)
  4022f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4022f6:	430b      	orrs	r3, r1
  4022f8:	6313      	str	r3, [r2, #48]	; 0x30
  4022fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4022fc:	f013 0f08 	tst.w	r3, #8
  402300:	d0fb      	beq.n	4022fa <pmc_mck_set_division+0x1e>
  402302:	4770      	bx	lr
  402304:	f44f 7140 	mov.w	r1, #768	; 0x300
  402308:	e7f1      	b.n	4022ee <pmc_mck_set_division+0x12>
  40230a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40230e:	e7ee      	b.n	4022ee <pmc_mck_set_division+0x12>
  402310:	400e0600 	.word	0x400e0600

00402314 <pmc_switch_mck_to_pllack>:
  402314:	4a17      	ldr	r2, [pc, #92]	; (402374 <pmc_switch_mck_to_pllack+0x60>)
  402316:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40231c:	4318      	orrs	r0, r3
  40231e:	6310      	str	r0, [r2, #48]	; 0x30
  402320:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402322:	f013 0f08 	tst.w	r3, #8
  402326:	d10a      	bne.n	40233e <pmc_switch_mck_to_pllack+0x2a>
  402328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40232c:	4911      	ldr	r1, [pc, #68]	; (402374 <pmc_switch_mck_to_pllack+0x60>)
  40232e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402330:	f012 0f08 	tst.w	r2, #8
  402334:	d103      	bne.n	40233e <pmc_switch_mck_to_pllack+0x2a>
  402336:	3b01      	subs	r3, #1
  402338:	d1f9      	bne.n	40232e <pmc_switch_mck_to_pllack+0x1a>
  40233a:	2001      	movs	r0, #1
  40233c:	4770      	bx	lr
  40233e:	4a0d      	ldr	r2, [pc, #52]	; (402374 <pmc_switch_mck_to_pllack+0x60>)
  402340:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402342:	f023 0303 	bic.w	r3, r3, #3
  402346:	f043 0302 	orr.w	r3, r3, #2
  40234a:	6313      	str	r3, [r2, #48]	; 0x30
  40234c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40234e:	f013 0f08 	tst.w	r3, #8
  402352:	d10a      	bne.n	40236a <pmc_switch_mck_to_pllack+0x56>
  402354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402358:	4906      	ldr	r1, [pc, #24]	; (402374 <pmc_switch_mck_to_pllack+0x60>)
  40235a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40235c:	f012 0f08 	tst.w	r2, #8
  402360:	d105      	bne.n	40236e <pmc_switch_mck_to_pllack+0x5a>
  402362:	3b01      	subs	r3, #1
  402364:	d1f9      	bne.n	40235a <pmc_switch_mck_to_pllack+0x46>
  402366:	2001      	movs	r0, #1
  402368:	4770      	bx	lr
  40236a:	2000      	movs	r0, #0
  40236c:	4770      	bx	lr
  40236e:	2000      	movs	r0, #0
  402370:	4770      	bx	lr
  402372:	bf00      	nop
  402374:	400e0600 	.word	0x400e0600

00402378 <pmc_switch_mainck_to_xtal>:
  402378:	b9a0      	cbnz	r0, 4023a4 <pmc_switch_mainck_to_xtal+0x2c>
  40237a:	480e      	ldr	r0, [pc, #56]	; (4023b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40237c:	6a03      	ldr	r3, [r0, #32]
  40237e:	0209      	lsls	r1, r1, #8
  402380:	b289      	uxth	r1, r1
  402382:	4a0d      	ldr	r2, [pc, #52]	; (4023b8 <pmc_switch_mainck_to_xtal+0x40>)
  402384:	401a      	ands	r2, r3
  402386:	4b0d      	ldr	r3, [pc, #52]	; (4023bc <pmc_switch_mainck_to_xtal+0x44>)
  402388:	4313      	orrs	r3, r2
  40238a:	4319      	orrs	r1, r3
  40238c:	6201      	str	r1, [r0, #32]
  40238e:	4602      	mov	r2, r0
  402390:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402392:	f013 0f01 	tst.w	r3, #1
  402396:	d0fb      	beq.n	402390 <pmc_switch_mainck_to_xtal+0x18>
  402398:	4a06      	ldr	r2, [pc, #24]	; (4023b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40239a:	6a11      	ldr	r1, [r2, #32]
  40239c:	4b08      	ldr	r3, [pc, #32]	; (4023c0 <pmc_switch_mainck_to_xtal+0x48>)
  40239e:	430b      	orrs	r3, r1
  4023a0:	6213      	str	r3, [r2, #32]
  4023a2:	4770      	bx	lr
  4023a4:	4903      	ldr	r1, [pc, #12]	; (4023b4 <pmc_switch_mainck_to_xtal+0x3c>)
  4023a6:	6a0b      	ldr	r3, [r1, #32]
  4023a8:	4a06      	ldr	r2, [pc, #24]	; (4023c4 <pmc_switch_mainck_to_xtal+0x4c>)
  4023aa:	401a      	ands	r2, r3
  4023ac:	4b06      	ldr	r3, [pc, #24]	; (4023c8 <pmc_switch_mainck_to_xtal+0x50>)
  4023ae:	4313      	orrs	r3, r2
  4023b0:	620b      	str	r3, [r1, #32]
  4023b2:	4770      	bx	lr
  4023b4:	400e0600 	.word	0x400e0600
  4023b8:	ffc8fffc 	.word	0xffc8fffc
  4023bc:	00370001 	.word	0x00370001
  4023c0:	01370000 	.word	0x01370000
  4023c4:	fec8fffc 	.word	0xfec8fffc
  4023c8:	01370002 	.word	0x01370002

004023cc <pmc_osc_is_ready_mainck>:
  4023cc:	4b02      	ldr	r3, [pc, #8]	; (4023d8 <pmc_osc_is_ready_mainck+0xc>)
  4023ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4023d0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4023d4:	4770      	bx	lr
  4023d6:	bf00      	nop
  4023d8:	400e0600 	.word	0x400e0600

004023dc <pmc_disable_pllack>:
  4023dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4023e0:	4b01      	ldr	r3, [pc, #4]	; (4023e8 <pmc_disable_pllack+0xc>)
  4023e2:	629a      	str	r2, [r3, #40]	; 0x28
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop
  4023e8:	400e0600 	.word	0x400e0600

004023ec <pmc_is_locked_pllack>:
  4023ec:	4b02      	ldr	r3, [pc, #8]	; (4023f8 <pmc_is_locked_pllack+0xc>)
  4023ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4023f0:	f000 0002 	and.w	r0, r0, #2
  4023f4:	4770      	bx	lr
  4023f6:	bf00      	nop
  4023f8:	400e0600 	.word	0x400e0600

004023fc <pmc_enable_periph_clk>:
  4023fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402400:	4b05      	ldr	r3, [pc, #20]	; (402418 <pmc_enable_periph_clk+0x1c>)
  402402:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  402406:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40240a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40240e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  402412:	2000      	movs	r0, #0
  402414:	4770      	bx	lr
  402416:	bf00      	nop
  402418:	400e0600 	.word	0x400e0600

0040241c <Dummy_Handler>:
  40241c:	e7fe      	b.n	40241c <Dummy_Handler>
	...

00402420 <Reset_Handler>:
  402420:	b500      	push	{lr}
  402422:	b083      	sub	sp, #12
  402424:	4b25      	ldr	r3, [pc, #148]	; (4024bc <Reset_Handler+0x9c>)
  402426:	4a26      	ldr	r2, [pc, #152]	; (4024c0 <Reset_Handler+0xa0>)
  402428:	429a      	cmp	r2, r3
  40242a:	d010      	beq.n	40244e <Reset_Handler+0x2e>
  40242c:	4b25      	ldr	r3, [pc, #148]	; (4024c4 <Reset_Handler+0xa4>)
  40242e:	4a23      	ldr	r2, [pc, #140]	; (4024bc <Reset_Handler+0x9c>)
  402430:	429a      	cmp	r2, r3
  402432:	d20c      	bcs.n	40244e <Reset_Handler+0x2e>
  402434:	3b01      	subs	r3, #1
  402436:	1a9b      	subs	r3, r3, r2
  402438:	f023 0303 	bic.w	r3, r3, #3
  40243c:	3304      	adds	r3, #4
  40243e:	4413      	add	r3, r2
  402440:	491f      	ldr	r1, [pc, #124]	; (4024c0 <Reset_Handler+0xa0>)
  402442:	f851 0b04 	ldr.w	r0, [r1], #4
  402446:	f842 0b04 	str.w	r0, [r2], #4
  40244a:	429a      	cmp	r2, r3
  40244c:	d1f9      	bne.n	402442 <Reset_Handler+0x22>
  40244e:	4b1e      	ldr	r3, [pc, #120]	; (4024c8 <Reset_Handler+0xa8>)
  402450:	4a1e      	ldr	r2, [pc, #120]	; (4024cc <Reset_Handler+0xac>)
  402452:	429a      	cmp	r2, r3
  402454:	d20a      	bcs.n	40246c <Reset_Handler+0x4c>
  402456:	3b01      	subs	r3, #1
  402458:	1a9b      	subs	r3, r3, r2
  40245a:	f023 0303 	bic.w	r3, r3, #3
  40245e:	3304      	adds	r3, #4
  402460:	4413      	add	r3, r2
  402462:	2100      	movs	r1, #0
  402464:	f842 1b04 	str.w	r1, [r2], #4
  402468:	4293      	cmp	r3, r2
  40246a:	d1fb      	bne.n	402464 <Reset_Handler+0x44>
  40246c:	4a18      	ldr	r2, [pc, #96]	; (4024d0 <Reset_Handler+0xb0>)
  40246e:	4b19      	ldr	r3, [pc, #100]	; (4024d4 <Reset_Handler+0xb4>)
  402470:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402474:	6093      	str	r3, [r2, #8]
  402476:	f3ef 8310 	mrs	r3, PRIMASK
  40247a:	fab3 f383 	clz	r3, r3
  40247e:	095b      	lsrs	r3, r3, #5
  402480:	9301      	str	r3, [sp, #4]
  402482:	b672      	cpsid	i
  402484:	f3bf 8f5f 	dmb	sy
  402488:	2200      	movs	r2, #0
  40248a:	4b13      	ldr	r3, [pc, #76]	; (4024d8 <Reset_Handler+0xb8>)
  40248c:	701a      	strb	r2, [r3, #0]
  40248e:	9901      	ldr	r1, [sp, #4]
  402490:	4a12      	ldr	r2, [pc, #72]	; (4024dc <Reset_Handler+0xbc>)
  402492:	6813      	ldr	r3, [r2, #0]
  402494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402498:	6013      	str	r3, [r2, #0]
  40249a:	f3bf 8f4f 	dsb	sy
  40249e:	f3bf 8f6f 	isb	sy
  4024a2:	b129      	cbz	r1, 4024b0 <Reset_Handler+0x90>
  4024a4:	2201      	movs	r2, #1
  4024a6:	4b0c      	ldr	r3, [pc, #48]	; (4024d8 <Reset_Handler+0xb8>)
  4024a8:	701a      	strb	r2, [r3, #0]
  4024aa:	f3bf 8f5f 	dmb	sy
  4024ae:	b662      	cpsie	i
  4024b0:	4b0b      	ldr	r3, [pc, #44]	; (4024e0 <Reset_Handler+0xc0>)
  4024b2:	4798      	blx	r3
  4024b4:	4b0b      	ldr	r3, [pc, #44]	; (4024e4 <Reset_Handler+0xc4>)
  4024b6:	4798      	blx	r3
  4024b8:	e7fe      	b.n	4024b8 <Reset_Handler+0x98>
  4024ba:	bf00      	nop
  4024bc:	20400000 	.word	0x20400000
  4024c0:	00406038 	.word	0x00406038
  4024c4:	204009d8 	.word	0x204009d8
  4024c8:	20404c50 	.word	0x20404c50
  4024cc:	204009d8 	.word	0x204009d8
  4024d0:	e000ed00 	.word	0xe000ed00
  4024d4:	00400000 	.word	0x00400000
  4024d8:	20400024 	.word	0x20400024
  4024dc:	e000ed88 	.word	0xe000ed88
  4024e0:	00402ce9 	.word	0x00402ce9
  4024e4:	00402881 	.word	0x00402881

004024e8 <SystemCoreClockUpdate>:
  4024e8:	4b3b      	ldr	r3, [pc, #236]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  4024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024ec:	f003 0303 	and.w	r3, r3, #3
  4024f0:	2b01      	cmp	r3, #1
  4024f2:	d01d      	beq.n	402530 <SystemCoreClockUpdate+0x48>
  4024f4:	b183      	cbz	r3, 402518 <SystemCoreClockUpdate+0x30>
  4024f6:	2b02      	cmp	r3, #2
  4024f8:	d036      	beq.n	402568 <SystemCoreClockUpdate+0x80>
  4024fa:	4b37      	ldr	r3, [pc, #220]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  4024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402502:	2b70      	cmp	r3, #112	; 0x70
  402504:	d05f      	beq.n	4025c6 <SystemCoreClockUpdate+0xde>
  402506:	4b34      	ldr	r3, [pc, #208]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  402508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40250a:	4934      	ldr	r1, [pc, #208]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  40250c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402510:	680b      	ldr	r3, [r1, #0]
  402512:	40d3      	lsrs	r3, r2
  402514:	600b      	str	r3, [r1, #0]
  402516:	4770      	bx	lr
  402518:	4b31      	ldr	r3, [pc, #196]	; (4025e0 <SystemCoreClockUpdate+0xf8>)
  40251a:	695b      	ldr	r3, [r3, #20]
  40251c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402520:	bf14      	ite	ne
  402522:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  402526:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40252a:	4b2c      	ldr	r3, [pc, #176]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  40252c:	601a      	str	r2, [r3, #0]
  40252e:	e7e4      	b.n	4024fa <SystemCoreClockUpdate+0x12>
  402530:	4b29      	ldr	r3, [pc, #164]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  402532:	6a1b      	ldr	r3, [r3, #32]
  402534:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402538:	d003      	beq.n	402542 <SystemCoreClockUpdate+0x5a>
  40253a:	4a2a      	ldr	r2, [pc, #168]	; (4025e4 <SystemCoreClockUpdate+0xfc>)
  40253c:	4b27      	ldr	r3, [pc, #156]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  40253e:	601a      	str	r2, [r3, #0]
  402540:	e7db      	b.n	4024fa <SystemCoreClockUpdate+0x12>
  402542:	4a29      	ldr	r2, [pc, #164]	; (4025e8 <SystemCoreClockUpdate+0x100>)
  402544:	4b25      	ldr	r3, [pc, #148]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  402546:	601a      	str	r2, [r3, #0]
  402548:	4b23      	ldr	r3, [pc, #140]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  40254a:	6a1b      	ldr	r3, [r3, #32]
  40254c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402550:	2b10      	cmp	r3, #16
  402552:	d005      	beq.n	402560 <SystemCoreClockUpdate+0x78>
  402554:	2b20      	cmp	r3, #32
  402556:	d1d0      	bne.n	4024fa <SystemCoreClockUpdate+0x12>
  402558:	4a22      	ldr	r2, [pc, #136]	; (4025e4 <SystemCoreClockUpdate+0xfc>)
  40255a:	4b20      	ldr	r3, [pc, #128]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  40255c:	601a      	str	r2, [r3, #0]
  40255e:	e7cc      	b.n	4024fa <SystemCoreClockUpdate+0x12>
  402560:	4a22      	ldr	r2, [pc, #136]	; (4025ec <SystemCoreClockUpdate+0x104>)
  402562:	4b1e      	ldr	r3, [pc, #120]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  402564:	601a      	str	r2, [r3, #0]
  402566:	e7c8      	b.n	4024fa <SystemCoreClockUpdate+0x12>
  402568:	4b1b      	ldr	r3, [pc, #108]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  40256a:	6a1b      	ldr	r3, [r3, #32]
  40256c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402570:	d016      	beq.n	4025a0 <SystemCoreClockUpdate+0xb8>
  402572:	4a1c      	ldr	r2, [pc, #112]	; (4025e4 <SystemCoreClockUpdate+0xfc>)
  402574:	4b19      	ldr	r3, [pc, #100]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  402576:	601a      	str	r2, [r3, #0]
  402578:	4b17      	ldr	r3, [pc, #92]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  40257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40257c:	f003 0303 	and.w	r3, r3, #3
  402580:	2b02      	cmp	r3, #2
  402582:	d1ba      	bne.n	4024fa <SystemCoreClockUpdate+0x12>
  402584:	4a14      	ldr	r2, [pc, #80]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  402586:	6a91      	ldr	r1, [r2, #40]	; 0x28
  402588:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40258a:	4814      	ldr	r0, [pc, #80]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  40258c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402590:	6803      	ldr	r3, [r0, #0]
  402592:	fb01 3303 	mla	r3, r1, r3, r3
  402596:	b2d2      	uxtb	r2, r2
  402598:	fbb3 f3f2 	udiv	r3, r3, r2
  40259c:	6003      	str	r3, [r0, #0]
  40259e:	e7ac      	b.n	4024fa <SystemCoreClockUpdate+0x12>
  4025a0:	4a11      	ldr	r2, [pc, #68]	; (4025e8 <SystemCoreClockUpdate+0x100>)
  4025a2:	4b0e      	ldr	r3, [pc, #56]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  4025a4:	601a      	str	r2, [r3, #0]
  4025a6:	4b0c      	ldr	r3, [pc, #48]	; (4025d8 <SystemCoreClockUpdate+0xf0>)
  4025a8:	6a1b      	ldr	r3, [r3, #32]
  4025aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025ae:	2b10      	cmp	r3, #16
  4025b0:	d005      	beq.n	4025be <SystemCoreClockUpdate+0xd6>
  4025b2:	2b20      	cmp	r3, #32
  4025b4:	d1e0      	bne.n	402578 <SystemCoreClockUpdate+0x90>
  4025b6:	4a0b      	ldr	r2, [pc, #44]	; (4025e4 <SystemCoreClockUpdate+0xfc>)
  4025b8:	4b08      	ldr	r3, [pc, #32]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  4025ba:	601a      	str	r2, [r3, #0]
  4025bc:	e7dc      	b.n	402578 <SystemCoreClockUpdate+0x90>
  4025be:	4a0b      	ldr	r2, [pc, #44]	; (4025ec <SystemCoreClockUpdate+0x104>)
  4025c0:	4b06      	ldr	r3, [pc, #24]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  4025c2:	601a      	str	r2, [r3, #0]
  4025c4:	e7d8      	b.n	402578 <SystemCoreClockUpdate+0x90>
  4025c6:	4a05      	ldr	r2, [pc, #20]	; (4025dc <SystemCoreClockUpdate+0xf4>)
  4025c8:	6813      	ldr	r3, [r2, #0]
  4025ca:	4909      	ldr	r1, [pc, #36]	; (4025f0 <SystemCoreClockUpdate+0x108>)
  4025cc:	fba1 1303 	umull	r1, r3, r1, r3
  4025d0:	085b      	lsrs	r3, r3, #1
  4025d2:	6013      	str	r3, [r2, #0]
  4025d4:	4770      	bx	lr
  4025d6:	bf00      	nop
  4025d8:	400e0600 	.word	0x400e0600
  4025dc:	20400028 	.word	0x20400028
  4025e0:	400e1810 	.word	0x400e1810
  4025e4:	00b71b00 	.word	0x00b71b00
  4025e8:	003d0900 	.word	0x003d0900
  4025ec:	007a1200 	.word	0x007a1200
  4025f0:	aaaaaaab 	.word	0xaaaaaaab

004025f4 <system_init_flash>:
  4025f4:	4b16      	ldr	r3, [pc, #88]	; (402650 <system_init_flash+0x5c>)
  4025f6:	4298      	cmp	r0, r3
  4025f8:	d913      	bls.n	402622 <system_init_flash+0x2e>
  4025fa:	4b16      	ldr	r3, [pc, #88]	; (402654 <system_init_flash+0x60>)
  4025fc:	4298      	cmp	r0, r3
  4025fe:	d915      	bls.n	40262c <system_init_flash+0x38>
  402600:	4b15      	ldr	r3, [pc, #84]	; (402658 <system_init_flash+0x64>)
  402602:	4298      	cmp	r0, r3
  402604:	d916      	bls.n	402634 <system_init_flash+0x40>
  402606:	4b15      	ldr	r3, [pc, #84]	; (40265c <system_init_flash+0x68>)
  402608:	4298      	cmp	r0, r3
  40260a:	d917      	bls.n	40263c <system_init_flash+0x48>
  40260c:	4b14      	ldr	r3, [pc, #80]	; (402660 <system_init_flash+0x6c>)
  40260e:	4298      	cmp	r0, r3
  402610:	d918      	bls.n	402644 <system_init_flash+0x50>
  402612:	4b14      	ldr	r3, [pc, #80]	; (402664 <system_init_flash+0x70>)
  402614:	4298      	cmp	r0, r3
  402616:	bf94      	ite	ls
  402618:	4a13      	ldrls	r2, [pc, #76]	; (402668 <system_init_flash+0x74>)
  40261a:	4a14      	ldrhi	r2, [pc, #80]	; (40266c <system_init_flash+0x78>)
  40261c:	4b14      	ldr	r3, [pc, #80]	; (402670 <system_init_flash+0x7c>)
  40261e:	601a      	str	r2, [r3, #0]
  402620:	4770      	bx	lr
  402622:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402626:	4b12      	ldr	r3, [pc, #72]	; (402670 <system_init_flash+0x7c>)
  402628:	601a      	str	r2, [r3, #0]
  40262a:	4770      	bx	lr
  40262c:	4a11      	ldr	r2, [pc, #68]	; (402674 <system_init_flash+0x80>)
  40262e:	4b10      	ldr	r3, [pc, #64]	; (402670 <system_init_flash+0x7c>)
  402630:	601a      	str	r2, [r3, #0]
  402632:	4770      	bx	lr
  402634:	4a10      	ldr	r2, [pc, #64]	; (402678 <system_init_flash+0x84>)
  402636:	4b0e      	ldr	r3, [pc, #56]	; (402670 <system_init_flash+0x7c>)
  402638:	601a      	str	r2, [r3, #0]
  40263a:	4770      	bx	lr
  40263c:	4a0f      	ldr	r2, [pc, #60]	; (40267c <system_init_flash+0x88>)
  40263e:	4b0c      	ldr	r3, [pc, #48]	; (402670 <system_init_flash+0x7c>)
  402640:	601a      	str	r2, [r3, #0]
  402642:	4770      	bx	lr
  402644:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402648:	4b09      	ldr	r3, [pc, #36]	; (402670 <system_init_flash+0x7c>)
  40264a:	601a      	str	r2, [r3, #0]
  40264c:	4770      	bx	lr
  40264e:	bf00      	nop
  402650:	015ef3bf 	.word	0x015ef3bf
  402654:	02bde77f 	.word	0x02bde77f
  402658:	041cdb3f 	.word	0x041cdb3f
  40265c:	057bceff 	.word	0x057bceff
  402660:	06dac2bf 	.word	0x06dac2bf
  402664:	0839b67f 	.word	0x0839b67f
  402668:	04000500 	.word	0x04000500
  40266c:	04000600 	.word	0x04000600
  402670:	400e0c00 	.word	0x400e0c00
  402674:	04000100 	.word	0x04000100
  402678:	04000200 	.word	0x04000200
  40267c:	04000300 	.word	0x04000300

00402680 <_sbrk>:
  402680:	4b0a      	ldr	r3, [pc, #40]	; (4026ac <_sbrk+0x2c>)
  402682:	681b      	ldr	r3, [r3, #0]
  402684:	b153      	cbz	r3, 40269c <_sbrk+0x1c>
  402686:	4b09      	ldr	r3, [pc, #36]	; (4026ac <_sbrk+0x2c>)
  402688:	681b      	ldr	r3, [r3, #0]
  40268a:	181a      	adds	r2, r3, r0
  40268c:	4908      	ldr	r1, [pc, #32]	; (4026b0 <_sbrk+0x30>)
  40268e:	4291      	cmp	r1, r2
  402690:	db08      	blt.n	4026a4 <_sbrk+0x24>
  402692:	4610      	mov	r0, r2
  402694:	4a05      	ldr	r2, [pc, #20]	; (4026ac <_sbrk+0x2c>)
  402696:	6010      	str	r0, [r2, #0]
  402698:	4618      	mov	r0, r3
  40269a:	4770      	bx	lr
  40269c:	4a05      	ldr	r2, [pc, #20]	; (4026b4 <_sbrk+0x34>)
  40269e:	4b03      	ldr	r3, [pc, #12]	; (4026ac <_sbrk+0x2c>)
  4026a0:	601a      	str	r2, [r3, #0]
  4026a2:	e7f0      	b.n	402686 <_sbrk+0x6>
  4026a4:	f04f 30ff 	mov.w	r0, #4294967295
  4026a8:	4770      	bx	lr
  4026aa:	bf00      	nop
  4026ac:	204042d0 	.word	0x204042d0
  4026b0:	2045fffc 	.word	0x2045fffc
  4026b4:	20406e50 	.word	0x20406e50

004026b8 <_close>:
  4026b8:	f04f 30ff 	mov.w	r0, #4294967295
  4026bc:	4770      	bx	lr

004026be <_fstat>:
  4026be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4026c2:	604b      	str	r3, [r1, #4]
  4026c4:	2000      	movs	r0, #0
  4026c6:	4770      	bx	lr

004026c8 <_isatty>:
  4026c8:	2001      	movs	r0, #1
  4026ca:	4770      	bx	lr

004026cc <_lseek>:
  4026cc:	2000      	movs	r0, #0
  4026ce:	4770      	bx	lr

004026d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026d2:	b083      	sub	sp, #12
  4026d4:	4605      	mov	r5, r0
  4026d6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4026d8:	2300      	movs	r3, #0
  4026da:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4026dc:	4b2a      	ldr	r3, [pc, #168]	; (402788 <usart_serial_getchar+0xb8>)
  4026de:	4298      	cmp	r0, r3
  4026e0:	d013      	beq.n	40270a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4026e2:	4b2a      	ldr	r3, [pc, #168]	; (40278c <usart_serial_getchar+0xbc>)
  4026e4:	4298      	cmp	r0, r3
  4026e6:	d018      	beq.n	40271a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4026e8:	4b29      	ldr	r3, [pc, #164]	; (402790 <usart_serial_getchar+0xc0>)
  4026ea:	4298      	cmp	r0, r3
  4026ec:	d01d      	beq.n	40272a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4026ee:	4b29      	ldr	r3, [pc, #164]	; (402794 <usart_serial_getchar+0xc4>)
  4026f0:	429d      	cmp	r5, r3
  4026f2:	d022      	beq.n	40273a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4026f4:	4b28      	ldr	r3, [pc, #160]	; (402798 <usart_serial_getchar+0xc8>)
  4026f6:	429d      	cmp	r5, r3
  4026f8:	d027      	beq.n	40274a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4026fa:	4b28      	ldr	r3, [pc, #160]	; (40279c <usart_serial_getchar+0xcc>)
  4026fc:	429d      	cmp	r5, r3
  4026fe:	d02e      	beq.n	40275e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402700:	4b27      	ldr	r3, [pc, #156]	; (4027a0 <usart_serial_getchar+0xd0>)
  402702:	429d      	cmp	r5, r3
  402704:	d035      	beq.n	402772 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402706:	b003      	add	sp, #12
  402708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40270a:	461f      	mov	r7, r3
  40270c:	4e25      	ldr	r6, [pc, #148]	; (4027a4 <usart_serial_getchar+0xd4>)
  40270e:	4621      	mov	r1, r4
  402710:	4638      	mov	r0, r7
  402712:	47b0      	blx	r6
  402714:	2800      	cmp	r0, #0
  402716:	d1fa      	bne.n	40270e <usart_serial_getchar+0x3e>
  402718:	e7e9      	b.n	4026ee <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40271a:	461f      	mov	r7, r3
  40271c:	4e21      	ldr	r6, [pc, #132]	; (4027a4 <usart_serial_getchar+0xd4>)
  40271e:	4621      	mov	r1, r4
  402720:	4638      	mov	r0, r7
  402722:	47b0      	blx	r6
  402724:	2800      	cmp	r0, #0
  402726:	d1fa      	bne.n	40271e <usart_serial_getchar+0x4e>
  402728:	e7e4      	b.n	4026f4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40272a:	461f      	mov	r7, r3
  40272c:	4e1d      	ldr	r6, [pc, #116]	; (4027a4 <usart_serial_getchar+0xd4>)
  40272e:	4621      	mov	r1, r4
  402730:	4638      	mov	r0, r7
  402732:	47b0      	blx	r6
  402734:	2800      	cmp	r0, #0
  402736:	d1fa      	bne.n	40272e <usart_serial_getchar+0x5e>
  402738:	e7df      	b.n	4026fa <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40273a:	461f      	mov	r7, r3
  40273c:	4e19      	ldr	r6, [pc, #100]	; (4027a4 <usart_serial_getchar+0xd4>)
  40273e:	4621      	mov	r1, r4
  402740:	4638      	mov	r0, r7
  402742:	47b0      	blx	r6
  402744:	2800      	cmp	r0, #0
  402746:	d1fa      	bne.n	40273e <usart_serial_getchar+0x6e>
  402748:	e7da      	b.n	402700 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40274a:	461e      	mov	r6, r3
  40274c:	4d16      	ldr	r5, [pc, #88]	; (4027a8 <usart_serial_getchar+0xd8>)
  40274e:	a901      	add	r1, sp, #4
  402750:	4630      	mov	r0, r6
  402752:	47a8      	blx	r5
  402754:	2800      	cmp	r0, #0
  402756:	d1fa      	bne.n	40274e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402758:	9b01      	ldr	r3, [sp, #4]
  40275a:	7023      	strb	r3, [r4, #0]
  40275c:	e7d3      	b.n	402706 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40275e:	461e      	mov	r6, r3
  402760:	4d11      	ldr	r5, [pc, #68]	; (4027a8 <usart_serial_getchar+0xd8>)
  402762:	a901      	add	r1, sp, #4
  402764:	4630      	mov	r0, r6
  402766:	47a8      	blx	r5
  402768:	2800      	cmp	r0, #0
  40276a:	d1fa      	bne.n	402762 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40276c:	9b01      	ldr	r3, [sp, #4]
  40276e:	7023      	strb	r3, [r4, #0]
  402770:	e7c9      	b.n	402706 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402772:	461e      	mov	r6, r3
  402774:	4d0c      	ldr	r5, [pc, #48]	; (4027a8 <usart_serial_getchar+0xd8>)
  402776:	a901      	add	r1, sp, #4
  402778:	4630      	mov	r0, r6
  40277a:	47a8      	blx	r5
  40277c:	2800      	cmp	r0, #0
  40277e:	d1fa      	bne.n	402776 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402780:	9b01      	ldr	r3, [sp, #4]
  402782:	7023      	strb	r3, [r4, #0]
}
  402784:	e7bf      	b.n	402706 <usart_serial_getchar+0x36>
  402786:	bf00      	nop
  402788:	400e0800 	.word	0x400e0800
  40278c:	400e0a00 	.word	0x400e0a00
  402790:	400e1a00 	.word	0x400e1a00
  402794:	400e1c00 	.word	0x400e1c00
  402798:	40024000 	.word	0x40024000
  40279c:	40028000 	.word	0x40028000
  4027a0:	4002c000 	.word	0x4002c000
  4027a4:	00401e4f 	.word	0x00401e4f
  4027a8:	00401dd3 	.word	0x00401dd3

004027ac <usart_serial_putchar>:
{
  4027ac:	b570      	push	{r4, r5, r6, lr}
  4027ae:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4027b0:	4b2a      	ldr	r3, [pc, #168]	; (40285c <usart_serial_putchar+0xb0>)
  4027b2:	4298      	cmp	r0, r3
  4027b4:	d013      	beq.n	4027de <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4027b6:	4b2a      	ldr	r3, [pc, #168]	; (402860 <usart_serial_putchar+0xb4>)
  4027b8:	4298      	cmp	r0, r3
  4027ba:	d019      	beq.n	4027f0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4027bc:	4b29      	ldr	r3, [pc, #164]	; (402864 <usart_serial_putchar+0xb8>)
  4027be:	4298      	cmp	r0, r3
  4027c0:	d01f      	beq.n	402802 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4027c2:	4b29      	ldr	r3, [pc, #164]	; (402868 <usart_serial_putchar+0xbc>)
  4027c4:	4298      	cmp	r0, r3
  4027c6:	d025      	beq.n	402814 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4027c8:	4b28      	ldr	r3, [pc, #160]	; (40286c <usart_serial_putchar+0xc0>)
  4027ca:	4298      	cmp	r0, r3
  4027cc:	d02b      	beq.n	402826 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4027ce:	4b28      	ldr	r3, [pc, #160]	; (402870 <usart_serial_putchar+0xc4>)
  4027d0:	4298      	cmp	r0, r3
  4027d2:	d031      	beq.n	402838 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4027d4:	4b27      	ldr	r3, [pc, #156]	; (402874 <usart_serial_putchar+0xc8>)
  4027d6:	4298      	cmp	r0, r3
  4027d8:	d037      	beq.n	40284a <usart_serial_putchar+0x9e>
	return 0;
  4027da:	2000      	movs	r0, #0
}
  4027dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4027de:	461e      	mov	r6, r3
  4027e0:	4d25      	ldr	r5, [pc, #148]	; (402878 <usart_serial_putchar+0xcc>)
  4027e2:	4621      	mov	r1, r4
  4027e4:	4630      	mov	r0, r6
  4027e6:	47a8      	blx	r5
  4027e8:	2800      	cmp	r0, #0
  4027ea:	d1fa      	bne.n	4027e2 <usart_serial_putchar+0x36>
		return 1;
  4027ec:	2001      	movs	r0, #1
  4027ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4027f0:	461e      	mov	r6, r3
  4027f2:	4d21      	ldr	r5, [pc, #132]	; (402878 <usart_serial_putchar+0xcc>)
  4027f4:	4621      	mov	r1, r4
  4027f6:	4630      	mov	r0, r6
  4027f8:	47a8      	blx	r5
  4027fa:	2800      	cmp	r0, #0
  4027fc:	d1fa      	bne.n	4027f4 <usart_serial_putchar+0x48>
		return 1;
  4027fe:	2001      	movs	r0, #1
  402800:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402802:	461e      	mov	r6, r3
  402804:	4d1c      	ldr	r5, [pc, #112]	; (402878 <usart_serial_putchar+0xcc>)
  402806:	4621      	mov	r1, r4
  402808:	4630      	mov	r0, r6
  40280a:	47a8      	blx	r5
  40280c:	2800      	cmp	r0, #0
  40280e:	d1fa      	bne.n	402806 <usart_serial_putchar+0x5a>
		return 1;
  402810:	2001      	movs	r0, #1
  402812:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402814:	461e      	mov	r6, r3
  402816:	4d18      	ldr	r5, [pc, #96]	; (402878 <usart_serial_putchar+0xcc>)
  402818:	4621      	mov	r1, r4
  40281a:	4630      	mov	r0, r6
  40281c:	47a8      	blx	r5
  40281e:	2800      	cmp	r0, #0
  402820:	d1fa      	bne.n	402818 <usart_serial_putchar+0x6c>
		return 1;
  402822:	2001      	movs	r0, #1
  402824:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402826:	461e      	mov	r6, r3
  402828:	4d14      	ldr	r5, [pc, #80]	; (40287c <usart_serial_putchar+0xd0>)
  40282a:	4621      	mov	r1, r4
  40282c:	4630      	mov	r0, r6
  40282e:	47a8      	blx	r5
  402830:	2800      	cmp	r0, #0
  402832:	d1fa      	bne.n	40282a <usart_serial_putchar+0x7e>
		return 1;
  402834:	2001      	movs	r0, #1
  402836:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402838:	461e      	mov	r6, r3
  40283a:	4d10      	ldr	r5, [pc, #64]	; (40287c <usart_serial_putchar+0xd0>)
  40283c:	4621      	mov	r1, r4
  40283e:	4630      	mov	r0, r6
  402840:	47a8      	blx	r5
  402842:	2800      	cmp	r0, #0
  402844:	d1fa      	bne.n	40283c <usart_serial_putchar+0x90>
		return 1;
  402846:	2001      	movs	r0, #1
  402848:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40284a:	461e      	mov	r6, r3
  40284c:	4d0b      	ldr	r5, [pc, #44]	; (40287c <usart_serial_putchar+0xd0>)
  40284e:	4621      	mov	r1, r4
  402850:	4630      	mov	r0, r6
  402852:	47a8      	blx	r5
  402854:	2800      	cmp	r0, #0
  402856:	d1fa      	bne.n	40284e <usart_serial_putchar+0xa2>
		return 1;
  402858:	2001      	movs	r0, #1
  40285a:	bd70      	pop	{r4, r5, r6, pc}
  40285c:	400e0800 	.word	0x400e0800
  402860:	400e0a00 	.word	0x400e0a00
  402864:	400e1a00 	.word	0x400e1a00
  402868:	400e1c00 	.word	0x400e1c00
  40286c:	40024000 	.word	0x40024000
  402870:	40028000 	.word	0x40028000
  402874:	4002c000 	.word	0x4002c000
  402878:	00401e3d 	.word	0x00401e3d
  40287c:	00401dbd 	.word	0x00401dbd

00402880 <main>:
}
#endif


int main (void)
{
  402880:	b570      	push	{r4, r5, r6, lr}
  402882:	b08a      	sub	sp, #40	; 0x28
	/************************************************************************/
	/* Initialization of the masterNode                                                  */
	/************************************************************************/
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  402884:	4b34      	ldr	r3, [pc, #208]	; (402958 <main+0xd8>)
  402886:	4798      	blx	r3
	board_init();
  402888:	4b34      	ldr	r3, [pc, #208]	; (40295c <main+0xdc>)
  40288a:	4798      	blx	r3
  40288c:	200e      	movs	r0, #14
  40288e:	4e34      	ldr	r6, [pc, #208]	; (402960 <main+0xe0>)
  402890:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402892:	4d34      	ldr	r5, [pc, #208]	; (402964 <main+0xe4>)
  402894:	4b34      	ldr	r3, [pc, #208]	; (402968 <main+0xe8>)
  402896:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402898:	4a34      	ldr	r2, [pc, #208]	; (40296c <main+0xec>)
  40289a:	4b35      	ldr	r3, [pc, #212]	; (402970 <main+0xf0>)
  40289c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40289e:	4a35      	ldr	r2, [pc, #212]	; (402974 <main+0xf4>)
  4028a0:	4b35      	ldr	r3, [pc, #212]	; (402978 <main+0xf8>)
  4028a2:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4028a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4028a8:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4028aa:	23c0      	movs	r3, #192	; 0xc0
  4028ac:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4028ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4028b2:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4028b4:	2400      	movs	r4, #0
  4028b6:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4028b8:	9408      	str	r4, [sp, #32]
  4028ba:	200e      	movs	r0, #14
  4028bc:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4028be:	4a2f      	ldr	r2, [pc, #188]	; (40297c <main+0xfc>)
  4028c0:	a904      	add	r1, sp, #16
  4028c2:	4628      	mov	r0, r5
  4028c4:	4b2e      	ldr	r3, [pc, #184]	; (402980 <main+0x100>)
  4028c6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4028c8:	4628      	mov	r0, r5
  4028ca:	4b2e      	ldr	r3, [pc, #184]	; (402984 <main+0x104>)
  4028cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4028ce:	4628      	mov	r0, r5
  4028d0:	4b2d      	ldr	r3, [pc, #180]	; (402988 <main+0x108>)
  4028d2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4028d4:	4e2d      	ldr	r6, [pc, #180]	; (40298c <main+0x10c>)
  4028d6:	6833      	ldr	r3, [r6, #0]
  4028d8:	4621      	mov	r1, r4
  4028da:	6898      	ldr	r0, [r3, #8]
  4028dc:	4d2c      	ldr	r5, [pc, #176]	; (402990 <main+0x110>)
  4028de:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4028e0:	6833      	ldr	r3, [r6, #0]
  4028e2:	4621      	mov	r1, r4
  4028e4:	6858      	ldr	r0, [r3, #4]
  4028e6:	47a8      	blx	r5
	
#ifdef _DEBUG
	/* Initialize the console UART. */
	configure_console();

	puts(STRING_HEADER);
  4028e8:	482a      	ldr	r0, [pc, #168]	; (402994 <main+0x114>)
  4028ea:	4b2b      	ldr	r3, [pc, #172]	; (402998 <main+0x118>)
  4028ec:	4798      	blx	r3
#endif	
	/*Initialize SPI module*/
	spi_master_initialize();
  4028ee:	4b2b      	ldr	r3, [pc, #172]	; (40299c <main+0x11c>)
  4028f0:	4798      	blx	r3
	
	/*Initialize nRF24 module as TX*/
	nRF24_begin();
  4028f2:	4b2b      	ldr	r3, [pc, #172]	; (4029a0 <main+0x120>)
  4028f4:	4798      	blx	r3
	nRF24_setPALevel(RF_PA_MIN);
  4028f6:	4620      	mov	r0, r4
  4028f8:	4b2a      	ldr	r3, [pc, #168]	; (4029a4 <main+0x124>)
  4028fa:	4798      	blx	r3
	nRF24_stopListening();
  4028fc:	4b2a      	ldr	r3, [pc, #168]	; (4029a8 <main+0x128>)
  4028fe:	4798      	blx	r3
	
	/*Initialize ETH module and set link*/
	if (!init_gmac_ethernet())
  402900:	4b2a      	ldr	r3, [pc, #168]	; (4029ac <main+0x12c>)
  402902:	4798      	blx	r3
  402904:	b918      	cbnz	r0, 40290e <main+0x8e>
			// Handle input frame
			//gmac_process_eth_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
			}
	}//end loop
}//end main
  402906:	f04f 30ff 	mov.w	r0, #4294967295
  40290a:	b00a      	add	sp, #40	; 0x28
  40290c:	bd70      	pop	{r4, r5, r6, pc}
	gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
  40290e:	4828      	ldr	r0, [pc, #160]	; (4029b0 <main+0x130>)
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  402910:	7883      	ldrb	r3, [r0, #2]
  402912:	7842      	ldrb	r2, [r0, #1]
  402914:	7801      	ldrb	r1, [r0, #0]
  402916:	7944      	ldrb	r4, [r0, #5]
  402918:	9402      	str	r4, [sp, #8]
  40291a:	7904      	ldrb	r4, [r0, #4]
  40291c:	9401      	str	r4, [sp, #4]
  40291e:	78c0      	ldrb	r0, [r0, #3]
  402920:	9000      	str	r0, [sp, #0]
  402922:	4824      	ldr	r0, [pc, #144]	; (4029b4 <main+0x134>)
  402924:	4c24      	ldr	r4, [pc, #144]	; (4029b8 <main+0x138>)
  402926:	47a0      	blx	r4
	gs_uc_ip_address[2], gs_uc_ip_address[3]);
  402928:	4824      	ldr	r0, [pc, #144]	; (4029bc <main+0x13c>)
	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
  40292a:	7883      	ldrb	r3, [r0, #2]
  40292c:	7842      	ldrb	r2, [r0, #1]
  40292e:	7801      	ldrb	r1, [r0, #0]
  402930:	78c0      	ldrb	r0, [r0, #3]
  402932:	9000      	str	r0, [sp, #0]
  402934:	4822      	ldr	r0, [pc, #136]	; (4029c0 <main+0x140>)
  402936:	47a0      	blx	r4
	printDetails();
  402938:	4b22      	ldr	r3, [pc, #136]	; (4029c4 <main+0x144>)
  40293a:	4798      	blx	r3
		if (GMAC_OK != read_dev_gmac()) {
  40293c:	4c22      	ldr	r4, [pc, #136]	; (4029c8 <main+0x148>)
		if (ul_frm_size > 0) {
  40293e:	4d23      	ldr	r5, [pc, #140]	; (4029cc <main+0x14c>)
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
  402940:	4e23      	ldr	r6, [pc, #140]	; (4029d0 <main+0x150>)
		if (GMAC_OK != read_dev_gmac()) {
  402942:	47a0      	blx	r4
  402944:	2800      	cmp	r0, #0
  402946:	d1fc      	bne.n	402942 <main+0xc2>
		if (ul_frm_size > 0) {
  402948:	6829      	ldr	r1, [r5, #0]
  40294a:	2900      	cmp	r1, #0
  40294c:	d0f9      	beq.n	402942 <main+0xc2>
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
  40294e:	4630      	mov	r0, r6
  402950:	4b20      	ldr	r3, [pc, #128]	; (4029d4 <main+0x154>)
  402952:	4798      	blx	r3
  402954:	e7f5      	b.n	402942 <main+0xc2>
  402956:	bf00      	nop
  402958:	00401e65 	.word	0x00401e65
  40295c:	00401ed5 	.word	0x00401ed5
  402960:	004023fd 	.word	0x004023fd
  402964:	40028000 	.word	0x40028000
  402968:	20404c24 	.word	0x20404c24
  40296c:	004027ad 	.word	0x004027ad
  402970:	20404c20 	.word	0x20404c20
  402974:	004026d1 	.word	0x004026d1
  402978:	20404308 	.word	0x20404308
  40297c:	08f0d180 	.word	0x08f0d180
  402980:	00401d5d 	.word	0x00401d5d
  402984:	00401db1 	.word	0x00401db1
  402988:	00401db7 	.word	0x00401db7
  40298c:	2040002c 	.word	0x2040002c
  402990:	00402fdd 	.word	0x00402fdd
  402994:	00405e54 	.word	0x00405e54
  402998:	00402fcd 	.word	0x00402fcd
  40299c:	00401815 	.word	0x00401815
  4029a0:	0040177d 	.word	0x0040177d
  4029a4:	00401499 	.word	0x00401499
  4029a8:	004016c9 	.word	0x004016c9
  4029ac:	00400e81 	.word	0x00400e81
  4029b0:	20400018 	.word	0x20400018
  4029b4:	00405bc8 	.word	0x00405bc8
  4029b8:	00402d39 	.word	0x00402d39
  4029bc:	20400014 	.word	0x20400014
  4029c0:	00405be4 	.word	0x00405be4
  4029c4:	004014dd 	.word	0x004014dd
  4029c8:	00400cbd 	.word	0x00400cbd
  4029cc:	2040490c 	.word	0x2040490c
  4029d0:	2040430c 	.word	0x2040430c
  4029d4:	004011fd 	.word	0x004011fd

004029d8 <__aeabi_uldivmod>:
  4029d8:	b953      	cbnz	r3, 4029f0 <__aeabi_uldivmod+0x18>
  4029da:	b94a      	cbnz	r2, 4029f0 <__aeabi_uldivmod+0x18>
  4029dc:	2900      	cmp	r1, #0
  4029de:	bf08      	it	eq
  4029e0:	2800      	cmpeq	r0, #0
  4029e2:	bf1c      	itt	ne
  4029e4:	f04f 31ff 	movne.w	r1, #4294967295
  4029e8:	f04f 30ff 	movne.w	r0, #4294967295
  4029ec:	f000 b97a 	b.w	402ce4 <__aeabi_idiv0>
  4029f0:	f1ad 0c08 	sub.w	ip, sp, #8
  4029f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4029f8:	f000 f806 	bl	402a08 <__udivmoddi4>
  4029fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  402a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402a04:	b004      	add	sp, #16
  402a06:	4770      	bx	lr

00402a08 <__udivmoddi4>:
  402a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a0c:	468c      	mov	ip, r1
  402a0e:	460d      	mov	r5, r1
  402a10:	4604      	mov	r4, r0
  402a12:	9e08      	ldr	r6, [sp, #32]
  402a14:	2b00      	cmp	r3, #0
  402a16:	d151      	bne.n	402abc <__udivmoddi4+0xb4>
  402a18:	428a      	cmp	r2, r1
  402a1a:	4617      	mov	r7, r2
  402a1c:	d96d      	bls.n	402afa <__udivmoddi4+0xf2>
  402a1e:	fab2 fe82 	clz	lr, r2
  402a22:	f1be 0f00 	cmp.w	lr, #0
  402a26:	d00b      	beq.n	402a40 <__udivmoddi4+0x38>
  402a28:	f1ce 0c20 	rsb	ip, lr, #32
  402a2c:	fa01 f50e 	lsl.w	r5, r1, lr
  402a30:	fa20 fc0c 	lsr.w	ip, r0, ip
  402a34:	fa02 f70e 	lsl.w	r7, r2, lr
  402a38:	ea4c 0c05 	orr.w	ip, ip, r5
  402a3c:	fa00 f40e 	lsl.w	r4, r0, lr
  402a40:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402a44:	0c25      	lsrs	r5, r4, #16
  402a46:	fbbc f8fa 	udiv	r8, ip, sl
  402a4a:	fa1f f987 	uxth.w	r9, r7
  402a4e:	fb0a cc18 	mls	ip, sl, r8, ip
  402a52:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402a56:	fb08 f309 	mul.w	r3, r8, r9
  402a5a:	42ab      	cmp	r3, r5
  402a5c:	d90a      	bls.n	402a74 <__udivmoddi4+0x6c>
  402a5e:	19ed      	adds	r5, r5, r7
  402a60:	f108 32ff 	add.w	r2, r8, #4294967295
  402a64:	f080 8123 	bcs.w	402cae <__udivmoddi4+0x2a6>
  402a68:	42ab      	cmp	r3, r5
  402a6a:	f240 8120 	bls.w	402cae <__udivmoddi4+0x2a6>
  402a6e:	f1a8 0802 	sub.w	r8, r8, #2
  402a72:	443d      	add	r5, r7
  402a74:	1aed      	subs	r5, r5, r3
  402a76:	b2a4      	uxth	r4, r4
  402a78:	fbb5 f0fa 	udiv	r0, r5, sl
  402a7c:	fb0a 5510 	mls	r5, sl, r0, r5
  402a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402a84:	fb00 f909 	mul.w	r9, r0, r9
  402a88:	45a1      	cmp	r9, r4
  402a8a:	d909      	bls.n	402aa0 <__udivmoddi4+0x98>
  402a8c:	19e4      	adds	r4, r4, r7
  402a8e:	f100 33ff 	add.w	r3, r0, #4294967295
  402a92:	f080 810a 	bcs.w	402caa <__udivmoddi4+0x2a2>
  402a96:	45a1      	cmp	r9, r4
  402a98:	f240 8107 	bls.w	402caa <__udivmoddi4+0x2a2>
  402a9c:	3802      	subs	r0, #2
  402a9e:	443c      	add	r4, r7
  402aa0:	eba4 0409 	sub.w	r4, r4, r9
  402aa4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402aa8:	2100      	movs	r1, #0
  402aaa:	2e00      	cmp	r6, #0
  402aac:	d061      	beq.n	402b72 <__udivmoddi4+0x16a>
  402aae:	fa24 f40e 	lsr.w	r4, r4, lr
  402ab2:	2300      	movs	r3, #0
  402ab4:	6034      	str	r4, [r6, #0]
  402ab6:	6073      	str	r3, [r6, #4]
  402ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402abc:	428b      	cmp	r3, r1
  402abe:	d907      	bls.n	402ad0 <__udivmoddi4+0xc8>
  402ac0:	2e00      	cmp	r6, #0
  402ac2:	d054      	beq.n	402b6e <__udivmoddi4+0x166>
  402ac4:	2100      	movs	r1, #0
  402ac6:	e886 0021 	stmia.w	r6, {r0, r5}
  402aca:	4608      	mov	r0, r1
  402acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ad0:	fab3 f183 	clz	r1, r3
  402ad4:	2900      	cmp	r1, #0
  402ad6:	f040 808e 	bne.w	402bf6 <__udivmoddi4+0x1ee>
  402ada:	42ab      	cmp	r3, r5
  402adc:	d302      	bcc.n	402ae4 <__udivmoddi4+0xdc>
  402ade:	4282      	cmp	r2, r0
  402ae0:	f200 80fa 	bhi.w	402cd8 <__udivmoddi4+0x2d0>
  402ae4:	1a84      	subs	r4, r0, r2
  402ae6:	eb65 0503 	sbc.w	r5, r5, r3
  402aea:	2001      	movs	r0, #1
  402aec:	46ac      	mov	ip, r5
  402aee:	2e00      	cmp	r6, #0
  402af0:	d03f      	beq.n	402b72 <__udivmoddi4+0x16a>
  402af2:	e886 1010 	stmia.w	r6, {r4, ip}
  402af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402afa:	b912      	cbnz	r2, 402b02 <__udivmoddi4+0xfa>
  402afc:	2701      	movs	r7, #1
  402afe:	fbb7 f7f2 	udiv	r7, r7, r2
  402b02:	fab7 fe87 	clz	lr, r7
  402b06:	f1be 0f00 	cmp.w	lr, #0
  402b0a:	d134      	bne.n	402b76 <__udivmoddi4+0x16e>
  402b0c:	1beb      	subs	r3, r5, r7
  402b0e:	0c3a      	lsrs	r2, r7, #16
  402b10:	fa1f fc87 	uxth.w	ip, r7
  402b14:	2101      	movs	r1, #1
  402b16:	fbb3 f8f2 	udiv	r8, r3, r2
  402b1a:	0c25      	lsrs	r5, r4, #16
  402b1c:	fb02 3318 	mls	r3, r2, r8, r3
  402b20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402b24:	fb0c f308 	mul.w	r3, ip, r8
  402b28:	42ab      	cmp	r3, r5
  402b2a:	d907      	bls.n	402b3c <__udivmoddi4+0x134>
  402b2c:	19ed      	adds	r5, r5, r7
  402b2e:	f108 30ff 	add.w	r0, r8, #4294967295
  402b32:	d202      	bcs.n	402b3a <__udivmoddi4+0x132>
  402b34:	42ab      	cmp	r3, r5
  402b36:	f200 80d1 	bhi.w	402cdc <__udivmoddi4+0x2d4>
  402b3a:	4680      	mov	r8, r0
  402b3c:	1aed      	subs	r5, r5, r3
  402b3e:	b2a3      	uxth	r3, r4
  402b40:	fbb5 f0f2 	udiv	r0, r5, r2
  402b44:	fb02 5510 	mls	r5, r2, r0, r5
  402b48:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402b4c:	fb0c fc00 	mul.w	ip, ip, r0
  402b50:	45a4      	cmp	ip, r4
  402b52:	d907      	bls.n	402b64 <__udivmoddi4+0x15c>
  402b54:	19e4      	adds	r4, r4, r7
  402b56:	f100 33ff 	add.w	r3, r0, #4294967295
  402b5a:	d202      	bcs.n	402b62 <__udivmoddi4+0x15a>
  402b5c:	45a4      	cmp	ip, r4
  402b5e:	f200 80b8 	bhi.w	402cd2 <__udivmoddi4+0x2ca>
  402b62:	4618      	mov	r0, r3
  402b64:	eba4 040c 	sub.w	r4, r4, ip
  402b68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402b6c:	e79d      	b.n	402aaa <__udivmoddi4+0xa2>
  402b6e:	4631      	mov	r1, r6
  402b70:	4630      	mov	r0, r6
  402b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b76:	f1ce 0420 	rsb	r4, lr, #32
  402b7a:	fa05 f30e 	lsl.w	r3, r5, lr
  402b7e:	fa07 f70e 	lsl.w	r7, r7, lr
  402b82:	fa20 f804 	lsr.w	r8, r0, r4
  402b86:	0c3a      	lsrs	r2, r7, #16
  402b88:	fa25 f404 	lsr.w	r4, r5, r4
  402b8c:	ea48 0803 	orr.w	r8, r8, r3
  402b90:	fbb4 f1f2 	udiv	r1, r4, r2
  402b94:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402b98:	fb02 4411 	mls	r4, r2, r1, r4
  402b9c:	fa1f fc87 	uxth.w	ip, r7
  402ba0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402ba4:	fb01 f30c 	mul.w	r3, r1, ip
  402ba8:	42ab      	cmp	r3, r5
  402baa:	fa00 f40e 	lsl.w	r4, r0, lr
  402bae:	d909      	bls.n	402bc4 <__udivmoddi4+0x1bc>
  402bb0:	19ed      	adds	r5, r5, r7
  402bb2:	f101 30ff 	add.w	r0, r1, #4294967295
  402bb6:	f080 808a 	bcs.w	402cce <__udivmoddi4+0x2c6>
  402bba:	42ab      	cmp	r3, r5
  402bbc:	f240 8087 	bls.w	402cce <__udivmoddi4+0x2c6>
  402bc0:	3902      	subs	r1, #2
  402bc2:	443d      	add	r5, r7
  402bc4:	1aeb      	subs	r3, r5, r3
  402bc6:	fa1f f588 	uxth.w	r5, r8
  402bca:	fbb3 f0f2 	udiv	r0, r3, r2
  402bce:	fb02 3310 	mls	r3, r2, r0, r3
  402bd2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402bd6:	fb00 f30c 	mul.w	r3, r0, ip
  402bda:	42ab      	cmp	r3, r5
  402bdc:	d907      	bls.n	402bee <__udivmoddi4+0x1e6>
  402bde:	19ed      	adds	r5, r5, r7
  402be0:	f100 38ff 	add.w	r8, r0, #4294967295
  402be4:	d26f      	bcs.n	402cc6 <__udivmoddi4+0x2be>
  402be6:	42ab      	cmp	r3, r5
  402be8:	d96d      	bls.n	402cc6 <__udivmoddi4+0x2be>
  402bea:	3802      	subs	r0, #2
  402bec:	443d      	add	r5, r7
  402bee:	1aeb      	subs	r3, r5, r3
  402bf0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402bf4:	e78f      	b.n	402b16 <__udivmoddi4+0x10e>
  402bf6:	f1c1 0720 	rsb	r7, r1, #32
  402bfa:	fa22 f807 	lsr.w	r8, r2, r7
  402bfe:	408b      	lsls	r3, r1
  402c00:	fa05 f401 	lsl.w	r4, r5, r1
  402c04:	ea48 0303 	orr.w	r3, r8, r3
  402c08:	fa20 fe07 	lsr.w	lr, r0, r7
  402c0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402c10:	40fd      	lsrs	r5, r7
  402c12:	ea4e 0e04 	orr.w	lr, lr, r4
  402c16:	fbb5 f9fc 	udiv	r9, r5, ip
  402c1a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402c1e:	fb0c 5519 	mls	r5, ip, r9, r5
  402c22:	fa1f f883 	uxth.w	r8, r3
  402c26:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402c2a:	fb09 f408 	mul.w	r4, r9, r8
  402c2e:	42ac      	cmp	r4, r5
  402c30:	fa02 f201 	lsl.w	r2, r2, r1
  402c34:	fa00 fa01 	lsl.w	sl, r0, r1
  402c38:	d908      	bls.n	402c4c <__udivmoddi4+0x244>
  402c3a:	18ed      	adds	r5, r5, r3
  402c3c:	f109 30ff 	add.w	r0, r9, #4294967295
  402c40:	d243      	bcs.n	402cca <__udivmoddi4+0x2c2>
  402c42:	42ac      	cmp	r4, r5
  402c44:	d941      	bls.n	402cca <__udivmoddi4+0x2c2>
  402c46:	f1a9 0902 	sub.w	r9, r9, #2
  402c4a:	441d      	add	r5, r3
  402c4c:	1b2d      	subs	r5, r5, r4
  402c4e:	fa1f fe8e 	uxth.w	lr, lr
  402c52:	fbb5 f0fc 	udiv	r0, r5, ip
  402c56:	fb0c 5510 	mls	r5, ip, r0, r5
  402c5a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402c5e:	fb00 f808 	mul.w	r8, r0, r8
  402c62:	45a0      	cmp	r8, r4
  402c64:	d907      	bls.n	402c76 <__udivmoddi4+0x26e>
  402c66:	18e4      	adds	r4, r4, r3
  402c68:	f100 35ff 	add.w	r5, r0, #4294967295
  402c6c:	d229      	bcs.n	402cc2 <__udivmoddi4+0x2ba>
  402c6e:	45a0      	cmp	r8, r4
  402c70:	d927      	bls.n	402cc2 <__udivmoddi4+0x2ba>
  402c72:	3802      	subs	r0, #2
  402c74:	441c      	add	r4, r3
  402c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402c7a:	eba4 0408 	sub.w	r4, r4, r8
  402c7e:	fba0 8902 	umull	r8, r9, r0, r2
  402c82:	454c      	cmp	r4, r9
  402c84:	46c6      	mov	lr, r8
  402c86:	464d      	mov	r5, r9
  402c88:	d315      	bcc.n	402cb6 <__udivmoddi4+0x2ae>
  402c8a:	d012      	beq.n	402cb2 <__udivmoddi4+0x2aa>
  402c8c:	b156      	cbz	r6, 402ca4 <__udivmoddi4+0x29c>
  402c8e:	ebba 030e 	subs.w	r3, sl, lr
  402c92:	eb64 0405 	sbc.w	r4, r4, r5
  402c96:	fa04 f707 	lsl.w	r7, r4, r7
  402c9a:	40cb      	lsrs	r3, r1
  402c9c:	431f      	orrs	r7, r3
  402c9e:	40cc      	lsrs	r4, r1
  402ca0:	6037      	str	r7, [r6, #0]
  402ca2:	6074      	str	r4, [r6, #4]
  402ca4:	2100      	movs	r1, #0
  402ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402caa:	4618      	mov	r0, r3
  402cac:	e6f8      	b.n	402aa0 <__udivmoddi4+0x98>
  402cae:	4690      	mov	r8, r2
  402cb0:	e6e0      	b.n	402a74 <__udivmoddi4+0x6c>
  402cb2:	45c2      	cmp	sl, r8
  402cb4:	d2ea      	bcs.n	402c8c <__udivmoddi4+0x284>
  402cb6:	ebb8 0e02 	subs.w	lr, r8, r2
  402cba:	eb69 0503 	sbc.w	r5, r9, r3
  402cbe:	3801      	subs	r0, #1
  402cc0:	e7e4      	b.n	402c8c <__udivmoddi4+0x284>
  402cc2:	4628      	mov	r0, r5
  402cc4:	e7d7      	b.n	402c76 <__udivmoddi4+0x26e>
  402cc6:	4640      	mov	r0, r8
  402cc8:	e791      	b.n	402bee <__udivmoddi4+0x1e6>
  402cca:	4681      	mov	r9, r0
  402ccc:	e7be      	b.n	402c4c <__udivmoddi4+0x244>
  402cce:	4601      	mov	r1, r0
  402cd0:	e778      	b.n	402bc4 <__udivmoddi4+0x1bc>
  402cd2:	3802      	subs	r0, #2
  402cd4:	443c      	add	r4, r7
  402cd6:	e745      	b.n	402b64 <__udivmoddi4+0x15c>
  402cd8:	4608      	mov	r0, r1
  402cda:	e708      	b.n	402aee <__udivmoddi4+0xe6>
  402cdc:	f1a8 0802 	sub.w	r8, r8, #2
  402ce0:	443d      	add	r5, r7
  402ce2:	e72b      	b.n	402b3c <__udivmoddi4+0x134>

00402ce4 <__aeabi_idiv0>:
  402ce4:	4770      	bx	lr
  402ce6:	bf00      	nop

00402ce8 <__libc_init_array>:
  402ce8:	b570      	push	{r4, r5, r6, lr}
  402cea:	4e0f      	ldr	r6, [pc, #60]	; (402d28 <__libc_init_array+0x40>)
  402cec:	4d0f      	ldr	r5, [pc, #60]	; (402d2c <__libc_init_array+0x44>)
  402cee:	1b76      	subs	r6, r6, r5
  402cf0:	10b6      	asrs	r6, r6, #2
  402cf2:	bf18      	it	ne
  402cf4:	2400      	movne	r4, #0
  402cf6:	d005      	beq.n	402d04 <__libc_init_array+0x1c>
  402cf8:	3401      	adds	r4, #1
  402cfa:	f855 3b04 	ldr.w	r3, [r5], #4
  402cfe:	4798      	blx	r3
  402d00:	42a6      	cmp	r6, r4
  402d02:	d1f9      	bne.n	402cf8 <__libc_init_array+0x10>
  402d04:	4e0a      	ldr	r6, [pc, #40]	; (402d30 <__libc_init_array+0x48>)
  402d06:	4d0b      	ldr	r5, [pc, #44]	; (402d34 <__libc_init_array+0x4c>)
  402d08:	1b76      	subs	r6, r6, r5
  402d0a:	f003 f97f 	bl	40600c <_init>
  402d0e:	10b6      	asrs	r6, r6, #2
  402d10:	bf18      	it	ne
  402d12:	2400      	movne	r4, #0
  402d14:	d006      	beq.n	402d24 <__libc_init_array+0x3c>
  402d16:	3401      	adds	r4, #1
  402d18:	f855 3b04 	ldr.w	r3, [r5], #4
  402d1c:	4798      	blx	r3
  402d1e:	42a6      	cmp	r6, r4
  402d20:	d1f9      	bne.n	402d16 <__libc_init_array+0x2e>
  402d22:	bd70      	pop	{r4, r5, r6, pc}
  402d24:	bd70      	pop	{r4, r5, r6, pc}
  402d26:	bf00      	nop
  402d28:	00406018 	.word	0x00406018
  402d2c:	00406018 	.word	0x00406018
  402d30:	00406020 	.word	0x00406020
  402d34:	00406018 	.word	0x00406018

00402d38 <iprintf>:
  402d38:	b40f      	push	{r0, r1, r2, r3}
  402d3a:	b500      	push	{lr}
  402d3c:	4907      	ldr	r1, [pc, #28]	; (402d5c <iprintf+0x24>)
  402d3e:	b083      	sub	sp, #12
  402d40:	ab04      	add	r3, sp, #16
  402d42:	6808      	ldr	r0, [r1, #0]
  402d44:	f853 2b04 	ldr.w	r2, [r3], #4
  402d48:	6881      	ldr	r1, [r0, #8]
  402d4a:	9301      	str	r3, [sp, #4]
  402d4c:	f000 fac6 	bl	4032dc <_vfiprintf_r>
  402d50:	b003      	add	sp, #12
  402d52:	f85d eb04 	ldr.w	lr, [sp], #4
  402d56:	b004      	add	sp, #16
  402d58:	4770      	bx	lr
  402d5a:	bf00      	nop
  402d5c:	2040002c 	.word	0x2040002c

00402d60 <memcpy>:
  402d60:	4684      	mov	ip, r0
  402d62:	ea41 0300 	orr.w	r3, r1, r0
  402d66:	f013 0303 	ands.w	r3, r3, #3
  402d6a:	d16d      	bne.n	402e48 <memcpy+0xe8>
  402d6c:	3a40      	subs	r2, #64	; 0x40
  402d6e:	d341      	bcc.n	402df4 <memcpy+0x94>
  402d70:	f851 3b04 	ldr.w	r3, [r1], #4
  402d74:	f840 3b04 	str.w	r3, [r0], #4
  402d78:	f851 3b04 	ldr.w	r3, [r1], #4
  402d7c:	f840 3b04 	str.w	r3, [r0], #4
  402d80:	f851 3b04 	ldr.w	r3, [r1], #4
  402d84:	f840 3b04 	str.w	r3, [r0], #4
  402d88:	f851 3b04 	ldr.w	r3, [r1], #4
  402d8c:	f840 3b04 	str.w	r3, [r0], #4
  402d90:	f851 3b04 	ldr.w	r3, [r1], #4
  402d94:	f840 3b04 	str.w	r3, [r0], #4
  402d98:	f851 3b04 	ldr.w	r3, [r1], #4
  402d9c:	f840 3b04 	str.w	r3, [r0], #4
  402da0:	f851 3b04 	ldr.w	r3, [r1], #4
  402da4:	f840 3b04 	str.w	r3, [r0], #4
  402da8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dac:	f840 3b04 	str.w	r3, [r0], #4
  402db0:	f851 3b04 	ldr.w	r3, [r1], #4
  402db4:	f840 3b04 	str.w	r3, [r0], #4
  402db8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dbc:	f840 3b04 	str.w	r3, [r0], #4
  402dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402dc4:	f840 3b04 	str.w	r3, [r0], #4
  402dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dcc:	f840 3b04 	str.w	r3, [r0], #4
  402dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402dd4:	f840 3b04 	str.w	r3, [r0], #4
  402dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ddc:	f840 3b04 	str.w	r3, [r0], #4
  402de0:	f851 3b04 	ldr.w	r3, [r1], #4
  402de4:	f840 3b04 	str.w	r3, [r0], #4
  402de8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dec:	f840 3b04 	str.w	r3, [r0], #4
  402df0:	3a40      	subs	r2, #64	; 0x40
  402df2:	d2bd      	bcs.n	402d70 <memcpy+0x10>
  402df4:	3230      	adds	r2, #48	; 0x30
  402df6:	d311      	bcc.n	402e1c <memcpy+0xbc>
  402df8:	f851 3b04 	ldr.w	r3, [r1], #4
  402dfc:	f840 3b04 	str.w	r3, [r0], #4
  402e00:	f851 3b04 	ldr.w	r3, [r1], #4
  402e04:	f840 3b04 	str.w	r3, [r0], #4
  402e08:	f851 3b04 	ldr.w	r3, [r1], #4
  402e0c:	f840 3b04 	str.w	r3, [r0], #4
  402e10:	f851 3b04 	ldr.w	r3, [r1], #4
  402e14:	f840 3b04 	str.w	r3, [r0], #4
  402e18:	3a10      	subs	r2, #16
  402e1a:	d2ed      	bcs.n	402df8 <memcpy+0x98>
  402e1c:	320c      	adds	r2, #12
  402e1e:	d305      	bcc.n	402e2c <memcpy+0xcc>
  402e20:	f851 3b04 	ldr.w	r3, [r1], #4
  402e24:	f840 3b04 	str.w	r3, [r0], #4
  402e28:	3a04      	subs	r2, #4
  402e2a:	d2f9      	bcs.n	402e20 <memcpy+0xc0>
  402e2c:	3204      	adds	r2, #4
  402e2e:	d008      	beq.n	402e42 <memcpy+0xe2>
  402e30:	07d2      	lsls	r2, r2, #31
  402e32:	bf1c      	itt	ne
  402e34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e38:	f800 3b01 	strbne.w	r3, [r0], #1
  402e3c:	d301      	bcc.n	402e42 <memcpy+0xe2>
  402e3e:	880b      	ldrh	r3, [r1, #0]
  402e40:	8003      	strh	r3, [r0, #0]
  402e42:	4660      	mov	r0, ip
  402e44:	4770      	bx	lr
  402e46:	bf00      	nop
  402e48:	2a08      	cmp	r2, #8
  402e4a:	d313      	bcc.n	402e74 <memcpy+0x114>
  402e4c:	078b      	lsls	r3, r1, #30
  402e4e:	d08d      	beq.n	402d6c <memcpy+0xc>
  402e50:	f010 0303 	ands.w	r3, r0, #3
  402e54:	d08a      	beq.n	402d6c <memcpy+0xc>
  402e56:	f1c3 0304 	rsb	r3, r3, #4
  402e5a:	1ad2      	subs	r2, r2, r3
  402e5c:	07db      	lsls	r3, r3, #31
  402e5e:	bf1c      	itt	ne
  402e60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e64:	f800 3b01 	strbne.w	r3, [r0], #1
  402e68:	d380      	bcc.n	402d6c <memcpy+0xc>
  402e6a:	f831 3b02 	ldrh.w	r3, [r1], #2
  402e6e:	f820 3b02 	strh.w	r3, [r0], #2
  402e72:	e77b      	b.n	402d6c <memcpy+0xc>
  402e74:	3a04      	subs	r2, #4
  402e76:	d3d9      	bcc.n	402e2c <memcpy+0xcc>
  402e78:	3a01      	subs	r2, #1
  402e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  402e7e:	f800 3b01 	strb.w	r3, [r0], #1
  402e82:	d2f9      	bcs.n	402e78 <memcpy+0x118>
  402e84:	780b      	ldrb	r3, [r1, #0]
  402e86:	7003      	strb	r3, [r0, #0]
  402e88:	784b      	ldrb	r3, [r1, #1]
  402e8a:	7043      	strb	r3, [r0, #1]
  402e8c:	788b      	ldrb	r3, [r1, #2]
  402e8e:	7083      	strb	r3, [r0, #2]
  402e90:	4660      	mov	r0, ip
  402e92:	4770      	bx	lr

00402e94 <memset>:
  402e94:	b470      	push	{r4, r5, r6}
  402e96:	0786      	lsls	r6, r0, #30
  402e98:	d046      	beq.n	402f28 <memset+0x94>
  402e9a:	1e54      	subs	r4, r2, #1
  402e9c:	2a00      	cmp	r2, #0
  402e9e:	d041      	beq.n	402f24 <memset+0x90>
  402ea0:	b2ca      	uxtb	r2, r1
  402ea2:	4603      	mov	r3, r0
  402ea4:	e002      	b.n	402eac <memset+0x18>
  402ea6:	f114 34ff 	adds.w	r4, r4, #4294967295
  402eaa:	d33b      	bcc.n	402f24 <memset+0x90>
  402eac:	f803 2b01 	strb.w	r2, [r3], #1
  402eb0:	079d      	lsls	r5, r3, #30
  402eb2:	d1f8      	bne.n	402ea6 <memset+0x12>
  402eb4:	2c03      	cmp	r4, #3
  402eb6:	d92e      	bls.n	402f16 <memset+0x82>
  402eb8:	b2cd      	uxtb	r5, r1
  402eba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402ebe:	2c0f      	cmp	r4, #15
  402ec0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402ec4:	d919      	bls.n	402efa <memset+0x66>
  402ec6:	f103 0210 	add.w	r2, r3, #16
  402eca:	4626      	mov	r6, r4
  402ecc:	3e10      	subs	r6, #16
  402ece:	2e0f      	cmp	r6, #15
  402ed0:	f842 5c10 	str.w	r5, [r2, #-16]
  402ed4:	f842 5c0c 	str.w	r5, [r2, #-12]
  402ed8:	f842 5c08 	str.w	r5, [r2, #-8]
  402edc:	f842 5c04 	str.w	r5, [r2, #-4]
  402ee0:	f102 0210 	add.w	r2, r2, #16
  402ee4:	d8f2      	bhi.n	402ecc <memset+0x38>
  402ee6:	f1a4 0210 	sub.w	r2, r4, #16
  402eea:	f022 020f 	bic.w	r2, r2, #15
  402eee:	f004 040f 	and.w	r4, r4, #15
  402ef2:	3210      	adds	r2, #16
  402ef4:	2c03      	cmp	r4, #3
  402ef6:	4413      	add	r3, r2
  402ef8:	d90d      	bls.n	402f16 <memset+0x82>
  402efa:	461e      	mov	r6, r3
  402efc:	4622      	mov	r2, r4
  402efe:	3a04      	subs	r2, #4
  402f00:	2a03      	cmp	r2, #3
  402f02:	f846 5b04 	str.w	r5, [r6], #4
  402f06:	d8fa      	bhi.n	402efe <memset+0x6a>
  402f08:	1f22      	subs	r2, r4, #4
  402f0a:	f022 0203 	bic.w	r2, r2, #3
  402f0e:	3204      	adds	r2, #4
  402f10:	4413      	add	r3, r2
  402f12:	f004 0403 	and.w	r4, r4, #3
  402f16:	b12c      	cbz	r4, 402f24 <memset+0x90>
  402f18:	b2c9      	uxtb	r1, r1
  402f1a:	441c      	add	r4, r3
  402f1c:	f803 1b01 	strb.w	r1, [r3], #1
  402f20:	429c      	cmp	r4, r3
  402f22:	d1fb      	bne.n	402f1c <memset+0x88>
  402f24:	bc70      	pop	{r4, r5, r6}
  402f26:	4770      	bx	lr
  402f28:	4614      	mov	r4, r2
  402f2a:	4603      	mov	r3, r0
  402f2c:	e7c2      	b.n	402eb4 <memset+0x20>
  402f2e:	bf00      	nop

00402f30 <_puts_r>:
  402f30:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f32:	4605      	mov	r5, r0
  402f34:	b089      	sub	sp, #36	; 0x24
  402f36:	4608      	mov	r0, r1
  402f38:	460c      	mov	r4, r1
  402f3a:	f000 f921 	bl	403180 <strlen>
  402f3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402f40:	4f21      	ldr	r7, [pc, #132]	; (402fc8 <_puts_r+0x98>)
  402f42:	9404      	str	r4, [sp, #16]
  402f44:	2601      	movs	r6, #1
  402f46:	1c44      	adds	r4, r0, #1
  402f48:	a904      	add	r1, sp, #16
  402f4a:	2202      	movs	r2, #2
  402f4c:	9403      	str	r4, [sp, #12]
  402f4e:	9005      	str	r0, [sp, #20]
  402f50:	68ac      	ldr	r4, [r5, #8]
  402f52:	9706      	str	r7, [sp, #24]
  402f54:	9607      	str	r6, [sp, #28]
  402f56:	9101      	str	r1, [sp, #4]
  402f58:	9202      	str	r2, [sp, #8]
  402f5a:	b353      	cbz	r3, 402fb2 <_puts_r+0x82>
  402f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402f5e:	f013 0f01 	tst.w	r3, #1
  402f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f66:	b29a      	uxth	r2, r3
  402f68:	d101      	bne.n	402f6e <_puts_r+0x3e>
  402f6a:	0590      	lsls	r0, r2, #22
  402f6c:	d525      	bpl.n	402fba <_puts_r+0x8a>
  402f6e:	0491      	lsls	r1, r2, #18
  402f70:	d406      	bmi.n	402f80 <_puts_r+0x50>
  402f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402f74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402f7c:	81a3      	strh	r3, [r4, #12]
  402f7e:	6662      	str	r2, [r4, #100]	; 0x64
  402f80:	4628      	mov	r0, r5
  402f82:	aa01      	add	r2, sp, #4
  402f84:	4621      	mov	r1, r4
  402f86:	f001 fbab 	bl	4046e0 <__sfvwrite_r>
  402f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402f8c:	2800      	cmp	r0, #0
  402f8e:	bf0c      	ite	eq
  402f90:	250a      	moveq	r5, #10
  402f92:	f04f 35ff 	movne.w	r5, #4294967295
  402f96:	07da      	lsls	r2, r3, #31
  402f98:	d402      	bmi.n	402fa0 <_puts_r+0x70>
  402f9a:	89a3      	ldrh	r3, [r4, #12]
  402f9c:	059b      	lsls	r3, r3, #22
  402f9e:	d502      	bpl.n	402fa6 <_puts_r+0x76>
  402fa0:	4628      	mov	r0, r5
  402fa2:	b009      	add	sp, #36	; 0x24
  402fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402fa8:	f001 fd50 	bl	404a4c <__retarget_lock_release_recursive>
  402fac:	4628      	mov	r0, r5
  402fae:	b009      	add	sp, #36	; 0x24
  402fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402fb2:	4628      	mov	r0, r5
  402fb4:	f001 f988 	bl	4042c8 <__sinit>
  402fb8:	e7d0      	b.n	402f5c <_puts_r+0x2c>
  402fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402fbc:	f001 fd44 	bl	404a48 <__retarget_lock_acquire_recursive>
  402fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402fc4:	b29a      	uxth	r2, r3
  402fc6:	e7d2      	b.n	402f6e <_puts_r+0x3e>
  402fc8:	00405d38 	.word	0x00405d38

00402fcc <puts>:
  402fcc:	4b02      	ldr	r3, [pc, #8]	; (402fd8 <puts+0xc>)
  402fce:	4601      	mov	r1, r0
  402fd0:	6818      	ldr	r0, [r3, #0]
  402fd2:	f7ff bfad 	b.w	402f30 <_puts_r>
  402fd6:	bf00      	nop
  402fd8:	2040002c 	.word	0x2040002c

00402fdc <setbuf>:
  402fdc:	2900      	cmp	r1, #0
  402fde:	bf0c      	ite	eq
  402fe0:	2202      	moveq	r2, #2
  402fe2:	2200      	movne	r2, #0
  402fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402fe8:	f000 b800 	b.w	402fec <setvbuf>

00402fec <setvbuf>:
  402fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402ff0:	4c61      	ldr	r4, [pc, #388]	; (403178 <setvbuf+0x18c>)
  402ff2:	6825      	ldr	r5, [r4, #0]
  402ff4:	b083      	sub	sp, #12
  402ff6:	4604      	mov	r4, r0
  402ff8:	460f      	mov	r7, r1
  402ffa:	4690      	mov	r8, r2
  402ffc:	461e      	mov	r6, r3
  402ffe:	b115      	cbz	r5, 403006 <setvbuf+0x1a>
  403000:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403002:	2b00      	cmp	r3, #0
  403004:	d064      	beq.n	4030d0 <setvbuf+0xe4>
  403006:	f1b8 0f02 	cmp.w	r8, #2
  40300a:	d006      	beq.n	40301a <setvbuf+0x2e>
  40300c:	f1b8 0f01 	cmp.w	r8, #1
  403010:	f200 809f 	bhi.w	403152 <setvbuf+0x166>
  403014:	2e00      	cmp	r6, #0
  403016:	f2c0 809c 	blt.w	403152 <setvbuf+0x166>
  40301a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40301c:	07d8      	lsls	r0, r3, #31
  40301e:	d534      	bpl.n	40308a <setvbuf+0x9e>
  403020:	4621      	mov	r1, r4
  403022:	4628      	mov	r0, r5
  403024:	f001 f8f8 	bl	404218 <_fflush_r>
  403028:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40302a:	b141      	cbz	r1, 40303e <setvbuf+0x52>
  40302c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403030:	4299      	cmp	r1, r3
  403032:	d002      	beq.n	40303a <setvbuf+0x4e>
  403034:	4628      	mov	r0, r5
  403036:	f001 fa6d 	bl	404514 <_free_r>
  40303a:	2300      	movs	r3, #0
  40303c:	6323      	str	r3, [r4, #48]	; 0x30
  40303e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403042:	2200      	movs	r2, #0
  403044:	61a2      	str	r2, [r4, #24]
  403046:	6062      	str	r2, [r4, #4]
  403048:	061a      	lsls	r2, r3, #24
  40304a:	d43a      	bmi.n	4030c2 <setvbuf+0xd6>
  40304c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403050:	f023 0303 	bic.w	r3, r3, #3
  403054:	f1b8 0f02 	cmp.w	r8, #2
  403058:	81a3      	strh	r3, [r4, #12]
  40305a:	d01d      	beq.n	403098 <setvbuf+0xac>
  40305c:	ab01      	add	r3, sp, #4
  40305e:	466a      	mov	r2, sp
  403060:	4621      	mov	r1, r4
  403062:	4628      	mov	r0, r5
  403064:	f001 fcf4 	bl	404a50 <__swhatbuf_r>
  403068:	89a3      	ldrh	r3, [r4, #12]
  40306a:	4318      	orrs	r0, r3
  40306c:	81a0      	strh	r0, [r4, #12]
  40306e:	2e00      	cmp	r6, #0
  403070:	d132      	bne.n	4030d8 <setvbuf+0xec>
  403072:	9e00      	ldr	r6, [sp, #0]
  403074:	4630      	mov	r0, r6
  403076:	f001 fd63 	bl	404b40 <malloc>
  40307a:	4607      	mov	r7, r0
  40307c:	2800      	cmp	r0, #0
  40307e:	d06b      	beq.n	403158 <setvbuf+0x16c>
  403080:	89a3      	ldrh	r3, [r4, #12]
  403082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403086:	81a3      	strh	r3, [r4, #12]
  403088:	e028      	b.n	4030dc <setvbuf+0xf0>
  40308a:	89a3      	ldrh	r3, [r4, #12]
  40308c:	0599      	lsls	r1, r3, #22
  40308e:	d4c7      	bmi.n	403020 <setvbuf+0x34>
  403090:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403092:	f001 fcd9 	bl	404a48 <__retarget_lock_acquire_recursive>
  403096:	e7c3      	b.n	403020 <setvbuf+0x34>
  403098:	2500      	movs	r5, #0
  40309a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40309c:	2600      	movs	r6, #0
  40309e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4030a2:	f043 0302 	orr.w	r3, r3, #2
  4030a6:	2001      	movs	r0, #1
  4030a8:	60a6      	str	r6, [r4, #8]
  4030aa:	07ce      	lsls	r6, r1, #31
  4030ac:	81a3      	strh	r3, [r4, #12]
  4030ae:	6022      	str	r2, [r4, #0]
  4030b0:	6122      	str	r2, [r4, #16]
  4030b2:	6160      	str	r0, [r4, #20]
  4030b4:	d401      	bmi.n	4030ba <setvbuf+0xce>
  4030b6:	0598      	lsls	r0, r3, #22
  4030b8:	d53e      	bpl.n	403138 <setvbuf+0x14c>
  4030ba:	4628      	mov	r0, r5
  4030bc:	b003      	add	sp, #12
  4030be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4030c2:	6921      	ldr	r1, [r4, #16]
  4030c4:	4628      	mov	r0, r5
  4030c6:	f001 fa25 	bl	404514 <_free_r>
  4030ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030ce:	e7bd      	b.n	40304c <setvbuf+0x60>
  4030d0:	4628      	mov	r0, r5
  4030d2:	f001 f8f9 	bl	4042c8 <__sinit>
  4030d6:	e796      	b.n	403006 <setvbuf+0x1a>
  4030d8:	2f00      	cmp	r7, #0
  4030da:	d0cb      	beq.n	403074 <setvbuf+0x88>
  4030dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4030de:	2b00      	cmp	r3, #0
  4030e0:	d033      	beq.n	40314a <setvbuf+0x15e>
  4030e2:	9b00      	ldr	r3, [sp, #0]
  4030e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4030e8:	6027      	str	r7, [r4, #0]
  4030ea:	429e      	cmp	r6, r3
  4030ec:	bf1c      	itt	ne
  4030ee:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4030f2:	81a2      	strhne	r2, [r4, #12]
  4030f4:	f1b8 0f01 	cmp.w	r8, #1
  4030f8:	bf04      	itt	eq
  4030fa:	f042 0201 	orreq.w	r2, r2, #1
  4030fe:	81a2      	strheq	r2, [r4, #12]
  403100:	b292      	uxth	r2, r2
  403102:	f012 0308 	ands.w	r3, r2, #8
  403106:	6127      	str	r7, [r4, #16]
  403108:	6166      	str	r6, [r4, #20]
  40310a:	d00e      	beq.n	40312a <setvbuf+0x13e>
  40310c:	07d1      	lsls	r1, r2, #31
  40310e:	d51a      	bpl.n	403146 <setvbuf+0x15a>
  403110:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403112:	4276      	negs	r6, r6
  403114:	2300      	movs	r3, #0
  403116:	f015 0501 	ands.w	r5, r5, #1
  40311a:	61a6      	str	r6, [r4, #24]
  40311c:	60a3      	str	r3, [r4, #8]
  40311e:	d009      	beq.n	403134 <setvbuf+0x148>
  403120:	2500      	movs	r5, #0
  403122:	4628      	mov	r0, r5
  403124:	b003      	add	sp, #12
  403126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40312a:	60a3      	str	r3, [r4, #8]
  40312c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40312e:	f015 0501 	ands.w	r5, r5, #1
  403132:	d1f5      	bne.n	403120 <setvbuf+0x134>
  403134:	0593      	lsls	r3, r2, #22
  403136:	d4c0      	bmi.n	4030ba <setvbuf+0xce>
  403138:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40313a:	f001 fc87 	bl	404a4c <__retarget_lock_release_recursive>
  40313e:	4628      	mov	r0, r5
  403140:	b003      	add	sp, #12
  403142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403146:	60a6      	str	r6, [r4, #8]
  403148:	e7f0      	b.n	40312c <setvbuf+0x140>
  40314a:	4628      	mov	r0, r5
  40314c:	f001 f8bc 	bl	4042c8 <__sinit>
  403150:	e7c7      	b.n	4030e2 <setvbuf+0xf6>
  403152:	f04f 35ff 	mov.w	r5, #4294967295
  403156:	e7b0      	b.n	4030ba <setvbuf+0xce>
  403158:	f8dd 9000 	ldr.w	r9, [sp]
  40315c:	45b1      	cmp	r9, r6
  40315e:	d004      	beq.n	40316a <setvbuf+0x17e>
  403160:	4648      	mov	r0, r9
  403162:	f001 fced 	bl	404b40 <malloc>
  403166:	4607      	mov	r7, r0
  403168:	b920      	cbnz	r0, 403174 <setvbuf+0x188>
  40316a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40316e:	f04f 35ff 	mov.w	r5, #4294967295
  403172:	e792      	b.n	40309a <setvbuf+0xae>
  403174:	464e      	mov	r6, r9
  403176:	e783      	b.n	403080 <setvbuf+0x94>
  403178:	2040002c 	.word	0x2040002c
  40317c:	00000000 	.word	0x00000000

00403180 <strlen>:
  403180:	f890 f000 	pld	[r0]
  403184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403188:	f020 0107 	bic.w	r1, r0, #7
  40318c:	f06f 0c00 	mvn.w	ip, #0
  403190:	f010 0407 	ands.w	r4, r0, #7
  403194:	f891 f020 	pld	[r1, #32]
  403198:	f040 8049 	bne.w	40322e <strlen+0xae>
  40319c:	f04f 0400 	mov.w	r4, #0
  4031a0:	f06f 0007 	mvn.w	r0, #7
  4031a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4031a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4031ac:	f100 0008 	add.w	r0, r0, #8
  4031b0:	fa82 f24c 	uadd8	r2, r2, ip
  4031b4:	faa4 f28c 	sel	r2, r4, ip
  4031b8:	fa83 f34c 	uadd8	r3, r3, ip
  4031bc:	faa2 f38c 	sel	r3, r2, ip
  4031c0:	bb4b      	cbnz	r3, 403216 <strlen+0x96>
  4031c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4031c6:	fa82 f24c 	uadd8	r2, r2, ip
  4031ca:	f100 0008 	add.w	r0, r0, #8
  4031ce:	faa4 f28c 	sel	r2, r4, ip
  4031d2:	fa83 f34c 	uadd8	r3, r3, ip
  4031d6:	faa2 f38c 	sel	r3, r2, ip
  4031da:	b9e3      	cbnz	r3, 403216 <strlen+0x96>
  4031dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4031e0:	fa82 f24c 	uadd8	r2, r2, ip
  4031e4:	f100 0008 	add.w	r0, r0, #8
  4031e8:	faa4 f28c 	sel	r2, r4, ip
  4031ec:	fa83 f34c 	uadd8	r3, r3, ip
  4031f0:	faa2 f38c 	sel	r3, r2, ip
  4031f4:	b97b      	cbnz	r3, 403216 <strlen+0x96>
  4031f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4031fa:	f101 0120 	add.w	r1, r1, #32
  4031fe:	fa82 f24c 	uadd8	r2, r2, ip
  403202:	f100 0008 	add.w	r0, r0, #8
  403206:	faa4 f28c 	sel	r2, r4, ip
  40320a:	fa83 f34c 	uadd8	r3, r3, ip
  40320e:	faa2 f38c 	sel	r3, r2, ip
  403212:	2b00      	cmp	r3, #0
  403214:	d0c6      	beq.n	4031a4 <strlen+0x24>
  403216:	2a00      	cmp	r2, #0
  403218:	bf04      	itt	eq
  40321a:	3004      	addeq	r0, #4
  40321c:	461a      	moveq	r2, r3
  40321e:	ba12      	rev	r2, r2
  403220:	fab2 f282 	clz	r2, r2
  403224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40322c:	4770      	bx	lr
  40322e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403232:	f004 0503 	and.w	r5, r4, #3
  403236:	f1c4 0000 	rsb	r0, r4, #0
  40323a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40323e:	f014 0f04 	tst.w	r4, #4
  403242:	f891 f040 	pld	[r1, #64]	; 0x40
  403246:	fa0c f505 	lsl.w	r5, ip, r5
  40324a:	ea62 0205 	orn	r2, r2, r5
  40324e:	bf1c      	itt	ne
  403250:	ea63 0305 	ornne	r3, r3, r5
  403254:	4662      	movne	r2, ip
  403256:	f04f 0400 	mov.w	r4, #0
  40325a:	e7a9      	b.n	4031b0 <strlen+0x30>

0040325c <__sprint_r.part.0>:
  40325c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403260:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403262:	049c      	lsls	r4, r3, #18
  403264:	4693      	mov	fp, r2
  403266:	d52f      	bpl.n	4032c8 <__sprint_r.part.0+0x6c>
  403268:	6893      	ldr	r3, [r2, #8]
  40326a:	6812      	ldr	r2, [r2, #0]
  40326c:	b353      	cbz	r3, 4032c4 <__sprint_r.part.0+0x68>
  40326e:	460e      	mov	r6, r1
  403270:	4607      	mov	r7, r0
  403272:	f102 0908 	add.w	r9, r2, #8
  403276:	e919 0420 	ldmdb	r9, {r5, sl}
  40327a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40327e:	d017      	beq.n	4032b0 <__sprint_r.part.0+0x54>
  403280:	3d04      	subs	r5, #4
  403282:	2400      	movs	r4, #0
  403284:	e001      	b.n	40328a <__sprint_r.part.0+0x2e>
  403286:	45a0      	cmp	r8, r4
  403288:	d010      	beq.n	4032ac <__sprint_r.part.0+0x50>
  40328a:	4632      	mov	r2, r6
  40328c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403290:	4638      	mov	r0, r7
  403292:	f001 f8bb 	bl	40440c <_fputwc_r>
  403296:	1c43      	adds	r3, r0, #1
  403298:	f104 0401 	add.w	r4, r4, #1
  40329c:	d1f3      	bne.n	403286 <__sprint_r.part.0+0x2a>
  40329e:	2300      	movs	r3, #0
  4032a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4032a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4032a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4032b0:	f02a 0a03 	bic.w	sl, sl, #3
  4032b4:	eba3 030a 	sub.w	r3, r3, sl
  4032b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4032bc:	f109 0908 	add.w	r9, r9, #8
  4032c0:	2b00      	cmp	r3, #0
  4032c2:	d1d8      	bne.n	403276 <__sprint_r.part.0+0x1a>
  4032c4:	2000      	movs	r0, #0
  4032c6:	e7ea      	b.n	40329e <__sprint_r.part.0+0x42>
  4032c8:	f001 fa0a 	bl	4046e0 <__sfvwrite_r>
  4032cc:	2300      	movs	r3, #0
  4032ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4032d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4032d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032da:	bf00      	nop

004032dc <_vfiprintf_r>:
  4032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032e0:	b0ad      	sub	sp, #180	; 0xb4
  4032e2:	461d      	mov	r5, r3
  4032e4:	468b      	mov	fp, r1
  4032e6:	4690      	mov	r8, r2
  4032e8:	9307      	str	r3, [sp, #28]
  4032ea:	9006      	str	r0, [sp, #24]
  4032ec:	b118      	cbz	r0, 4032f6 <_vfiprintf_r+0x1a>
  4032ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4032f0:	2b00      	cmp	r3, #0
  4032f2:	f000 80f3 	beq.w	4034dc <_vfiprintf_r+0x200>
  4032f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4032fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4032fe:	07df      	lsls	r7, r3, #31
  403300:	b281      	uxth	r1, r0
  403302:	d402      	bmi.n	40330a <_vfiprintf_r+0x2e>
  403304:	058e      	lsls	r6, r1, #22
  403306:	f140 80fc 	bpl.w	403502 <_vfiprintf_r+0x226>
  40330a:	048c      	lsls	r4, r1, #18
  40330c:	d40a      	bmi.n	403324 <_vfiprintf_r+0x48>
  40330e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403312:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40331a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40331e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403322:	b289      	uxth	r1, r1
  403324:	0708      	lsls	r0, r1, #28
  403326:	f140 80b3 	bpl.w	403490 <_vfiprintf_r+0x1b4>
  40332a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40332e:	2b00      	cmp	r3, #0
  403330:	f000 80ae 	beq.w	403490 <_vfiprintf_r+0x1b4>
  403334:	f001 031a 	and.w	r3, r1, #26
  403338:	2b0a      	cmp	r3, #10
  40333a:	f000 80b5 	beq.w	4034a8 <_vfiprintf_r+0x1cc>
  40333e:	2300      	movs	r3, #0
  403340:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403344:	930b      	str	r3, [sp, #44]	; 0x2c
  403346:	9311      	str	r3, [sp, #68]	; 0x44
  403348:	9310      	str	r3, [sp, #64]	; 0x40
  40334a:	9303      	str	r3, [sp, #12]
  40334c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403350:	46ca      	mov	sl, r9
  403352:	f8cd b010 	str.w	fp, [sp, #16]
  403356:	f898 3000 	ldrb.w	r3, [r8]
  40335a:	4644      	mov	r4, r8
  40335c:	b1fb      	cbz	r3, 40339e <_vfiprintf_r+0xc2>
  40335e:	2b25      	cmp	r3, #37	; 0x25
  403360:	d102      	bne.n	403368 <_vfiprintf_r+0x8c>
  403362:	e01c      	b.n	40339e <_vfiprintf_r+0xc2>
  403364:	2b25      	cmp	r3, #37	; 0x25
  403366:	d003      	beq.n	403370 <_vfiprintf_r+0x94>
  403368:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40336c:	2b00      	cmp	r3, #0
  40336e:	d1f9      	bne.n	403364 <_vfiprintf_r+0x88>
  403370:	eba4 0508 	sub.w	r5, r4, r8
  403374:	b19d      	cbz	r5, 40339e <_vfiprintf_r+0xc2>
  403376:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403378:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40337a:	f8ca 8000 	str.w	r8, [sl]
  40337e:	3301      	adds	r3, #1
  403380:	442a      	add	r2, r5
  403382:	2b07      	cmp	r3, #7
  403384:	f8ca 5004 	str.w	r5, [sl, #4]
  403388:	9211      	str	r2, [sp, #68]	; 0x44
  40338a:	9310      	str	r3, [sp, #64]	; 0x40
  40338c:	dd7a      	ble.n	403484 <_vfiprintf_r+0x1a8>
  40338e:	2a00      	cmp	r2, #0
  403390:	f040 84b0 	bne.w	403cf4 <_vfiprintf_r+0xa18>
  403394:	9b03      	ldr	r3, [sp, #12]
  403396:	9210      	str	r2, [sp, #64]	; 0x40
  403398:	442b      	add	r3, r5
  40339a:	46ca      	mov	sl, r9
  40339c:	9303      	str	r3, [sp, #12]
  40339e:	7823      	ldrb	r3, [r4, #0]
  4033a0:	2b00      	cmp	r3, #0
  4033a2:	f000 83e0 	beq.w	403b66 <_vfiprintf_r+0x88a>
  4033a6:	2000      	movs	r0, #0
  4033a8:	f04f 0300 	mov.w	r3, #0
  4033ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4033b0:	f104 0801 	add.w	r8, r4, #1
  4033b4:	7862      	ldrb	r2, [r4, #1]
  4033b6:	4605      	mov	r5, r0
  4033b8:	4606      	mov	r6, r0
  4033ba:	4603      	mov	r3, r0
  4033bc:	f04f 34ff 	mov.w	r4, #4294967295
  4033c0:	f108 0801 	add.w	r8, r8, #1
  4033c4:	f1a2 0120 	sub.w	r1, r2, #32
  4033c8:	2958      	cmp	r1, #88	; 0x58
  4033ca:	f200 82de 	bhi.w	40398a <_vfiprintf_r+0x6ae>
  4033ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4033d2:	0221      	.short	0x0221
  4033d4:	02dc02dc 	.word	0x02dc02dc
  4033d8:	02dc0229 	.word	0x02dc0229
  4033dc:	02dc02dc 	.word	0x02dc02dc
  4033e0:	02dc02dc 	.word	0x02dc02dc
  4033e4:	028902dc 	.word	0x028902dc
  4033e8:	02dc0295 	.word	0x02dc0295
  4033ec:	02bd00a2 	.word	0x02bd00a2
  4033f0:	019f02dc 	.word	0x019f02dc
  4033f4:	01a401a4 	.word	0x01a401a4
  4033f8:	01a401a4 	.word	0x01a401a4
  4033fc:	01a401a4 	.word	0x01a401a4
  403400:	01a401a4 	.word	0x01a401a4
  403404:	02dc01a4 	.word	0x02dc01a4
  403408:	02dc02dc 	.word	0x02dc02dc
  40340c:	02dc02dc 	.word	0x02dc02dc
  403410:	02dc02dc 	.word	0x02dc02dc
  403414:	02dc02dc 	.word	0x02dc02dc
  403418:	01b202dc 	.word	0x01b202dc
  40341c:	02dc02dc 	.word	0x02dc02dc
  403420:	02dc02dc 	.word	0x02dc02dc
  403424:	02dc02dc 	.word	0x02dc02dc
  403428:	02dc02dc 	.word	0x02dc02dc
  40342c:	02dc02dc 	.word	0x02dc02dc
  403430:	02dc0197 	.word	0x02dc0197
  403434:	02dc02dc 	.word	0x02dc02dc
  403438:	02dc02dc 	.word	0x02dc02dc
  40343c:	02dc019b 	.word	0x02dc019b
  403440:	025302dc 	.word	0x025302dc
  403444:	02dc02dc 	.word	0x02dc02dc
  403448:	02dc02dc 	.word	0x02dc02dc
  40344c:	02dc02dc 	.word	0x02dc02dc
  403450:	02dc02dc 	.word	0x02dc02dc
  403454:	02dc02dc 	.word	0x02dc02dc
  403458:	021b025a 	.word	0x021b025a
  40345c:	02dc02dc 	.word	0x02dc02dc
  403460:	026e02dc 	.word	0x026e02dc
  403464:	02dc021b 	.word	0x02dc021b
  403468:	027302dc 	.word	0x027302dc
  40346c:	01f502dc 	.word	0x01f502dc
  403470:	02090182 	.word	0x02090182
  403474:	02dc02d7 	.word	0x02dc02d7
  403478:	02dc029a 	.word	0x02dc029a
  40347c:	02dc00a7 	.word	0x02dc00a7
  403480:	022e02dc 	.word	0x022e02dc
  403484:	f10a 0a08 	add.w	sl, sl, #8
  403488:	9b03      	ldr	r3, [sp, #12]
  40348a:	442b      	add	r3, r5
  40348c:	9303      	str	r3, [sp, #12]
  40348e:	e786      	b.n	40339e <_vfiprintf_r+0xc2>
  403490:	4659      	mov	r1, fp
  403492:	9806      	ldr	r0, [sp, #24]
  403494:	f000 fdac 	bl	403ff0 <__swsetup_r>
  403498:	bb18      	cbnz	r0, 4034e2 <_vfiprintf_r+0x206>
  40349a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40349e:	f001 031a 	and.w	r3, r1, #26
  4034a2:	2b0a      	cmp	r3, #10
  4034a4:	f47f af4b 	bne.w	40333e <_vfiprintf_r+0x62>
  4034a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4034ac:	2b00      	cmp	r3, #0
  4034ae:	f6ff af46 	blt.w	40333e <_vfiprintf_r+0x62>
  4034b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4034b6:	07db      	lsls	r3, r3, #31
  4034b8:	d405      	bmi.n	4034c6 <_vfiprintf_r+0x1ea>
  4034ba:	058f      	lsls	r7, r1, #22
  4034bc:	d403      	bmi.n	4034c6 <_vfiprintf_r+0x1ea>
  4034be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4034c2:	f001 fac3 	bl	404a4c <__retarget_lock_release_recursive>
  4034c6:	462b      	mov	r3, r5
  4034c8:	4642      	mov	r2, r8
  4034ca:	4659      	mov	r1, fp
  4034cc:	9806      	ldr	r0, [sp, #24]
  4034ce:	f000 fd4d 	bl	403f6c <__sbprintf>
  4034d2:	9003      	str	r0, [sp, #12]
  4034d4:	9803      	ldr	r0, [sp, #12]
  4034d6:	b02d      	add	sp, #180	; 0xb4
  4034d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034dc:	f000 fef4 	bl	4042c8 <__sinit>
  4034e0:	e709      	b.n	4032f6 <_vfiprintf_r+0x1a>
  4034e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4034e6:	07d9      	lsls	r1, r3, #31
  4034e8:	d404      	bmi.n	4034f4 <_vfiprintf_r+0x218>
  4034ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4034ee:	059a      	lsls	r2, r3, #22
  4034f0:	f140 84aa 	bpl.w	403e48 <_vfiprintf_r+0xb6c>
  4034f4:	f04f 33ff 	mov.w	r3, #4294967295
  4034f8:	9303      	str	r3, [sp, #12]
  4034fa:	9803      	ldr	r0, [sp, #12]
  4034fc:	b02d      	add	sp, #180	; 0xb4
  4034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403502:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403506:	f001 fa9f 	bl	404a48 <__retarget_lock_acquire_recursive>
  40350a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40350e:	b281      	uxth	r1, r0
  403510:	e6fb      	b.n	40330a <_vfiprintf_r+0x2e>
  403512:	4276      	negs	r6, r6
  403514:	9207      	str	r2, [sp, #28]
  403516:	f043 0304 	orr.w	r3, r3, #4
  40351a:	f898 2000 	ldrb.w	r2, [r8]
  40351e:	e74f      	b.n	4033c0 <_vfiprintf_r+0xe4>
  403520:	9608      	str	r6, [sp, #32]
  403522:	069e      	lsls	r6, r3, #26
  403524:	f100 8450 	bmi.w	403dc8 <_vfiprintf_r+0xaec>
  403528:	9907      	ldr	r1, [sp, #28]
  40352a:	06dd      	lsls	r5, r3, #27
  40352c:	460a      	mov	r2, r1
  40352e:	f100 83ef 	bmi.w	403d10 <_vfiprintf_r+0xa34>
  403532:	0658      	lsls	r0, r3, #25
  403534:	f140 83ec 	bpl.w	403d10 <_vfiprintf_r+0xa34>
  403538:	880e      	ldrh	r6, [r1, #0]
  40353a:	3104      	adds	r1, #4
  40353c:	2700      	movs	r7, #0
  40353e:	2201      	movs	r2, #1
  403540:	9107      	str	r1, [sp, #28]
  403542:	f04f 0100 	mov.w	r1, #0
  403546:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40354a:	2500      	movs	r5, #0
  40354c:	1c61      	adds	r1, r4, #1
  40354e:	f000 8116 	beq.w	40377e <_vfiprintf_r+0x4a2>
  403552:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403556:	9102      	str	r1, [sp, #8]
  403558:	ea56 0107 	orrs.w	r1, r6, r7
  40355c:	f040 8114 	bne.w	403788 <_vfiprintf_r+0x4ac>
  403560:	2c00      	cmp	r4, #0
  403562:	f040 835c 	bne.w	403c1e <_vfiprintf_r+0x942>
  403566:	2a00      	cmp	r2, #0
  403568:	f040 83b7 	bne.w	403cda <_vfiprintf_r+0x9fe>
  40356c:	f013 0301 	ands.w	r3, r3, #1
  403570:	9305      	str	r3, [sp, #20]
  403572:	f000 8457 	beq.w	403e24 <_vfiprintf_r+0xb48>
  403576:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40357a:	2330      	movs	r3, #48	; 0x30
  40357c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403580:	9b05      	ldr	r3, [sp, #20]
  403582:	42a3      	cmp	r3, r4
  403584:	bfb8      	it	lt
  403586:	4623      	movlt	r3, r4
  403588:	9301      	str	r3, [sp, #4]
  40358a:	b10d      	cbz	r5, 403590 <_vfiprintf_r+0x2b4>
  40358c:	3301      	adds	r3, #1
  40358e:	9301      	str	r3, [sp, #4]
  403590:	9b02      	ldr	r3, [sp, #8]
  403592:	f013 0302 	ands.w	r3, r3, #2
  403596:	9309      	str	r3, [sp, #36]	; 0x24
  403598:	d002      	beq.n	4035a0 <_vfiprintf_r+0x2c4>
  40359a:	9b01      	ldr	r3, [sp, #4]
  40359c:	3302      	adds	r3, #2
  40359e:	9301      	str	r3, [sp, #4]
  4035a0:	9b02      	ldr	r3, [sp, #8]
  4035a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4035a6:	930a      	str	r3, [sp, #40]	; 0x28
  4035a8:	f040 8217 	bne.w	4039da <_vfiprintf_r+0x6fe>
  4035ac:	9b08      	ldr	r3, [sp, #32]
  4035ae:	9a01      	ldr	r2, [sp, #4]
  4035b0:	1a9d      	subs	r5, r3, r2
  4035b2:	2d00      	cmp	r5, #0
  4035b4:	f340 8211 	ble.w	4039da <_vfiprintf_r+0x6fe>
  4035b8:	2d10      	cmp	r5, #16
  4035ba:	f340 8490 	ble.w	403ede <_vfiprintf_r+0xc02>
  4035be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4035c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035c2:	4ec4      	ldr	r6, [pc, #784]	; (4038d4 <_vfiprintf_r+0x5f8>)
  4035c4:	46d6      	mov	lr, sl
  4035c6:	2710      	movs	r7, #16
  4035c8:	46a2      	mov	sl, r4
  4035ca:	4619      	mov	r1, r3
  4035cc:	9c06      	ldr	r4, [sp, #24]
  4035ce:	e007      	b.n	4035e0 <_vfiprintf_r+0x304>
  4035d0:	f101 0c02 	add.w	ip, r1, #2
  4035d4:	f10e 0e08 	add.w	lr, lr, #8
  4035d8:	4601      	mov	r1, r0
  4035da:	3d10      	subs	r5, #16
  4035dc:	2d10      	cmp	r5, #16
  4035de:	dd11      	ble.n	403604 <_vfiprintf_r+0x328>
  4035e0:	1c48      	adds	r0, r1, #1
  4035e2:	3210      	adds	r2, #16
  4035e4:	2807      	cmp	r0, #7
  4035e6:	9211      	str	r2, [sp, #68]	; 0x44
  4035e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4035ec:	9010      	str	r0, [sp, #64]	; 0x40
  4035ee:	ddef      	ble.n	4035d0 <_vfiprintf_r+0x2f4>
  4035f0:	2a00      	cmp	r2, #0
  4035f2:	f040 81e4 	bne.w	4039be <_vfiprintf_r+0x6e2>
  4035f6:	3d10      	subs	r5, #16
  4035f8:	2d10      	cmp	r5, #16
  4035fa:	4611      	mov	r1, r2
  4035fc:	f04f 0c01 	mov.w	ip, #1
  403600:	46ce      	mov	lr, r9
  403602:	dced      	bgt.n	4035e0 <_vfiprintf_r+0x304>
  403604:	4654      	mov	r4, sl
  403606:	4661      	mov	r1, ip
  403608:	46f2      	mov	sl, lr
  40360a:	442a      	add	r2, r5
  40360c:	2907      	cmp	r1, #7
  40360e:	9211      	str	r2, [sp, #68]	; 0x44
  403610:	f8ca 6000 	str.w	r6, [sl]
  403614:	f8ca 5004 	str.w	r5, [sl, #4]
  403618:	9110      	str	r1, [sp, #64]	; 0x40
  40361a:	f300 82ec 	bgt.w	403bf6 <_vfiprintf_r+0x91a>
  40361e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403622:	f10a 0a08 	add.w	sl, sl, #8
  403626:	1c48      	adds	r0, r1, #1
  403628:	2d00      	cmp	r5, #0
  40362a:	f040 81de 	bne.w	4039ea <_vfiprintf_r+0x70e>
  40362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403630:	2b00      	cmp	r3, #0
  403632:	f000 81f8 	beq.w	403a26 <_vfiprintf_r+0x74a>
  403636:	3202      	adds	r2, #2
  403638:	a90e      	add	r1, sp, #56	; 0x38
  40363a:	2302      	movs	r3, #2
  40363c:	2807      	cmp	r0, #7
  40363e:	9211      	str	r2, [sp, #68]	; 0x44
  403640:	9010      	str	r0, [sp, #64]	; 0x40
  403642:	e88a 000a 	stmia.w	sl, {r1, r3}
  403646:	f340 81ea 	ble.w	403a1e <_vfiprintf_r+0x742>
  40364a:	2a00      	cmp	r2, #0
  40364c:	f040 838c 	bne.w	403d68 <_vfiprintf_r+0xa8c>
  403650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403652:	2b80      	cmp	r3, #128	; 0x80
  403654:	f04f 0001 	mov.w	r0, #1
  403658:	4611      	mov	r1, r2
  40365a:	46ca      	mov	sl, r9
  40365c:	f040 81e7 	bne.w	403a2e <_vfiprintf_r+0x752>
  403660:	9b08      	ldr	r3, [sp, #32]
  403662:	9d01      	ldr	r5, [sp, #4]
  403664:	1b5e      	subs	r6, r3, r5
  403666:	2e00      	cmp	r6, #0
  403668:	f340 81e1 	ble.w	403a2e <_vfiprintf_r+0x752>
  40366c:	2e10      	cmp	r6, #16
  40366e:	4d9a      	ldr	r5, [pc, #616]	; (4038d8 <_vfiprintf_r+0x5fc>)
  403670:	f340 8450 	ble.w	403f14 <_vfiprintf_r+0xc38>
  403674:	46d4      	mov	ip, sl
  403676:	2710      	movs	r7, #16
  403678:	46a2      	mov	sl, r4
  40367a:	9c06      	ldr	r4, [sp, #24]
  40367c:	e007      	b.n	40368e <_vfiprintf_r+0x3b2>
  40367e:	f101 0e02 	add.w	lr, r1, #2
  403682:	f10c 0c08 	add.w	ip, ip, #8
  403686:	4601      	mov	r1, r0
  403688:	3e10      	subs	r6, #16
  40368a:	2e10      	cmp	r6, #16
  40368c:	dd11      	ble.n	4036b2 <_vfiprintf_r+0x3d6>
  40368e:	1c48      	adds	r0, r1, #1
  403690:	3210      	adds	r2, #16
  403692:	2807      	cmp	r0, #7
  403694:	9211      	str	r2, [sp, #68]	; 0x44
  403696:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40369a:	9010      	str	r0, [sp, #64]	; 0x40
  40369c:	ddef      	ble.n	40367e <_vfiprintf_r+0x3a2>
  40369e:	2a00      	cmp	r2, #0
  4036a0:	f040 829d 	bne.w	403bde <_vfiprintf_r+0x902>
  4036a4:	3e10      	subs	r6, #16
  4036a6:	2e10      	cmp	r6, #16
  4036a8:	f04f 0e01 	mov.w	lr, #1
  4036ac:	4611      	mov	r1, r2
  4036ae:	46cc      	mov	ip, r9
  4036b0:	dced      	bgt.n	40368e <_vfiprintf_r+0x3b2>
  4036b2:	4654      	mov	r4, sl
  4036b4:	46e2      	mov	sl, ip
  4036b6:	4432      	add	r2, r6
  4036b8:	f1be 0f07 	cmp.w	lr, #7
  4036bc:	9211      	str	r2, [sp, #68]	; 0x44
  4036be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4036c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4036c6:	f300 8369 	bgt.w	403d9c <_vfiprintf_r+0xac0>
  4036ca:	f10a 0a08 	add.w	sl, sl, #8
  4036ce:	f10e 0001 	add.w	r0, lr, #1
  4036d2:	4671      	mov	r1, lr
  4036d4:	e1ab      	b.n	403a2e <_vfiprintf_r+0x752>
  4036d6:	9608      	str	r6, [sp, #32]
  4036d8:	f013 0220 	ands.w	r2, r3, #32
  4036dc:	f040 838c 	bne.w	403df8 <_vfiprintf_r+0xb1c>
  4036e0:	f013 0110 	ands.w	r1, r3, #16
  4036e4:	f040 831a 	bne.w	403d1c <_vfiprintf_r+0xa40>
  4036e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4036ec:	f000 8316 	beq.w	403d1c <_vfiprintf_r+0xa40>
  4036f0:	9807      	ldr	r0, [sp, #28]
  4036f2:	460a      	mov	r2, r1
  4036f4:	4601      	mov	r1, r0
  4036f6:	3104      	adds	r1, #4
  4036f8:	8806      	ldrh	r6, [r0, #0]
  4036fa:	9107      	str	r1, [sp, #28]
  4036fc:	2700      	movs	r7, #0
  4036fe:	e720      	b.n	403542 <_vfiprintf_r+0x266>
  403700:	9608      	str	r6, [sp, #32]
  403702:	f043 0310 	orr.w	r3, r3, #16
  403706:	e7e7      	b.n	4036d8 <_vfiprintf_r+0x3fc>
  403708:	9608      	str	r6, [sp, #32]
  40370a:	f043 0310 	orr.w	r3, r3, #16
  40370e:	e708      	b.n	403522 <_vfiprintf_r+0x246>
  403710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403714:	f898 2000 	ldrb.w	r2, [r8]
  403718:	e652      	b.n	4033c0 <_vfiprintf_r+0xe4>
  40371a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40371e:	2600      	movs	r6, #0
  403720:	f818 2b01 	ldrb.w	r2, [r8], #1
  403724:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403728:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40372c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403730:	2909      	cmp	r1, #9
  403732:	d9f5      	bls.n	403720 <_vfiprintf_r+0x444>
  403734:	e646      	b.n	4033c4 <_vfiprintf_r+0xe8>
  403736:	9608      	str	r6, [sp, #32]
  403738:	2800      	cmp	r0, #0
  40373a:	f040 8408 	bne.w	403f4e <_vfiprintf_r+0xc72>
  40373e:	f043 0310 	orr.w	r3, r3, #16
  403742:	069e      	lsls	r6, r3, #26
  403744:	f100 834c 	bmi.w	403de0 <_vfiprintf_r+0xb04>
  403748:	06dd      	lsls	r5, r3, #27
  40374a:	f100 82f3 	bmi.w	403d34 <_vfiprintf_r+0xa58>
  40374e:	0658      	lsls	r0, r3, #25
  403750:	f140 82f0 	bpl.w	403d34 <_vfiprintf_r+0xa58>
  403754:	9d07      	ldr	r5, [sp, #28]
  403756:	f9b5 6000 	ldrsh.w	r6, [r5]
  40375a:	462a      	mov	r2, r5
  40375c:	17f7      	asrs	r7, r6, #31
  40375e:	3204      	adds	r2, #4
  403760:	4630      	mov	r0, r6
  403762:	4639      	mov	r1, r7
  403764:	9207      	str	r2, [sp, #28]
  403766:	2800      	cmp	r0, #0
  403768:	f171 0200 	sbcs.w	r2, r1, #0
  40376c:	f2c0 835d 	blt.w	403e2a <_vfiprintf_r+0xb4e>
  403770:	1c61      	adds	r1, r4, #1
  403772:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403776:	f04f 0201 	mov.w	r2, #1
  40377a:	f47f aeea 	bne.w	403552 <_vfiprintf_r+0x276>
  40377e:	ea56 0107 	orrs.w	r1, r6, r7
  403782:	f000 824d 	beq.w	403c20 <_vfiprintf_r+0x944>
  403786:	9302      	str	r3, [sp, #8]
  403788:	2a01      	cmp	r2, #1
  40378a:	f000 828c 	beq.w	403ca6 <_vfiprintf_r+0x9ca>
  40378e:	2a02      	cmp	r2, #2
  403790:	f040 825c 	bne.w	403c4c <_vfiprintf_r+0x970>
  403794:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403796:	46cb      	mov	fp, r9
  403798:	0933      	lsrs	r3, r6, #4
  40379a:	f006 010f 	and.w	r1, r6, #15
  40379e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4037a2:	093a      	lsrs	r2, r7, #4
  4037a4:	461e      	mov	r6, r3
  4037a6:	4617      	mov	r7, r2
  4037a8:	5c43      	ldrb	r3, [r0, r1]
  4037aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4037ae:	ea56 0307 	orrs.w	r3, r6, r7
  4037b2:	d1f1      	bne.n	403798 <_vfiprintf_r+0x4bc>
  4037b4:	eba9 030b 	sub.w	r3, r9, fp
  4037b8:	9305      	str	r3, [sp, #20]
  4037ba:	e6e1      	b.n	403580 <_vfiprintf_r+0x2a4>
  4037bc:	2800      	cmp	r0, #0
  4037be:	f040 83c0 	bne.w	403f42 <_vfiprintf_r+0xc66>
  4037c2:	0699      	lsls	r1, r3, #26
  4037c4:	f100 8367 	bmi.w	403e96 <_vfiprintf_r+0xbba>
  4037c8:	06da      	lsls	r2, r3, #27
  4037ca:	f100 80f1 	bmi.w	4039b0 <_vfiprintf_r+0x6d4>
  4037ce:	065b      	lsls	r3, r3, #25
  4037d0:	f140 80ee 	bpl.w	4039b0 <_vfiprintf_r+0x6d4>
  4037d4:	9a07      	ldr	r2, [sp, #28]
  4037d6:	6813      	ldr	r3, [r2, #0]
  4037d8:	3204      	adds	r2, #4
  4037da:	9207      	str	r2, [sp, #28]
  4037dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4037e0:	801a      	strh	r2, [r3, #0]
  4037e2:	e5b8      	b.n	403356 <_vfiprintf_r+0x7a>
  4037e4:	9807      	ldr	r0, [sp, #28]
  4037e6:	4a3d      	ldr	r2, [pc, #244]	; (4038dc <_vfiprintf_r+0x600>)
  4037e8:	9608      	str	r6, [sp, #32]
  4037ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4037ec:	6806      	ldr	r6, [r0, #0]
  4037ee:	2278      	movs	r2, #120	; 0x78
  4037f0:	2130      	movs	r1, #48	; 0x30
  4037f2:	3004      	adds	r0, #4
  4037f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4037f8:	f043 0302 	orr.w	r3, r3, #2
  4037fc:	9007      	str	r0, [sp, #28]
  4037fe:	2700      	movs	r7, #0
  403800:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403804:	2202      	movs	r2, #2
  403806:	e69c      	b.n	403542 <_vfiprintf_r+0x266>
  403808:	9608      	str	r6, [sp, #32]
  40380a:	2800      	cmp	r0, #0
  40380c:	d099      	beq.n	403742 <_vfiprintf_r+0x466>
  40380e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403812:	e796      	b.n	403742 <_vfiprintf_r+0x466>
  403814:	f898 2000 	ldrb.w	r2, [r8]
  403818:	2d00      	cmp	r5, #0
  40381a:	f47f add1 	bne.w	4033c0 <_vfiprintf_r+0xe4>
  40381e:	2001      	movs	r0, #1
  403820:	2520      	movs	r5, #32
  403822:	e5cd      	b.n	4033c0 <_vfiprintf_r+0xe4>
  403824:	f043 0301 	orr.w	r3, r3, #1
  403828:	f898 2000 	ldrb.w	r2, [r8]
  40382c:	e5c8      	b.n	4033c0 <_vfiprintf_r+0xe4>
  40382e:	9608      	str	r6, [sp, #32]
  403830:	2800      	cmp	r0, #0
  403832:	f040 8393 	bne.w	403f5c <_vfiprintf_r+0xc80>
  403836:	4929      	ldr	r1, [pc, #164]	; (4038dc <_vfiprintf_r+0x600>)
  403838:	910b      	str	r1, [sp, #44]	; 0x2c
  40383a:	069f      	lsls	r7, r3, #26
  40383c:	f100 82e8 	bmi.w	403e10 <_vfiprintf_r+0xb34>
  403840:	9807      	ldr	r0, [sp, #28]
  403842:	06de      	lsls	r6, r3, #27
  403844:	4601      	mov	r1, r0
  403846:	f100 8270 	bmi.w	403d2a <_vfiprintf_r+0xa4e>
  40384a:	065d      	lsls	r5, r3, #25
  40384c:	f140 826d 	bpl.w	403d2a <_vfiprintf_r+0xa4e>
  403850:	3104      	adds	r1, #4
  403852:	8806      	ldrh	r6, [r0, #0]
  403854:	9107      	str	r1, [sp, #28]
  403856:	2700      	movs	r7, #0
  403858:	07d8      	lsls	r0, r3, #31
  40385a:	f140 8222 	bpl.w	403ca2 <_vfiprintf_r+0x9c6>
  40385e:	ea56 0107 	orrs.w	r1, r6, r7
  403862:	f000 821e 	beq.w	403ca2 <_vfiprintf_r+0x9c6>
  403866:	2130      	movs	r1, #48	; 0x30
  403868:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40386c:	f043 0302 	orr.w	r3, r3, #2
  403870:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403874:	2202      	movs	r2, #2
  403876:	e664      	b.n	403542 <_vfiprintf_r+0x266>
  403878:	9608      	str	r6, [sp, #32]
  40387a:	2800      	cmp	r0, #0
  40387c:	f040 836b 	bne.w	403f56 <_vfiprintf_r+0xc7a>
  403880:	4917      	ldr	r1, [pc, #92]	; (4038e0 <_vfiprintf_r+0x604>)
  403882:	910b      	str	r1, [sp, #44]	; 0x2c
  403884:	e7d9      	b.n	40383a <_vfiprintf_r+0x55e>
  403886:	9907      	ldr	r1, [sp, #28]
  403888:	9608      	str	r6, [sp, #32]
  40388a:	680a      	ldr	r2, [r1, #0]
  40388c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403890:	f04f 0000 	mov.w	r0, #0
  403894:	460a      	mov	r2, r1
  403896:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40389a:	3204      	adds	r2, #4
  40389c:	2001      	movs	r0, #1
  40389e:	9001      	str	r0, [sp, #4]
  4038a0:	9207      	str	r2, [sp, #28]
  4038a2:	9005      	str	r0, [sp, #20]
  4038a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4038a8:	9302      	str	r3, [sp, #8]
  4038aa:	2400      	movs	r4, #0
  4038ac:	e670      	b.n	403590 <_vfiprintf_r+0x2b4>
  4038ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4038b2:	f898 2000 	ldrb.w	r2, [r8]
  4038b6:	e583      	b.n	4033c0 <_vfiprintf_r+0xe4>
  4038b8:	f898 2000 	ldrb.w	r2, [r8]
  4038bc:	2a6c      	cmp	r2, #108	; 0x6c
  4038be:	bf03      	ittte	eq
  4038c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4038c4:	f043 0320 	orreq.w	r3, r3, #32
  4038c8:	f108 0801 	addeq.w	r8, r8, #1
  4038cc:	f043 0310 	orrne.w	r3, r3, #16
  4038d0:	e576      	b.n	4033c0 <_vfiprintf_r+0xe4>
  4038d2:	bf00      	nop
  4038d4:	00405ed8 	.word	0x00405ed8
  4038d8:	00405ee8 	.word	0x00405ee8
  4038dc:	00405ebc 	.word	0x00405ebc
  4038e0:	00405ea8 	.word	0x00405ea8
  4038e4:	9907      	ldr	r1, [sp, #28]
  4038e6:	680e      	ldr	r6, [r1, #0]
  4038e8:	460a      	mov	r2, r1
  4038ea:	2e00      	cmp	r6, #0
  4038ec:	f102 0204 	add.w	r2, r2, #4
  4038f0:	f6ff ae0f 	blt.w	403512 <_vfiprintf_r+0x236>
  4038f4:	9207      	str	r2, [sp, #28]
  4038f6:	f898 2000 	ldrb.w	r2, [r8]
  4038fa:	e561      	b.n	4033c0 <_vfiprintf_r+0xe4>
  4038fc:	f898 2000 	ldrb.w	r2, [r8]
  403900:	2001      	movs	r0, #1
  403902:	252b      	movs	r5, #43	; 0x2b
  403904:	e55c      	b.n	4033c0 <_vfiprintf_r+0xe4>
  403906:	9907      	ldr	r1, [sp, #28]
  403908:	9608      	str	r6, [sp, #32]
  40390a:	f8d1 b000 	ldr.w	fp, [r1]
  40390e:	f04f 0200 	mov.w	r2, #0
  403912:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403916:	1d0e      	adds	r6, r1, #4
  403918:	f1bb 0f00 	cmp.w	fp, #0
  40391c:	f000 82e5 	beq.w	403eea <_vfiprintf_r+0xc0e>
  403920:	1c67      	adds	r7, r4, #1
  403922:	f000 82c4 	beq.w	403eae <_vfiprintf_r+0xbd2>
  403926:	4622      	mov	r2, r4
  403928:	2100      	movs	r1, #0
  40392a:	4658      	mov	r0, fp
  40392c:	9301      	str	r3, [sp, #4]
  40392e:	f001 fbd7 	bl	4050e0 <memchr>
  403932:	9b01      	ldr	r3, [sp, #4]
  403934:	2800      	cmp	r0, #0
  403936:	f000 82e5 	beq.w	403f04 <_vfiprintf_r+0xc28>
  40393a:	eba0 020b 	sub.w	r2, r0, fp
  40393e:	9205      	str	r2, [sp, #20]
  403940:	9607      	str	r6, [sp, #28]
  403942:	9302      	str	r3, [sp, #8]
  403944:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403948:	2400      	movs	r4, #0
  40394a:	e619      	b.n	403580 <_vfiprintf_r+0x2a4>
  40394c:	f898 2000 	ldrb.w	r2, [r8]
  403950:	2a2a      	cmp	r2, #42	; 0x2a
  403952:	f108 0701 	add.w	r7, r8, #1
  403956:	f000 82e9 	beq.w	403f2c <_vfiprintf_r+0xc50>
  40395a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40395e:	2909      	cmp	r1, #9
  403960:	46b8      	mov	r8, r7
  403962:	f04f 0400 	mov.w	r4, #0
  403966:	f63f ad2d 	bhi.w	4033c4 <_vfiprintf_r+0xe8>
  40396a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40396e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403972:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403976:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40397a:	2909      	cmp	r1, #9
  40397c:	d9f5      	bls.n	40396a <_vfiprintf_r+0x68e>
  40397e:	e521      	b.n	4033c4 <_vfiprintf_r+0xe8>
  403980:	f043 0320 	orr.w	r3, r3, #32
  403984:	f898 2000 	ldrb.w	r2, [r8]
  403988:	e51a      	b.n	4033c0 <_vfiprintf_r+0xe4>
  40398a:	9608      	str	r6, [sp, #32]
  40398c:	2800      	cmp	r0, #0
  40398e:	f040 82db 	bne.w	403f48 <_vfiprintf_r+0xc6c>
  403992:	2a00      	cmp	r2, #0
  403994:	f000 80e7 	beq.w	403b66 <_vfiprintf_r+0x88a>
  403998:	2101      	movs	r1, #1
  40399a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40399e:	f04f 0200 	mov.w	r2, #0
  4039a2:	9101      	str	r1, [sp, #4]
  4039a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4039a8:	9105      	str	r1, [sp, #20]
  4039aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4039ae:	e77b      	b.n	4038a8 <_vfiprintf_r+0x5cc>
  4039b0:	9a07      	ldr	r2, [sp, #28]
  4039b2:	6813      	ldr	r3, [r2, #0]
  4039b4:	3204      	adds	r2, #4
  4039b6:	9207      	str	r2, [sp, #28]
  4039b8:	9a03      	ldr	r2, [sp, #12]
  4039ba:	601a      	str	r2, [r3, #0]
  4039bc:	e4cb      	b.n	403356 <_vfiprintf_r+0x7a>
  4039be:	aa0f      	add	r2, sp, #60	; 0x3c
  4039c0:	9904      	ldr	r1, [sp, #16]
  4039c2:	4620      	mov	r0, r4
  4039c4:	f7ff fc4a 	bl	40325c <__sprint_r.part.0>
  4039c8:	2800      	cmp	r0, #0
  4039ca:	f040 8139 	bne.w	403c40 <_vfiprintf_r+0x964>
  4039ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4039d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4039d2:	f101 0c01 	add.w	ip, r1, #1
  4039d6:	46ce      	mov	lr, r9
  4039d8:	e5ff      	b.n	4035da <_vfiprintf_r+0x2fe>
  4039da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4039dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4039de:	1c48      	adds	r0, r1, #1
  4039e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4039e4:	2d00      	cmp	r5, #0
  4039e6:	f43f ae22 	beq.w	40362e <_vfiprintf_r+0x352>
  4039ea:	3201      	adds	r2, #1
  4039ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4039f0:	2101      	movs	r1, #1
  4039f2:	2807      	cmp	r0, #7
  4039f4:	9211      	str	r2, [sp, #68]	; 0x44
  4039f6:	9010      	str	r0, [sp, #64]	; 0x40
  4039f8:	f8ca 5000 	str.w	r5, [sl]
  4039fc:	f8ca 1004 	str.w	r1, [sl, #4]
  403a00:	f340 8108 	ble.w	403c14 <_vfiprintf_r+0x938>
  403a04:	2a00      	cmp	r2, #0
  403a06:	f040 81bc 	bne.w	403d82 <_vfiprintf_r+0xaa6>
  403a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a0c:	2b00      	cmp	r3, #0
  403a0e:	f43f ae1f 	beq.w	403650 <_vfiprintf_r+0x374>
  403a12:	ab0e      	add	r3, sp, #56	; 0x38
  403a14:	2202      	movs	r2, #2
  403a16:	4608      	mov	r0, r1
  403a18:	931c      	str	r3, [sp, #112]	; 0x70
  403a1a:	921d      	str	r2, [sp, #116]	; 0x74
  403a1c:	46ca      	mov	sl, r9
  403a1e:	4601      	mov	r1, r0
  403a20:	f10a 0a08 	add.w	sl, sl, #8
  403a24:	3001      	adds	r0, #1
  403a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a28:	2b80      	cmp	r3, #128	; 0x80
  403a2a:	f43f ae19 	beq.w	403660 <_vfiprintf_r+0x384>
  403a2e:	9b05      	ldr	r3, [sp, #20]
  403a30:	1ae4      	subs	r4, r4, r3
  403a32:	2c00      	cmp	r4, #0
  403a34:	dd2e      	ble.n	403a94 <_vfiprintf_r+0x7b8>
  403a36:	2c10      	cmp	r4, #16
  403a38:	4db3      	ldr	r5, [pc, #716]	; (403d08 <_vfiprintf_r+0xa2c>)
  403a3a:	dd1e      	ble.n	403a7a <_vfiprintf_r+0x79e>
  403a3c:	46d6      	mov	lr, sl
  403a3e:	2610      	movs	r6, #16
  403a40:	9f06      	ldr	r7, [sp, #24]
  403a42:	f8dd a010 	ldr.w	sl, [sp, #16]
  403a46:	e006      	b.n	403a56 <_vfiprintf_r+0x77a>
  403a48:	1c88      	adds	r0, r1, #2
  403a4a:	f10e 0e08 	add.w	lr, lr, #8
  403a4e:	4619      	mov	r1, r3
  403a50:	3c10      	subs	r4, #16
  403a52:	2c10      	cmp	r4, #16
  403a54:	dd10      	ble.n	403a78 <_vfiprintf_r+0x79c>
  403a56:	1c4b      	adds	r3, r1, #1
  403a58:	3210      	adds	r2, #16
  403a5a:	2b07      	cmp	r3, #7
  403a5c:	9211      	str	r2, [sp, #68]	; 0x44
  403a5e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403a62:	9310      	str	r3, [sp, #64]	; 0x40
  403a64:	ddf0      	ble.n	403a48 <_vfiprintf_r+0x76c>
  403a66:	2a00      	cmp	r2, #0
  403a68:	d165      	bne.n	403b36 <_vfiprintf_r+0x85a>
  403a6a:	3c10      	subs	r4, #16
  403a6c:	2c10      	cmp	r4, #16
  403a6e:	f04f 0001 	mov.w	r0, #1
  403a72:	4611      	mov	r1, r2
  403a74:	46ce      	mov	lr, r9
  403a76:	dcee      	bgt.n	403a56 <_vfiprintf_r+0x77a>
  403a78:	46f2      	mov	sl, lr
  403a7a:	4422      	add	r2, r4
  403a7c:	2807      	cmp	r0, #7
  403a7e:	9211      	str	r2, [sp, #68]	; 0x44
  403a80:	f8ca 5000 	str.w	r5, [sl]
  403a84:	f8ca 4004 	str.w	r4, [sl, #4]
  403a88:	9010      	str	r0, [sp, #64]	; 0x40
  403a8a:	f300 8085 	bgt.w	403b98 <_vfiprintf_r+0x8bc>
  403a8e:	f10a 0a08 	add.w	sl, sl, #8
  403a92:	3001      	adds	r0, #1
  403a94:	9905      	ldr	r1, [sp, #20]
  403a96:	f8ca b000 	str.w	fp, [sl]
  403a9a:	440a      	add	r2, r1
  403a9c:	2807      	cmp	r0, #7
  403a9e:	9211      	str	r2, [sp, #68]	; 0x44
  403aa0:	f8ca 1004 	str.w	r1, [sl, #4]
  403aa4:	9010      	str	r0, [sp, #64]	; 0x40
  403aa6:	f340 8082 	ble.w	403bae <_vfiprintf_r+0x8d2>
  403aaa:	2a00      	cmp	r2, #0
  403aac:	f040 8118 	bne.w	403ce0 <_vfiprintf_r+0xa04>
  403ab0:	9b02      	ldr	r3, [sp, #8]
  403ab2:	9210      	str	r2, [sp, #64]	; 0x40
  403ab4:	0758      	lsls	r0, r3, #29
  403ab6:	d535      	bpl.n	403b24 <_vfiprintf_r+0x848>
  403ab8:	9b08      	ldr	r3, [sp, #32]
  403aba:	9901      	ldr	r1, [sp, #4]
  403abc:	1a5c      	subs	r4, r3, r1
  403abe:	2c00      	cmp	r4, #0
  403ac0:	f340 80e7 	ble.w	403c92 <_vfiprintf_r+0x9b6>
  403ac4:	46ca      	mov	sl, r9
  403ac6:	2c10      	cmp	r4, #16
  403ac8:	f340 8218 	ble.w	403efc <_vfiprintf_r+0xc20>
  403acc:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ace:	4e8f      	ldr	r6, [pc, #572]	; (403d0c <_vfiprintf_r+0xa30>)
  403ad0:	9f06      	ldr	r7, [sp, #24]
  403ad2:	f8dd b010 	ldr.w	fp, [sp, #16]
  403ad6:	2510      	movs	r5, #16
  403ad8:	e006      	b.n	403ae8 <_vfiprintf_r+0x80c>
  403ada:	1c88      	adds	r0, r1, #2
  403adc:	f10a 0a08 	add.w	sl, sl, #8
  403ae0:	4619      	mov	r1, r3
  403ae2:	3c10      	subs	r4, #16
  403ae4:	2c10      	cmp	r4, #16
  403ae6:	dd11      	ble.n	403b0c <_vfiprintf_r+0x830>
  403ae8:	1c4b      	adds	r3, r1, #1
  403aea:	3210      	adds	r2, #16
  403aec:	2b07      	cmp	r3, #7
  403aee:	9211      	str	r2, [sp, #68]	; 0x44
  403af0:	f8ca 6000 	str.w	r6, [sl]
  403af4:	f8ca 5004 	str.w	r5, [sl, #4]
  403af8:	9310      	str	r3, [sp, #64]	; 0x40
  403afa:	ddee      	ble.n	403ada <_vfiprintf_r+0x7fe>
  403afc:	bb42      	cbnz	r2, 403b50 <_vfiprintf_r+0x874>
  403afe:	3c10      	subs	r4, #16
  403b00:	2c10      	cmp	r4, #16
  403b02:	f04f 0001 	mov.w	r0, #1
  403b06:	4611      	mov	r1, r2
  403b08:	46ca      	mov	sl, r9
  403b0a:	dced      	bgt.n	403ae8 <_vfiprintf_r+0x80c>
  403b0c:	4422      	add	r2, r4
  403b0e:	2807      	cmp	r0, #7
  403b10:	9211      	str	r2, [sp, #68]	; 0x44
  403b12:	f8ca 6000 	str.w	r6, [sl]
  403b16:	f8ca 4004 	str.w	r4, [sl, #4]
  403b1a:	9010      	str	r0, [sp, #64]	; 0x40
  403b1c:	dd51      	ble.n	403bc2 <_vfiprintf_r+0x8e6>
  403b1e:	2a00      	cmp	r2, #0
  403b20:	f040 819b 	bne.w	403e5a <_vfiprintf_r+0xb7e>
  403b24:	9b03      	ldr	r3, [sp, #12]
  403b26:	9a08      	ldr	r2, [sp, #32]
  403b28:	9901      	ldr	r1, [sp, #4]
  403b2a:	428a      	cmp	r2, r1
  403b2c:	bfac      	ite	ge
  403b2e:	189b      	addge	r3, r3, r2
  403b30:	185b      	addlt	r3, r3, r1
  403b32:	9303      	str	r3, [sp, #12]
  403b34:	e04e      	b.n	403bd4 <_vfiprintf_r+0x8f8>
  403b36:	aa0f      	add	r2, sp, #60	; 0x3c
  403b38:	4651      	mov	r1, sl
  403b3a:	4638      	mov	r0, r7
  403b3c:	f7ff fb8e 	bl	40325c <__sprint_r.part.0>
  403b40:	2800      	cmp	r0, #0
  403b42:	f040 813f 	bne.w	403dc4 <_vfiprintf_r+0xae8>
  403b46:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b4a:	1c48      	adds	r0, r1, #1
  403b4c:	46ce      	mov	lr, r9
  403b4e:	e77f      	b.n	403a50 <_vfiprintf_r+0x774>
  403b50:	aa0f      	add	r2, sp, #60	; 0x3c
  403b52:	4659      	mov	r1, fp
  403b54:	4638      	mov	r0, r7
  403b56:	f7ff fb81 	bl	40325c <__sprint_r.part.0>
  403b5a:	b960      	cbnz	r0, 403b76 <_vfiprintf_r+0x89a>
  403b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b60:	1c48      	adds	r0, r1, #1
  403b62:	46ca      	mov	sl, r9
  403b64:	e7bd      	b.n	403ae2 <_vfiprintf_r+0x806>
  403b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b68:	f8dd b010 	ldr.w	fp, [sp, #16]
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	f040 81d4 	bne.w	403f1a <_vfiprintf_r+0xc3e>
  403b72:	2300      	movs	r3, #0
  403b74:	9310      	str	r3, [sp, #64]	; 0x40
  403b76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403b7a:	f013 0f01 	tst.w	r3, #1
  403b7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403b82:	d102      	bne.n	403b8a <_vfiprintf_r+0x8ae>
  403b84:	059a      	lsls	r2, r3, #22
  403b86:	f140 80de 	bpl.w	403d46 <_vfiprintf_r+0xa6a>
  403b8a:	065b      	lsls	r3, r3, #25
  403b8c:	f53f acb2 	bmi.w	4034f4 <_vfiprintf_r+0x218>
  403b90:	9803      	ldr	r0, [sp, #12]
  403b92:	b02d      	add	sp, #180	; 0xb4
  403b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b98:	2a00      	cmp	r2, #0
  403b9a:	f040 8106 	bne.w	403daa <_vfiprintf_r+0xace>
  403b9e:	9a05      	ldr	r2, [sp, #20]
  403ba0:	921d      	str	r2, [sp, #116]	; 0x74
  403ba2:	2301      	movs	r3, #1
  403ba4:	9211      	str	r2, [sp, #68]	; 0x44
  403ba6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  403baa:	9310      	str	r3, [sp, #64]	; 0x40
  403bac:	46ca      	mov	sl, r9
  403bae:	f10a 0a08 	add.w	sl, sl, #8
  403bb2:	9b02      	ldr	r3, [sp, #8]
  403bb4:	0759      	lsls	r1, r3, #29
  403bb6:	d504      	bpl.n	403bc2 <_vfiprintf_r+0x8e6>
  403bb8:	9b08      	ldr	r3, [sp, #32]
  403bba:	9901      	ldr	r1, [sp, #4]
  403bbc:	1a5c      	subs	r4, r3, r1
  403bbe:	2c00      	cmp	r4, #0
  403bc0:	dc81      	bgt.n	403ac6 <_vfiprintf_r+0x7ea>
  403bc2:	9b03      	ldr	r3, [sp, #12]
  403bc4:	9908      	ldr	r1, [sp, #32]
  403bc6:	9801      	ldr	r0, [sp, #4]
  403bc8:	4281      	cmp	r1, r0
  403bca:	bfac      	ite	ge
  403bcc:	185b      	addge	r3, r3, r1
  403bce:	181b      	addlt	r3, r3, r0
  403bd0:	9303      	str	r3, [sp, #12]
  403bd2:	bb72      	cbnz	r2, 403c32 <_vfiprintf_r+0x956>
  403bd4:	2300      	movs	r3, #0
  403bd6:	9310      	str	r3, [sp, #64]	; 0x40
  403bd8:	46ca      	mov	sl, r9
  403bda:	f7ff bbbc 	b.w	403356 <_vfiprintf_r+0x7a>
  403bde:	aa0f      	add	r2, sp, #60	; 0x3c
  403be0:	9904      	ldr	r1, [sp, #16]
  403be2:	4620      	mov	r0, r4
  403be4:	f7ff fb3a 	bl	40325c <__sprint_r.part.0>
  403be8:	bb50      	cbnz	r0, 403c40 <_vfiprintf_r+0x964>
  403bea:	9910      	ldr	r1, [sp, #64]	; 0x40
  403bec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403bee:	f101 0e01 	add.w	lr, r1, #1
  403bf2:	46cc      	mov	ip, r9
  403bf4:	e548      	b.n	403688 <_vfiprintf_r+0x3ac>
  403bf6:	2a00      	cmp	r2, #0
  403bf8:	f040 8140 	bne.w	403e7c <_vfiprintf_r+0xba0>
  403bfc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403c00:	2900      	cmp	r1, #0
  403c02:	f000 811b 	beq.w	403e3c <_vfiprintf_r+0xb60>
  403c06:	2201      	movs	r2, #1
  403c08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  403c0c:	4610      	mov	r0, r2
  403c0e:	921d      	str	r2, [sp, #116]	; 0x74
  403c10:	911c      	str	r1, [sp, #112]	; 0x70
  403c12:	46ca      	mov	sl, r9
  403c14:	4601      	mov	r1, r0
  403c16:	f10a 0a08 	add.w	sl, sl, #8
  403c1a:	3001      	adds	r0, #1
  403c1c:	e507      	b.n	40362e <_vfiprintf_r+0x352>
  403c1e:	9b02      	ldr	r3, [sp, #8]
  403c20:	2a01      	cmp	r2, #1
  403c22:	f000 8098 	beq.w	403d56 <_vfiprintf_r+0xa7a>
  403c26:	2a02      	cmp	r2, #2
  403c28:	d10d      	bne.n	403c46 <_vfiprintf_r+0x96a>
  403c2a:	9302      	str	r3, [sp, #8]
  403c2c:	2600      	movs	r6, #0
  403c2e:	2700      	movs	r7, #0
  403c30:	e5b0      	b.n	403794 <_vfiprintf_r+0x4b8>
  403c32:	aa0f      	add	r2, sp, #60	; 0x3c
  403c34:	9904      	ldr	r1, [sp, #16]
  403c36:	9806      	ldr	r0, [sp, #24]
  403c38:	f7ff fb10 	bl	40325c <__sprint_r.part.0>
  403c3c:	2800      	cmp	r0, #0
  403c3e:	d0c9      	beq.n	403bd4 <_vfiprintf_r+0x8f8>
  403c40:	f8dd b010 	ldr.w	fp, [sp, #16]
  403c44:	e797      	b.n	403b76 <_vfiprintf_r+0x89a>
  403c46:	9302      	str	r3, [sp, #8]
  403c48:	2600      	movs	r6, #0
  403c4a:	2700      	movs	r7, #0
  403c4c:	4649      	mov	r1, r9
  403c4e:	e000      	b.n	403c52 <_vfiprintf_r+0x976>
  403c50:	4659      	mov	r1, fp
  403c52:	08f2      	lsrs	r2, r6, #3
  403c54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403c58:	08f8      	lsrs	r0, r7, #3
  403c5a:	f006 0307 	and.w	r3, r6, #7
  403c5e:	4607      	mov	r7, r0
  403c60:	4616      	mov	r6, r2
  403c62:	3330      	adds	r3, #48	; 0x30
  403c64:	ea56 0207 	orrs.w	r2, r6, r7
  403c68:	f801 3c01 	strb.w	r3, [r1, #-1]
  403c6c:	f101 3bff 	add.w	fp, r1, #4294967295
  403c70:	d1ee      	bne.n	403c50 <_vfiprintf_r+0x974>
  403c72:	9a02      	ldr	r2, [sp, #8]
  403c74:	07d6      	lsls	r6, r2, #31
  403c76:	f57f ad9d 	bpl.w	4037b4 <_vfiprintf_r+0x4d8>
  403c7a:	2b30      	cmp	r3, #48	; 0x30
  403c7c:	f43f ad9a 	beq.w	4037b4 <_vfiprintf_r+0x4d8>
  403c80:	3902      	subs	r1, #2
  403c82:	2330      	movs	r3, #48	; 0x30
  403c84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403c88:	eba9 0301 	sub.w	r3, r9, r1
  403c8c:	9305      	str	r3, [sp, #20]
  403c8e:	468b      	mov	fp, r1
  403c90:	e476      	b.n	403580 <_vfiprintf_r+0x2a4>
  403c92:	9b03      	ldr	r3, [sp, #12]
  403c94:	9a08      	ldr	r2, [sp, #32]
  403c96:	428a      	cmp	r2, r1
  403c98:	bfac      	ite	ge
  403c9a:	189b      	addge	r3, r3, r2
  403c9c:	185b      	addlt	r3, r3, r1
  403c9e:	9303      	str	r3, [sp, #12]
  403ca0:	e798      	b.n	403bd4 <_vfiprintf_r+0x8f8>
  403ca2:	2202      	movs	r2, #2
  403ca4:	e44d      	b.n	403542 <_vfiprintf_r+0x266>
  403ca6:	2f00      	cmp	r7, #0
  403ca8:	bf08      	it	eq
  403caa:	2e0a      	cmpeq	r6, #10
  403cac:	d352      	bcc.n	403d54 <_vfiprintf_r+0xa78>
  403cae:	46cb      	mov	fp, r9
  403cb0:	4630      	mov	r0, r6
  403cb2:	4639      	mov	r1, r7
  403cb4:	220a      	movs	r2, #10
  403cb6:	2300      	movs	r3, #0
  403cb8:	f7fe fe8e 	bl	4029d8 <__aeabi_uldivmod>
  403cbc:	3230      	adds	r2, #48	; 0x30
  403cbe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403cc2:	4630      	mov	r0, r6
  403cc4:	4639      	mov	r1, r7
  403cc6:	2300      	movs	r3, #0
  403cc8:	220a      	movs	r2, #10
  403cca:	f7fe fe85 	bl	4029d8 <__aeabi_uldivmod>
  403cce:	4606      	mov	r6, r0
  403cd0:	460f      	mov	r7, r1
  403cd2:	ea56 0307 	orrs.w	r3, r6, r7
  403cd6:	d1eb      	bne.n	403cb0 <_vfiprintf_r+0x9d4>
  403cd8:	e56c      	b.n	4037b4 <_vfiprintf_r+0x4d8>
  403cda:	9405      	str	r4, [sp, #20]
  403cdc:	46cb      	mov	fp, r9
  403cde:	e44f      	b.n	403580 <_vfiprintf_r+0x2a4>
  403ce0:	aa0f      	add	r2, sp, #60	; 0x3c
  403ce2:	9904      	ldr	r1, [sp, #16]
  403ce4:	9806      	ldr	r0, [sp, #24]
  403ce6:	f7ff fab9 	bl	40325c <__sprint_r.part.0>
  403cea:	2800      	cmp	r0, #0
  403cec:	d1a8      	bne.n	403c40 <_vfiprintf_r+0x964>
  403cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403cf0:	46ca      	mov	sl, r9
  403cf2:	e75e      	b.n	403bb2 <_vfiprintf_r+0x8d6>
  403cf4:	aa0f      	add	r2, sp, #60	; 0x3c
  403cf6:	9904      	ldr	r1, [sp, #16]
  403cf8:	9806      	ldr	r0, [sp, #24]
  403cfa:	f7ff faaf 	bl	40325c <__sprint_r.part.0>
  403cfe:	2800      	cmp	r0, #0
  403d00:	d19e      	bne.n	403c40 <_vfiprintf_r+0x964>
  403d02:	46ca      	mov	sl, r9
  403d04:	f7ff bbc0 	b.w	403488 <_vfiprintf_r+0x1ac>
  403d08:	00405ee8 	.word	0x00405ee8
  403d0c:	00405ed8 	.word	0x00405ed8
  403d10:	3104      	adds	r1, #4
  403d12:	6816      	ldr	r6, [r2, #0]
  403d14:	9107      	str	r1, [sp, #28]
  403d16:	2201      	movs	r2, #1
  403d18:	2700      	movs	r7, #0
  403d1a:	e412      	b.n	403542 <_vfiprintf_r+0x266>
  403d1c:	9807      	ldr	r0, [sp, #28]
  403d1e:	4601      	mov	r1, r0
  403d20:	3104      	adds	r1, #4
  403d22:	6806      	ldr	r6, [r0, #0]
  403d24:	9107      	str	r1, [sp, #28]
  403d26:	2700      	movs	r7, #0
  403d28:	e40b      	b.n	403542 <_vfiprintf_r+0x266>
  403d2a:	680e      	ldr	r6, [r1, #0]
  403d2c:	3104      	adds	r1, #4
  403d2e:	9107      	str	r1, [sp, #28]
  403d30:	2700      	movs	r7, #0
  403d32:	e591      	b.n	403858 <_vfiprintf_r+0x57c>
  403d34:	9907      	ldr	r1, [sp, #28]
  403d36:	680e      	ldr	r6, [r1, #0]
  403d38:	460a      	mov	r2, r1
  403d3a:	17f7      	asrs	r7, r6, #31
  403d3c:	3204      	adds	r2, #4
  403d3e:	9207      	str	r2, [sp, #28]
  403d40:	4630      	mov	r0, r6
  403d42:	4639      	mov	r1, r7
  403d44:	e50f      	b.n	403766 <_vfiprintf_r+0x48a>
  403d46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403d4a:	f000 fe7f 	bl	404a4c <__retarget_lock_release_recursive>
  403d4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403d52:	e71a      	b.n	403b8a <_vfiprintf_r+0x8ae>
  403d54:	9b02      	ldr	r3, [sp, #8]
  403d56:	9302      	str	r3, [sp, #8]
  403d58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403d5c:	3630      	adds	r6, #48	; 0x30
  403d5e:	2301      	movs	r3, #1
  403d60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403d64:	9305      	str	r3, [sp, #20]
  403d66:	e40b      	b.n	403580 <_vfiprintf_r+0x2a4>
  403d68:	aa0f      	add	r2, sp, #60	; 0x3c
  403d6a:	9904      	ldr	r1, [sp, #16]
  403d6c:	9806      	ldr	r0, [sp, #24]
  403d6e:	f7ff fa75 	bl	40325c <__sprint_r.part.0>
  403d72:	2800      	cmp	r0, #0
  403d74:	f47f af64 	bne.w	403c40 <_vfiprintf_r+0x964>
  403d78:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d7c:	1c48      	adds	r0, r1, #1
  403d7e:	46ca      	mov	sl, r9
  403d80:	e651      	b.n	403a26 <_vfiprintf_r+0x74a>
  403d82:	aa0f      	add	r2, sp, #60	; 0x3c
  403d84:	9904      	ldr	r1, [sp, #16]
  403d86:	9806      	ldr	r0, [sp, #24]
  403d88:	f7ff fa68 	bl	40325c <__sprint_r.part.0>
  403d8c:	2800      	cmp	r0, #0
  403d8e:	f47f af57 	bne.w	403c40 <_vfiprintf_r+0x964>
  403d92:	9910      	ldr	r1, [sp, #64]	; 0x40
  403d94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403d96:	1c48      	adds	r0, r1, #1
  403d98:	46ca      	mov	sl, r9
  403d9a:	e448      	b.n	40362e <_vfiprintf_r+0x352>
  403d9c:	2a00      	cmp	r2, #0
  403d9e:	f040 8091 	bne.w	403ec4 <_vfiprintf_r+0xbe8>
  403da2:	2001      	movs	r0, #1
  403da4:	4611      	mov	r1, r2
  403da6:	46ca      	mov	sl, r9
  403da8:	e641      	b.n	403a2e <_vfiprintf_r+0x752>
  403daa:	aa0f      	add	r2, sp, #60	; 0x3c
  403dac:	9904      	ldr	r1, [sp, #16]
  403dae:	9806      	ldr	r0, [sp, #24]
  403db0:	f7ff fa54 	bl	40325c <__sprint_r.part.0>
  403db4:	2800      	cmp	r0, #0
  403db6:	f47f af43 	bne.w	403c40 <_vfiprintf_r+0x964>
  403dba:	9810      	ldr	r0, [sp, #64]	; 0x40
  403dbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dbe:	3001      	adds	r0, #1
  403dc0:	46ca      	mov	sl, r9
  403dc2:	e667      	b.n	403a94 <_vfiprintf_r+0x7b8>
  403dc4:	46d3      	mov	fp, sl
  403dc6:	e6d6      	b.n	403b76 <_vfiprintf_r+0x89a>
  403dc8:	9e07      	ldr	r6, [sp, #28]
  403dca:	3607      	adds	r6, #7
  403dcc:	f026 0207 	bic.w	r2, r6, #7
  403dd0:	f102 0108 	add.w	r1, r2, #8
  403dd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  403dd8:	9107      	str	r1, [sp, #28]
  403dda:	2201      	movs	r2, #1
  403ddc:	f7ff bbb1 	b.w	403542 <_vfiprintf_r+0x266>
  403de0:	9e07      	ldr	r6, [sp, #28]
  403de2:	3607      	adds	r6, #7
  403de4:	f026 0607 	bic.w	r6, r6, #7
  403de8:	e9d6 0100 	ldrd	r0, r1, [r6]
  403dec:	f106 0208 	add.w	r2, r6, #8
  403df0:	9207      	str	r2, [sp, #28]
  403df2:	4606      	mov	r6, r0
  403df4:	460f      	mov	r7, r1
  403df6:	e4b6      	b.n	403766 <_vfiprintf_r+0x48a>
  403df8:	9e07      	ldr	r6, [sp, #28]
  403dfa:	3607      	adds	r6, #7
  403dfc:	f026 0207 	bic.w	r2, r6, #7
  403e00:	f102 0108 	add.w	r1, r2, #8
  403e04:	e9d2 6700 	ldrd	r6, r7, [r2]
  403e08:	9107      	str	r1, [sp, #28]
  403e0a:	2200      	movs	r2, #0
  403e0c:	f7ff bb99 	b.w	403542 <_vfiprintf_r+0x266>
  403e10:	9e07      	ldr	r6, [sp, #28]
  403e12:	3607      	adds	r6, #7
  403e14:	f026 0107 	bic.w	r1, r6, #7
  403e18:	f101 0008 	add.w	r0, r1, #8
  403e1c:	9007      	str	r0, [sp, #28]
  403e1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403e22:	e519      	b.n	403858 <_vfiprintf_r+0x57c>
  403e24:	46cb      	mov	fp, r9
  403e26:	f7ff bbab 	b.w	403580 <_vfiprintf_r+0x2a4>
  403e2a:	252d      	movs	r5, #45	; 0x2d
  403e2c:	4276      	negs	r6, r6
  403e2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403e32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403e36:	2201      	movs	r2, #1
  403e38:	f7ff bb88 	b.w	40354c <_vfiprintf_r+0x270>
  403e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e3e:	b9b3      	cbnz	r3, 403e6e <_vfiprintf_r+0xb92>
  403e40:	4611      	mov	r1, r2
  403e42:	2001      	movs	r0, #1
  403e44:	46ca      	mov	sl, r9
  403e46:	e5f2      	b.n	403a2e <_vfiprintf_r+0x752>
  403e48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403e4c:	f000 fdfe 	bl	404a4c <__retarget_lock_release_recursive>
  403e50:	f04f 33ff 	mov.w	r3, #4294967295
  403e54:	9303      	str	r3, [sp, #12]
  403e56:	f7ff bb50 	b.w	4034fa <_vfiprintf_r+0x21e>
  403e5a:	aa0f      	add	r2, sp, #60	; 0x3c
  403e5c:	9904      	ldr	r1, [sp, #16]
  403e5e:	9806      	ldr	r0, [sp, #24]
  403e60:	f7ff f9fc 	bl	40325c <__sprint_r.part.0>
  403e64:	2800      	cmp	r0, #0
  403e66:	f47f aeeb 	bne.w	403c40 <_vfiprintf_r+0x964>
  403e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e6c:	e6a9      	b.n	403bc2 <_vfiprintf_r+0x8e6>
  403e6e:	ab0e      	add	r3, sp, #56	; 0x38
  403e70:	2202      	movs	r2, #2
  403e72:	931c      	str	r3, [sp, #112]	; 0x70
  403e74:	921d      	str	r2, [sp, #116]	; 0x74
  403e76:	2001      	movs	r0, #1
  403e78:	46ca      	mov	sl, r9
  403e7a:	e5d0      	b.n	403a1e <_vfiprintf_r+0x742>
  403e7c:	aa0f      	add	r2, sp, #60	; 0x3c
  403e7e:	9904      	ldr	r1, [sp, #16]
  403e80:	9806      	ldr	r0, [sp, #24]
  403e82:	f7ff f9eb 	bl	40325c <__sprint_r.part.0>
  403e86:	2800      	cmp	r0, #0
  403e88:	f47f aeda 	bne.w	403c40 <_vfiprintf_r+0x964>
  403e8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  403e8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e90:	1c48      	adds	r0, r1, #1
  403e92:	46ca      	mov	sl, r9
  403e94:	e5a4      	b.n	4039e0 <_vfiprintf_r+0x704>
  403e96:	9a07      	ldr	r2, [sp, #28]
  403e98:	9903      	ldr	r1, [sp, #12]
  403e9a:	6813      	ldr	r3, [r2, #0]
  403e9c:	17cd      	asrs	r5, r1, #31
  403e9e:	4608      	mov	r0, r1
  403ea0:	3204      	adds	r2, #4
  403ea2:	4629      	mov	r1, r5
  403ea4:	9207      	str	r2, [sp, #28]
  403ea6:	e9c3 0100 	strd	r0, r1, [r3]
  403eaa:	f7ff ba54 	b.w	403356 <_vfiprintf_r+0x7a>
  403eae:	4658      	mov	r0, fp
  403eb0:	9607      	str	r6, [sp, #28]
  403eb2:	9302      	str	r3, [sp, #8]
  403eb4:	f7ff f964 	bl	403180 <strlen>
  403eb8:	2400      	movs	r4, #0
  403eba:	9005      	str	r0, [sp, #20]
  403ebc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ec0:	f7ff bb5e 	b.w	403580 <_vfiprintf_r+0x2a4>
  403ec4:	aa0f      	add	r2, sp, #60	; 0x3c
  403ec6:	9904      	ldr	r1, [sp, #16]
  403ec8:	9806      	ldr	r0, [sp, #24]
  403eca:	f7ff f9c7 	bl	40325c <__sprint_r.part.0>
  403ece:	2800      	cmp	r0, #0
  403ed0:	f47f aeb6 	bne.w	403c40 <_vfiprintf_r+0x964>
  403ed4:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ed8:	1c48      	adds	r0, r1, #1
  403eda:	46ca      	mov	sl, r9
  403edc:	e5a7      	b.n	403a2e <_vfiprintf_r+0x752>
  403ede:	9910      	ldr	r1, [sp, #64]	; 0x40
  403ee0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ee2:	4e20      	ldr	r6, [pc, #128]	; (403f64 <_vfiprintf_r+0xc88>)
  403ee4:	3101      	adds	r1, #1
  403ee6:	f7ff bb90 	b.w	40360a <_vfiprintf_r+0x32e>
  403eea:	2c06      	cmp	r4, #6
  403eec:	bf28      	it	cs
  403eee:	2406      	movcs	r4, #6
  403ef0:	9405      	str	r4, [sp, #20]
  403ef2:	9607      	str	r6, [sp, #28]
  403ef4:	9401      	str	r4, [sp, #4]
  403ef6:	f8df b070 	ldr.w	fp, [pc, #112]	; 403f68 <_vfiprintf_r+0xc8c>
  403efa:	e4d5      	b.n	4038a8 <_vfiprintf_r+0x5cc>
  403efc:	9810      	ldr	r0, [sp, #64]	; 0x40
  403efe:	4e19      	ldr	r6, [pc, #100]	; (403f64 <_vfiprintf_r+0xc88>)
  403f00:	3001      	adds	r0, #1
  403f02:	e603      	b.n	403b0c <_vfiprintf_r+0x830>
  403f04:	9405      	str	r4, [sp, #20]
  403f06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403f0a:	9607      	str	r6, [sp, #28]
  403f0c:	9302      	str	r3, [sp, #8]
  403f0e:	4604      	mov	r4, r0
  403f10:	f7ff bb36 	b.w	403580 <_vfiprintf_r+0x2a4>
  403f14:	4686      	mov	lr, r0
  403f16:	f7ff bbce 	b.w	4036b6 <_vfiprintf_r+0x3da>
  403f1a:	9806      	ldr	r0, [sp, #24]
  403f1c:	aa0f      	add	r2, sp, #60	; 0x3c
  403f1e:	4659      	mov	r1, fp
  403f20:	f7ff f99c 	bl	40325c <__sprint_r.part.0>
  403f24:	2800      	cmp	r0, #0
  403f26:	f43f ae24 	beq.w	403b72 <_vfiprintf_r+0x896>
  403f2a:	e624      	b.n	403b76 <_vfiprintf_r+0x89a>
  403f2c:	9907      	ldr	r1, [sp, #28]
  403f2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403f32:	680c      	ldr	r4, [r1, #0]
  403f34:	3104      	adds	r1, #4
  403f36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  403f3a:	46b8      	mov	r8, r7
  403f3c:	9107      	str	r1, [sp, #28]
  403f3e:	f7ff ba3f 	b.w	4033c0 <_vfiprintf_r+0xe4>
  403f42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f46:	e43c      	b.n	4037c2 <_vfiprintf_r+0x4e6>
  403f48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f4c:	e521      	b.n	403992 <_vfiprintf_r+0x6b6>
  403f4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f52:	f7ff bbf4 	b.w	40373e <_vfiprintf_r+0x462>
  403f56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f5a:	e491      	b.n	403880 <_vfiprintf_r+0x5a4>
  403f5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403f60:	e469      	b.n	403836 <_vfiprintf_r+0x55a>
  403f62:	bf00      	nop
  403f64:	00405ed8 	.word	0x00405ed8
  403f68:	00405ed0 	.word	0x00405ed0

00403f6c <__sbprintf>:
  403f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f70:	460c      	mov	r4, r1
  403f72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403f76:	8989      	ldrh	r1, [r1, #12]
  403f78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403f7a:	89e5      	ldrh	r5, [r4, #14]
  403f7c:	9619      	str	r6, [sp, #100]	; 0x64
  403f7e:	f021 0102 	bic.w	r1, r1, #2
  403f82:	4606      	mov	r6, r0
  403f84:	69e0      	ldr	r0, [r4, #28]
  403f86:	f8ad 100c 	strh.w	r1, [sp, #12]
  403f8a:	4617      	mov	r7, r2
  403f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403f92:	f8ad 500e 	strh.w	r5, [sp, #14]
  403f96:	4698      	mov	r8, r3
  403f98:	ad1a      	add	r5, sp, #104	; 0x68
  403f9a:	2300      	movs	r3, #0
  403f9c:	9007      	str	r0, [sp, #28]
  403f9e:	a816      	add	r0, sp, #88	; 0x58
  403fa0:	9209      	str	r2, [sp, #36]	; 0x24
  403fa2:	9306      	str	r3, [sp, #24]
  403fa4:	9500      	str	r5, [sp, #0]
  403fa6:	9504      	str	r5, [sp, #16]
  403fa8:	9102      	str	r1, [sp, #8]
  403faa:	9105      	str	r1, [sp, #20]
  403fac:	f000 fd48 	bl	404a40 <__retarget_lock_init_recursive>
  403fb0:	4643      	mov	r3, r8
  403fb2:	463a      	mov	r2, r7
  403fb4:	4669      	mov	r1, sp
  403fb6:	4630      	mov	r0, r6
  403fb8:	f7ff f990 	bl	4032dc <_vfiprintf_r>
  403fbc:	1e05      	subs	r5, r0, #0
  403fbe:	db07      	blt.n	403fd0 <__sbprintf+0x64>
  403fc0:	4630      	mov	r0, r6
  403fc2:	4669      	mov	r1, sp
  403fc4:	f000 f928 	bl	404218 <_fflush_r>
  403fc8:	2800      	cmp	r0, #0
  403fca:	bf18      	it	ne
  403fcc:	f04f 35ff 	movne.w	r5, #4294967295
  403fd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403fd4:	065b      	lsls	r3, r3, #25
  403fd6:	d503      	bpl.n	403fe0 <__sbprintf+0x74>
  403fd8:	89a3      	ldrh	r3, [r4, #12]
  403fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403fde:	81a3      	strh	r3, [r4, #12]
  403fe0:	9816      	ldr	r0, [sp, #88]	; 0x58
  403fe2:	f000 fd2f 	bl	404a44 <__retarget_lock_close_recursive>
  403fe6:	4628      	mov	r0, r5
  403fe8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403ff0 <__swsetup_r>:
  403ff0:	b538      	push	{r3, r4, r5, lr}
  403ff2:	4b30      	ldr	r3, [pc, #192]	; (4040b4 <__swsetup_r+0xc4>)
  403ff4:	681b      	ldr	r3, [r3, #0]
  403ff6:	4605      	mov	r5, r0
  403ff8:	460c      	mov	r4, r1
  403ffa:	b113      	cbz	r3, 404002 <__swsetup_r+0x12>
  403ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403ffe:	2a00      	cmp	r2, #0
  404000:	d038      	beq.n	404074 <__swsetup_r+0x84>
  404002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404006:	b293      	uxth	r3, r2
  404008:	0718      	lsls	r0, r3, #28
  40400a:	d50c      	bpl.n	404026 <__swsetup_r+0x36>
  40400c:	6920      	ldr	r0, [r4, #16]
  40400e:	b1a8      	cbz	r0, 40403c <__swsetup_r+0x4c>
  404010:	f013 0201 	ands.w	r2, r3, #1
  404014:	d01e      	beq.n	404054 <__swsetup_r+0x64>
  404016:	6963      	ldr	r3, [r4, #20]
  404018:	2200      	movs	r2, #0
  40401a:	425b      	negs	r3, r3
  40401c:	61a3      	str	r3, [r4, #24]
  40401e:	60a2      	str	r2, [r4, #8]
  404020:	b1f0      	cbz	r0, 404060 <__swsetup_r+0x70>
  404022:	2000      	movs	r0, #0
  404024:	bd38      	pop	{r3, r4, r5, pc}
  404026:	06d9      	lsls	r1, r3, #27
  404028:	d53c      	bpl.n	4040a4 <__swsetup_r+0xb4>
  40402a:	0758      	lsls	r0, r3, #29
  40402c:	d426      	bmi.n	40407c <__swsetup_r+0x8c>
  40402e:	6920      	ldr	r0, [r4, #16]
  404030:	f042 0308 	orr.w	r3, r2, #8
  404034:	81a3      	strh	r3, [r4, #12]
  404036:	b29b      	uxth	r3, r3
  404038:	2800      	cmp	r0, #0
  40403a:	d1e9      	bne.n	404010 <__swsetup_r+0x20>
  40403c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404040:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404044:	d0e4      	beq.n	404010 <__swsetup_r+0x20>
  404046:	4628      	mov	r0, r5
  404048:	4621      	mov	r1, r4
  40404a:	f000 fd2f 	bl	404aac <__smakebuf_r>
  40404e:	89a3      	ldrh	r3, [r4, #12]
  404050:	6920      	ldr	r0, [r4, #16]
  404052:	e7dd      	b.n	404010 <__swsetup_r+0x20>
  404054:	0799      	lsls	r1, r3, #30
  404056:	bf58      	it	pl
  404058:	6962      	ldrpl	r2, [r4, #20]
  40405a:	60a2      	str	r2, [r4, #8]
  40405c:	2800      	cmp	r0, #0
  40405e:	d1e0      	bne.n	404022 <__swsetup_r+0x32>
  404060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404064:	061a      	lsls	r2, r3, #24
  404066:	d5dd      	bpl.n	404024 <__swsetup_r+0x34>
  404068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40406c:	81a3      	strh	r3, [r4, #12]
  40406e:	f04f 30ff 	mov.w	r0, #4294967295
  404072:	bd38      	pop	{r3, r4, r5, pc}
  404074:	4618      	mov	r0, r3
  404076:	f000 f927 	bl	4042c8 <__sinit>
  40407a:	e7c2      	b.n	404002 <__swsetup_r+0x12>
  40407c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40407e:	b151      	cbz	r1, 404096 <__swsetup_r+0xa6>
  404080:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404084:	4299      	cmp	r1, r3
  404086:	d004      	beq.n	404092 <__swsetup_r+0xa2>
  404088:	4628      	mov	r0, r5
  40408a:	f000 fa43 	bl	404514 <_free_r>
  40408e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404092:	2300      	movs	r3, #0
  404094:	6323      	str	r3, [r4, #48]	; 0x30
  404096:	2300      	movs	r3, #0
  404098:	6920      	ldr	r0, [r4, #16]
  40409a:	6063      	str	r3, [r4, #4]
  40409c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4040a0:	6020      	str	r0, [r4, #0]
  4040a2:	e7c5      	b.n	404030 <__swsetup_r+0x40>
  4040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4040a8:	2309      	movs	r3, #9
  4040aa:	602b      	str	r3, [r5, #0]
  4040ac:	f04f 30ff 	mov.w	r0, #4294967295
  4040b0:	81a2      	strh	r2, [r4, #12]
  4040b2:	bd38      	pop	{r3, r4, r5, pc}
  4040b4:	2040002c 	.word	0x2040002c

004040b8 <register_fini>:
  4040b8:	4b02      	ldr	r3, [pc, #8]	; (4040c4 <register_fini+0xc>)
  4040ba:	b113      	cbz	r3, 4040c2 <register_fini+0xa>
  4040bc:	4802      	ldr	r0, [pc, #8]	; (4040c8 <register_fini+0x10>)
  4040be:	f000 b805 	b.w	4040cc <atexit>
  4040c2:	4770      	bx	lr
  4040c4:	00000000 	.word	0x00000000
  4040c8:	00404339 	.word	0x00404339

004040cc <atexit>:
  4040cc:	2300      	movs	r3, #0
  4040ce:	4601      	mov	r1, r0
  4040d0:	461a      	mov	r2, r3
  4040d2:	4618      	mov	r0, r3
  4040d4:	f001 bb66 	b.w	4057a4 <__register_exitproc>

004040d8 <__sflush_r>:
  4040d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4040dc:	b29a      	uxth	r2, r3
  4040de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040e2:	460d      	mov	r5, r1
  4040e4:	0711      	lsls	r1, r2, #28
  4040e6:	4680      	mov	r8, r0
  4040e8:	d43a      	bmi.n	404160 <__sflush_r+0x88>
  4040ea:	686a      	ldr	r2, [r5, #4]
  4040ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4040f0:	2a00      	cmp	r2, #0
  4040f2:	81ab      	strh	r3, [r5, #12]
  4040f4:	dd6f      	ble.n	4041d6 <__sflush_r+0xfe>
  4040f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4040f8:	2c00      	cmp	r4, #0
  4040fa:	d049      	beq.n	404190 <__sflush_r+0xb8>
  4040fc:	2200      	movs	r2, #0
  4040fe:	b29b      	uxth	r3, r3
  404100:	f8d8 6000 	ldr.w	r6, [r8]
  404104:	f8c8 2000 	str.w	r2, [r8]
  404108:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40410c:	d067      	beq.n	4041de <__sflush_r+0x106>
  40410e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404110:	075f      	lsls	r7, r3, #29
  404112:	d505      	bpl.n	404120 <__sflush_r+0x48>
  404114:	6869      	ldr	r1, [r5, #4]
  404116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404118:	1a52      	subs	r2, r2, r1
  40411a:	b10b      	cbz	r3, 404120 <__sflush_r+0x48>
  40411c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40411e:	1ad2      	subs	r2, r2, r3
  404120:	2300      	movs	r3, #0
  404122:	69e9      	ldr	r1, [r5, #28]
  404124:	4640      	mov	r0, r8
  404126:	47a0      	blx	r4
  404128:	1c44      	adds	r4, r0, #1
  40412a:	d03c      	beq.n	4041a6 <__sflush_r+0xce>
  40412c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404130:	692a      	ldr	r2, [r5, #16]
  404132:	602a      	str	r2, [r5, #0]
  404134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404138:	2200      	movs	r2, #0
  40413a:	81ab      	strh	r3, [r5, #12]
  40413c:	04db      	lsls	r3, r3, #19
  40413e:	606a      	str	r2, [r5, #4]
  404140:	d447      	bmi.n	4041d2 <__sflush_r+0xfa>
  404142:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404144:	f8c8 6000 	str.w	r6, [r8]
  404148:	b311      	cbz	r1, 404190 <__sflush_r+0xb8>
  40414a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40414e:	4299      	cmp	r1, r3
  404150:	d002      	beq.n	404158 <__sflush_r+0x80>
  404152:	4640      	mov	r0, r8
  404154:	f000 f9de 	bl	404514 <_free_r>
  404158:	2000      	movs	r0, #0
  40415a:	6328      	str	r0, [r5, #48]	; 0x30
  40415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404160:	692e      	ldr	r6, [r5, #16]
  404162:	b1ae      	cbz	r6, 404190 <__sflush_r+0xb8>
  404164:	682c      	ldr	r4, [r5, #0]
  404166:	602e      	str	r6, [r5, #0]
  404168:	0791      	lsls	r1, r2, #30
  40416a:	bf0c      	ite	eq
  40416c:	696b      	ldreq	r3, [r5, #20]
  40416e:	2300      	movne	r3, #0
  404170:	1ba4      	subs	r4, r4, r6
  404172:	60ab      	str	r3, [r5, #8]
  404174:	e00a      	b.n	40418c <__sflush_r+0xb4>
  404176:	4623      	mov	r3, r4
  404178:	4632      	mov	r2, r6
  40417a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40417c:	69e9      	ldr	r1, [r5, #28]
  40417e:	4640      	mov	r0, r8
  404180:	47b8      	blx	r7
  404182:	2800      	cmp	r0, #0
  404184:	eba4 0400 	sub.w	r4, r4, r0
  404188:	4406      	add	r6, r0
  40418a:	dd04      	ble.n	404196 <__sflush_r+0xbe>
  40418c:	2c00      	cmp	r4, #0
  40418e:	dcf2      	bgt.n	404176 <__sflush_r+0x9e>
  404190:	2000      	movs	r0, #0
  404192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404196:	89ab      	ldrh	r3, [r5, #12]
  404198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40419c:	81ab      	strh	r3, [r5, #12]
  40419e:	f04f 30ff 	mov.w	r0, #4294967295
  4041a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041a6:	f8d8 4000 	ldr.w	r4, [r8]
  4041aa:	2c1d      	cmp	r4, #29
  4041ac:	d8f3      	bhi.n	404196 <__sflush_r+0xbe>
  4041ae:	4b19      	ldr	r3, [pc, #100]	; (404214 <__sflush_r+0x13c>)
  4041b0:	40e3      	lsrs	r3, r4
  4041b2:	43db      	mvns	r3, r3
  4041b4:	f013 0301 	ands.w	r3, r3, #1
  4041b8:	d1ed      	bne.n	404196 <__sflush_r+0xbe>
  4041ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4041be:	606b      	str	r3, [r5, #4]
  4041c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4041c4:	6929      	ldr	r1, [r5, #16]
  4041c6:	81ab      	strh	r3, [r5, #12]
  4041c8:	04da      	lsls	r2, r3, #19
  4041ca:	6029      	str	r1, [r5, #0]
  4041cc:	d5b9      	bpl.n	404142 <__sflush_r+0x6a>
  4041ce:	2c00      	cmp	r4, #0
  4041d0:	d1b7      	bne.n	404142 <__sflush_r+0x6a>
  4041d2:	6528      	str	r0, [r5, #80]	; 0x50
  4041d4:	e7b5      	b.n	404142 <__sflush_r+0x6a>
  4041d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4041d8:	2a00      	cmp	r2, #0
  4041da:	dc8c      	bgt.n	4040f6 <__sflush_r+0x1e>
  4041dc:	e7d8      	b.n	404190 <__sflush_r+0xb8>
  4041de:	2301      	movs	r3, #1
  4041e0:	69e9      	ldr	r1, [r5, #28]
  4041e2:	4640      	mov	r0, r8
  4041e4:	47a0      	blx	r4
  4041e6:	1c43      	adds	r3, r0, #1
  4041e8:	4602      	mov	r2, r0
  4041ea:	d002      	beq.n	4041f2 <__sflush_r+0x11a>
  4041ec:	89ab      	ldrh	r3, [r5, #12]
  4041ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4041f0:	e78e      	b.n	404110 <__sflush_r+0x38>
  4041f2:	f8d8 3000 	ldr.w	r3, [r8]
  4041f6:	2b00      	cmp	r3, #0
  4041f8:	d0f8      	beq.n	4041ec <__sflush_r+0x114>
  4041fa:	2b1d      	cmp	r3, #29
  4041fc:	d001      	beq.n	404202 <__sflush_r+0x12a>
  4041fe:	2b16      	cmp	r3, #22
  404200:	d102      	bne.n	404208 <__sflush_r+0x130>
  404202:	f8c8 6000 	str.w	r6, [r8]
  404206:	e7c3      	b.n	404190 <__sflush_r+0xb8>
  404208:	89ab      	ldrh	r3, [r5, #12]
  40420a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40420e:	81ab      	strh	r3, [r5, #12]
  404210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404214:	20400001 	.word	0x20400001

00404218 <_fflush_r>:
  404218:	b538      	push	{r3, r4, r5, lr}
  40421a:	460d      	mov	r5, r1
  40421c:	4604      	mov	r4, r0
  40421e:	b108      	cbz	r0, 404224 <_fflush_r+0xc>
  404220:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404222:	b1bb      	cbz	r3, 404254 <_fflush_r+0x3c>
  404224:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404228:	b188      	cbz	r0, 40424e <_fflush_r+0x36>
  40422a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40422c:	07db      	lsls	r3, r3, #31
  40422e:	d401      	bmi.n	404234 <_fflush_r+0x1c>
  404230:	0581      	lsls	r1, r0, #22
  404232:	d517      	bpl.n	404264 <_fflush_r+0x4c>
  404234:	4620      	mov	r0, r4
  404236:	4629      	mov	r1, r5
  404238:	f7ff ff4e 	bl	4040d8 <__sflush_r>
  40423c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40423e:	07da      	lsls	r2, r3, #31
  404240:	4604      	mov	r4, r0
  404242:	d402      	bmi.n	40424a <_fflush_r+0x32>
  404244:	89ab      	ldrh	r3, [r5, #12]
  404246:	059b      	lsls	r3, r3, #22
  404248:	d507      	bpl.n	40425a <_fflush_r+0x42>
  40424a:	4620      	mov	r0, r4
  40424c:	bd38      	pop	{r3, r4, r5, pc}
  40424e:	4604      	mov	r4, r0
  404250:	4620      	mov	r0, r4
  404252:	bd38      	pop	{r3, r4, r5, pc}
  404254:	f000 f838 	bl	4042c8 <__sinit>
  404258:	e7e4      	b.n	404224 <_fflush_r+0xc>
  40425a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40425c:	f000 fbf6 	bl	404a4c <__retarget_lock_release_recursive>
  404260:	4620      	mov	r0, r4
  404262:	bd38      	pop	{r3, r4, r5, pc}
  404264:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404266:	f000 fbef 	bl	404a48 <__retarget_lock_acquire_recursive>
  40426a:	e7e3      	b.n	404234 <_fflush_r+0x1c>

0040426c <_cleanup_r>:
  40426c:	4901      	ldr	r1, [pc, #4]	; (404274 <_cleanup_r+0x8>)
  40426e:	f000 bbaf 	b.w	4049d0 <_fwalk_reent>
  404272:	bf00      	nop
  404274:	0040588d 	.word	0x0040588d

00404278 <std.isra.0>:
  404278:	b510      	push	{r4, lr}
  40427a:	2300      	movs	r3, #0
  40427c:	4604      	mov	r4, r0
  40427e:	8181      	strh	r1, [r0, #12]
  404280:	81c2      	strh	r2, [r0, #14]
  404282:	6003      	str	r3, [r0, #0]
  404284:	6043      	str	r3, [r0, #4]
  404286:	6083      	str	r3, [r0, #8]
  404288:	6643      	str	r3, [r0, #100]	; 0x64
  40428a:	6103      	str	r3, [r0, #16]
  40428c:	6143      	str	r3, [r0, #20]
  40428e:	6183      	str	r3, [r0, #24]
  404290:	4619      	mov	r1, r3
  404292:	2208      	movs	r2, #8
  404294:	305c      	adds	r0, #92	; 0x5c
  404296:	f7fe fdfd 	bl	402e94 <memset>
  40429a:	4807      	ldr	r0, [pc, #28]	; (4042b8 <std.isra.0+0x40>)
  40429c:	4907      	ldr	r1, [pc, #28]	; (4042bc <std.isra.0+0x44>)
  40429e:	4a08      	ldr	r2, [pc, #32]	; (4042c0 <std.isra.0+0x48>)
  4042a0:	4b08      	ldr	r3, [pc, #32]	; (4042c4 <std.isra.0+0x4c>)
  4042a2:	6220      	str	r0, [r4, #32]
  4042a4:	61e4      	str	r4, [r4, #28]
  4042a6:	6261      	str	r1, [r4, #36]	; 0x24
  4042a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4042aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4042ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4042b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4042b4:	f000 bbc4 	b.w	404a40 <__retarget_lock_init_recursive>
  4042b8:	004055d1 	.word	0x004055d1
  4042bc:	004055f5 	.word	0x004055f5
  4042c0:	00405631 	.word	0x00405631
  4042c4:	00405651 	.word	0x00405651

004042c8 <__sinit>:
  4042c8:	b510      	push	{r4, lr}
  4042ca:	4604      	mov	r4, r0
  4042cc:	4812      	ldr	r0, [pc, #72]	; (404318 <__sinit+0x50>)
  4042ce:	f000 fbbb 	bl	404a48 <__retarget_lock_acquire_recursive>
  4042d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4042d4:	b9d2      	cbnz	r2, 40430c <__sinit+0x44>
  4042d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4042da:	4810      	ldr	r0, [pc, #64]	; (40431c <__sinit+0x54>)
  4042dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4042e0:	2103      	movs	r1, #3
  4042e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4042e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4042e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4042ec:	6860      	ldr	r0, [r4, #4]
  4042ee:	2104      	movs	r1, #4
  4042f0:	f7ff ffc2 	bl	404278 <std.isra.0>
  4042f4:	2201      	movs	r2, #1
  4042f6:	2109      	movs	r1, #9
  4042f8:	68a0      	ldr	r0, [r4, #8]
  4042fa:	f7ff ffbd 	bl	404278 <std.isra.0>
  4042fe:	2202      	movs	r2, #2
  404300:	2112      	movs	r1, #18
  404302:	68e0      	ldr	r0, [r4, #12]
  404304:	f7ff ffb8 	bl	404278 <std.isra.0>
  404308:	2301      	movs	r3, #1
  40430a:	63a3      	str	r3, [r4, #56]	; 0x38
  40430c:	4802      	ldr	r0, [pc, #8]	; (404318 <__sinit+0x50>)
  40430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404312:	f000 bb9b 	b.w	404a4c <__retarget_lock_release_recursive>
  404316:	bf00      	nop
  404318:	20404c34 	.word	0x20404c34
  40431c:	0040426d 	.word	0x0040426d

00404320 <__sfp_lock_acquire>:
  404320:	4801      	ldr	r0, [pc, #4]	; (404328 <__sfp_lock_acquire+0x8>)
  404322:	f000 bb91 	b.w	404a48 <__retarget_lock_acquire_recursive>
  404326:	bf00      	nop
  404328:	20404c48 	.word	0x20404c48

0040432c <__sfp_lock_release>:
  40432c:	4801      	ldr	r0, [pc, #4]	; (404334 <__sfp_lock_release+0x8>)
  40432e:	f000 bb8d 	b.w	404a4c <__retarget_lock_release_recursive>
  404332:	bf00      	nop
  404334:	20404c48 	.word	0x20404c48

00404338 <__libc_fini_array>:
  404338:	b538      	push	{r3, r4, r5, lr}
  40433a:	4c0a      	ldr	r4, [pc, #40]	; (404364 <__libc_fini_array+0x2c>)
  40433c:	4d0a      	ldr	r5, [pc, #40]	; (404368 <__libc_fini_array+0x30>)
  40433e:	1b64      	subs	r4, r4, r5
  404340:	10a4      	asrs	r4, r4, #2
  404342:	d00a      	beq.n	40435a <__libc_fini_array+0x22>
  404344:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404348:	3b01      	subs	r3, #1
  40434a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40434e:	3c01      	subs	r4, #1
  404350:	f855 3904 	ldr.w	r3, [r5], #-4
  404354:	4798      	blx	r3
  404356:	2c00      	cmp	r4, #0
  404358:	d1f9      	bne.n	40434e <__libc_fini_array+0x16>
  40435a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40435e:	f001 be5f 	b.w	406020 <_fini>
  404362:	bf00      	nop
  404364:	00406030 	.word	0x00406030
  404368:	0040602c 	.word	0x0040602c

0040436c <__fputwc>:
  40436c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404370:	b082      	sub	sp, #8
  404372:	4680      	mov	r8, r0
  404374:	4689      	mov	r9, r1
  404376:	4614      	mov	r4, r2
  404378:	f000 fb54 	bl	404a24 <__locale_mb_cur_max>
  40437c:	2801      	cmp	r0, #1
  40437e:	d036      	beq.n	4043ee <__fputwc+0x82>
  404380:	464a      	mov	r2, r9
  404382:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404386:	a901      	add	r1, sp, #4
  404388:	4640      	mov	r0, r8
  40438a:	f001 f9bd 	bl	405708 <_wcrtomb_r>
  40438e:	1c42      	adds	r2, r0, #1
  404390:	4606      	mov	r6, r0
  404392:	d025      	beq.n	4043e0 <__fputwc+0x74>
  404394:	b3a8      	cbz	r0, 404402 <__fputwc+0x96>
  404396:	f89d e004 	ldrb.w	lr, [sp, #4]
  40439a:	2500      	movs	r5, #0
  40439c:	f10d 0a04 	add.w	sl, sp, #4
  4043a0:	e009      	b.n	4043b6 <__fputwc+0x4a>
  4043a2:	6823      	ldr	r3, [r4, #0]
  4043a4:	1c5a      	adds	r2, r3, #1
  4043a6:	6022      	str	r2, [r4, #0]
  4043a8:	f883 e000 	strb.w	lr, [r3]
  4043ac:	3501      	adds	r5, #1
  4043ae:	42b5      	cmp	r5, r6
  4043b0:	d227      	bcs.n	404402 <__fputwc+0x96>
  4043b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4043b6:	68a3      	ldr	r3, [r4, #8]
  4043b8:	3b01      	subs	r3, #1
  4043ba:	2b00      	cmp	r3, #0
  4043bc:	60a3      	str	r3, [r4, #8]
  4043be:	daf0      	bge.n	4043a2 <__fputwc+0x36>
  4043c0:	69a7      	ldr	r7, [r4, #24]
  4043c2:	42bb      	cmp	r3, r7
  4043c4:	4671      	mov	r1, lr
  4043c6:	4622      	mov	r2, r4
  4043c8:	4640      	mov	r0, r8
  4043ca:	db02      	blt.n	4043d2 <__fputwc+0x66>
  4043cc:	f1be 0f0a 	cmp.w	lr, #10
  4043d0:	d1e7      	bne.n	4043a2 <__fputwc+0x36>
  4043d2:	f001 f941 	bl	405658 <__swbuf_r>
  4043d6:	1c43      	adds	r3, r0, #1
  4043d8:	d1e8      	bne.n	4043ac <__fputwc+0x40>
  4043da:	b002      	add	sp, #8
  4043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043e0:	89a3      	ldrh	r3, [r4, #12]
  4043e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043e6:	81a3      	strh	r3, [r4, #12]
  4043e8:	b002      	add	sp, #8
  4043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4043f2:	2bfe      	cmp	r3, #254	; 0xfe
  4043f4:	d8c4      	bhi.n	404380 <__fputwc+0x14>
  4043f6:	fa5f fe89 	uxtb.w	lr, r9
  4043fa:	4606      	mov	r6, r0
  4043fc:	f88d e004 	strb.w	lr, [sp, #4]
  404400:	e7cb      	b.n	40439a <__fputwc+0x2e>
  404402:	4648      	mov	r0, r9
  404404:	b002      	add	sp, #8
  404406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40440a:	bf00      	nop

0040440c <_fputwc_r>:
  40440c:	b530      	push	{r4, r5, lr}
  40440e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404410:	f013 0f01 	tst.w	r3, #1
  404414:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404418:	4614      	mov	r4, r2
  40441a:	b083      	sub	sp, #12
  40441c:	4605      	mov	r5, r0
  40441e:	b29a      	uxth	r2, r3
  404420:	d101      	bne.n	404426 <_fputwc_r+0x1a>
  404422:	0590      	lsls	r0, r2, #22
  404424:	d51c      	bpl.n	404460 <_fputwc_r+0x54>
  404426:	0490      	lsls	r0, r2, #18
  404428:	d406      	bmi.n	404438 <_fputwc_r+0x2c>
  40442a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40442c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404434:	81a3      	strh	r3, [r4, #12]
  404436:	6662      	str	r2, [r4, #100]	; 0x64
  404438:	4628      	mov	r0, r5
  40443a:	4622      	mov	r2, r4
  40443c:	f7ff ff96 	bl	40436c <__fputwc>
  404440:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404442:	07da      	lsls	r2, r3, #31
  404444:	4605      	mov	r5, r0
  404446:	d402      	bmi.n	40444e <_fputwc_r+0x42>
  404448:	89a3      	ldrh	r3, [r4, #12]
  40444a:	059b      	lsls	r3, r3, #22
  40444c:	d502      	bpl.n	404454 <_fputwc_r+0x48>
  40444e:	4628      	mov	r0, r5
  404450:	b003      	add	sp, #12
  404452:	bd30      	pop	{r4, r5, pc}
  404454:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404456:	f000 faf9 	bl	404a4c <__retarget_lock_release_recursive>
  40445a:	4628      	mov	r0, r5
  40445c:	b003      	add	sp, #12
  40445e:	bd30      	pop	{r4, r5, pc}
  404460:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404462:	9101      	str	r1, [sp, #4]
  404464:	f000 faf0 	bl	404a48 <__retarget_lock_acquire_recursive>
  404468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40446c:	9901      	ldr	r1, [sp, #4]
  40446e:	b29a      	uxth	r2, r3
  404470:	e7d9      	b.n	404426 <_fputwc_r+0x1a>
  404472:	bf00      	nop

00404474 <_malloc_trim_r>:
  404474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404476:	4f24      	ldr	r7, [pc, #144]	; (404508 <_malloc_trim_r+0x94>)
  404478:	460c      	mov	r4, r1
  40447a:	4606      	mov	r6, r0
  40447c:	f000 fee4 	bl	405248 <__malloc_lock>
  404480:	68bb      	ldr	r3, [r7, #8]
  404482:	685d      	ldr	r5, [r3, #4]
  404484:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404488:	310f      	adds	r1, #15
  40448a:	f025 0503 	bic.w	r5, r5, #3
  40448e:	4429      	add	r1, r5
  404490:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404494:	f021 010f 	bic.w	r1, r1, #15
  404498:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40449c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4044a0:	db07      	blt.n	4044b2 <_malloc_trim_r+0x3e>
  4044a2:	2100      	movs	r1, #0
  4044a4:	4630      	mov	r0, r6
  4044a6:	f001 f881 	bl	4055ac <_sbrk_r>
  4044aa:	68bb      	ldr	r3, [r7, #8]
  4044ac:	442b      	add	r3, r5
  4044ae:	4298      	cmp	r0, r3
  4044b0:	d004      	beq.n	4044bc <_malloc_trim_r+0x48>
  4044b2:	4630      	mov	r0, r6
  4044b4:	f000 fece 	bl	405254 <__malloc_unlock>
  4044b8:	2000      	movs	r0, #0
  4044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044bc:	4261      	negs	r1, r4
  4044be:	4630      	mov	r0, r6
  4044c0:	f001 f874 	bl	4055ac <_sbrk_r>
  4044c4:	3001      	adds	r0, #1
  4044c6:	d00d      	beq.n	4044e4 <_malloc_trim_r+0x70>
  4044c8:	4b10      	ldr	r3, [pc, #64]	; (40450c <_malloc_trim_r+0x98>)
  4044ca:	68ba      	ldr	r2, [r7, #8]
  4044cc:	6819      	ldr	r1, [r3, #0]
  4044ce:	1b2d      	subs	r5, r5, r4
  4044d0:	f045 0501 	orr.w	r5, r5, #1
  4044d4:	4630      	mov	r0, r6
  4044d6:	1b09      	subs	r1, r1, r4
  4044d8:	6055      	str	r5, [r2, #4]
  4044da:	6019      	str	r1, [r3, #0]
  4044dc:	f000 feba 	bl	405254 <__malloc_unlock>
  4044e0:	2001      	movs	r0, #1
  4044e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044e4:	2100      	movs	r1, #0
  4044e6:	4630      	mov	r0, r6
  4044e8:	f001 f860 	bl	4055ac <_sbrk_r>
  4044ec:	68ba      	ldr	r2, [r7, #8]
  4044ee:	1a83      	subs	r3, r0, r2
  4044f0:	2b0f      	cmp	r3, #15
  4044f2:	ddde      	ble.n	4044b2 <_malloc_trim_r+0x3e>
  4044f4:	4c06      	ldr	r4, [pc, #24]	; (404510 <_malloc_trim_r+0x9c>)
  4044f6:	4905      	ldr	r1, [pc, #20]	; (40450c <_malloc_trim_r+0x98>)
  4044f8:	6824      	ldr	r4, [r4, #0]
  4044fa:	f043 0301 	orr.w	r3, r3, #1
  4044fe:	1b00      	subs	r0, r0, r4
  404500:	6053      	str	r3, [r2, #4]
  404502:	6008      	str	r0, [r1, #0]
  404504:	e7d5      	b.n	4044b2 <_malloc_trim_r+0x3e>
  404506:	bf00      	nop
  404508:	204005c8 	.word	0x204005c8
  40450c:	204042d4 	.word	0x204042d4
  404510:	204009d0 	.word	0x204009d0

00404514 <_free_r>:
  404514:	2900      	cmp	r1, #0
  404516:	d044      	beq.n	4045a2 <_free_r+0x8e>
  404518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40451c:	460d      	mov	r5, r1
  40451e:	4680      	mov	r8, r0
  404520:	f000 fe92 	bl	405248 <__malloc_lock>
  404524:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404528:	4969      	ldr	r1, [pc, #420]	; (4046d0 <_free_r+0x1bc>)
  40452a:	f027 0301 	bic.w	r3, r7, #1
  40452e:	f1a5 0408 	sub.w	r4, r5, #8
  404532:	18e2      	adds	r2, r4, r3
  404534:	688e      	ldr	r6, [r1, #8]
  404536:	6850      	ldr	r0, [r2, #4]
  404538:	42b2      	cmp	r2, r6
  40453a:	f020 0003 	bic.w	r0, r0, #3
  40453e:	d05e      	beq.n	4045fe <_free_r+0xea>
  404540:	07fe      	lsls	r6, r7, #31
  404542:	6050      	str	r0, [r2, #4]
  404544:	d40b      	bmi.n	40455e <_free_r+0x4a>
  404546:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40454a:	1be4      	subs	r4, r4, r7
  40454c:	f101 0e08 	add.w	lr, r1, #8
  404550:	68a5      	ldr	r5, [r4, #8]
  404552:	4575      	cmp	r5, lr
  404554:	443b      	add	r3, r7
  404556:	d06d      	beq.n	404634 <_free_r+0x120>
  404558:	68e7      	ldr	r7, [r4, #12]
  40455a:	60ef      	str	r7, [r5, #12]
  40455c:	60bd      	str	r5, [r7, #8]
  40455e:	1815      	adds	r5, r2, r0
  404560:	686d      	ldr	r5, [r5, #4]
  404562:	07ed      	lsls	r5, r5, #31
  404564:	d53e      	bpl.n	4045e4 <_free_r+0xd0>
  404566:	f043 0201 	orr.w	r2, r3, #1
  40456a:	6062      	str	r2, [r4, #4]
  40456c:	50e3      	str	r3, [r4, r3]
  40456e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404572:	d217      	bcs.n	4045a4 <_free_r+0x90>
  404574:	08db      	lsrs	r3, r3, #3
  404576:	1c58      	adds	r0, r3, #1
  404578:	109a      	asrs	r2, r3, #2
  40457a:	684d      	ldr	r5, [r1, #4]
  40457c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404580:	60a7      	str	r7, [r4, #8]
  404582:	2301      	movs	r3, #1
  404584:	4093      	lsls	r3, r2
  404586:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40458a:	432b      	orrs	r3, r5
  40458c:	3a08      	subs	r2, #8
  40458e:	60e2      	str	r2, [r4, #12]
  404590:	604b      	str	r3, [r1, #4]
  404592:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404596:	60fc      	str	r4, [r7, #12]
  404598:	4640      	mov	r0, r8
  40459a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40459e:	f000 be59 	b.w	405254 <__malloc_unlock>
  4045a2:	4770      	bx	lr
  4045a4:	0a5a      	lsrs	r2, r3, #9
  4045a6:	2a04      	cmp	r2, #4
  4045a8:	d852      	bhi.n	404650 <_free_r+0x13c>
  4045aa:	099a      	lsrs	r2, r3, #6
  4045ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4045b0:	00ff      	lsls	r7, r7, #3
  4045b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4045b6:	19c8      	adds	r0, r1, r7
  4045b8:	59ca      	ldr	r2, [r1, r7]
  4045ba:	3808      	subs	r0, #8
  4045bc:	4290      	cmp	r0, r2
  4045be:	d04f      	beq.n	404660 <_free_r+0x14c>
  4045c0:	6851      	ldr	r1, [r2, #4]
  4045c2:	f021 0103 	bic.w	r1, r1, #3
  4045c6:	428b      	cmp	r3, r1
  4045c8:	d232      	bcs.n	404630 <_free_r+0x11c>
  4045ca:	6892      	ldr	r2, [r2, #8]
  4045cc:	4290      	cmp	r0, r2
  4045ce:	d1f7      	bne.n	4045c0 <_free_r+0xac>
  4045d0:	68c3      	ldr	r3, [r0, #12]
  4045d2:	60a0      	str	r0, [r4, #8]
  4045d4:	60e3      	str	r3, [r4, #12]
  4045d6:	609c      	str	r4, [r3, #8]
  4045d8:	60c4      	str	r4, [r0, #12]
  4045da:	4640      	mov	r0, r8
  4045dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4045e0:	f000 be38 	b.w	405254 <__malloc_unlock>
  4045e4:	6895      	ldr	r5, [r2, #8]
  4045e6:	4f3b      	ldr	r7, [pc, #236]	; (4046d4 <_free_r+0x1c0>)
  4045e8:	42bd      	cmp	r5, r7
  4045ea:	4403      	add	r3, r0
  4045ec:	d040      	beq.n	404670 <_free_r+0x15c>
  4045ee:	68d0      	ldr	r0, [r2, #12]
  4045f0:	60e8      	str	r0, [r5, #12]
  4045f2:	f043 0201 	orr.w	r2, r3, #1
  4045f6:	6085      	str	r5, [r0, #8]
  4045f8:	6062      	str	r2, [r4, #4]
  4045fa:	50e3      	str	r3, [r4, r3]
  4045fc:	e7b7      	b.n	40456e <_free_r+0x5a>
  4045fe:	07ff      	lsls	r7, r7, #31
  404600:	4403      	add	r3, r0
  404602:	d407      	bmi.n	404614 <_free_r+0x100>
  404604:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404608:	1aa4      	subs	r4, r4, r2
  40460a:	4413      	add	r3, r2
  40460c:	68a0      	ldr	r0, [r4, #8]
  40460e:	68e2      	ldr	r2, [r4, #12]
  404610:	60c2      	str	r2, [r0, #12]
  404612:	6090      	str	r0, [r2, #8]
  404614:	4a30      	ldr	r2, [pc, #192]	; (4046d8 <_free_r+0x1c4>)
  404616:	6812      	ldr	r2, [r2, #0]
  404618:	f043 0001 	orr.w	r0, r3, #1
  40461c:	4293      	cmp	r3, r2
  40461e:	6060      	str	r0, [r4, #4]
  404620:	608c      	str	r4, [r1, #8]
  404622:	d3b9      	bcc.n	404598 <_free_r+0x84>
  404624:	4b2d      	ldr	r3, [pc, #180]	; (4046dc <_free_r+0x1c8>)
  404626:	4640      	mov	r0, r8
  404628:	6819      	ldr	r1, [r3, #0]
  40462a:	f7ff ff23 	bl	404474 <_malloc_trim_r>
  40462e:	e7b3      	b.n	404598 <_free_r+0x84>
  404630:	4610      	mov	r0, r2
  404632:	e7cd      	b.n	4045d0 <_free_r+0xbc>
  404634:	1811      	adds	r1, r2, r0
  404636:	6849      	ldr	r1, [r1, #4]
  404638:	07c9      	lsls	r1, r1, #31
  40463a:	d444      	bmi.n	4046c6 <_free_r+0x1b2>
  40463c:	6891      	ldr	r1, [r2, #8]
  40463e:	68d2      	ldr	r2, [r2, #12]
  404640:	60ca      	str	r2, [r1, #12]
  404642:	4403      	add	r3, r0
  404644:	f043 0001 	orr.w	r0, r3, #1
  404648:	6091      	str	r1, [r2, #8]
  40464a:	6060      	str	r0, [r4, #4]
  40464c:	50e3      	str	r3, [r4, r3]
  40464e:	e7a3      	b.n	404598 <_free_r+0x84>
  404650:	2a14      	cmp	r2, #20
  404652:	d816      	bhi.n	404682 <_free_r+0x16e>
  404654:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404658:	00ff      	lsls	r7, r7, #3
  40465a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40465e:	e7aa      	b.n	4045b6 <_free_r+0xa2>
  404660:	10aa      	asrs	r2, r5, #2
  404662:	2301      	movs	r3, #1
  404664:	684d      	ldr	r5, [r1, #4]
  404666:	4093      	lsls	r3, r2
  404668:	432b      	orrs	r3, r5
  40466a:	604b      	str	r3, [r1, #4]
  40466c:	4603      	mov	r3, r0
  40466e:	e7b0      	b.n	4045d2 <_free_r+0xbe>
  404670:	f043 0201 	orr.w	r2, r3, #1
  404674:	614c      	str	r4, [r1, #20]
  404676:	610c      	str	r4, [r1, #16]
  404678:	60e5      	str	r5, [r4, #12]
  40467a:	60a5      	str	r5, [r4, #8]
  40467c:	6062      	str	r2, [r4, #4]
  40467e:	50e3      	str	r3, [r4, r3]
  404680:	e78a      	b.n	404598 <_free_r+0x84>
  404682:	2a54      	cmp	r2, #84	; 0x54
  404684:	d806      	bhi.n	404694 <_free_r+0x180>
  404686:	0b1a      	lsrs	r2, r3, #12
  404688:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40468c:	00ff      	lsls	r7, r7, #3
  40468e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404692:	e790      	b.n	4045b6 <_free_r+0xa2>
  404694:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404698:	d806      	bhi.n	4046a8 <_free_r+0x194>
  40469a:	0bda      	lsrs	r2, r3, #15
  40469c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4046a0:	00ff      	lsls	r7, r7, #3
  4046a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4046a6:	e786      	b.n	4045b6 <_free_r+0xa2>
  4046a8:	f240 5054 	movw	r0, #1364	; 0x554
  4046ac:	4282      	cmp	r2, r0
  4046ae:	d806      	bhi.n	4046be <_free_r+0x1aa>
  4046b0:	0c9a      	lsrs	r2, r3, #18
  4046b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4046b6:	00ff      	lsls	r7, r7, #3
  4046b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4046bc:	e77b      	b.n	4045b6 <_free_r+0xa2>
  4046be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4046c2:	257e      	movs	r5, #126	; 0x7e
  4046c4:	e777      	b.n	4045b6 <_free_r+0xa2>
  4046c6:	f043 0101 	orr.w	r1, r3, #1
  4046ca:	6061      	str	r1, [r4, #4]
  4046cc:	6013      	str	r3, [r2, #0]
  4046ce:	e763      	b.n	404598 <_free_r+0x84>
  4046d0:	204005c8 	.word	0x204005c8
  4046d4:	204005d0 	.word	0x204005d0
  4046d8:	204009d4 	.word	0x204009d4
  4046dc:	20404304 	.word	0x20404304

004046e0 <__sfvwrite_r>:
  4046e0:	6893      	ldr	r3, [r2, #8]
  4046e2:	2b00      	cmp	r3, #0
  4046e4:	d073      	beq.n	4047ce <__sfvwrite_r+0xee>
  4046e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046ea:	898b      	ldrh	r3, [r1, #12]
  4046ec:	b083      	sub	sp, #12
  4046ee:	460c      	mov	r4, r1
  4046f0:	0719      	lsls	r1, r3, #28
  4046f2:	9000      	str	r0, [sp, #0]
  4046f4:	4616      	mov	r6, r2
  4046f6:	d526      	bpl.n	404746 <__sfvwrite_r+0x66>
  4046f8:	6922      	ldr	r2, [r4, #16]
  4046fa:	b322      	cbz	r2, 404746 <__sfvwrite_r+0x66>
  4046fc:	f013 0002 	ands.w	r0, r3, #2
  404700:	6835      	ldr	r5, [r6, #0]
  404702:	d02c      	beq.n	40475e <__sfvwrite_r+0x7e>
  404704:	f04f 0900 	mov.w	r9, #0
  404708:	4fb0      	ldr	r7, [pc, #704]	; (4049cc <__sfvwrite_r+0x2ec>)
  40470a:	46c8      	mov	r8, r9
  40470c:	46b2      	mov	sl, r6
  40470e:	45b8      	cmp	r8, r7
  404710:	4643      	mov	r3, r8
  404712:	464a      	mov	r2, r9
  404714:	bf28      	it	cs
  404716:	463b      	movcs	r3, r7
  404718:	9800      	ldr	r0, [sp, #0]
  40471a:	f1b8 0f00 	cmp.w	r8, #0
  40471e:	d050      	beq.n	4047c2 <__sfvwrite_r+0xe2>
  404720:	69e1      	ldr	r1, [r4, #28]
  404722:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404724:	47b0      	blx	r6
  404726:	2800      	cmp	r0, #0
  404728:	dd58      	ble.n	4047dc <__sfvwrite_r+0xfc>
  40472a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40472e:	1a1b      	subs	r3, r3, r0
  404730:	4481      	add	r9, r0
  404732:	eba8 0800 	sub.w	r8, r8, r0
  404736:	f8ca 3008 	str.w	r3, [sl, #8]
  40473a:	2b00      	cmp	r3, #0
  40473c:	d1e7      	bne.n	40470e <__sfvwrite_r+0x2e>
  40473e:	2000      	movs	r0, #0
  404740:	b003      	add	sp, #12
  404742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404746:	4621      	mov	r1, r4
  404748:	9800      	ldr	r0, [sp, #0]
  40474a:	f7ff fc51 	bl	403ff0 <__swsetup_r>
  40474e:	2800      	cmp	r0, #0
  404750:	f040 8133 	bne.w	4049ba <__sfvwrite_r+0x2da>
  404754:	89a3      	ldrh	r3, [r4, #12]
  404756:	6835      	ldr	r5, [r6, #0]
  404758:	f013 0002 	ands.w	r0, r3, #2
  40475c:	d1d2      	bne.n	404704 <__sfvwrite_r+0x24>
  40475e:	f013 0901 	ands.w	r9, r3, #1
  404762:	d145      	bne.n	4047f0 <__sfvwrite_r+0x110>
  404764:	464f      	mov	r7, r9
  404766:	9601      	str	r6, [sp, #4]
  404768:	b337      	cbz	r7, 4047b8 <__sfvwrite_r+0xd8>
  40476a:	059a      	lsls	r2, r3, #22
  40476c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404770:	f140 8083 	bpl.w	40487a <__sfvwrite_r+0x19a>
  404774:	4547      	cmp	r7, r8
  404776:	46c3      	mov	fp, r8
  404778:	f0c0 80ab 	bcc.w	4048d2 <__sfvwrite_r+0x1f2>
  40477c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404780:	f040 80ac 	bne.w	4048dc <__sfvwrite_r+0x1fc>
  404784:	6820      	ldr	r0, [r4, #0]
  404786:	46ba      	mov	sl, r7
  404788:	465a      	mov	r2, fp
  40478a:	4649      	mov	r1, r9
  40478c:	f000 fcf8 	bl	405180 <memmove>
  404790:	68a2      	ldr	r2, [r4, #8]
  404792:	6823      	ldr	r3, [r4, #0]
  404794:	eba2 0208 	sub.w	r2, r2, r8
  404798:	445b      	add	r3, fp
  40479a:	60a2      	str	r2, [r4, #8]
  40479c:	6023      	str	r3, [r4, #0]
  40479e:	9a01      	ldr	r2, [sp, #4]
  4047a0:	6893      	ldr	r3, [r2, #8]
  4047a2:	eba3 030a 	sub.w	r3, r3, sl
  4047a6:	44d1      	add	r9, sl
  4047a8:	eba7 070a 	sub.w	r7, r7, sl
  4047ac:	6093      	str	r3, [r2, #8]
  4047ae:	2b00      	cmp	r3, #0
  4047b0:	d0c5      	beq.n	40473e <__sfvwrite_r+0x5e>
  4047b2:	89a3      	ldrh	r3, [r4, #12]
  4047b4:	2f00      	cmp	r7, #0
  4047b6:	d1d8      	bne.n	40476a <__sfvwrite_r+0x8a>
  4047b8:	f8d5 9000 	ldr.w	r9, [r5]
  4047bc:	686f      	ldr	r7, [r5, #4]
  4047be:	3508      	adds	r5, #8
  4047c0:	e7d2      	b.n	404768 <__sfvwrite_r+0x88>
  4047c2:	f8d5 9000 	ldr.w	r9, [r5]
  4047c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4047ca:	3508      	adds	r5, #8
  4047cc:	e79f      	b.n	40470e <__sfvwrite_r+0x2e>
  4047ce:	2000      	movs	r0, #0
  4047d0:	4770      	bx	lr
  4047d2:	4621      	mov	r1, r4
  4047d4:	9800      	ldr	r0, [sp, #0]
  4047d6:	f7ff fd1f 	bl	404218 <_fflush_r>
  4047da:	b370      	cbz	r0, 40483a <__sfvwrite_r+0x15a>
  4047dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047e4:	f04f 30ff 	mov.w	r0, #4294967295
  4047e8:	81a3      	strh	r3, [r4, #12]
  4047ea:	b003      	add	sp, #12
  4047ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047f0:	4681      	mov	r9, r0
  4047f2:	4633      	mov	r3, r6
  4047f4:	464e      	mov	r6, r9
  4047f6:	46a8      	mov	r8, r5
  4047f8:	469a      	mov	sl, r3
  4047fa:	464d      	mov	r5, r9
  4047fc:	b34e      	cbz	r6, 404852 <__sfvwrite_r+0x172>
  4047fe:	b380      	cbz	r0, 404862 <__sfvwrite_r+0x182>
  404800:	6820      	ldr	r0, [r4, #0]
  404802:	6923      	ldr	r3, [r4, #16]
  404804:	6962      	ldr	r2, [r4, #20]
  404806:	45b1      	cmp	r9, r6
  404808:	46cb      	mov	fp, r9
  40480a:	bf28      	it	cs
  40480c:	46b3      	movcs	fp, r6
  40480e:	4298      	cmp	r0, r3
  404810:	465f      	mov	r7, fp
  404812:	d904      	bls.n	40481e <__sfvwrite_r+0x13e>
  404814:	68a3      	ldr	r3, [r4, #8]
  404816:	4413      	add	r3, r2
  404818:	459b      	cmp	fp, r3
  40481a:	f300 80a6 	bgt.w	40496a <__sfvwrite_r+0x28a>
  40481e:	4593      	cmp	fp, r2
  404820:	db4b      	blt.n	4048ba <__sfvwrite_r+0x1da>
  404822:	4613      	mov	r3, r2
  404824:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404826:	69e1      	ldr	r1, [r4, #28]
  404828:	9800      	ldr	r0, [sp, #0]
  40482a:	462a      	mov	r2, r5
  40482c:	47b8      	blx	r7
  40482e:	1e07      	subs	r7, r0, #0
  404830:	ddd4      	ble.n	4047dc <__sfvwrite_r+0xfc>
  404832:	ebb9 0907 	subs.w	r9, r9, r7
  404836:	d0cc      	beq.n	4047d2 <__sfvwrite_r+0xf2>
  404838:	2001      	movs	r0, #1
  40483a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40483e:	1bdb      	subs	r3, r3, r7
  404840:	443d      	add	r5, r7
  404842:	1bf6      	subs	r6, r6, r7
  404844:	f8ca 3008 	str.w	r3, [sl, #8]
  404848:	2b00      	cmp	r3, #0
  40484a:	f43f af78 	beq.w	40473e <__sfvwrite_r+0x5e>
  40484e:	2e00      	cmp	r6, #0
  404850:	d1d5      	bne.n	4047fe <__sfvwrite_r+0x11e>
  404852:	f108 0308 	add.w	r3, r8, #8
  404856:	e913 0060 	ldmdb	r3, {r5, r6}
  40485a:	4698      	mov	r8, r3
  40485c:	3308      	adds	r3, #8
  40485e:	2e00      	cmp	r6, #0
  404860:	d0f9      	beq.n	404856 <__sfvwrite_r+0x176>
  404862:	4632      	mov	r2, r6
  404864:	210a      	movs	r1, #10
  404866:	4628      	mov	r0, r5
  404868:	f000 fc3a 	bl	4050e0 <memchr>
  40486c:	2800      	cmp	r0, #0
  40486e:	f000 80a1 	beq.w	4049b4 <__sfvwrite_r+0x2d4>
  404872:	3001      	adds	r0, #1
  404874:	eba0 0905 	sub.w	r9, r0, r5
  404878:	e7c2      	b.n	404800 <__sfvwrite_r+0x120>
  40487a:	6820      	ldr	r0, [r4, #0]
  40487c:	6923      	ldr	r3, [r4, #16]
  40487e:	4298      	cmp	r0, r3
  404880:	d802      	bhi.n	404888 <__sfvwrite_r+0x1a8>
  404882:	6963      	ldr	r3, [r4, #20]
  404884:	429f      	cmp	r7, r3
  404886:	d25d      	bcs.n	404944 <__sfvwrite_r+0x264>
  404888:	45b8      	cmp	r8, r7
  40488a:	bf28      	it	cs
  40488c:	46b8      	movcs	r8, r7
  40488e:	4642      	mov	r2, r8
  404890:	4649      	mov	r1, r9
  404892:	f000 fc75 	bl	405180 <memmove>
  404896:	68a3      	ldr	r3, [r4, #8]
  404898:	6822      	ldr	r2, [r4, #0]
  40489a:	eba3 0308 	sub.w	r3, r3, r8
  40489e:	4442      	add	r2, r8
  4048a0:	60a3      	str	r3, [r4, #8]
  4048a2:	6022      	str	r2, [r4, #0]
  4048a4:	b10b      	cbz	r3, 4048aa <__sfvwrite_r+0x1ca>
  4048a6:	46c2      	mov	sl, r8
  4048a8:	e779      	b.n	40479e <__sfvwrite_r+0xbe>
  4048aa:	4621      	mov	r1, r4
  4048ac:	9800      	ldr	r0, [sp, #0]
  4048ae:	f7ff fcb3 	bl	404218 <_fflush_r>
  4048b2:	2800      	cmp	r0, #0
  4048b4:	d192      	bne.n	4047dc <__sfvwrite_r+0xfc>
  4048b6:	46c2      	mov	sl, r8
  4048b8:	e771      	b.n	40479e <__sfvwrite_r+0xbe>
  4048ba:	465a      	mov	r2, fp
  4048bc:	4629      	mov	r1, r5
  4048be:	f000 fc5f 	bl	405180 <memmove>
  4048c2:	68a2      	ldr	r2, [r4, #8]
  4048c4:	6823      	ldr	r3, [r4, #0]
  4048c6:	eba2 020b 	sub.w	r2, r2, fp
  4048ca:	445b      	add	r3, fp
  4048cc:	60a2      	str	r2, [r4, #8]
  4048ce:	6023      	str	r3, [r4, #0]
  4048d0:	e7af      	b.n	404832 <__sfvwrite_r+0x152>
  4048d2:	6820      	ldr	r0, [r4, #0]
  4048d4:	46b8      	mov	r8, r7
  4048d6:	46ba      	mov	sl, r7
  4048d8:	46bb      	mov	fp, r7
  4048da:	e755      	b.n	404788 <__sfvwrite_r+0xa8>
  4048dc:	6962      	ldr	r2, [r4, #20]
  4048de:	6820      	ldr	r0, [r4, #0]
  4048e0:	6921      	ldr	r1, [r4, #16]
  4048e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4048e6:	eba0 0a01 	sub.w	sl, r0, r1
  4048ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4048ee:	f10a 0001 	add.w	r0, sl, #1
  4048f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4048f6:	4438      	add	r0, r7
  4048f8:	4540      	cmp	r0, r8
  4048fa:	4642      	mov	r2, r8
  4048fc:	bf84      	itt	hi
  4048fe:	4680      	movhi	r8, r0
  404900:	4642      	movhi	r2, r8
  404902:	055b      	lsls	r3, r3, #21
  404904:	d544      	bpl.n	404990 <__sfvwrite_r+0x2b0>
  404906:	4611      	mov	r1, r2
  404908:	9800      	ldr	r0, [sp, #0]
  40490a:	f000 f921 	bl	404b50 <_malloc_r>
  40490e:	4683      	mov	fp, r0
  404910:	2800      	cmp	r0, #0
  404912:	d055      	beq.n	4049c0 <__sfvwrite_r+0x2e0>
  404914:	4652      	mov	r2, sl
  404916:	6921      	ldr	r1, [r4, #16]
  404918:	f7fe fa22 	bl	402d60 <memcpy>
  40491c:	89a3      	ldrh	r3, [r4, #12]
  40491e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404926:	81a3      	strh	r3, [r4, #12]
  404928:	eb0b 000a 	add.w	r0, fp, sl
  40492c:	eba8 030a 	sub.w	r3, r8, sl
  404930:	f8c4 b010 	str.w	fp, [r4, #16]
  404934:	f8c4 8014 	str.w	r8, [r4, #20]
  404938:	6020      	str	r0, [r4, #0]
  40493a:	60a3      	str	r3, [r4, #8]
  40493c:	46b8      	mov	r8, r7
  40493e:	46ba      	mov	sl, r7
  404940:	46bb      	mov	fp, r7
  404942:	e721      	b.n	404788 <__sfvwrite_r+0xa8>
  404944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404948:	42b9      	cmp	r1, r7
  40494a:	bf28      	it	cs
  40494c:	4639      	movcs	r1, r7
  40494e:	464a      	mov	r2, r9
  404950:	fb91 f1f3 	sdiv	r1, r1, r3
  404954:	9800      	ldr	r0, [sp, #0]
  404956:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404958:	fb03 f301 	mul.w	r3, r3, r1
  40495c:	69e1      	ldr	r1, [r4, #28]
  40495e:	47b0      	blx	r6
  404960:	f1b0 0a00 	subs.w	sl, r0, #0
  404964:	f73f af1b 	bgt.w	40479e <__sfvwrite_r+0xbe>
  404968:	e738      	b.n	4047dc <__sfvwrite_r+0xfc>
  40496a:	461a      	mov	r2, r3
  40496c:	4629      	mov	r1, r5
  40496e:	9301      	str	r3, [sp, #4]
  404970:	f000 fc06 	bl	405180 <memmove>
  404974:	6822      	ldr	r2, [r4, #0]
  404976:	9b01      	ldr	r3, [sp, #4]
  404978:	9800      	ldr	r0, [sp, #0]
  40497a:	441a      	add	r2, r3
  40497c:	6022      	str	r2, [r4, #0]
  40497e:	4621      	mov	r1, r4
  404980:	f7ff fc4a 	bl	404218 <_fflush_r>
  404984:	9b01      	ldr	r3, [sp, #4]
  404986:	2800      	cmp	r0, #0
  404988:	f47f af28 	bne.w	4047dc <__sfvwrite_r+0xfc>
  40498c:	461f      	mov	r7, r3
  40498e:	e750      	b.n	404832 <__sfvwrite_r+0x152>
  404990:	9800      	ldr	r0, [sp, #0]
  404992:	f000 fc65 	bl	405260 <_realloc_r>
  404996:	4683      	mov	fp, r0
  404998:	2800      	cmp	r0, #0
  40499a:	d1c5      	bne.n	404928 <__sfvwrite_r+0x248>
  40499c:	9d00      	ldr	r5, [sp, #0]
  40499e:	6921      	ldr	r1, [r4, #16]
  4049a0:	4628      	mov	r0, r5
  4049a2:	f7ff fdb7 	bl	404514 <_free_r>
  4049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049aa:	220c      	movs	r2, #12
  4049ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4049b0:	602a      	str	r2, [r5, #0]
  4049b2:	e715      	b.n	4047e0 <__sfvwrite_r+0x100>
  4049b4:	f106 0901 	add.w	r9, r6, #1
  4049b8:	e722      	b.n	404800 <__sfvwrite_r+0x120>
  4049ba:	f04f 30ff 	mov.w	r0, #4294967295
  4049be:	e6bf      	b.n	404740 <__sfvwrite_r+0x60>
  4049c0:	9a00      	ldr	r2, [sp, #0]
  4049c2:	230c      	movs	r3, #12
  4049c4:	6013      	str	r3, [r2, #0]
  4049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049ca:	e709      	b.n	4047e0 <__sfvwrite_r+0x100>
  4049cc:	7ffffc00 	.word	0x7ffffc00

004049d0 <_fwalk_reent>:
  4049d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4049d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4049d8:	d01f      	beq.n	404a1a <_fwalk_reent+0x4a>
  4049da:	4688      	mov	r8, r1
  4049dc:	4606      	mov	r6, r0
  4049de:	f04f 0900 	mov.w	r9, #0
  4049e2:	687d      	ldr	r5, [r7, #4]
  4049e4:	68bc      	ldr	r4, [r7, #8]
  4049e6:	3d01      	subs	r5, #1
  4049e8:	d411      	bmi.n	404a0e <_fwalk_reent+0x3e>
  4049ea:	89a3      	ldrh	r3, [r4, #12]
  4049ec:	2b01      	cmp	r3, #1
  4049ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4049f2:	d908      	bls.n	404a06 <_fwalk_reent+0x36>
  4049f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4049f8:	3301      	adds	r3, #1
  4049fa:	4621      	mov	r1, r4
  4049fc:	4630      	mov	r0, r6
  4049fe:	d002      	beq.n	404a06 <_fwalk_reent+0x36>
  404a00:	47c0      	blx	r8
  404a02:	ea49 0900 	orr.w	r9, r9, r0
  404a06:	1c6b      	adds	r3, r5, #1
  404a08:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404a0c:	d1ed      	bne.n	4049ea <_fwalk_reent+0x1a>
  404a0e:	683f      	ldr	r7, [r7, #0]
  404a10:	2f00      	cmp	r7, #0
  404a12:	d1e6      	bne.n	4049e2 <_fwalk_reent+0x12>
  404a14:	4648      	mov	r0, r9
  404a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a1a:	46b9      	mov	r9, r7
  404a1c:	4648      	mov	r0, r9
  404a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a22:	bf00      	nop

00404a24 <__locale_mb_cur_max>:
  404a24:	4b04      	ldr	r3, [pc, #16]	; (404a38 <__locale_mb_cur_max+0x14>)
  404a26:	4a05      	ldr	r2, [pc, #20]	; (404a3c <__locale_mb_cur_max+0x18>)
  404a28:	681b      	ldr	r3, [r3, #0]
  404a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404a2c:	2b00      	cmp	r3, #0
  404a2e:	bf08      	it	eq
  404a30:	4613      	moveq	r3, r2
  404a32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404a36:	4770      	bx	lr
  404a38:	2040002c 	.word	0x2040002c
  404a3c:	2040045c 	.word	0x2040045c

00404a40 <__retarget_lock_init_recursive>:
  404a40:	4770      	bx	lr
  404a42:	bf00      	nop

00404a44 <__retarget_lock_close_recursive>:
  404a44:	4770      	bx	lr
  404a46:	bf00      	nop

00404a48 <__retarget_lock_acquire_recursive>:
  404a48:	4770      	bx	lr
  404a4a:	bf00      	nop

00404a4c <__retarget_lock_release_recursive>:
  404a4c:	4770      	bx	lr
  404a4e:	bf00      	nop

00404a50 <__swhatbuf_r>:
  404a50:	b570      	push	{r4, r5, r6, lr}
  404a52:	460c      	mov	r4, r1
  404a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a58:	2900      	cmp	r1, #0
  404a5a:	b090      	sub	sp, #64	; 0x40
  404a5c:	4615      	mov	r5, r2
  404a5e:	461e      	mov	r6, r3
  404a60:	db14      	blt.n	404a8c <__swhatbuf_r+0x3c>
  404a62:	aa01      	add	r2, sp, #4
  404a64:	f000 ff74 	bl	405950 <_fstat_r>
  404a68:	2800      	cmp	r0, #0
  404a6a:	db0f      	blt.n	404a8c <__swhatbuf_r+0x3c>
  404a6c:	9a02      	ldr	r2, [sp, #8]
  404a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404a72:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404a76:	fab2 f282 	clz	r2, r2
  404a7a:	0952      	lsrs	r2, r2, #5
  404a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a80:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404a84:	6032      	str	r2, [r6, #0]
  404a86:	602b      	str	r3, [r5, #0]
  404a88:	b010      	add	sp, #64	; 0x40
  404a8a:	bd70      	pop	{r4, r5, r6, pc}
  404a8c:	89a2      	ldrh	r2, [r4, #12]
  404a8e:	2300      	movs	r3, #0
  404a90:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404a94:	6033      	str	r3, [r6, #0]
  404a96:	d004      	beq.n	404aa2 <__swhatbuf_r+0x52>
  404a98:	2240      	movs	r2, #64	; 0x40
  404a9a:	4618      	mov	r0, r3
  404a9c:	602a      	str	r2, [r5, #0]
  404a9e:	b010      	add	sp, #64	; 0x40
  404aa0:	bd70      	pop	{r4, r5, r6, pc}
  404aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404aa6:	602b      	str	r3, [r5, #0]
  404aa8:	b010      	add	sp, #64	; 0x40
  404aaa:	bd70      	pop	{r4, r5, r6, pc}

00404aac <__smakebuf_r>:
  404aac:	898a      	ldrh	r2, [r1, #12]
  404aae:	0792      	lsls	r2, r2, #30
  404ab0:	460b      	mov	r3, r1
  404ab2:	d506      	bpl.n	404ac2 <__smakebuf_r+0x16>
  404ab4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404ab8:	2101      	movs	r1, #1
  404aba:	601a      	str	r2, [r3, #0]
  404abc:	611a      	str	r2, [r3, #16]
  404abe:	6159      	str	r1, [r3, #20]
  404ac0:	4770      	bx	lr
  404ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
  404ac4:	b083      	sub	sp, #12
  404ac6:	ab01      	add	r3, sp, #4
  404ac8:	466a      	mov	r2, sp
  404aca:	460c      	mov	r4, r1
  404acc:	4606      	mov	r6, r0
  404ace:	f7ff ffbf 	bl	404a50 <__swhatbuf_r>
  404ad2:	9900      	ldr	r1, [sp, #0]
  404ad4:	4605      	mov	r5, r0
  404ad6:	4630      	mov	r0, r6
  404ad8:	f000 f83a 	bl	404b50 <_malloc_r>
  404adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ae0:	b1d8      	cbz	r0, 404b1a <__smakebuf_r+0x6e>
  404ae2:	9a01      	ldr	r2, [sp, #4]
  404ae4:	4f15      	ldr	r7, [pc, #84]	; (404b3c <__smakebuf_r+0x90>)
  404ae6:	9900      	ldr	r1, [sp, #0]
  404ae8:	63f7      	str	r7, [r6, #60]	; 0x3c
  404aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404aee:	81a3      	strh	r3, [r4, #12]
  404af0:	6020      	str	r0, [r4, #0]
  404af2:	6120      	str	r0, [r4, #16]
  404af4:	6161      	str	r1, [r4, #20]
  404af6:	b91a      	cbnz	r2, 404b00 <__smakebuf_r+0x54>
  404af8:	432b      	orrs	r3, r5
  404afa:	81a3      	strh	r3, [r4, #12]
  404afc:	b003      	add	sp, #12
  404afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b00:	4630      	mov	r0, r6
  404b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404b06:	f000 ff37 	bl	405978 <_isatty_r>
  404b0a:	b1a0      	cbz	r0, 404b36 <__smakebuf_r+0x8a>
  404b0c:	89a3      	ldrh	r3, [r4, #12]
  404b0e:	f023 0303 	bic.w	r3, r3, #3
  404b12:	f043 0301 	orr.w	r3, r3, #1
  404b16:	b21b      	sxth	r3, r3
  404b18:	e7ee      	b.n	404af8 <__smakebuf_r+0x4c>
  404b1a:	059a      	lsls	r2, r3, #22
  404b1c:	d4ee      	bmi.n	404afc <__smakebuf_r+0x50>
  404b1e:	f023 0303 	bic.w	r3, r3, #3
  404b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404b26:	f043 0302 	orr.w	r3, r3, #2
  404b2a:	2101      	movs	r1, #1
  404b2c:	81a3      	strh	r3, [r4, #12]
  404b2e:	6022      	str	r2, [r4, #0]
  404b30:	6122      	str	r2, [r4, #16]
  404b32:	6161      	str	r1, [r4, #20]
  404b34:	e7e2      	b.n	404afc <__smakebuf_r+0x50>
  404b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b3a:	e7dd      	b.n	404af8 <__smakebuf_r+0x4c>
  404b3c:	0040426d 	.word	0x0040426d

00404b40 <malloc>:
  404b40:	4b02      	ldr	r3, [pc, #8]	; (404b4c <malloc+0xc>)
  404b42:	4601      	mov	r1, r0
  404b44:	6818      	ldr	r0, [r3, #0]
  404b46:	f000 b803 	b.w	404b50 <_malloc_r>
  404b4a:	bf00      	nop
  404b4c:	2040002c 	.word	0x2040002c

00404b50 <_malloc_r>:
  404b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b54:	f101 060b 	add.w	r6, r1, #11
  404b58:	2e16      	cmp	r6, #22
  404b5a:	b083      	sub	sp, #12
  404b5c:	4605      	mov	r5, r0
  404b5e:	f240 809e 	bls.w	404c9e <_malloc_r+0x14e>
  404b62:	f036 0607 	bics.w	r6, r6, #7
  404b66:	f100 80bd 	bmi.w	404ce4 <_malloc_r+0x194>
  404b6a:	42b1      	cmp	r1, r6
  404b6c:	f200 80ba 	bhi.w	404ce4 <_malloc_r+0x194>
  404b70:	f000 fb6a 	bl	405248 <__malloc_lock>
  404b74:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404b78:	f0c0 8293 	bcc.w	4050a2 <_malloc_r+0x552>
  404b7c:	0a73      	lsrs	r3, r6, #9
  404b7e:	f000 80b8 	beq.w	404cf2 <_malloc_r+0x1a2>
  404b82:	2b04      	cmp	r3, #4
  404b84:	f200 8179 	bhi.w	404e7a <_malloc_r+0x32a>
  404b88:	09b3      	lsrs	r3, r6, #6
  404b8a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404b8e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404b92:	00c3      	lsls	r3, r0, #3
  404b94:	4fbf      	ldr	r7, [pc, #764]	; (404e94 <_malloc_r+0x344>)
  404b96:	443b      	add	r3, r7
  404b98:	f1a3 0108 	sub.w	r1, r3, #8
  404b9c:	685c      	ldr	r4, [r3, #4]
  404b9e:	42a1      	cmp	r1, r4
  404ba0:	d106      	bne.n	404bb0 <_malloc_r+0x60>
  404ba2:	e00c      	b.n	404bbe <_malloc_r+0x6e>
  404ba4:	2a00      	cmp	r2, #0
  404ba6:	f280 80aa 	bge.w	404cfe <_malloc_r+0x1ae>
  404baa:	68e4      	ldr	r4, [r4, #12]
  404bac:	42a1      	cmp	r1, r4
  404bae:	d006      	beq.n	404bbe <_malloc_r+0x6e>
  404bb0:	6863      	ldr	r3, [r4, #4]
  404bb2:	f023 0303 	bic.w	r3, r3, #3
  404bb6:	1b9a      	subs	r2, r3, r6
  404bb8:	2a0f      	cmp	r2, #15
  404bba:	ddf3      	ble.n	404ba4 <_malloc_r+0x54>
  404bbc:	4670      	mov	r0, lr
  404bbe:	693c      	ldr	r4, [r7, #16]
  404bc0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404ea8 <_malloc_r+0x358>
  404bc4:	4574      	cmp	r4, lr
  404bc6:	f000 81ab 	beq.w	404f20 <_malloc_r+0x3d0>
  404bca:	6863      	ldr	r3, [r4, #4]
  404bcc:	f023 0303 	bic.w	r3, r3, #3
  404bd0:	1b9a      	subs	r2, r3, r6
  404bd2:	2a0f      	cmp	r2, #15
  404bd4:	f300 8190 	bgt.w	404ef8 <_malloc_r+0x3a8>
  404bd8:	2a00      	cmp	r2, #0
  404bda:	f8c7 e014 	str.w	lr, [r7, #20]
  404bde:	f8c7 e010 	str.w	lr, [r7, #16]
  404be2:	f280 809d 	bge.w	404d20 <_malloc_r+0x1d0>
  404be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404bea:	f080 8161 	bcs.w	404eb0 <_malloc_r+0x360>
  404bee:	08db      	lsrs	r3, r3, #3
  404bf0:	f103 0c01 	add.w	ip, r3, #1
  404bf4:	1099      	asrs	r1, r3, #2
  404bf6:	687a      	ldr	r2, [r7, #4]
  404bf8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404bfc:	f8c4 8008 	str.w	r8, [r4, #8]
  404c00:	2301      	movs	r3, #1
  404c02:	408b      	lsls	r3, r1
  404c04:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404c08:	4313      	orrs	r3, r2
  404c0a:	3908      	subs	r1, #8
  404c0c:	60e1      	str	r1, [r4, #12]
  404c0e:	607b      	str	r3, [r7, #4]
  404c10:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404c14:	f8c8 400c 	str.w	r4, [r8, #12]
  404c18:	1082      	asrs	r2, r0, #2
  404c1a:	2401      	movs	r4, #1
  404c1c:	4094      	lsls	r4, r2
  404c1e:	429c      	cmp	r4, r3
  404c20:	f200 808b 	bhi.w	404d3a <_malloc_r+0x1ea>
  404c24:	421c      	tst	r4, r3
  404c26:	d106      	bne.n	404c36 <_malloc_r+0xe6>
  404c28:	f020 0003 	bic.w	r0, r0, #3
  404c2c:	0064      	lsls	r4, r4, #1
  404c2e:	421c      	tst	r4, r3
  404c30:	f100 0004 	add.w	r0, r0, #4
  404c34:	d0fa      	beq.n	404c2c <_malloc_r+0xdc>
  404c36:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404c3a:	46cc      	mov	ip, r9
  404c3c:	4680      	mov	r8, r0
  404c3e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404c42:	459c      	cmp	ip, r3
  404c44:	d107      	bne.n	404c56 <_malloc_r+0x106>
  404c46:	e16d      	b.n	404f24 <_malloc_r+0x3d4>
  404c48:	2a00      	cmp	r2, #0
  404c4a:	f280 817b 	bge.w	404f44 <_malloc_r+0x3f4>
  404c4e:	68db      	ldr	r3, [r3, #12]
  404c50:	459c      	cmp	ip, r3
  404c52:	f000 8167 	beq.w	404f24 <_malloc_r+0x3d4>
  404c56:	6859      	ldr	r1, [r3, #4]
  404c58:	f021 0103 	bic.w	r1, r1, #3
  404c5c:	1b8a      	subs	r2, r1, r6
  404c5e:	2a0f      	cmp	r2, #15
  404c60:	ddf2      	ble.n	404c48 <_malloc_r+0xf8>
  404c62:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404c66:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404c6a:	9300      	str	r3, [sp, #0]
  404c6c:	199c      	adds	r4, r3, r6
  404c6e:	4628      	mov	r0, r5
  404c70:	f046 0601 	orr.w	r6, r6, #1
  404c74:	f042 0501 	orr.w	r5, r2, #1
  404c78:	605e      	str	r6, [r3, #4]
  404c7a:	f8c8 c00c 	str.w	ip, [r8, #12]
  404c7e:	f8cc 8008 	str.w	r8, [ip, #8]
  404c82:	617c      	str	r4, [r7, #20]
  404c84:	613c      	str	r4, [r7, #16]
  404c86:	f8c4 e00c 	str.w	lr, [r4, #12]
  404c8a:	f8c4 e008 	str.w	lr, [r4, #8]
  404c8e:	6065      	str	r5, [r4, #4]
  404c90:	505a      	str	r2, [r3, r1]
  404c92:	f000 fadf 	bl	405254 <__malloc_unlock>
  404c96:	9b00      	ldr	r3, [sp, #0]
  404c98:	f103 0408 	add.w	r4, r3, #8
  404c9c:	e01e      	b.n	404cdc <_malloc_r+0x18c>
  404c9e:	2910      	cmp	r1, #16
  404ca0:	d820      	bhi.n	404ce4 <_malloc_r+0x194>
  404ca2:	f000 fad1 	bl	405248 <__malloc_lock>
  404ca6:	2610      	movs	r6, #16
  404ca8:	2318      	movs	r3, #24
  404caa:	2002      	movs	r0, #2
  404cac:	4f79      	ldr	r7, [pc, #484]	; (404e94 <_malloc_r+0x344>)
  404cae:	443b      	add	r3, r7
  404cb0:	f1a3 0208 	sub.w	r2, r3, #8
  404cb4:	685c      	ldr	r4, [r3, #4]
  404cb6:	4294      	cmp	r4, r2
  404cb8:	f000 813d 	beq.w	404f36 <_malloc_r+0x3e6>
  404cbc:	6863      	ldr	r3, [r4, #4]
  404cbe:	68e1      	ldr	r1, [r4, #12]
  404cc0:	68a6      	ldr	r6, [r4, #8]
  404cc2:	f023 0303 	bic.w	r3, r3, #3
  404cc6:	4423      	add	r3, r4
  404cc8:	4628      	mov	r0, r5
  404cca:	685a      	ldr	r2, [r3, #4]
  404ccc:	60f1      	str	r1, [r6, #12]
  404cce:	f042 0201 	orr.w	r2, r2, #1
  404cd2:	608e      	str	r6, [r1, #8]
  404cd4:	605a      	str	r2, [r3, #4]
  404cd6:	f000 fabd 	bl	405254 <__malloc_unlock>
  404cda:	3408      	adds	r4, #8
  404cdc:	4620      	mov	r0, r4
  404cde:	b003      	add	sp, #12
  404ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ce4:	2400      	movs	r4, #0
  404ce6:	230c      	movs	r3, #12
  404ce8:	4620      	mov	r0, r4
  404cea:	602b      	str	r3, [r5, #0]
  404cec:	b003      	add	sp, #12
  404cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cf2:	2040      	movs	r0, #64	; 0x40
  404cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
  404cf8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404cfc:	e74a      	b.n	404b94 <_malloc_r+0x44>
  404cfe:	4423      	add	r3, r4
  404d00:	68e1      	ldr	r1, [r4, #12]
  404d02:	685a      	ldr	r2, [r3, #4]
  404d04:	68a6      	ldr	r6, [r4, #8]
  404d06:	f042 0201 	orr.w	r2, r2, #1
  404d0a:	60f1      	str	r1, [r6, #12]
  404d0c:	4628      	mov	r0, r5
  404d0e:	608e      	str	r6, [r1, #8]
  404d10:	605a      	str	r2, [r3, #4]
  404d12:	f000 fa9f 	bl	405254 <__malloc_unlock>
  404d16:	3408      	adds	r4, #8
  404d18:	4620      	mov	r0, r4
  404d1a:	b003      	add	sp, #12
  404d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d20:	4423      	add	r3, r4
  404d22:	4628      	mov	r0, r5
  404d24:	685a      	ldr	r2, [r3, #4]
  404d26:	f042 0201 	orr.w	r2, r2, #1
  404d2a:	605a      	str	r2, [r3, #4]
  404d2c:	f000 fa92 	bl	405254 <__malloc_unlock>
  404d30:	3408      	adds	r4, #8
  404d32:	4620      	mov	r0, r4
  404d34:	b003      	add	sp, #12
  404d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d3a:	68bc      	ldr	r4, [r7, #8]
  404d3c:	6863      	ldr	r3, [r4, #4]
  404d3e:	f023 0803 	bic.w	r8, r3, #3
  404d42:	45b0      	cmp	r8, r6
  404d44:	d304      	bcc.n	404d50 <_malloc_r+0x200>
  404d46:	eba8 0306 	sub.w	r3, r8, r6
  404d4a:	2b0f      	cmp	r3, #15
  404d4c:	f300 8085 	bgt.w	404e5a <_malloc_r+0x30a>
  404d50:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404eac <_malloc_r+0x35c>
  404d54:	4b50      	ldr	r3, [pc, #320]	; (404e98 <_malloc_r+0x348>)
  404d56:	f8d9 2000 	ldr.w	r2, [r9]
  404d5a:	681b      	ldr	r3, [r3, #0]
  404d5c:	3201      	adds	r2, #1
  404d5e:	4433      	add	r3, r6
  404d60:	eb04 0a08 	add.w	sl, r4, r8
  404d64:	f000 8155 	beq.w	405012 <_malloc_r+0x4c2>
  404d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404d6c:	330f      	adds	r3, #15
  404d6e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404d72:	f02b 0b0f 	bic.w	fp, fp, #15
  404d76:	4659      	mov	r1, fp
  404d78:	4628      	mov	r0, r5
  404d7a:	f000 fc17 	bl	4055ac <_sbrk_r>
  404d7e:	1c41      	adds	r1, r0, #1
  404d80:	4602      	mov	r2, r0
  404d82:	f000 80fc 	beq.w	404f7e <_malloc_r+0x42e>
  404d86:	4582      	cmp	sl, r0
  404d88:	f200 80f7 	bhi.w	404f7a <_malloc_r+0x42a>
  404d8c:	4b43      	ldr	r3, [pc, #268]	; (404e9c <_malloc_r+0x34c>)
  404d8e:	6819      	ldr	r1, [r3, #0]
  404d90:	4459      	add	r1, fp
  404d92:	6019      	str	r1, [r3, #0]
  404d94:	f000 814d 	beq.w	405032 <_malloc_r+0x4e2>
  404d98:	f8d9 0000 	ldr.w	r0, [r9]
  404d9c:	3001      	adds	r0, #1
  404d9e:	bf1b      	ittet	ne
  404da0:	eba2 0a0a 	subne.w	sl, r2, sl
  404da4:	4451      	addne	r1, sl
  404da6:	f8c9 2000 	streq.w	r2, [r9]
  404daa:	6019      	strne	r1, [r3, #0]
  404dac:	f012 0107 	ands.w	r1, r2, #7
  404db0:	f000 8115 	beq.w	404fde <_malloc_r+0x48e>
  404db4:	f1c1 0008 	rsb	r0, r1, #8
  404db8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404dbc:	4402      	add	r2, r0
  404dbe:	3108      	adds	r1, #8
  404dc0:	eb02 090b 	add.w	r9, r2, fp
  404dc4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404dc8:	eba1 0909 	sub.w	r9, r1, r9
  404dcc:	4649      	mov	r1, r9
  404dce:	4628      	mov	r0, r5
  404dd0:	9301      	str	r3, [sp, #4]
  404dd2:	9200      	str	r2, [sp, #0]
  404dd4:	f000 fbea 	bl	4055ac <_sbrk_r>
  404dd8:	1c43      	adds	r3, r0, #1
  404dda:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404dde:	f000 8143 	beq.w	405068 <_malloc_r+0x518>
  404de2:	1a80      	subs	r0, r0, r2
  404de4:	4448      	add	r0, r9
  404de6:	f040 0001 	orr.w	r0, r0, #1
  404dea:	6819      	ldr	r1, [r3, #0]
  404dec:	60ba      	str	r2, [r7, #8]
  404dee:	4449      	add	r1, r9
  404df0:	42bc      	cmp	r4, r7
  404df2:	6050      	str	r0, [r2, #4]
  404df4:	6019      	str	r1, [r3, #0]
  404df6:	d017      	beq.n	404e28 <_malloc_r+0x2d8>
  404df8:	f1b8 0f0f 	cmp.w	r8, #15
  404dfc:	f240 80fb 	bls.w	404ff6 <_malloc_r+0x4a6>
  404e00:	6860      	ldr	r0, [r4, #4]
  404e02:	f1a8 020c 	sub.w	r2, r8, #12
  404e06:	f022 0207 	bic.w	r2, r2, #7
  404e0a:	eb04 0e02 	add.w	lr, r4, r2
  404e0e:	f000 0001 	and.w	r0, r0, #1
  404e12:	f04f 0c05 	mov.w	ip, #5
  404e16:	4310      	orrs	r0, r2
  404e18:	2a0f      	cmp	r2, #15
  404e1a:	6060      	str	r0, [r4, #4]
  404e1c:	f8ce c004 	str.w	ip, [lr, #4]
  404e20:	f8ce c008 	str.w	ip, [lr, #8]
  404e24:	f200 8117 	bhi.w	405056 <_malloc_r+0x506>
  404e28:	4b1d      	ldr	r3, [pc, #116]	; (404ea0 <_malloc_r+0x350>)
  404e2a:	68bc      	ldr	r4, [r7, #8]
  404e2c:	681a      	ldr	r2, [r3, #0]
  404e2e:	4291      	cmp	r1, r2
  404e30:	bf88      	it	hi
  404e32:	6019      	strhi	r1, [r3, #0]
  404e34:	4b1b      	ldr	r3, [pc, #108]	; (404ea4 <_malloc_r+0x354>)
  404e36:	681a      	ldr	r2, [r3, #0]
  404e38:	4291      	cmp	r1, r2
  404e3a:	6862      	ldr	r2, [r4, #4]
  404e3c:	bf88      	it	hi
  404e3e:	6019      	strhi	r1, [r3, #0]
  404e40:	f022 0203 	bic.w	r2, r2, #3
  404e44:	4296      	cmp	r6, r2
  404e46:	eba2 0306 	sub.w	r3, r2, r6
  404e4a:	d801      	bhi.n	404e50 <_malloc_r+0x300>
  404e4c:	2b0f      	cmp	r3, #15
  404e4e:	dc04      	bgt.n	404e5a <_malloc_r+0x30a>
  404e50:	4628      	mov	r0, r5
  404e52:	f000 f9ff 	bl	405254 <__malloc_unlock>
  404e56:	2400      	movs	r4, #0
  404e58:	e740      	b.n	404cdc <_malloc_r+0x18c>
  404e5a:	19a2      	adds	r2, r4, r6
  404e5c:	f043 0301 	orr.w	r3, r3, #1
  404e60:	f046 0601 	orr.w	r6, r6, #1
  404e64:	6066      	str	r6, [r4, #4]
  404e66:	4628      	mov	r0, r5
  404e68:	60ba      	str	r2, [r7, #8]
  404e6a:	6053      	str	r3, [r2, #4]
  404e6c:	f000 f9f2 	bl	405254 <__malloc_unlock>
  404e70:	3408      	adds	r4, #8
  404e72:	4620      	mov	r0, r4
  404e74:	b003      	add	sp, #12
  404e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e7a:	2b14      	cmp	r3, #20
  404e7c:	d971      	bls.n	404f62 <_malloc_r+0x412>
  404e7e:	2b54      	cmp	r3, #84	; 0x54
  404e80:	f200 80a3 	bhi.w	404fca <_malloc_r+0x47a>
  404e84:	0b33      	lsrs	r3, r6, #12
  404e86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404e8a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404e8e:	00c3      	lsls	r3, r0, #3
  404e90:	e680      	b.n	404b94 <_malloc_r+0x44>
  404e92:	bf00      	nop
  404e94:	204005c8 	.word	0x204005c8
  404e98:	20404304 	.word	0x20404304
  404e9c:	204042d4 	.word	0x204042d4
  404ea0:	204042fc 	.word	0x204042fc
  404ea4:	20404300 	.word	0x20404300
  404ea8:	204005d0 	.word	0x204005d0
  404eac:	204009d0 	.word	0x204009d0
  404eb0:	0a5a      	lsrs	r2, r3, #9
  404eb2:	2a04      	cmp	r2, #4
  404eb4:	d95b      	bls.n	404f6e <_malloc_r+0x41e>
  404eb6:	2a14      	cmp	r2, #20
  404eb8:	f200 80ae 	bhi.w	405018 <_malloc_r+0x4c8>
  404ebc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404ec0:	00c9      	lsls	r1, r1, #3
  404ec2:	325b      	adds	r2, #91	; 0x5b
  404ec4:	eb07 0c01 	add.w	ip, r7, r1
  404ec8:	5879      	ldr	r1, [r7, r1]
  404eca:	f1ac 0c08 	sub.w	ip, ip, #8
  404ece:	458c      	cmp	ip, r1
  404ed0:	f000 8088 	beq.w	404fe4 <_malloc_r+0x494>
  404ed4:	684a      	ldr	r2, [r1, #4]
  404ed6:	f022 0203 	bic.w	r2, r2, #3
  404eda:	4293      	cmp	r3, r2
  404edc:	d273      	bcs.n	404fc6 <_malloc_r+0x476>
  404ede:	6889      	ldr	r1, [r1, #8]
  404ee0:	458c      	cmp	ip, r1
  404ee2:	d1f7      	bne.n	404ed4 <_malloc_r+0x384>
  404ee4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404ee8:	687b      	ldr	r3, [r7, #4]
  404eea:	60e2      	str	r2, [r4, #12]
  404eec:	f8c4 c008 	str.w	ip, [r4, #8]
  404ef0:	6094      	str	r4, [r2, #8]
  404ef2:	f8cc 400c 	str.w	r4, [ip, #12]
  404ef6:	e68f      	b.n	404c18 <_malloc_r+0xc8>
  404ef8:	19a1      	adds	r1, r4, r6
  404efa:	f046 0c01 	orr.w	ip, r6, #1
  404efe:	f042 0601 	orr.w	r6, r2, #1
  404f02:	f8c4 c004 	str.w	ip, [r4, #4]
  404f06:	4628      	mov	r0, r5
  404f08:	6179      	str	r1, [r7, #20]
  404f0a:	6139      	str	r1, [r7, #16]
  404f0c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404f10:	f8c1 e008 	str.w	lr, [r1, #8]
  404f14:	604e      	str	r6, [r1, #4]
  404f16:	50e2      	str	r2, [r4, r3]
  404f18:	f000 f99c 	bl	405254 <__malloc_unlock>
  404f1c:	3408      	adds	r4, #8
  404f1e:	e6dd      	b.n	404cdc <_malloc_r+0x18c>
  404f20:	687b      	ldr	r3, [r7, #4]
  404f22:	e679      	b.n	404c18 <_malloc_r+0xc8>
  404f24:	f108 0801 	add.w	r8, r8, #1
  404f28:	f018 0f03 	tst.w	r8, #3
  404f2c:	f10c 0c08 	add.w	ip, ip, #8
  404f30:	f47f ae85 	bne.w	404c3e <_malloc_r+0xee>
  404f34:	e02d      	b.n	404f92 <_malloc_r+0x442>
  404f36:	68dc      	ldr	r4, [r3, #12]
  404f38:	42a3      	cmp	r3, r4
  404f3a:	bf08      	it	eq
  404f3c:	3002      	addeq	r0, #2
  404f3e:	f43f ae3e 	beq.w	404bbe <_malloc_r+0x6e>
  404f42:	e6bb      	b.n	404cbc <_malloc_r+0x16c>
  404f44:	4419      	add	r1, r3
  404f46:	461c      	mov	r4, r3
  404f48:	684a      	ldr	r2, [r1, #4]
  404f4a:	68db      	ldr	r3, [r3, #12]
  404f4c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404f50:	f042 0201 	orr.w	r2, r2, #1
  404f54:	604a      	str	r2, [r1, #4]
  404f56:	4628      	mov	r0, r5
  404f58:	60f3      	str	r3, [r6, #12]
  404f5a:	609e      	str	r6, [r3, #8]
  404f5c:	f000 f97a 	bl	405254 <__malloc_unlock>
  404f60:	e6bc      	b.n	404cdc <_malloc_r+0x18c>
  404f62:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404f66:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404f6a:	00c3      	lsls	r3, r0, #3
  404f6c:	e612      	b.n	404b94 <_malloc_r+0x44>
  404f6e:	099a      	lsrs	r2, r3, #6
  404f70:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404f74:	00c9      	lsls	r1, r1, #3
  404f76:	3238      	adds	r2, #56	; 0x38
  404f78:	e7a4      	b.n	404ec4 <_malloc_r+0x374>
  404f7a:	42bc      	cmp	r4, r7
  404f7c:	d054      	beq.n	405028 <_malloc_r+0x4d8>
  404f7e:	68bc      	ldr	r4, [r7, #8]
  404f80:	6862      	ldr	r2, [r4, #4]
  404f82:	f022 0203 	bic.w	r2, r2, #3
  404f86:	e75d      	b.n	404e44 <_malloc_r+0x2f4>
  404f88:	f859 3908 	ldr.w	r3, [r9], #-8
  404f8c:	4599      	cmp	r9, r3
  404f8e:	f040 8086 	bne.w	40509e <_malloc_r+0x54e>
  404f92:	f010 0f03 	tst.w	r0, #3
  404f96:	f100 30ff 	add.w	r0, r0, #4294967295
  404f9a:	d1f5      	bne.n	404f88 <_malloc_r+0x438>
  404f9c:	687b      	ldr	r3, [r7, #4]
  404f9e:	ea23 0304 	bic.w	r3, r3, r4
  404fa2:	607b      	str	r3, [r7, #4]
  404fa4:	0064      	lsls	r4, r4, #1
  404fa6:	429c      	cmp	r4, r3
  404fa8:	f63f aec7 	bhi.w	404d3a <_malloc_r+0x1ea>
  404fac:	2c00      	cmp	r4, #0
  404fae:	f43f aec4 	beq.w	404d3a <_malloc_r+0x1ea>
  404fb2:	421c      	tst	r4, r3
  404fb4:	4640      	mov	r0, r8
  404fb6:	f47f ae3e 	bne.w	404c36 <_malloc_r+0xe6>
  404fba:	0064      	lsls	r4, r4, #1
  404fbc:	421c      	tst	r4, r3
  404fbe:	f100 0004 	add.w	r0, r0, #4
  404fc2:	d0fa      	beq.n	404fba <_malloc_r+0x46a>
  404fc4:	e637      	b.n	404c36 <_malloc_r+0xe6>
  404fc6:	468c      	mov	ip, r1
  404fc8:	e78c      	b.n	404ee4 <_malloc_r+0x394>
  404fca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404fce:	d815      	bhi.n	404ffc <_malloc_r+0x4ac>
  404fd0:	0bf3      	lsrs	r3, r6, #15
  404fd2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404fd6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404fda:	00c3      	lsls	r3, r0, #3
  404fdc:	e5da      	b.n	404b94 <_malloc_r+0x44>
  404fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404fe2:	e6ed      	b.n	404dc0 <_malloc_r+0x270>
  404fe4:	687b      	ldr	r3, [r7, #4]
  404fe6:	1092      	asrs	r2, r2, #2
  404fe8:	2101      	movs	r1, #1
  404fea:	fa01 f202 	lsl.w	r2, r1, r2
  404fee:	4313      	orrs	r3, r2
  404ff0:	607b      	str	r3, [r7, #4]
  404ff2:	4662      	mov	r2, ip
  404ff4:	e779      	b.n	404eea <_malloc_r+0x39a>
  404ff6:	2301      	movs	r3, #1
  404ff8:	6053      	str	r3, [r2, #4]
  404ffa:	e729      	b.n	404e50 <_malloc_r+0x300>
  404ffc:	f240 5254 	movw	r2, #1364	; 0x554
  405000:	4293      	cmp	r3, r2
  405002:	d822      	bhi.n	40504a <_malloc_r+0x4fa>
  405004:	0cb3      	lsrs	r3, r6, #18
  405006:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40500a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40500e:	00c3      	lsls	r3, r0, #3
  405010:	e5c0      	b.n	404b94 <_malloc_r+0x44>
  405012:	f103 0b10 	add.w	fp, r3, #16
  405016:	e6ae      	b.n	404d76 <_malloc_r+0x226>
  405018:	2a54      	cmp	r2, #84	; 0x54
  40501a:	d829      	bhi.n	405070 <_malloc_r+0x520>
  40501c:	0b1a      	lsrs	r2, r3, #12
  40501e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405022:	00c9      	lsls	r1, r1, #3
  405024:	326e      	adds	r2, #110	; 0x6e
  405026:	e74d      	b.n	404ec4 <_malloc_r+0x374>
  405028:	4b20      	ldr	r3, [pc, #128]	; (4050ac <_malloc_r+0x55c>)
  40502a:	6819      	ldr	r1, [r3, #0]
  40502c:	4459      	add	r1, fp
  40502e:	6019      	str	r1, [r3, #0]
  405030:	e6b2      	b.n	404d98 <_malloc_r+0x248>
  405032:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405036:	2800      	cmp	r0, #0
  405038:	f47f aeae 	bne.w	404d98 <_malloc_r+0x248>
  40503c:	eb08 030b 	add.w	r3, r8, fp
  405040:	68ba      	ldr	r2, [r7, #8]
  405042:	f043 0301 	orr.w	r3, r3, #1
  405046:	6053      	str	r3, [r2, #4]
  405048:	e6ee      	b.n	404e28 <_malloc_r+0x2d8>
  40504a:	207f      	movs	r0, #127	; 0x7f
  40504c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405050:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405054:	e59e      	b.n	404b94 <_malloc_r+0x44>
  405056:	f104 0108 	add.w	r1, r4, #8
  40505a:	4628      	mov	r0, r5
  40505c:	9300      	str	r3, [sp, #0]
  40505e:	f7ff fa59 	bl	404514 <_free_r>
  405062:	9b00      	ldr	r3, [sp, #0]
  405064:	6819      	ldr	r1, [r3, #0]
  405066:	e6df      	b.n	404e28 <_malloc_r+0x2d8>
  405068:	2001      	movs	r0, #1
  40506a:	f04f 0900 	mov.w	r9, #0
  40506e:	e6bc      	b.n	404dea <_malloc_r+0x29a>
  405070:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405074:	d805      	bhi.n	405082 <_malloc_r+0x532>
  405076:	0bda      	lsrs	r2, r3, #15
  405078:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40507c:	00c9      	lsls	r1, r1, #3
  40507e:	3277      	adds	r2, #119	; 0x77
  405080:	e720      	b.n	404ec4 <_malloc_r+0x374>
  405082:	f240 5154 	movw	r1, #1364	; 0x554
  405086:	428a      	cmp	r2, r1
  405088:	d805      	bhi.n	405096 <_malloc_r+0x546>
  40508a:	0c9a      	lsrs	r2, r3, #18
  40508c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405090:	00c9      	lsls	r1, r1, #3
  405092:	327c      	adds	r2, #124	; 0x7c
  405094:	e716      	b.n	404ec4 <_malloc_r+0x374>
  405096:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40509a:	227e      	movs	r2, #126	; 0x7e
  40509c:	e712      	b.n	404ec4 <_malloc_r+0x374>
  40509e:	687b      	ldr	r3, [r7, #4]
  4050a0:	e780      	b.n	404fa4 <_malloc_r+0x454>
  4050a2:	08f0      	lsrs	r0, r6, #3
  4050a4:	f106 0308 	add.w	r3, r6, #8
  4050a8:	e600      	b.n	404cac <_malloc_r+0x15c>
  4050aa:	bf00      	nop
  4050ac:	204042d4 	.word	0x204042d4

004050b0 <__ascii_mbtowc>:
  4050b0:	b082      	sub	sp, #8
  4050b2:	b149      	cbz	r1, 4050c8 <__ascii_mbtowc+0x18>
  4050b4:	b15a      	cbz	r2, 4050ce <__ascii_mbtowc+0x1e>
  4050b6:	b16b      	cbz	r3, 4050d4 <__ascii_mbtowc+0x24>
  4050b8:	7813      	ldrb	r3, [r2, #0]
  4050ba:	600b      	str	r3, [r1, #0]
  4050bc:	7812      	ldrb	r2, [r2, #0]
  4050be:	1c10      	adds	r0, r2, #0
  4050c0:	bf18      	it	ne
  4050c2:	2001      	movne	r0, #1
  4050c4:	b002      	add	sp, #8
  4050c6:	4770      	bx	lr
  4050c8:	a901      	add	r1, sp, #4
  4050ca:	2a00      	cmp	r2, #0
  4050cc:	d1f3      	bne.n	4050b6 <__ascii_mbtowc+0x6>
  4050ce:	4610      	mov	r0, r2
  4050d0:	b002      	add	sp, #8
  4050d2:	4770      	bx	lr
  4050d4:	f06f 0001 	mvn.w	r0, #1
  4050d8:	e7f4      	b.n	4050c4 <__ascii_mbtowc+0x14>
  4050da:	bf00      	nop
  4050dc:	0000      	movs	r0, r0
	...

004050e0 <memchr>:
  4050e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4050e4:	2a10      	cmp	r2, #16
  4050e6:	db2b      	blt.n	405140 <memchr+0x60>
  4050e8:	f010 0f07 	tst.w	r0, #7
  4050ec:	d008      	beq.n	405100 <memchr+0x20>
  4050ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4050f2:	3a01      	subs	r2, #1
  4050f4:	428b      	cmp	r3, r1
  4050f6:	d02d      	beq.n	405154 <memchr+0x74>
  4050f8:	f010 0f07 	tst.w	r0, #7
  4050fc:	b342      	cbz	r2, 405150 <memchr+0x70>
  4050fe:	d1f6      	bne.n	4050ee <memchr+0xe>
  405100:	b4f0      	push	{r4, r5, r6, r7}
  405102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40510a:	f022 0407 	bic.w	r4, r2, #7
  40510e:	f07f 0700 	mvns.w	r7, #0
  405112:	2300      	movs	r3, #0
  405114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405118:	3c08      	subs	r4, #8
  40511a:	ea85 0501 	eor.w	r5, r5, r1
  40511e:	ea86 0601 	eor.w	r6, r6, r1
  405122:	fa85 f547 	uadd8	r5, r5, r7
  405126:	faa3 f587 	sel	r5, r3, r7
  40512a:	fa86 f647 	uadd8	r6, r6, r7
  40512e:	faa5 f687 	sel	r6, r5, r7
  405132:	b98e      	cbnz	r6, 405158 <memchr+0x78>
  405134:	d1ee      	bne.n	405114 <memchr+0x34>
  405136:	bcf0      	pop	{r4, r5, r6, r7}
  405138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40513c:	f002 0207 	and.w	r2, r2, #7
  405140:	b132      	cbz	r2, 405150 <memchr+0x70>
  405142:	f810 3b01 	ldrb.w	r3, [r0], #1
  405146:	3a01      	subs	r2, #1
  405148:	ea83 0301 	eor.w	r3, r3, r1
  40514c:	b113      	cbz	r3, 405154 <memchr+0x74>
  40514e:	d1f8      	bne.n	405142 <memchr+0x62>
  405150:	2000      	movs	r0, #0
  405152:	4770      	bx	lr
  405154:	3801      	subs	r0, #1
  405156:	4770      	bx	lr
  405158:	2d00      	cmp	r5, #0
  40515a:	bf06      	itte	eq
  40515c:	4635      	moveq	r5, r6
  40515e:	3803      	subeq	r0, #3
  405160:	3807      	subne	r0, #7
  405162:	f015 0f01 	tst.w	r5, #1
  405166:	d107      	bne.n	405178 <memchr+0x98>
  405168:	3001      	adds	r0, #1
  40516a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40516e:	bf02      	ittt	eq
  405170:	3001      	addeq	r0, #1
  405172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405176:	3001      	addeq	r0, #1
  405178:	bcf0      	pop	{r4, r5, r6, r7}
  40517a:	3801      	subs	r0, #1
  40517c:	4770      	bx	lr
  40517e:	bf00      	nop

00405180 <memmove>:
  405180:	4288      	cmp	r0, r1
  405182:	b5f0      	push	{r4, r5, r6, r7, lr}
  405184:	d90d      	bls.n	4051a2 <memmove+0x22>
  405186:	188b      	adds	r3, r1, r2
  405188:	4298      	cmp	r0, r3
  40518a:	d20a      	bcs.n	4051a2 <memmove+0x22>
  40518c:	1884      	adds	r4, r0, r2
  40518e:	2a00      	cmp	r2, #0
  405190:	d051      	beq.n	405236 <memmove+0xb6>
  405192:	4622      	mov	r2, r4
  405194:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405198:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40519c:	4299      	cmp	r1, r3
  40519e:	d1f9      	bne.n	405194 <memmove+0x14>
  4051a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4051a2:	2a0f      	cmp	r2, #15
  4051a4:	d948      	bls.n	405238 <memmove+0xb8>
  4051a6:	ea41 0300 	orr.w	r3, r1, r0
  4051aa:	079b      	lsls	r3, r3, #30
  4051ac:	d146      	bne.n	40523c <memmove+0xbc>
  4051ae:	f100 0410 	add.w	r4, r0, #16
  4051b2:	f101 0310 	add.w	r3, r1, #16
  4051b6:	4615      	mov	r5, r2
  4051b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4051bc:	f844 6c10 	str.w	r6, [r4, #-16]
  4051c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4051c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4051c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4051cc:	f844 6c08 	str.w	r6, [r4, #-8]
  4051d0:	3d10      	subs	r5, #16
  4051d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4051d6:	f844 6c04 	str.w	r6, [r4, #-4]
  4051da:	2d0f      	cmp	r5, #15
  4051dc:	f103 0310 	add.w	r3, r3, #16
  4051e0:	f104 0410 	add.w	r4, r4, #16
  4051e4:	d8e8      	bhi.n	4051b8 <memmove+0x38>
  4051e6:	f1a2 0310 	sub.w	r3, r2, #16
  4051ea:	f023 030f 	bic.w	r3, r3, #15
  4051ee:	f002 0e0f 	and.w	lr, r2, #15
  4051f2:	3310      	adds	r3, #16
  4051f4:	f1be 0f03 	cmp.w	lr, #3
  4051f8:	4419      	add	r1, r3
  4051fa:	4403      	add	r3, r0
  4051fc:	d921      	bls.n	405242 <memmove+0xc2>
  4051fe:	1f1e      	subs	r6, r3, #4
  405200:	460d      	mov	r5, r1
  405202:	4674      	mov	r4, lr
  405204:	3c04      	subs	r4, #4
  405206:	f855 7b04 	ldr.w	r7, [r5], #4
  40520a:	f846 7f04 	str.w	r7, [r6, #4]!
  40520e:	2c03      	cmp	r4, #3
  405210:	d8f8      	bhi.n	405204 <memmove+0x84>
  405212:	f1ae 0404 	sub.w	r4, lr, #4
  405216:	f024 0403 	bic.w	r4, r4, #3
  40521a:	3404      	adds	r4, #4
  40521c:	4421      	add	r1, r4
  40521e:	4423      	add	r3, r4
  405220:	f002 0203 	and.w	r2, r2, #3
  405224:	b162      	cbz	r2, 405240 <memmove+0xc0>
  405226:	3b01      	subs	r3, #1
  405228:	440a      	add	r2, r1
  40522a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40522e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405232:	428a      	cmp	r2, r1
  405234:	d1f9      	bne.n	40522a <memmove+0xaa>
  405236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405238:	4603      	mov	r3, r0
  40523a:	e7f3      	b.n	405224 <memmove+0xa4>
  40523c:	4603      	mov	r3, r0
  40523e:	e7f2      	b.n	405226 <memmove+0xa6>
  405240:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405242:	4672      	mov	r2, lr
  405244:	e7ee      	b.n	405224 <memmove+0xa4>
  405246:	bf00      	nop

00405248 <__malloc_lock>:
  405248:	4801      	ldr	r0, [pc, #4]	; (405250 <__malloc_lock+0x8>)
  40524a:	f7ff bbfd 	b.w	404a48 <__retarget_lock_acquire_recursive>
  40524e:	bf00      	nop
  405250:	20404c38 	.word	0x20404c38

00405254 <__malloc_unlock>:
  405254:	4801      	ldr	r0, [pc, #4]	; (40525c <__malloc_unlock+0x8>)
  405256:	f7ff bbf9 	b.w	404a4c <__retarget_lock_release_recursive>
  40525a:	bf00      	nop
  40525c:	20404c38 	.word	0x20404c38

00405260 <_realloc_r>:
  405260:	2900      	cmp	r1, #0
  405262:	f000 8095 	beq.w	405390 <_realloc_r+0x130>
  405266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40526a:	460d      	mov	r5, r1
  40526c:	4616      	mov	r6, r2
  40526e:	b083      	sub	sp, #12
  405270:	4680      	mov	r8, r0
  405272:	f106 070b 	add.w	r7, r6, #11
  405276:	f7ff ffe7 	bl	405248 <__malloc_lock>
  40527a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40527e:	2f16      	cmp	r7, #22
  405280:	f02e 0403 	bic.w	r4, lr, #3
  405284:	f1a5 0908 	sub.w	r9, r5, #8
  405288:	d83c      	bhi.n	405304 <_realloc_r+0xa4>
  40528a:	2210      	movs	r2, #16
  40528c:	4617      	mov	r7, r2
  40528e:	42be      	cmp	r6, r7
  405290:	d83d      	bhi.n	40530e <_realloc_r+0xae>
  405292:	4294      	cmp	r4, r2
  405294:	da43      	bge.n	40531e <_realloc_r+0xbe>
  405296:	4bc4      	ldr	r3, [pc, #784]	; (4055a8 <_realloc_r+0x348>)
  405298:	6899      	ldr	r1, [r3, #8]
  40529a:	eb09 0004 	add.w	r0, r9, r4
  40529e:	4288      	cmp	r0, r1
  4052a0:	f000 80b4 	beq.w	40540c <_realloc_r+0x1ac>
  4052a4:	6843      	ldr	r3, [r0, #4]
  4052a6:	f023 0101 	bic.w	r1, r3, #1
  4052aa:	4401      	add	r1, r0
  4052ac:	6849      	ldr	r1, [r1, #4]
  4052ae:	07c9      	lsls	r1, r1, #31
  4052b0:	d54c      	bpl.n	40534c <_realloc_r+0xec>
  4052b2:	f01e 0f01 	tst.w	lr, #1
  4052b6:	f000 809b 	beq.w	4053f0 <_realloc_r+0x190>
  4052ba:	4631      	mov	r1, r6
  4052bc:	4640      	mov	r0, r8
  4052be:	f7ff fc47 	bl	404b50 <_malloc_r>
  4052c2:	4606      	mov	r6, r0
  4052c4:	2800      	cmp	r0, #0
  4052c6:	d03a      	beq.n	40533e <_realloc_r+0xde>
  4052c8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4052cc:	f023 0301 	bic.w	r3, r3, #1
  4052d0:	444b      	add	r3, r9
  4052d2:	f1a0 0208 	sub.w	r2, r0, #8
  4052d6:	429a      	cmp	r2, r3
  4052d8:	f000 8121 	beq.w	40551e <_realloc_r+0x2be>
  4052dc:	1f22      	subs	r2, r4, #4
  4052de:	2a24      	cmp	r2, #36	; 0x24
  4052e0:	f200 8107 	bhi.w	4054f2 <_realloc_r+0x292>
  4052e4:	2a13      	cmp	r2, #19
  4052e6:	f200 80db 	bhi.w	4054a0 <_realloc_r+0x240>
  4052ea:	4603      	mov	r3, r0
  4052ec:	462a      	mov	r2, r5
  4052ee:	6811      	ldr	r1, [r2, #0]
  4052f0:	6019      	str	r1, [r3, #0]
  4052f2:	6851      	ldr	r1, [r2, #4]
  4052f4:	6059      	str	r1, [r3, #4]
  4052f6:	6892      	ldr	r2, [r2, #8]
  4052f8:	609a      	str	r2, [r3, #8]
  4052fa:	4629      	mov	r1, r5
  4052fc:	4640      	mov	r0, r8
  4052fe:	f7ff f909 	bl	404514 <_free_r>
  405302:	e01c      	b.n	40533e <_realloc_r+0xde>
  405304:	f027 0707 	bic.w	r7, r7, #7
  405308:	2f00      	cmp	r7, #0
  40530a:	463a      	mov	r2, r7
  40530c:	dabf      	bge.n	40528e <_realloc_r+0x2e>
  40530e:	2600      	movs	r6, #0
  405310:	230c      	movs	r3, #12
  405312:	4630      	mov	r0, r6
  405314:	f8c8 3000 	str.w	r3, [r8]
  405318:	b003      	add	sp, #12
  40531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40531e:	462e      	mov	r6, r5
  405320:	1be3      	subs	r3, r4, r7
  405322:	2b0f      	cmp	r3, #15
  405324:	d81e      	bhi.n	405364 <_realloc_r+0x104>
  405326:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40532a:	f003 0301 	and.w	r3, r3, #1
  40532e:	4323      	orrs	r3, r4
  405330:	444c      	add	r4, r9
  405332:	f8c9 3004 	str.w	r3, [r9, #4]
  405336:	6863      	ldr	r3, [r4, #4]
  405338:	f043 0301 	orr.w	r3, r3, #1
  40533c:	6063      	str	r3, [r4, #4]
  40533e:	4640      	mov	r0, r8
  405340:	f7ff ff88 	bl	405254 <__malloc_unlock>
  405344:	4630      	mov	r0, r6
  405346:	b003      	add	sp, #12
  405348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40534c:	f023 0303 	bic.w	r3, r3, #3
  405350:	18e1      	adds	r1, r4, r3
  405352:	4291      	cmp	r1, r2
  405354:	db1f      	blt.n	405396 <_realloc_r+0x136>
  405356:	68c3      	ldr	r3, [r0, #12]
  405358:	6882      	ldr	r2, [r0, #8]
  40535a:	462e      	mov	r6, r5
  40535c:	60d3      	str	r3, [r2, #12]
  40535e:	460c      	mov	r4, r1
  405360:	609a      	str	r2, [r3, #8]
  405362:	e7dd      	b.n	405320 <_realloc_r+0xc0>
  405364:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405368:	eb09 0107 	add.w	r1, r9, r7
  40536c:	f002 0201 	and.w	r2, r2, #1
  405370:	444c      	add	r4, r9
  405372:	f043 0301 	orr.w	r3, r3, #1
  405376:	4317      	orrs	r7, r2
  405378:	f8c9 7004 	str.w	r7, [r9, #4]
  40537c:	604b      	str	r3, [r1, #4]
  40537e:	6863      	ldr	r3, [r4, #4]
  405380:	f043 0301 	orr.w	r3, r3, #1
  405384:	3108      	adds	r1, #8
  405386:	6063      	str	r3, [r4, #4]
  405388:	4640      	mov	r0, r8
  40538a:	f7ff f8c3 	bl	404514 <_free_r>
  40538e:	e7d6      	b.n	40533e <_realloc_r+0xde>
  405390:	4611      	mov	r1, r2
  405392:	f7ff bbdd 	b.w	404b50 <_malloc_r>
  405396:	f01e 0f01 	tst.w	lr, #1
  40539a:	d18e      	bne.n	4052ba <_realloc_r+0x5a>
  40539c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4053a0:	eba9 0a01 	sub.w	sl, r9, r1
  4053a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4053a8:	f021 0103 	bic.w	r1, r1, #3
  4053ac:	440b      	add	r3, r1
  4053ae:	4423      	add	r3, r4
  4053b0:	4293      	cmp	r3, r2
  4053b2:	db25      	blt.n	405400 <_realloc_r+0x1a0>
  4053b4:	68c2      	ldr	r2, [r0, #12]
  4053b6:	6881      	ldr	r1, [r0, #8]
  4053b8:	4656      	mov	r6, sl
  4053ba:	60ca      	str	r2, [r1, #12]
  4053bc:	6091      	str	r1, [r2, #8]
  4053be:	f8da 100c 	ldr.w	r1, [sl, #12]
  4053c2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4053c6:	1f22      	subs	r2, r4, #4
  4053c8:	2a24      	cmp	r2, #36	; 0x24
  4053ca:	60c1      	str	r1, [r0, #12]
  4053cc:	6088      	str	r0, [r1, #8]
  4053ce:	f200 8094 	bhi.w	4054fa <_realloc_r+0x29a>
  4053d2:	2a13      	cmp	r2, #19
  4053d4:	d96f      	bls.n	4054b6 <_realloc_r+0x256>
  4053d6:	6829      	ldr	r1, [r5, #0]
  4053d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4053dc:	6869      	ldr	r1, [r5, #4]
  4053de:	f8ca 100c 	str.w	r1, [sl, #12]
  4053e2:	2a1b      	cmp	r2, #27
  4053e4:	f200 80a2 	bhi.w	40552c <_realloc_r+0x2cc>
  4053e8:	3508      	adds	r5, #8
  4053ea:	f10a 0210 	add.w	r2, sl, #16
  4053ee:	e063      	b.n	4054b8 <_realloc_r+0x258>
  4053f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4053f4:	eba9 0a03 	sub.w	sl, r9, r3
  4053f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4053fc:	f021 0103 	bic.w	r1, r1, #3
  405400:	1863      	adds	r3, r4, r1
  405402:	4293      	cmp	r3, r2
  405404:	f6ff af59 	blt.w	4052ba <_realloc_r+0x5a>
  405408:	4656      	mov	r6, sl
  40540a:	e7d8      	b.n	4053be <_realloc_r+0x15e>
  40540c:	6841      	ldr	r1, [r0, #4]
  40540e:	f021 0b03 	bic.w	fp, r1, #3
  405412:	44a3      	add	fp, r4
  405414:	f107 0010 	add.w	r0, r7, #16
  405418:	4583      	cmp	fp, r0
  40541a:	da56      	bge.n	4054ca <_realloc_r+0x26a>
  40541c:	f01e 0f01 	tst.w	lr, #1
  405420:	f47f af4b 	bne.w	4052ba <_realloc_r+0x5a>
  405424:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405428:	eba9 0a01 	sub.w	sl, r9, r1
  40542c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405430:	f021 0103 	bic.w	r1, r1, #3
  405434:	448b      	add	fp, r1
  405436:	4558      	cmp	r0, fp
  405438:	dce2      	bgt.n	405400 <_realloc_r+0x1a0>
  40543a:	4656      	mov	r6, sl
  40543c:	f8da 100c 	ldr.w	r1, [sl, #12]
  405440:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405444:	1f22      	subs	r2, r4, #4
  405446:	2a24      	cmp	r2, #36	; 0x24
  405448:	60c1      	str	r1, [r0, #12]
  40544a:	6088      	str	r0, [r1, #8]
  40544c:	f200 808f 	bhi.w	40556e <_realloc_r+0x30e>
  405450:	2a13      	cmp	r2, #19
  405452:	f240 808a 	bls.w	40556a <_realloc_r+0x30a>
  405456:	6829      	ldr	r1, [r5, #0]
  405458:	f8ca 1008 	str.w	r1, [sl, #8]
  40545c:	6869      	ldr	r1, [r5, #4]
  40545e:	f8ca 100c 	str.w	r1, [sl, #12]
  405462:	2a1b      	cmp	r2, #27
  405464:	f200 808a 	bhi.w	40557c <_realloc_r+0x31c>
  405468:	3508      	adds	r5, #8
  40546a:	f10a 0210 	add.w	r2, sl, #16
  40546e:	6829      	ldr	r1, [r5, #0]
  405470:	6011      	str	r1, [r2, #0]
  405472:	6869      	ldr	r1, [r5, #4]
  405474:	6051      	str	r1, [r2, #4]
  405476:	68a9      	ldr	r1, [r5, #8]
  405478:	6091      	str	r1, [r2, #8]
  40547a:	eb0a 0107 	add.w	r1, sl, r7
  40547e:	ebab 0207 	sub.w	r2, fp, r7
  405482:	f042 0201 	orr.w	r2, r2, #1
  405486:	6099      	str	r1, [r3, #8]
  405488:	604a      	str	r2, [r1, #4]
  40548a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40548e:	f003 0301 	and.w	r3, r3, #1
  405492:	431f      	orrs	r7, r3
  405494:	4640      	mov	r0, r8
  405496:	f8ca 7004 	str.w	r7, [sl, #4]
  40549a:	f7ff fedb 	bl	405254 <__malloc_unlock>
  40549e:	e751      	b.n	405344 <_realloc_r+0xe4>
  4054a0:	682b      	ldr	r3, [r5, #0]
  4054a2:	6003      	str	r3, [r0, #0]
  4054a4:	686b      	ldr	r3, [r5, #4]
  4054a6:	6043      	str	r3, [r0, #4]
  4054a8:	2a1b      	cmp	r2, #27
  4054aa:	d82d      	bhi.n	405508 <_realloc_r+0x2a8>
  4054ac:	f100 0308 	add.w	r3, r0, #8
  4054b0:	f105 0208 	add.w	r2, r5, #8
  4054b4:	e71b      	b.n	4052ee <_realloc_r+0x8e>
  4054b6:	4632      	mov	r2, r6
  4054b8:	6829      	ldr	r1, [r5, #0]
  4054ba:	6011      	str	r1, [r2, #0]
  4054bc:	6869      	ldr	r1, [r5, #4]
  4054be:	6051      	str	r1, [r2, #4]
  4054c0:	68a9      	ldr	r1, [r5, #8]
  4054c2:	6091      	str	r1, [r2, #8]
  4054c4:	461c      	mov	r4, r3
  4054c6:	46d1      	mov	r9, sl
  4054c8:	e72a      	b.n	405320 <_realloc_r+0xc0>
  4054ca:	eb09 0107 	add.w	r1, r9, r7
  4054ce:	ebab 0b07 	sub.w	fp, fp, r7
  4054d2:	f04b 0201 	orr.w	r2, fp, #1
  4054d6:	6099      	str	r1, [r3, #8]
  4054d8:	604a      	str	r2, [r1, #4]
  4054da:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4054de:	f003 0301 	and.w	r3, r3, #1
  4054e2:	431f      	orrs	r7, r3
  4054e4:	4640      	mov	r0, r8
  4054e6:	f845 7c04 	str.w	r7, [r5, #-4]
  4054ea:	f7ff feb3 	bl	405254 <__malloc_unlock>
  4054ee:	462e      	mov	r6, r5
  4054f0:	e728      	b.n	405344 <_realloc_r+0xe4>
  4054f2:	4629      	mov	r1, r5
  4054f4:	f7ff fe44 	bl	405180 <memmove>
  4054f8:	e6ff      	b.n	4052fa <_realloc_r+0x9a>
  4054fa:	4629      	mov	r1, r5
  4054fc:	4630      	mov	r0, r6
  4054fe:	461c      	mov	r4, r3
  405500:	46d1      	mov	r9, sl
  405502:	f7ff fe3d 	bl	405180 <memmove>
  405506:	e70b      	b.n	405320 <_realloc_r+0xc0>
  405508:	68ab      	ldr	r3, [r5, #8]
  40550a:	6083      	str	r3, [r0, #8]
  40550c:	68eb      	ldr	r3, [r5, #12]
  40550e:	60c3      	str	r3, [r0, #12]
  405510:	2a24      	cmp	r2, #36	; 0x24
  405512:	d017      	beq.n	405544 <_realloc_r+0x2e4>
  405514:	f100 0310 	add.w	r3, r0, #16
  405518:	f105 0210 	add.w	r2, r5, #16
  40551c:	e6e7      	b.n	4052ee <_realloc_r+0x8e>
  40551e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405522:	f023 0303 	bic.w	r3, r3, #3
  405526:	441c      	add	r4, r3
  405528:	462e      	mov	r6, r5
  40552a:	e6f9      	b.n	405320 <_realloc_r+0xc0>
  40552c:	68a9      	ldr	r1, [r5, #8]
  40552e:	f8ca 1010 	str.w	r1, [sl, #16]
  405532:	68e9      	ldr	r1, [r5, #12]
  405534:	f8ca 1014 	str.w	r1, [sl, #20]
  405538:	2a24      	cmp	r2, #36	; 0x24
  40553a:	d00c      	beq.n	405556 <_realloc_r+0x2f6>
  40553c:	3510      	adds	r5, #16
  40553e:	f10a 0218 	add.w	r2, sl, #24
  405542:	e7b9      	b.n	4054b8 <_realloc_r+0x258>
  405544:	692b      	ldr	r3, [r5, #16]
  405546:	6103      	str	r3, [r0, #16]
  405548:	696b      	ldr	r3, [r5, #20]
  40554a:	6143      	str	r3, [r0, #20]
  40554c:	f105 0218 	add.w	r2, r5, #24
  405550:	f100 0318 	add.w	r3, r0, #24
  405554:	e6cb      	b.n	4052ee <_realloc_r+0x8e>
  405556:	692a      	ldr	r2, [r5, #16]
  405558:	f8ca 2018 	str.w	r2, [sl, #24]
  40555c:	696a      	ldr	r2, [r5, #20]
  40555e:	f8ca 201c 	str.w	r2, [sl, #28]
  405562:	3518      	adds	r5, #24
  405564:	f10a 0220 	add.w	r2, sl, #32
  405568:	e7a6      	b.n	4054b8 <_realloc_r+0x258>
  40556a:	4632      	mov	r2, r6
  40556c:	e77f      	b.n	40546e <_realloc_r+0x20e>
  40556e:	4629      	mov	r1, r5
  405570:	4630      	mov	r0, r6
  405572:	9301      	str	r3, [sp, #4]
  405574:	f7ff fe04 	bl	405180 <memmove>
  405578:	9b01      	ldr	r3, [sp, #4]
  40557a:	e77e      	b.n	40547a <_realloc_r+0x21a>
  40557c:	68a9      	ldr	r1, [r5, #8]
  40557e:	f8ca 1010 	str.w	r1, [sl, #16]
  405582:	68e9      	ldr	r1, [r5, #12]
  405584:	f8ca 1014 	str.w	r1, [sl, #20]
  405588:	2a24      	cmp	r2, #36	; 0x24
  40558a:	d003      	beq.n	405594 <_realloc_r+0x334>
  40558c:	3510      	adds	r5, #16
  40558e:	f10a 0218 	add.w	r2, sl, #24
  405592:	e76c      	b.n	40546e <_realloc_r+0x20e>
  405594:	692a      	ldr	r2, [r5, #16]
  405596:	f8ca 2018 	str.w	r2, [sl, #24]
  40559a:	696a      	ldr	r2, [r5, #20]
  40559c:	f8ca 201c 	str.w	r2, [sl, #28]
  4055a0:	3518      	adds	r5, #24
  4055a2:	f10a 0220 	add.w	r2, sl, #32
  4055a6:	e762      	b.n	40546e <_realloc_r+0x20e>
  4055a8:	204005c8 	.word	0x204005c8

004055ac <_sbrk_r>:
  4055ac:	b538      	push	{r3, r4, r5, lr}
  4055ae:	4c07      	ldr	r4, [pc, #28]	; (4055cc <_sbrk_r+0x20>)
  4055b0:	2300      	movs	r3, #0
  4055b2:	4605      	mov	r5, r0
  4055b4:	4608      	mov	r0, r1
  4055b6:	6023      	str	r3, [r4, #0]
  4055b8:	f7fd f862 	bl	402680 <_sbrk>
  4055bc:	1c43      	adds	r3, r0, #1
  4055be:	d000      	beq.n	4055c2 <_sbrk_r+0x16>
  4055c0:	bd38      	pop	{r3, r4, r5, pc}
  4055c2:	6823      	ldr	r3, [r4, #0]
  4055c4:	2b00      	cmp	r3, #0
  4055c6:	d0fb      	beq.n	4055c0 <_sbrk_r+0x14>
  4055c8:	602b      	str	r3, [r5, #0]
  4055ca:	bd38      	pop	{r3, r4, r5, pc}
  4055cc:	20404c4c 	.word	0x20404c4c

004055d0 <__sread>:
  4055d0:	b510      	push	{r4, lr}
  4055d2:	460c      	mov	r4, r1
  4055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4055d8:	f000 f9f6 	bl	4059c8 <_read_r>
  4055dc:	2800      	cmp	r0, #0
  4055de:	db03      	blt.n	4055e8 <__sread+0x18>
  4055e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4055e2:	4403      	add	r3, r0
  4055e4:	6523      	str	r3, [r4, #80]	; 0x50
  4055e6:	bd10      	pop	{r4, pc}
  4055e8:	89a3      	ldrh	r3, [r4, #12]
  4055ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4055ee:	81a3      	strh	r3, [r4, #12]
  4055f0:	bd10      	pop	{r4, pc}
  4055f2:	bf00      	nop

004055f4 <__swrite>:
  4055f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055f8:	4616      	mov	r6, r2
  4055fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4055fe:	461f      	mov	r7, r3
  405600:	05d3      	lsls	r3, r2, #23
  405602:	460c      	mov	r4, r1
  405604:	4605      	mov	r5, r0
  405606:	d507      	bpl.n	405618 <__swrite+0x24>
  405608:	2200      	movs	r2, #0
  40560a:	2302      	movs	r3, #2
  40560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405610:	f000 f9c4 	bl	40599c <_lseek_r>
  405614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40561c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405620:	81a2      	strh	r2, [r4, #12]
  405622:	463b      	mov	r3, r7
  405624:	4632      	mov	r2, r6
  405626:	4628      	mov	r0, r5
  405628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40562c:	f000 b8a4 	b.w	405778 <_write_r>

00405630 <__sseek>:
  405630:	b510      	push	{r4, lr}
  405632:	460c      	mov	r4, r1
  405634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405638:	f000 f9b0 	bl	40599c <_lseek_r>
  40563c:	89a3      	ldrh	r3, [r4, #12]
  40563e:	1c42      	adds	r2, r0, #1
  405640:	bf0e      	itee	eq
  405642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40564a:	6520      	strne	r0, [r4, #80]	; 0x50
  40564c:	81a3      	strh	r3, [r4, #12]
  40564e:	bd10      	pop	{r4, pc}

00405650 <__sclose>:
  405650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405654:	f000 b908 	b.w	405868 <_close_r>

00405658 <__swbuf_r>:
  405658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40565a:	460d      	mov	r5, r1
  40565c:	4614      	mov	r4, r2
  40565e:	4606      	mov	r6, r0
  405660:	b110      	cbz	r0, 405668 <__swbuf_r+0x10>
  405662:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405664:	2b00      	cmp	r3, #0
  405666:	d04b      	beq.n	405700 <__swbuf_r+0xa8>
  405668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40566c:	69a3      	ldr	r3, [r4, #24]
  40566e:	60a3      	str	r3, [r4, #8]
  405670:	b291      	uxth	r1, r2
  405672:	0708      	lsls	r0, r1, #28
  405674:	d539      	bpl.n	4056ea <__swbuf_r+0x92>
  405676:	6923      	ldr	r3, [r4, #16]
  405678:	2b00      	cmp	r3, #0
  40567a:	d036      	beq.n	4056ea <__swbuf_r+0x92>
  40567c:	b2ed      	uxtb	r5, r5
  40567e:	0489      	lsls	r1, r1, #18
  405680:	462f      	mov	r7, r5
  405682:	d515      	bpl.n	4056b0 <__swbuf_r+0x58>
  405684:	6822      	ldr	r2, [r4, #0]
  405686:	6961      	ldr	r1, [r4, #20]
  405688:	1ad3      	subs	r3, r2, r3
  40568a:	428b      	cmp	r3, r1
  40568c:	da1c      	bge.n	4056c8 <__swbuf_r+0x70>
  40568e:	3301      	adds	r3, #1
  405690:	68a1      	ldr	r1, [r4, #8]
  405692:	1c50      	adds	r0, r2, #1
  405694:	3901      	subs	r1, #1
  405696:	60a1      	str	r1, [r4, #8]
  405698:	6020      	str	r0, [r4, #0]
  40569a:	7015      	strb	r5, [r2, #0]
  40569c:	6962      	ldr	r2, [r4, #20]
  40569e:	429a      	cmp	r2, r3
  4056a0:	d01a      	beq.n	4056d8 <__swbuf_r+0x80>
  4056a2:	89a3      	ldrh	r3, [r4, #12]
  4056a4:	07db      	lsls	r3, r3, #31
  4056a6:	d501      	bpl.n	4056ac <__swbuf_r+0x54>
  4056a8:	2d0a      	cmp	r5, #10
  4056aa:	d015      	beq.n	4056d8 <__swbuf_r+0x80>
  4056ac:	4638      	mov	r0, r7
  4056ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4056b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4056b6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4056ba:	81a2      	strh	r2, [r4, #12]
  4056bc:	6822      	ldr	r2, [r4, #0]
  4056be:	6661      	str	r1, [r4, #100]	; 0x64
  4056c0:	6961      	ldr	r1, [r4, #20]
  4056c2:	1ad3      	subs	r3, r2, r3
  4056c4:	428b      	cmp	r3, r1
  4056c6:	dbe2      	blt.n	40568e <__swbuf_r+0x36>
  4056c8:	4621      	mov	r1, r4
  4056ca:	4630      	mov	r0, r6
  4056cc:	f7fe fda4 	bl	404218 <_fflush_r>
  4056d0:	b940      	cbnz	r0, 4056e4 <__swbuf_r+0x8c>
  4056d2:	6822      	ldr	r2, [r4, #0]
  4056d4:	2301      	movs	r3, #1
  4056d6:	e7db      	b.n	405690 <__swbuf_r+0x38>
  4056d8:	4621      	mov	r1, r4
  4056da:	4630      	mov	r0, r6
  4056dc:	f7fe fd9c 	bl	404218 <_fflush_r>
  4056e0:	2800      	cmp	r0, #0
  4056e2:	d0e3      	beq.n	4056ac <__swbuf_r+0x54>
  4056e4:	f04f 37ff 	mov.w	r7, #4294967295
  4056e8:	e7e0      	b.n	4056ac <__swbuf_r+0x54>
  4056ea:	4621      	mov	r1, r4
  4056ec:	4630      	mov	r0, r6
  4056ee:	f7fe fc7f 	bl	403ff0 <__swsetup_r>
  4056f2:	2800      	cmp	r0, #0
  4056f4:	d1f6      	bne.n	4056e4 <__swbuf_r+0x8c>
  4056f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4056fa:	6923      	ldr	r3, [r4, #16]
  4056fc:	b291      	uxth	r1, r2
  4056fe:	e7bd      	b.n	40567c <__swbuf_r+0x24>
  405700:	f7fe fde2 	bl	4042c8 <__sinit>
  405704:	e7b0      	b.n	405668 <__swbuf_r+0x10>
  405706:	bf00      	nop

00405708 <_wcrtomb_r>:
  405708:	b5f0      	push	{r4, r5, r6, r7, lr}
  40570a:	4606      	mov	r6, r0
  40570c:	b085      	sub	sp, #20
  40570e:	461f      	mov	r7, r3
  405710:	b189      	cbz	r1, 405736 <_wcrtomb_r+0x2e>
  405712:	4c10      	ldr	r4, [pc, #64]	; (405754 <_wcrtomb_r+0x4c>)
  405714:	4d10      	ldr	r5, [pc, #64]	; (405758 <_wcrtomb_r+0x50>)
  405716:	6824      	ldr	r4, [r4, #0]
  405718:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40571a:	2c00      	cmp	r4, #0
  40571c:	bf08      	it	eq
  40571e:	462c      	moveq	r4, r5
  405720:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405724:	47a0      	blx	r4
  405726:	1c43      	adds	r3, r0, #1
  405728:	d103      	bne.n	405732 <_wcrtomb_r+0x2a>
  40572a:	2200      	movs	r2, #0
  40572c:	238a      	movs	r3, #138	; 0x8a
  40572e:	603a      	str	r2, [r7, #0]
  405730:	6033      	str	r3, [r6, #0]
  405732:	b005      	add	sp, #20
  405734:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405736:	460c      	mov	r4, r1
  405738:	4906      	ldr	r1, [pc, #24]	; (405754 <_wcrtomb_r+0x4c>)
  40573a:	4a07      	ldr	r2, [pc, #28]	; (405758 <_wcrtomb_r+0x50>)
  40573c:	6809      	ldr	r1, [r1, #0]
  40573e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405740:	2900      	cmp	r1, #0
  405742:	bf08      	it	eq
  405744:	4611      	moveq	r1, r2
  405746:	4622      	mov	r2, r4
  405748:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40574c:	a901      	add	r1, sp, #4
  40574e:	47a0      	blx	r4
  405750:	e7e9      	b.n	405726 <_wcrtomb_r+0x1e>
  405752:	bf00      	nop
  405754:	2040002c 	.word	0x2040002c
  405758:	2040045c 	.word	0x2040045c

0040575c <__ascii_wctomb>:
  40575c:	b121      	cbz	r1, 405768 <__ascii_wctomb+0xc>
  40575e:	2aff      	cmp	r2, #255	; 0xff
  405760:	d804      	bhi.n	40576c <__ascii_wctomb+0x10>
  405762:	700a      	strb	r2, [r1, #0]
  405764:	2001      	movs	r0, #1
  405766:	4770      	bx	lr
  405768:	4608      	mov	r0, r1
  40576a:	4770      	bx	lr
  40576c:	238a      	movs	r3, #138	; 0x8a
  40576e:	6003      	str	r3, [r0, #0]
  405770:	f04f 30ff 	mov.w	r0, #4294967295
  405774:	4770      	bx	lr
  405776:	bf00      	nop

00405778 <_write_r>:
  405778:	b570      	push	{r4, r5, r6, lr}
  40577a:	460d      	mov	r5, r1
  40577c:	4c08      	ldr	r4, [pc, #32]	; (4057a0 <_write_r+0x28>)
  40577e:	4611      	mov	r1, r2
  405780:	4606      	mov	r6, r0
  405782:	461a      	mov	r2, r3
  405784:	4628      	mov	r0, r5
  405786:	2300      	movs	r3, #0
  405788:	6023      	str	r3, [r4, #0]
  40578a:	f7fc fb2f 	bl	401dec <_write>
  40578e:	1c43      	adds	r3, r0, #1
  405790:	d000      	beq.n	405794 <_write_r+0x1c>
  405792:	bd70      	pop	{r4, r5, r6, pc}
  405794:	6823      	ldr	r3, [r4, #0]
  405796:	2b00      	cmp	r3, #0
  405798:	d0fb      	beq.n	405792 <_write_r+0x1a>
  40579a:	6033      	str	r3, [r6, #0]
  40579c:	bd70      	pop	{r4, r5, r6, pc}
  40579e:	bf00      	nop
  4057a0:	20404c4c 	.word	0x20404c4c

004057a4 <__register_exitproc>:
  4057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4057a8:	4d2c      	ldr	r5, [pc, #176]	; (40585c <__register_exitproc+0xb8>)
  4057aa:	4606      	mov	r6, r0
  4057ac:	6828      	ldr	r0, [r5, #0]
  4057ae:	4698      	mov	r8, r3
  4057b0:	460f      	mov	r7, r1
  4057b2:	4691      	mov	r9, r2
  4057b4:	f7ff f948 	bl	404a48 <__retarget_lock_acquire_recursive>
  4057b8:	4b29      	ldr	r3, [pc, #164]	; (405860 <__register_exitproc+0xbc>)
  4057ba:	681c      	ldr	r4, [r3, #0]
  4057bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4057c0:	2b00      	cmp	r3, #0
  4057c2:	d03e      	beq.n	405842 <__register_exitproc+0x9e>
  4057c4:	685a      	ldr	r2, [r3, #4]
  4057c6:	2a1f      	cmp	r2, #31
  4057c8:	dc1c      	bgt.n	405804 <__register_exitproc+0x60>
  4057ca:	f102 0e01 	add.w	lr, r2, #1
  4057ce:	b176      	cbz	r6, 4057ee <__register_exitproc+0x4a>
  4057d0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4057d4:	2401      	movs	r4, #1
  4057d6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4057da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4057de:	4094      	lsls	r4, r2
  4057e0:	4320      	orrs	r0, r4
  4057e2:	2e02      	cmp	r6, #2
  4057e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4057e8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4057ec:	d023      	beq.n	405836 <__register_exitproc+0x92>
  4057ee:	3202      	adds	r2, #2
  4057f0:	f8c3 e004 	str.w	lr, [r3, #4]
  4057f4:	6828      	ldr	r0, [r5, #0]
  4057f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4057fa:	f7ff f927 	bl	404a4c <__retarget_lock_release_recursive>
  4057fe:	2000      	movs	r0, #0
  405800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405804:	4b17      	ldr	r3, [pc, #92]	; (405864 <__register_exitproc+0xc0>)
  405806:	b30b      	cbz	r3, 40584c <__register_exitproc+0xa8>
  405808:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40580c:	f7ff f998 	bl	404b40 <malloc>
  405810:	4603      	mov	r3, r0
  405812:	b1d8      	cbz	r0, 40584c <__register_exitproc+0xa8>
  405814:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405818:	6002      	str	r2, [r0, #0]
  40581a:	2100      	movs	r1, #0
  40581c:	6041      	str	r1, [r0, #4]
  40581e:	460a      	mov	r2, r1
  405820:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405824:	f04f 0e01 	mov.w	lr, #1
  405828:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40582c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405830:	2e00      	cmp	r6, #0
  405832:	d0dc      	beq.n	4057ee <__register_exitproc+0x4a>
  405834:	e7cc      	b.n	4057d0 <__register_exitproc+0x2c>
  405836:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40583a:	430c      	orrs	r4, r1
  40583c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405840:	e7d5      	b.n	4057ee <__register_exitproc+0x4a>
  405842:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405846:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40584a:	e7bb      	b.n	4057c4 <__register_exitproc+0x20>
  40584c:	6828      	ldr	r0, [r5, #0]
  40584e:	f7ff f8fd 	bl	404a4c <__retarget_lock_release_recursive>
  405852:	f04f 30ff 	mov.w	r0, #4294967295
  405856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40585a:	bf00      	nop
  40585c:	20400458 	.word	0x20400458
  405860:	00405ea4 	.word	0x00405ea4
  405864:	00404b41 	.word	0x00404b41

00405868 <_close_r>:
  405868:	b538      	push	{r3, r4, r5, lr}
  40586a:	4c07      	ldr	r4, [pc, #28]	; (405888 <_close_r+0x20>)
  40586c:	2300      	movs	r3, #0
  40586e:	4605      	mov	r5, r0
  405870:	4608      	mov	r0, r1
  405872:	6023      	str	r3, [r4, #0]
  405874:	f7fc ff20 	bl	4026b8 <_close>
  405878:	1c43      	adds	r3, r0, #1
  40587a:	d000      	beq.n	40587e <_close_r+0x16>
  40587c:	bd38      	pop	{r3, r4, r5, pc}
  40587e:	6823      	ldr	r3, [r4, #0]
  405880:	2b00      	cmp	r3, #0
  405882:	d0fb      	beq.n	40587c <_close_r+0x14>
  405884:	602b      	str	r3, [r5, #0]
  405886:	bd38      	pop	{r3, r4, r5, pc}
  405888:	20404c4c 	.word	0x20404c4c

0040588c <_fclose_r>:
  40588c:	b570      	push	{r4, r5, r6, lr}
  40588e:	b159      	cbz	r1, 4058a8 <_fclose_r+0x1c>
  405890:	4605      	mov	r5, r0
  405892:	460c      	mov	r4, r1
  405894:	b110      	cbz	r0, 40589c <_fclose_r+0x10>
  405896:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405898:	2b00      	cmp	r3, #0
  40589a:	d03c      	beq.n	405916 <_fclose_r+0x8a>
  40589c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40589e:	07d8      	lsls	r0, r3, #31
  4058a0:	d505      	bpl.n	4058ae <_fclose_r+0x22>
  4058a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058a6:	b92b      	cbnz	r3, 4058b4 <_fclose_r+0x28>
  4058a8:	2600      	movs	r6, #0
  4058aa:	4630      	mov	r0, r6
  4058ac:	bd70      	pop	{r4, r5, r6, pc}
  4058ae:	89a3      	ldrh	r3, [r4, #12]
  4058b0:	0599      	lsls	r1, r3, #22
  4058b2:	d53c      	bpl.n	40592e <_fclose_r+0xa2>
  4058b4:	4621      	mov	r1, r4
  4058b6:	4628      	mov	r0, r5
  4058b8:	f7fe fc0e 	bl	4040d8 <__sflush_r>
  4058bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4058be:	4606      	mov	r6, r0
  4058c0:	b133      	cbz	r3, 4058d0 <_fclose_r+0x44>
  4058c2:	69e1      	ldr	r1, [r4, #28]
  4058c4:	4628      	mov	r0, r5
  4058c6:	4798      	blx	r3
  4058c8:	2800      	cmp	r0, #0
  4058ca:	bfb8      	it	lt
  4058cc:	f04f 36ff 	movlt.w	r6, #4294967295
  4058d0:	89a3      	ldrh	r3, [r4, #12]
  4058d2:	061a      	lsls	r2, r3, #24
  4058d4:	d422      	bmi.n	40591c <_fclose_r+0x90>
  4058d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4058d8:	b141      	cbz	r1, 4058ec <_fclose_r+0x60>
  4058da:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4058de:	4299      	cmp	r1, r3
  4058e0:	d002      	beq.n	4058e8 <_fclose_r+0x5c>
  4058e2:	4628      	mov	r0, r5
  4058e4:	f7fe fe16 	bl	404514 <_free_r>
  4058e8:	2300      	movs	r3, #0
  4058ea:	6323      	str	r3, [r4, #48]	; 0x30
  4058ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4058ee:	b121      	cbz	r1, 4058fa <_fclose_r+0x6e>
  4058f0:	4628      	mov	r0, r5
  4058f2:	f7fe fe0f 	bl	404514 <_free_r>
  4058f6:	2300      	movs	r3, #0
  4058f8:	6463      	str	r3, [r4, #68]	; 0x44
  4058fa:	f7fe fd11 	bl	404320 <__sfp_lock_acquire>
  4058fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405900:	2200      	movs	r2, #0
  405902:	07db      	lsls	r3, r3, #31
  405904:	81a2      	strh	r2, [r4, #12]
  405906:	d50e      	bpl.n	405926 <_fclose_r+0x9a>
  405908:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40590a:	f7ff f89b 	bl	404a44 <__retarget_lock_close_recursive>
  40590e:	f7fe fd0d 	bl	40432c <__sfp_lock_release>
  405912:	4630      	mov	r0, r6
  405914:	bd70      	pop	{r4, r5, r6, pc}
  405916:	f7fe fcd7 	bl	4042c8 <__sinit>
  40591a:	e7bf      	b.n	40589c <_fclose_r+0x10>
  40591c:	6921      	ldr	r1, [r4, #16]
  40591e:	4628      	mov	r0, r5
  405920:	f7fe fdf8 	bl	404514 <_free_r>
  405924:	e7d7      	b.n	4058d6 <_fclose_r+0x4a>
  405926:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405928:	f7ff f890 	bl	404a4c <__retarget_lock_release_recursive>
  40592c:	e7ec      	b.n	405908 <_fclose_r+0x7c>
  40592e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405930:	f7ff f88a 	bl	404a48 <__retarget_lock_acquire_recursive>
  405934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405938:	2b00      	cmp	r3, #0
  40593a:	d1bb      	bne.n	4058b4 <_fclose_r+0x28>
  40593c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40593e:	f016 0601 	ands.w	r6, r6, #1
  405942:	d1b1      	bne.n	4058a8 <_fclose_r+0x1c>
  405944:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405946:	f7ff f881 	bl	404a4c <__retarget_lock_release_recursive>
  40594a:	4630      	mov	r0, r6
  40594c:	bd70      	pop	{r4, r5, r6, pc}
  40594e:	bf00      	nop

00405950 <_fstat_r>:
  405950:	b538      	push	{r3, r4, r5, lr}
  405952:	460b      	mov	r3, r1
  405954:	4c07      	ldr	r4, [pc, #28]	; (405974 <_fstat_r+0x24>)
  405956:	4605      	mov	r5, r0
  405958:	4611      	mov	r1, r2
  40595a:	4618      	mov	r0, r3
  40595c:	2300      	movs	r3, #0
  40595e:	6023      	str	r3, [r4, #0]
  405960:	f7fc fead 	bl	4026be <_fstat>
  405964:	1c43      	adds	r3, r0, #1
  405966:	d000      	beq.n	40596a <_fstat_r+0x1a>
  405968:	bd38      	pop	{r3, r4, r5, pc}
  40596a:	6823      	ldr	r3, [r4, #0]
  40596c:	2b00      	cmp	r3, #0
  40596e:	d0fb      	beq.n	405968 <_fstat_r+0x18>
  405970:	602b      	str	r3, [r5, #0]
  405972:	bd38      	pop	{r3, r4, r5, pc}
  405974:	20404c4c 	.word	0x20404c4c

00405978 <_isatty_r>:
  405978:	b538      	push	{r3, r4, r5, lr}
  40597a:	4c07      	ldr	r4, [pc, #28]	; (405998 <_isatty_r+0x20>)
  40597c:	2300      	movs	r3, #0
  40597e:	4605      	mov	r5, r0
  405980:	4608      	mov	r0, r1
  405982:	6023      	str	r3, [r4, #0]
  405984:	f7fc fea0 	bl	4026c8 <_isatty>
  405988:	1c43      	adds	r3, r0, #1
  40598a:	d000      	beq.n	40598e <_isatty_r+0x16>
  40598c:	bd38      	pop	{r3, r4, r5, pc}
  40598e:	6823      	ldr	r3, [r4, #0]
  405990:	2b00      	cmp	r3, #0
  405992:	d0fb      	beq.n	40598c <_isatty_r+0x14>
  405994:	602b      	str	r3, [r5, #0]
  405996:	bd38      	pop	{r3, r4, r5, pc}
  405998:	20404c4c 	.word	0x20404c4c

0040599c <_lseek_r>:
  40599c:	b570      	push	{r4, r5, r6, lr}
  40599e:	460d      	mov	r5, r1
  4059a0:	4c08      	ldr	r4, [pc, #32]	; (4059c4 <_lseek_r+0x28>)
  4059a2:	4611      	mov	r1, r2
  4059a4:	4606      	mov	r6, r0
  4059a6:	461a      	mov	r2, r3
  4059a8:	4628      	mov	r0, r5
  4059aa:	2300      	movs	r3, #0
  4059ac:	6023      	str	r3, [r4, #0]
  4059ae:	f7fc fe8d 	bl	4026cc <_lseek>
  4059b2:	1c43      	adds	r3, r0, #1
  4059b4:	d000      	beq.n	4059b8 <_lseek_r+0x1c>
  4059b6:	bd70      	pop	{r4, r5, r6, pc}
  4059b8:	6823      	ldr	r3, [r4, #0]
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	d0fb      	beq.n	4059b6 <_lseek_r+0x1a>
  4059be:	6033      	str	r3, [r6, #0]
  4059c0:	bd70      	pop	{r4, r5, r6, pc}
  4059c2:	bf00      	nop
  4059c4:	20404c4c 	.word	0x20404c4c

004059c8 <_read_r>:
  4059c8:	b570      	push	{r4, r5, r6, lr}
  4059ca:	460d      	mov	r5, r1
  4059cc:	4c08      	ldr	r4, [pc, #32]	; (4059f0 <_read_r+0x28>)
  4059ce:	4611      	mov	r1, r2
  4059d0:	4606      	mov	r6, r0
  4059d2:	461a      	mov	r2, r3
  4059d4:	4628      	mov	r0, r5
  4059d6:	2300      	movs	r3, #0
  4059d8:	6023      	str	r3, [r4, #0]
  4059da:	f7fa fbfb 	bl	4001d4 <_read>
  4059de:	1c43      	adds	r3, r0, #1
  4059e0:	d000      	beq.n	4059e4 <_read_r+0x1c>
  4059e2:	bd70      	pop	{r4, r5, r6, pc}
  4059e4:	6823      	ldr	r3, [r4, #0]
  4059e6:	2b00      	cmp	r3, #0
  4059e8:	d0fb      	beq.n	4059e2 <_read_r+0x1a>
  4059ea:	6033      	str	r3, [r6, #0]
  4059ec:	bd70      	pop	{r4, r5, r6, pc}
  4059ee:	bf00      	nop
  4059f0:	20404c4c 	.word	0x20404c4c
  4059f4:	3d3d3d3d 	.word	0x3d3d3d3d
  4059f8:	203d3d3d 	.word	0x203d3d3d
  4059fc:	25205049 	.word	0x25205049
  405a00:	62206434 	.word	0x62206434
  405a04:	73657479 	.word	0x73657479
  405a08:	4548202c 	.word	0x4548202c
  405a0c:	52454441 	.word	0x52454441
  405a10:	3d3d3d20 	.word	0x3d3d3d20
  405a14:	3d3d3d3d 	.word	0x3d3d3d3d
  405a18:	0a3d3d3d 	.word	0x0a3d3d3d
  405a1c:	0000000d 	.word	0x0000000d
  405a20:	20504920 	.word	0x20504920
  405a24:	73726556 	.word	0x73726556
  405a28:	206e6f69 	.word	0x206e6f69
  405a2c:	20202020 	.word	0x20202020
  405a30:	3d202020 	.word	0x3d202020
  405a34:	252e7620 	.word	0x252e7620
  405a38:	00000064 	.word	0x00000064
  405a3c:	48200d0a 	.word	0x48200d0a
  405a40:	65646165 	.word	0x65646165
  405a44:	654c2072 	.word	0x654c2072
  405a48:	6874676e 	.word	0x6874676e
  405a4c:	20202020 	.word	0x20202020
  405a50:	25203d20 	.word	0x25203d20
  405a54:	00000064 	.word	0x00000064
  405a58:	54200d0a 	.word	0x54200d0a
  405a5c:	20657079 	.word	0x20657079
  405a60:	7320666f 	.word	0x7320666f
  405a64:	69767265 	.word	0x69767265
  405a68:	20206563 	.word	0x20206563
  405a6c:	30203d20 	.word	0x30203d20
  405a70:	00782578 	.word	0x00782578
  405a74:	54200d0a 	.word	0x54200d0a
  405a78:	6c61746f 	.word	0x6c61746f
  405a7c:	20504920 	.word	0x20504920
  405a80:	676e654c 	.word	0x676e654c
  405a84:	20206874 	.word	0x20206874
  405a88:	30203d20 	.word	0x30203d20
  405a8c:	00582578 	.word	0x00582578
  405a90:	49200d0a 	.word	0x49200d0a
  405a94:	20202044 	.word	0x20202044
  405a98:	20202020 	.word	0x20202020
  405a9c:	20202020 	.word	0x20202020
  405aa0:	20202020 	.word	0x20202020
  405aa4:	30203d20 	.word	0x30203d20
  405aa8:	00582578 	.word	0x00582578
  405aac:	48200d0a 	.word	0x48200d0a
  405ab0:	65646165 	.word	0x65646165
  405ab4:	68432072 	.word	0x68432072
  405ab8:	736b6365 	.word	0x736b6365
  405abc:	20206d75 	.word	0x20206d75
  405ac0:	30203d20 	.word	0x30203d20
  405ac4:	00582578 	.word	0x00582578
  405ac8:	7250200d 	.word	0x7250200d
  405acc:	636f746f 	.word	0x636f746f
  405ad0:	20206c6f 	.word	0x20206c6f
  405ad4:	20202020 	.word	0x20202020
  405ad8:	20202020 	.word	0x20202020
  405adc:	0000203d 	.word	0x0000203d
  405ae0:	504d4349 	.word	0x504d4349
  405ae4:	00000000 	.word	0x00000000
  405ae8:	00005049 	.word	0x00005049
  405aec:	00504354 	.word	0x00504354
  405af0:	00504455 	.word	0x00504455
  405af4:	28206425 	.word	0x28206425
  405af8:	58257830 	.word	0x58257830
  405afc:	00000029 	.word	0x00000029
  405b00:	49200d0a 	.word	0x49200d0a
  405b04:	72532050 	.word	0x72532050
  405b08:	64412063 	.word	0x64412063
  405b0c:	73657264 	.word	0x73657264
  405b10:	20202073 	.word	0x20202073
  405b14:	25203d20 	.word	0x25203d20
  405b18:	64253a64 	.word	0x64253a64
  405b1c:	3a64253a 	.word	0x3a64253a
  405b20:	00006425 	.word	0x00006425
  405b24:	49200d0a 	.word	0x49200d0a
  405b28:	65442050 	.word	0x65442050
  405b2c:	41207473 	.word	0x41207473
  405b30:	65726464 	.word	0x65726464
  405b34:	20207373 	.word	0x20207373
  405b38:	25203d20 	.word	0x25203d20
  405b3c:	64253a64 	.word	0x64253a64
  405b40:	3a64253a 	.word	0x3a64253a
  405b44:	00006425 	.word	0x00006425
  405b48:	2d2d0d0a 	.word	0x2d2d0d0a
  405b4c:	2d2d2d2d 	.word	0x2d2d2d2d
  405b50:	2d2d2d2d 	.word	0x2d2d2d2d
  405b54:	2d2d2d2d 	.word	0x2d2d2d2d
  405b58:	2d2d2d2d 	.word	0x2d2d2d2d
  405b5c:	2d2d2d2d 	.word	0x2d2d2d2d
  405b60:	2d2d2d2d 	.word	0x2d2d2d2d
  405b64:	2d2d2d2d 	.word	0x2d2d2d2d
  405b68:	2d2d2d2d 	.word	0x2d2d2d2d
  405b6c:	2d2d2d2d 	.word	0x2d2d2d2d
  405b70:	000d2d2d 	.word	0x000d2d2d
  405b74:	41203a45 	.word	0x41203a45
  405b78:	53205052 	.word	0x53205052
  405b7c:	20646e65 	.word	0x20646e65
  405b80:	7830202d 	.word	0x7830202d
  405b84:	0d0a7825 	.word	0x0d0a7825
  405b88:	00000000 	.word	0x00000000
  405b8c:	49203a45 	.word	0x49203a45
  405b90:	20504d43 	.word	0x20504d43
  405b94:	646e6553 	.word	0x646e6553
  405b98:	30202d20 	.word	0x30202d20
  405b9c:	0a782578 	.word	0x0a782578
  405ba0:	0000000d 	.word	0x0000000d
  405ba4:	203d3d3d 	.word	0x203d3d3d
  405ba8:	61666544 	.word	0x61666544
  405bac:	20746c75 	.word	0x20746c75
  405bb0:	6b705f77 	.word	0x6b705f77
  405bb4:	6f665f74 	.word	0x6f665f74
  405bb8:	74616d72 	.word	0x74616d72
  405bbc:	7830203d 	.word	0x7830203d
  405bc0:	3d3d5825 	.word	0x3d3d5825
  405bc4:	000d0a3d 	.word	0x000d0a3d
  405bc8:	4d202d2d 	.word	0x4d202d2d
  405bcc:	25204341 	.word	0x25204341
  405bd0:	78253a78 	.word	0x78253a78
  405bd4:	3a78253a 	.word	0x3a78253a
  405bd8:	253a7825 	.word	0x253a7825
  405bdc:	78253a78 	.word	0x78253a78
  405be0:	00000d0a 	.word	0x00000d0a
  405be4:	49202d2d 	.word	0x49202d2d
  405be8:	25202050 	.word	0x25202050
  405bec:	64252e64 	.word	0x64252e64
  405bf0:	2e64252e 	.word	0x2e64252e
  405bf4:	0d0a6425 	.word	0x0d0a6425
  405bf8:	00000000 	.word	0x00000000
  405bfc:	20594850 	.word	0x20594850
  405c00:	74696e49 	.word	0x74696e49
  405c04:	696c6169 	.word	0x696c6169
  405c08:	4520657a 	.word	0x4520657a
  405c0c:	524f5252 	.word	0x524f5252
  405c10:	00000d21 	.word	0x00000d21
  405c14:	6f747541 	.word	0x6f747541
  405c18:	67654e20 	.word	0x67654e20
  405c1c:	6169746f 	.word	0x6169746f
  405c20:	45206574 	.word	0x45206574
  405c24:	524f5252 	.word	0x524f5252
  405c28:	00000d21 	.word	0x00000d21
  405c2c:	20746553 	.word	0x20746553
  405c30:	6b6e696c 	.word	0x6b6e696c
  405c34:	52524520 	.word	0x52524520
  405c38:	0d21524f 	.word	0x0d21524f
  405c3c:	00000000 	.word	0x00000000
  405c40:	00007350 	.word	0x00007350
  405c44:	20495053 	.word	0x20495053
  405c48:	65657053 	.word	0x65657053
  405c4c:	3d200964 	.word	0x3d200964
  405c50:	646c2520 	.word	0x646c2520
  405c54:	7a484d20 	.word	0x7a484d20
  405c58:	00000a0d 	.word	0x00000a0d
  405c5c:	54415453 	.word	0x54415453
  405c60:	09095355 	.word	0x09095355
  405c64:	30203d20 	.word	0x30203d20
  405c68:	32302578 	.word	0x32302578
  405c6c:	58522078 	.word	0x58522078
  405c70:	3d52445f 	.word	0x3d52445f
  405c74:	54207825 	.word	0x54207825
  405c78:	53445f58 	.word	0x53445f58
  405c7c:	2078253d 	.word	0x2078253d
  405c80:	5f58414d 	.word	0x5f58414d
  405c84:	253d5452 	.word	0x253d5452
  405c88:	58522078 	.word	0x58522078
  405c8c:	4e5f505f 	.word	0x4e5f505f
  405c90:	78253d4f 	.word	0x78253d4f
  405c94:	5f585420 	.word	0x5f585420
  405c98:	4c4c5546 	.word	0x4c4c5546
  405c9c:	0d78253d 	.word	0x0d78253d
  405ca0:	0000000a 	.word	0x0000000a
  405ca4:	415f5852 	.word	0x415f5852
  405ca8:	5f524444 	.word	0x5f524444
  405cac:	312d3050 	.word	0x312d3050
  405cb0:	00000000 	.word	0x00000000
  405cb4:	415f5852 	.word	0x415f5852
  405cb8:	5f524444 	.word	0x5f524444
  405cbc:	352d3250 	.word	0x352d3250
  405cc0:	00000000 	.word	0x00000000
  405cc4:	415f5854 	.word	0x415f5854
  405cc8:	09524444 	.word	0x09524444
  405ccc:	00000000 	.word	0x00000000
  405cd0:	505f5852 	.word	0x505f5852
  405cd4:	30505f57 	.word	0x30505f57
  405cd8:	0000352d 	.word	0x0000352d
  405cdc:	55544553 	.word	0x55544553
  405ce0:	57415f50 	.word	0x57415f50
  405ce4:	00000000 	.word	0x00000000
  405ce8:	415f4e45 	.word	0x415f4e45
  405cec:	00000941 	.word	0x00000941
  405cf0:	525f4e45 	.word	0x525f4e45
  405cf4:	44444158 	.word	0x44444158
  405cf8:	00000052 	.word	0x00000052
  405cfc:	435f4652 	.word	0x435f4652
  405d00:	00000948 	.word	0x00000948
  405d04:	535f4652 	.word	0x535f4652
  405d08:	50555445 	.word	0x50555445
  405d0c:	00000000 	.word	0x00000000
  405d10:	464e4f43 	.word	0x464e4f43
  405d14:	00094749 	.word	0x00094749
  405d18:	504e5944 	.word	0x504e5944
  405d1c:	45462f44 	.word	0x45462f44
  405d20:	52555441 	.word	0x52555441
  405d24:	00000045 	.word	0x00000045
  405d28:	61746144 	.word	0x61746144
  405d2c:	74615220 	.word	0x74615220
  405d30:	3d200965 	.word	0x3d200965
  405d34:	0d732520 	.word	0x0d732520
  405d38:	0000000a 	.word	0x0000000a
  405d3c:	65646f4d 	.word	0x65646f4d
  405d40:	2009096c 	.word	0x2009096c
  405d44:	7325203d 	.word	0x7325203d
  405d48:	00000a0d 	.word	0x00000a0d
  405d4c:	20435243 	.word	0x20435243
  405d50:	676e654c 	.word	0x676e654c
  405d54:	20096874 	.word	0x20096874
  405d58:	7325203d 	.word	0x7325203d
  405d5c:	00000a0d 	.word	0x00000a0d
  405d60:	50204150 	.word	0x50204150
  405d64:	7265776f 	.word	0x7265776f
  405d68:	203d2009 	.word	0x203d2009
  405d6c:	0a0d7325 	.word	0x0a0d7325
  405d70:	00000000 	.word	0x00000000
  405d74:	00097325 	.word	0x00097325
  405d78:	00783020 	.word	0x00783020
  405d7c:	78323025 	.word	0x78323025
  405d80:	00000000 	.word	0x00000000
  405d84:	25783020 	.word	0x25783020
  405d88:	00783230 	.word	0x00783230

00405d8c <rf24_crclength_e_str_0>:
  405d8c:	61736944 64656c62 00000000              Disabled....

00405d98 <rf24_crclength_e_str_1>:
  405d98:	69622038 00007374                       8 bits..

00405da0 <rf24_crclength_e_str_2>:
  405da0:	62203631 00737469                       16 bits.

00405da8 <rf24_crclength_e_str_P>:
  405da8:	00405d8c 00405d98 00405da0              .]@..]@..]@.

00405db4 <rf24_datarate_e_str_0>:
  405db4:	50424d31 00000053                       1MBPS...

00405dbc <rf24_datarate_e_str_1>:
  405dbc:	50424d32 00000053                       2MBPS...

00405dc4 <rf24_datarate_e_str_2>:
  405dc4:	4b303532 00535042                       250KBPS.

00405dcc <rf24_datarate_e_str_P>:
  405dcc:	00405db4 00405dbc 00405dc4              .]@..]@..]@.

00405dd8 <rf24_model_e_str_1>:
  405dd8:	3246526e 31304c34 0000002b              nRF24L01+...

00405de4 <rf24_pa_dbm_e_str_0>:
  405de4:	4d5f4150 00004e49                       PA_MIN..

00405dec <rf24_pa_dbm_e_str_1>:
  405dec:	4c5f4150 0000574f                       PA_LOW..

00405df4 <rf24_pa_dbm_e_str_2>:
  405df4:	485f4150 00484749                       PA_HIGH.

00405dfc <rf24_pa_dbm_e_str_3>:
  405dfc:	4d5f4150 00005841                       PA_MAX..

00405e04 <rf24_pa_dbm_e_str_P>:
  405e04:	00405de4 00405dec 00405df4 00405dfc     .]@..]@..]@..]@.
  405e14:	202d492d 74696e49 696c6169 5320657a     -I- Initialize S
  405e24:	61204950 616d2073 72657473 0000000d     PI as master....
  405e34:	74746553 20676e69 20495053 636f6c63     Setting SPI cloc
  405e44:	2523206b 2e20756c 0a202e2e 0000000d     k #%lu ... .....
  405e54:	4d202d2d 65747361 646f4e72 65525f65     -- MasterNode_Re
  405e64:	2d203076 2d0a0d2d 4153202d 3037454d     v0 --..-- SAME70
  405e74:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  405e84:	656c6970 53203a64 31207065 30322032     piled: Sep 12 20
  405e94:	32203032 37313a33 2037313a 000d2d2d     20 23:17:17 --..

00405ea4 <_global_impure_ptr>:
  405ea4:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  405eb4:	46454443 00000000 33323130 37363534     CDEF....01234567
  405ec4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405ed4:	0000296c                                l)..

00405ed8 <blanks.7217>:
  405ed8:	20202020 20202020 20202020 20202020                     

00405ee8 <zeroes.7218>:
  405ee8:	30303030 30303030 30303030 30303030     0000000000000000
  405ef8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405f08 <_ctype_>:
  405f08:	20202000 20202020 28282020 20282828     .         ((((( 
  405f18:	20202020 20202020 20202020 20202020                     
  405f28:	10108820 10101010 10101010 10101010      ...............
  405f38:	04040410 04040404 10040404 10101010     ................
  405f48:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405f58:	01010101 01010101 01010101 10101010     ................
  405f68:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405f78:	02020202 02020202 02020202 10101010     ................
  405f88:	00000020 00000000 00000000 00000000      ...............
	...

0040600c <_init>:
  40600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40600e:	bf00      	nop
  406010:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406012:	bc08      	pop	{r3}
  406014:	469e      	mov	lr, r3
  406016:	4770      	bx	lr

00406018 <__init_array_start>:
  406018:	004040b9 	.word	0x004040b9

0040601c <__frame_dummy_init_array_entry>:
  40601c:	0040018d                                ..@.

00406020 <_fini>:
  406020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406022:	bf00      	nop
  406024:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406026:	bc08      	pop	{r3}
  406028:	469e      	mov	lr, r3
  40602a:	4770      	bx	lr

0040602c <__fini_array_start>:
  40602c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <artnet_id>:
2040000c:	7241 2d74 654e 0074                         Art-Net.

20400014 <gs_uc_ip_address>:
20400014:	a8c0 0200                                   ....

20400018 <gs_uc_mac_address>:
20400018:	0400 1c25 02a0 0000                         ..%.....

20400020 <gs_ul_spi_clock>:
20400020:	4b40 004c                                   @KL.

20400024 <g_interrupt_enabled>:
20400024:	0001 0000                                   ....

20400028 <SystemCoreClock>:
20400028:	0900 003d                                   ..=.

2040002c <_impure_ptr>:
2040002c:	0030 2040                                   0.@ 

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	4c28 2040                                   (L@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	575d 0040 50b1 0040 0000 0000 5f08 0040     ]W@..P@......_@.
2040054c:	5f04 0040 5ccc 0040 5ccc 0040 5ccc 0040     ._@..\@..\@..\@.
2040055c:	5ccc 0040 5ccc 0040 5ccc 0040 5ccc 0040     .\@..\@..\@..\@.
2040056c:	5ccc 0040 5ccc 0040 ffff ffff ffff ffff     .\@..\@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
