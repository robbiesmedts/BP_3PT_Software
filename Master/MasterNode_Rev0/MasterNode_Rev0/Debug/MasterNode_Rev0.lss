
MasterNode_Rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005970  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405970  00405970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00405978  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004278  204009d8  00406350  000209d8  2**3
                  ALLOC
  4 .stack        00002000  20404c50  0040a5c8  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20406c50  0040c5c8  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023c12  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000454b  00000000  00000000  00044671  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008da9  00000000  00000000  00048bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ce8  00000000  00000000  00051965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000df8  00000000  00000000  0005264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024469  00000000  00000000  00053445  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011436  00000000  00000000  000778ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000978b4  00000000  00000000  00088ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002ae0  00000000  00000000  00120598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 6c 40 20 79 12 40 00 75 12 40 00 75 12 40 00     Pl@ y.@.u.@.u.@.
  400010:	75 12 40 00 75 12 40 00 75 12 40 00 00 00 00 00     u.@.u.@.u.@.....
	...
  40002c:	75 12 40 00 75 12 40 00 00 00 00 00 75 12 40 00     u.@.u.@.....u.@.
  40003c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40004c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40005c:	75 12 40 00 75 12 40 00 00 00 00 00 d1 10 40 00     u.@.u.@.......@.
  40006c:	e5 10 40 00 f9 10 40 00 75 12 40 00 75 12 40 00     ..@...@.u.@.u.@.
  40007c:	75 12 40 00 0d 11 40 00 21 11 40 00 75 12 40 00     u.@...@.!.@.u.@.
  40008c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40009c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  4000ac:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  4000bc:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  4000cc:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  4000dc:	a5 16 40 00 75 12 40 00 75 12 40 00 75 12 40 00     ..@.u.@.u.@.u.@.
  4000ec:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  4000fc:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40010c:	75 12 40 00 75 12 40 00 00 00 00 00 00 00 00 00     u.@.u.@.........
  40011c:	00 00 00 00 75 12 40 00 75 12 40 00 75 12 40 00     ....u.@.u.@.u.@.
  40012c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40013c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40014c:	75 12 40 00 75 12 40 00 75 12 40 00 75 12 40 00     u.@.u.@.u.@.u.@.
  40015c:	75 12 40 00 75 12 40 00 75 12 40 00                 u.@.u.@.u.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009d8 	.word	0x204009d8
  400184:	00000000 	.word	0x00000000
  400188:	00405978 	.word	0x00405978

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405978 	.word	0x00405978
  4001c8:	204009dc 	.word	0x204009dc
  4001cc:	00405978 	.word	0x00405978
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	0040144d 	.word	0x0040144d
  400220:	004011d1 	.word	0x004011d1
  400224:	00401225 	.word	0x00401225
  400228:	00401235 	.word	0x00401235
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00401245 	.word	0x00401245
  400238:	00401135 	.word	0x00401135
  40023c:	0040116d 	.word	0x0040116d
  400240:	00401341 	.word	0x00401341

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20404c24 	.word	0x20404c24
  40027c:	20404308 	.word	0x20404308

00400280 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400282:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400286:	4b8e      	ldr	r3, [pc, #568]	; (4004c0 <board_init+0x240>)
  400288:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40028a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40028e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400292:	4b8c      	ldr	r3, [pc, #560]	; (4004c4 <board_init+0x244>)
  400294:	2100      	movs	r1, #0
  400296:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  40029a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40029e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002a2:	695a      	ldr	r2, [r3, #20]
  4002a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002a8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ae:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4002b2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  4002ba:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4002be:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4002c2:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  4002c6:	016e      	lsls	r6, r5, #5
  4002c8:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4002cc:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4002d0:	461c      	mov	r4, r3
  4002d2:	ea06 000e 	and.w	r0, r6, lr
  4002d6:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4002d8:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4002da:	ea40 0102 	orr.w	r1, r0, r2
  4002de:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4002e2:	3b01      	subs	r3, #1
  4002e4:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4002e8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002ec:	d1f5      	bne.n	4002da <board_init+0x5a>
    } while(sets-- != 0U);
  4002ee:	3d01      	subs	r5, #1
  4002f0:	3e20      	subs	r6, #32
  4002f2:	f1b5 3fff 	cmp.w	r5, #4294967295
  4002f6:	d1ec      	bne.n	4002d2 <board_init+0x52>
  4002f8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4002fc:	4b71      	ldr	r3, [pc, #452]	; (4004c4 <board_init+0x244>)
  4002fe:	695a      	ldr	r2, [r3, #20]
  400300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400304:	615a      	str	r2, [r3, #20]
  400306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40030a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40030e:	4a6e      	ldr	r2, [pc, #440]	; (4004c8 <board_init+0x248>)
  400310:	496e      	ldr	r1, [pc, #440]	; (4004cc <board_init+0x24c>)
  400312:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400314:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400318:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40031a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40031e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400322:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400326:	f022 0201 	bic.w	r2, r2, #1
  40032a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40032e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400332:	f022 0201 	bic.w	r2, r2, #1
  400336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40033a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40033e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400342:	200a      	movs	r0, #10
  400344:	4c62      	ldr	r4, [pc, #392]	; (4004d0 <board_init+0x250>)
  400346:	47a0      	blx	r4
  400348:	200b      	movs	r0, #11
  40034a:	47a0      	blx	r4
  40034c:	200c      	movs	r0, #12
  40034e:	47a0      	blx	r4
  400350:	2010      	movs	r0, #16
  400352:	47a0      	blx	r4
  400354:	2011      	movs	r0, #17
  400356:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400358:	4b5e      	ldr	r3, [pc, #376]	; (4004d4 <board_init+0x254>)
  40035a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40035e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400360:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400364:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400366:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40036a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40036e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400370:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400374:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40037a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40037c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40037e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400382:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400384:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400388:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40038a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40038c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400390:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400392:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400396:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40039a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40039e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003a2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003aa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003be:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c0:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003c2:	4845      	ldr	r0, [pc, #276]	; (4004d8 <board_init+0x258>)
  4003c4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  4003c8:	f041 0110 	orr.w	r1, r1, #16
  4003cc:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003d0:	f500 20b2 	add.w	r0, r0, #364544	; 0x59000
  4003d4:	2110      	movs	r1, #16
  4003d6:	6601      	str	r1, [r0, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d8:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003dc:	6541      	str	r1, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003de:	6241      	str	r1, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4003e4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4003e6:	430c      	orrs	r4, r1
  4003e8:	6704      	str	r4, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4003ea:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4003ec:	430c      	orrs	r4, r1
  4003ee:	6744      	str	r4, [r0, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f0:	6041      	str	r1, [r0, #4]
		base->PIO_PUDR = mask;
  4003f2:	2008      	movs	r0, #8
  4003f4:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003fa:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fc:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fe:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400402:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  400404:	f024 0408 	bic.w	r4, r4, #8
  400408:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40040a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  40040c:	f024 0408 	bic.w	r4, r4, #8
  400410:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400412:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  400414:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400416:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40041a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40041c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40041e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400422:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400424:	f020 0010 	bic.w	r0, r0, #16
  400428:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40042a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40042c:	f020 0010 	bic.w	r0, r0, #16
  400430:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400432:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400434:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400438:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40043c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40043e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400442:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400444:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400446:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40044a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40044c:	4308      	orrs	r0, r1
  40044e:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400450:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400452:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  400456:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400458:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40045a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40045c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400460:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400462:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400468:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40046a:	4311      	orrs	r1, r2
  40046c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40046e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400470:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400474:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400476:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400478:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40047c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40047e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400482:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400484:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40048a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048c:	4311      	orrs	r1, r2
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400498:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40049a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40049e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004a4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004a6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ae:	4311      	orrs	r1, r2
  4004b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004b4:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  4004b8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004ba:	605a      	str	r2, [r3, #4]
  4004bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004be:	bf00      	nop
  4004c0:	400e1850 	.word	0x400e1850
  4004c4:	e000ed00 	.word	0xe000ed00
  4004c8:	400e0c00 	.word	0x400e0c00
  4004cc:	5a00080c 	.word	0x5a00080c
  4004d0:	00401255 	.word	0x00401255
  4004d4:	400e1200 	.word	0x400e1200
  4004d8:	40088000 	.word	0x40088000

004004dc <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4004de:	b083      	sub	sp, #12
  4004e0:	4604      	mov	r4, r0
  4004e2:	460f      	mov	r7, r1
  4004e4:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004e6:	6803      	ldr	r3, [r0, #0]
  4004e8:	f043 0310 	orr.w	r3, r3, #16
  4004ec:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4004ee:	ab01      	add	r3, sp, #4
  4004f0:	2201      	movs	r2, #1
  4004f2:	4d36      	ldr	r5, [pc, #216]	; (4005cc <ethernet_phy_set_link+0xf0>)
  4004f4:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4004f6:	b958      	cbnz	r0, 400510 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  4004f8:	9b01      	ldr	r3, [sp, #4]
  4004fa:	f013 0f04 	tst.w	r3, #4
  4004fe:	d10d      	bne.n	40051c <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400500:	6823      	ldr	r3, [r4, #0]
  400502:	f023 0310 	bic.w	r3, r3, #16
  400506:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  400508:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  40050a:	4618      	mov	r0, r3
  40050c:	b003      	add	sp, #12
  40050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400510:	4603      	mov	r3, r0
  400512:	6822      	ldr	r2, [r4, #0]
  400514:	f022 0210 	bic.w	r2, r2, #16
  400518:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40051a:	e7f6      	b.n	40050a <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  40051c:	b92e      	cbnz	r6, 40052a <ethernet_phy_set_link+0x4e>
  40051e:	6823      	ldr	r3, [r4, #0]
  400520:	f023 0310 	bic.w	r3, r3, #16
  400524:	6023      	str	r3, [r4, #0]
		return uc_rc;
  400526:	4633      	mov	r3, r6
  400528:	e7ef      	b.n	40050a <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  40052a:	466b      	mov	r3, sp
  40052c:	221e      	movs	r2, #30
  40052e:	4639      	mov	r1, r7
  400530:	4620      	mov	r0, r4
  400532:	4d26      	ldr	r5, [pc, #152]	; (4005cc <ethernet_phy_set_link+0xf0>)
  400534:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  400536:	4603      	mov	r3, r0
  400538:	b950      	cbnz	r0, 400550 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  40053a:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  40053c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  400540:	d00b      	beq.n	40055a <ethernet_phy_set_link+0x7e>
  400542:	9900      	ldr	r1, [sp, #0]
  400544:	f011 0f05 	tst.w	r1, #5
  400548:	bf0c      	ite	eq
  40054a:	2101      	moveq	r1, #1
  40054c:	2100      	movne	r1, #0
  40054e:	e005      	b.n	40055c <ethernet_phy_set_link+0x80>
  400550:	6822      	ldr	r2, [r4, #0]
  400552:	f022 0210 	bic.w	r2, r2, #16
  400556:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400558:	e7d7      	b.n	40050a <ethernet_phy_set_link+0x2e>
  40055a:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  40055c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  400560:	d003      	beq.n	40056a <ethernet_phy_set_link+0x8e>
  400562:	9800      	ldr	r0, [sp, #0]
  400564:	f010 0f02 	tst.w	r0, #2
  400568:	d127      	bne.n	4005ba <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  40056a:	f412 6f00 	tst.w	r2, #2048	; 0x800
  40056e:	d003      	beq.n	400578 <ethernet_phy_set_link+0x9c>
  400570:	9a00      	ldr	r2, [sp, #0]
  400572:	f012 0f01 	tst.w	r2, #1
  400576:	d111      	bne.n	40059c <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400578:	b191      	cbz	r1, 4005a0 <ethernet_phy_set_link+0xc4>
  40057a:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40057c:	6861      	ldr	r1, [r4, #4]
  40057e:	f041 0101 	orr.w	r1, r1, #1
  400582:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  400584:	b1a2      	cbz	r2, 4005b0 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400586:	6862      	ldr	r2, [r4, #4]
  400588:	f042 0202 	orr.w	r2, r2, #2
  40058c:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40058e:	6822      	ldr	r2, [r4, #0]
  400590:	f022 0210 	bic.w	r2, r2, #16
  400594:	6022      	str	r2, [r4, #0]
	return uc_rc;
  400596:	e7b8      	b.n	40050a <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  400598:	461a      	mov	r2, r3
  40059a:	e7ef      	b.n	40057c <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  40059c:	461a      	mov	r2, r3
  40059e:	e000      	b.n	4005a2 <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4005a0:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4005a2:	6861      	ldr	r1, [r4, #4]
  4005a4:	f021 0101 	bic.w	r1, r1, #1
  4005a8:	6061      	str	r1, [r4, #4]
  4005aa:	e7eb      	b.n	400584 <ethernet_phy_set_link+0xa8>
  4005ac:	461a      	mov	r2, r3
  4005ae:	e7f8      	b.n	4005a2 <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4005b0:	6862      	ldr	r2, [r4, #4]
  4005b2:	f022 0202 	bic.w	r2, r2, #2
  4005b6:	6062      	str	r2, [r4, #4]
  4005b8:	e7e9      	b.n	40058e <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4005ba:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4005be:	d0eb      	beq.n	400598 <ethernet_phy_set_link+0xbc>
  4005c0:	9a00      	ldr	r2, [sp, #0]
  4005c2:	f012 0f01 	tst.w	r2, #1
  4005c6:	d1f1      	bne.n	4005ac <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4005c8:	461a      	mov	r2, r3
  4005ca:	e7d7      	b.n	40057c <ethernet_phy_set_link+0xa0>
  4005cc:	00401d71 	.word	0x00401d71

004005d0 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4005d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005d4:	b082      	sub	sp, #8
  4005d6:	4604      	mov	r4, r0
  4005d8:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4005da:	6803      	ldr	r3, [r0, #0]
  4005dc:	f043 0310 	orr.w	r3, r3, #16
  4005e0:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4005e2:	ab01      	add	r3, sp, #4
  4005e4:	2200      	movs	r2, #0
  4005e6:	4e5d      	ldr	r6, [pc, #372]	; (40075c <ethernet_phy_auto_negotiate+0x18c>)
  4005e8:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4005ea:	b140      	cbz	r0, 4005fe <ethernet_phy_auto_negotiate+0x2e>
  4005ec:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4005ee:	6822      	ldr	r2, [r4, #0]
  4005f0:	f022 0210 	bic.w	r2, r2, #16
  4005f4:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  4005f6:	4618      	mov	r0, r3
  4005f8:	b002      	add	sp, #8
  4005fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  4005fe:	9b01      	ldr	r3, [sp, #4]
  400600:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400608:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40060a:	2200      	movs	r2, #0
  40060c:	4629      	mov	r1, r5
  40060e:	4620      	mov	r0, r4
  400610:	4e53      	ldr	r6, [pc, #332]	; (400760 <ethernet_phy_auto_negotiate+0x190>)
  400612:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400614:	4603      	mov	r3, r0
  400616:	b120      	cbz	r0, 400622 <ethernet_phy_auto_negotiate+0x52>
  400618:	6822      	ldr	r2, [r4, #0]
  40061a:	f022 0210 	bic.w	r2, r2, #16
  40061e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400620:	e7e9      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400622:	f240 13e1 	movw	r3, #481	; 0x1e1
  400626:	2204      	movs	r2, #4
  400628:	4629      	mov	r1, r5
  40062a:	4620      	mov	r0, r4
  40062c:	4e4c      	ldr	r6, [pc, #304]	; (400760 <ethernet_phy_auto_negotiate+0x190>)
  40062e:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400630:	4603      	mov	r3, r0
  400632:	b120      	cbz	r0, 40063e <ethernet_phy_auto_negotiate+0x6e>
  400634:	6822      	ldr	r2, [r4, #0]
  400636:	f022 0210 	bic.w	r2, r2, #16
  40063a:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40063c:	e7db      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  40063e:	ab01      	add	r3, sp, #4
  400640:	2200      	movs	r2, #0
  400642:	4629      	mov	r1, r5
  400644:	4620      	mov	r0, r4
  400646:	4e45      	ldr	r6, [pc, #276]	; (40075c <ethernet_phy_auto_negotiate+0x18c>)
  400648:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40064a:	4603      	mov	r3, r0
  40064c:	b120      	cbz	r0, 400658 <ethernet_phy_auto_negotiate+0x88>
  40064e:	6822      	ldr	r2, [r4, #0]
  400650:	f022 0210 	bic.w	r2, r2, #16
  400654:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400656:	e7ce      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400658:	9b01      	ldr	r3, [sp, #4]
  40065a:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  40065e:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400660:	2200      	movs	r2, #0
  400662:	4629      	mov	r1, r5
  400664:	4620      	mov	r0, r4
  400666:	4e3e      	ldr	r6, [pc, #248]	; (400760 <ethernet_phy_auto_negotiate+0x190>)
  400668:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40066a:	4603      	mov	r3, r0
  40066c:	b120      	cbz	r0, 400678 <ethernet_phy_auto_negotiate+0xa8>
  40066e:	6822      	ldr	r2, [r4, #0]
  400670:	f022 0210 	bic.w	r2, r2, #16
  400674:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400676:	e7be      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400678:	9b01      	ldr	r3, [sp, #4]
  40067a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400682:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400684:	2200      	movs	r2, #0
  400686:	4629      	mov	r1, r5
  400688:	4620      	mov	r0, r4
  40068a:	4e35      	ldr	r6, [pc, #212]	; (400760 <ethernet_phy_auto_negotiate+0x190>)
  40068c:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40068e:	4603      	mov	r3, r0
  400690:	b9b0      	cbnz	r0, 4006c0 <ethernet_phy_auto_negotiate+0xf0>
  400692:	4e34      	ldr	r6, [pc, #208]	; (400764 <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  400694:	f04f 0801 	mov.w	r8, #1
  400698:	4f30      	ldr	r7, [pc, #192]	; (40075c <ethernet_phy_auto_negotiate+0x18c>)
  40069a:	ab01      	add	r3, sp, #4
  40069c:	4642      	mov	r2, r8
  40069e:	4629      	mov	r1, r5
  4006a0:	4620      	mov	r0, r4
  4006a2:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4006a4:	4603      	mov	r3, r0
  4006a6:	b980      	cbnz	r0, 4006ca <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4006a8:	9b01      	ldr	r3, [sp, #4]
  4006aa:	f013 0f20 	tst.w	r3, #32
  4006ae:	d111      	bne.n	4006d4 <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4006b0:	3e01      	subs	r6, #1
  4006b2:	d1f2      	bne.n	40069a <ethernet_phy_auto_negotiate+0xca>
  4006b4:	6823      	ldr	r3, [r4, #0]
  4006b6:	f023 0310 	bic.w	r3, r3, #16
  4006ba:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4006bc:	2301      	movs	r3, #1
  4006be:	e79a      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
  4006c0:	6822      	ldr	r2, [r4, #0]
  4006c2:	f022 0210 	bic.w	r2, r2, #16
  4006c6:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4006c8:	e795      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
  4006ca:	6822      	ldr	r2, [r4, #0]
  4006cc:	f022 0210 	bic.w	r2, r2, #16
  4006d0:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4006d2:	e790      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4006d4:	466b      	mov	r3, sp
  4006d6:	2205      	movs	r2, #5
  4006d8:	4629      	mov	r1, r5
  4006da:	4620      	mov	r0, r4
  4006dc:	4d1f      	ldr	r5, [pc, #124]	; (40075c <ethernet_phy_auto_negotiate+0x18c>)
  4006de:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4006e0:	4603      	mov	r3, r0
  4006e2:	b980      	cbnz	r0, 400706 <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4006e4:	9a00      	ldr	r2, [sp, #0]
  4006e6:	f412 7f80 	tst.w	r2, #256	; 0x100
  4006ea:	d113      	bne.n	400714 <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4006ec:	f012 0f40 	tst.w	r2, #64	; 0x40
  4006f0:	d12c      	bne.n	40074c <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  4006f2:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  4006f6:	bf08      	it	eq
  4006f8:	4602      	moveq	r2, r0
  4006fa:	d109      	bne.n	400710 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4006fc:	6861      	ldr	r1, [r4, #4]
  4006fe:	f021 0101 	bic.w	r1, r1, #1
  400702:	6061      	str	r1, [r4, #4]
  400704:	e00b      	b.n	40071e <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400706:	6822      	ldr	r2, [r4, #0]
  400708:	f022 0210 	bic.w	r2, r2, #16
  40070c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40070e:	e772      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  400710:	4602      	mov	r2, r0
  400712:	e000      	b.n	400716 <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  400714:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400716:	6861      	ldr	r1, [r4, #4]
  400718:	f041 0101 	orr.w	r1, r1, #1
  40071c:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  40071e:	b1ba      	cbz	r2, 400750 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400720:	6862      	ldr	r2, [r4, #4]
  400722:	f042 0202 	orr.w	r2, r2, #2
  400726:	6062      	str	r2, [r4, #4]
#else
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
	switch (mode) {
		case GMAC_PHY_MII:
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
  400728:	68e2      	ldr	r2, [r4, #12]
  40072a:	f042 0201 	orr.w	r2, r2, #1
  40072e:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400730:	4a0d      	ldr	r2, [pc, #52]	; (400768 <ethernet_phy_auto_negotiate+0x198>)
  400732:	6811      	ldr	r1, [r2, #0]
  400734:	f041 0108 	orr.w	r1, r1, #8
  400738:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40073a:	6811      	ldr	r1, [r2, #0]
  40073c:	f041 0104 	orr.w	r1, r1, #4
  400740:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400742:	6822      	ldr	r2, [r4, #0]
  400744:	f022 0210 	bic.w	r2, r2, #16
  400748:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40074a:	e754      	b.n	4005f6 <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  40074c:	2201      	movs	r2, #1
  40074e:	e7d5      	b.n	4006fc <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400750:	6862      	ldr	r2, [r4, #4]
  400752:	f022 0202 	bic.w	r2, r2, #2
  400756:	6062      	str	r2, [r4, #4]
  400758:	e7e6      	b.n	400728 <ethernet_phy_auto_negotiate+0x158>
  40075a:	bf00      	nop
  40075c:	00401d71 	.word	0x00401d71
  400760:	00401dd1 	.word	0x00401dd1
  400764:	000f4240 	.word	0x000f4240
  400768:	40050000 	.word	0x40050000

0040076c <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  40076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400770:	b083      	sub	sp, #12
  400772:	4605      	mov	r5, r0
  400774:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400776:	6803      	ldr	r3, [r0, #0]
  400778:	f043 0310 	orr.w	r3, r3, #16
  40077c:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  40077e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400782:	ae02      	add	r6, sp, #8
  400784:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  400788:	2200      	movs	r2, #0
  40078a:	4c0e      	ldr	r4, [pc, #56]	; (4007c4 <ethernet_phy_reset+0x58>)
  40078c:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40078e:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  400790:	f04f 0800 	mov.w	r8, #0
  400794:	4f0c      	ldr	r7, [pc, #48]	; (4007c8 <ethernet_phy_reset+0x5c>)
  400796:	4633      	mov	r3, r6
  400798:	4642      	mov	r2, r8
  40079a:	4649      	mov	r1, r9
  40079c:	4628      	mov	r0, r5
  40079e:	47b8      	blx	r7
		ul_timeout--;
  4007a0:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4007a2:	9b01      	ldr	r3, [sp, #4]
  4007a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4007a8:	d001      	beq.n	4007ae <ethernet_phy_reset+0x42>
  4007aa:	2c00      	cmp	r4, #0
  4007ac:	d1f3      	bne.n	400796 <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007ae:	682b      	ldr	r3, [r5, #0]
  4007b0:	f023 0310 	bic.w	r3, r3, #16
  4007b4:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4007b6:	fab4 f084 	clz	r0, r4
  4007ba:	0940      	lsrs	r0, r0, #5
  4007bc:	b003      	add	sp, #12
  4007be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4007c2:	bf00      	nop
  4007c4:	00401dd1 	.word	0x00401dd1
  4007c8:	00401d71 	.word	0x00401d71

004007cc <ethernet_phy_init>:
{
  4007cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4007d0:	b085      	sub	sp, #20
  4007d2:	4606      	mov	r6, r0
  4007d4:	4688      	mov	r8, r1
  4007d6:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4007d8:	2401      	movs	r4, #1
  4007da:	9400      	str	r4, [sp, #0]
  4007dc:	2300      	movs	r3, #0
  4007de:	4622      	mov	r2, r4
  4007e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4007e4:	4843      	ldr	r0, [pc, #268]	; (4008f4 <ethernet_phy_init+0x128>)
  4007e6:	4f44      	ldr	r7, [pc, #272]	; (4008f8 <ethernet_phy_init+0x12c>)
  4007e8:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4007ea:	4622      	mov	r2, r4
  4007ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4007f0:	4842      	ldr	r0, [pc, #264]	; (4008fc <ethernet_phy_init+0x130>)
  4007f2:	4b43      	ldr	r3, [pc, #268]	; (400900 <ethernet_phy_init+0x134>)
  4007f4:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4007f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4007fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007fe:	4841      	ldr	r0, [pc, #260]	; (400904 <ethernet_phy_init+0x138>)
  400800:	4b41      	ldr	r3, [pc, #260]	; (400908 <ethernet_phy_init+0x13c>)
  400802:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  400804:	4641      	mov	r1, r8
  400806:	4841      	ldr	r0, [pc, #260]	; (40090c <ethernet_phy_init+0x140>)
  400808:	4b41      	ldr	r3, [pc, #260]	; (400910 <ethernet_phy_init+0x144>)
  40080a:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  40080c:	4b41      	ldr	r3, [pc, #260]	; (400914 <ethernet_phy_init+0x148>)
  40080e:	429d      	cmp	r5, r3
  400810:	d85d      	bhi.n	4008ce <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400812:	4b41      	ldr	r3, [pc, #260]	; (400918 <ethernet_phy_init+0x14c>)
  400814:	429d      	cmp	r5, r3
  400816:	d80f      	bhi.n	400838 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400818:	4b40      	ldr	r3, [pc, #256]	; (40091c <ethernet_phy_init+0x150>)
  40081a:	429d      	cmp	r5, r3
  40081c:	d83e      	bhi.n	40089c <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  40081e:	4b40      	ldr	r3, [pc, #256]	; (400920 <ethernet_phy_init+0x154>)
  400820:	429d      	cmp	r5, r3
  400822:	d83e      	bhi.n	4008a2 <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400824:	4b3f      	ldr	r3, [pc, #252]	; (400924 <ethernet_phy_init+0x158>)
  400826:	429d      	cmp	r5, r3
  400828:	d83e      	bhi.n	4008a8 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  40082a:	4b3f      	ldr	r3, [pc, #252]	; (400928 <ethernet_phy_init+0x15c>)
  40082c:	429d      	cmp	r5, r3
  40082e:	bf8c      	ite	hi
  400830:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  400834:	2300      	movls	r3, #0
  400836:	e001      	b.n	40083c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400838:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  40083c:	6872      	ldr	r2, [r6, #4]
  40083e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  400842:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400844:	6875      	ldr	r5, [r6, #4]
  400846:	431d      	orrs	r5, r3
  400848:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  40084a:	ab04      	add	r3, sp, #16
  40084c:	2200      	movs	r2, #0
  40084e:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400852:	6832      	ldr	r2, [r6, #0]
  400854:	f042 0210 	orr.w	r2, r2, #16
  400858:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  40085a:	2202      	movs	r2, #2
  40085c:	4641      	mov	r1, r8
  40085e:	4630      	mov	r0, r6
  400860:	4c32      	ldr	r4, [pc, #200]	; (40092c <ethernet_phy_init+0x160>)
  400862:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  400864:	9b03      	ldr	r3, [sp, #12]
  400866:	2b22      	cmp	r3, #34	; 0x22
  400868:	d035      	beq.n	4008d6 <ethernet_phy_init+0x10a>
  40086a:	4644      	mov	r4, r8
  40086c:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  40086e:	f04f 0902 	mov.w	r9, #2
  400872:	4f2e      	ldr	r7, [pc, #184]	; (40092c <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400874:	3401      	adds	r4, #1
  400876:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  40087a:	ab03      	add	r3, sp, #12
  40087c:	464a      	mov	r2, r9
  40087e:	4621      	mov	r1, r4
  400880:	4630      	mov	r0, r6
  400882:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  400884:	9b03      	ldr	r3, [sp, #12]
  400886:	2b22      	cmp	r3, #34	; 0x22
  400888:	d011      	beq.n	4008ae <ethernet_phy_init+0xe2>
  40088a:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  40088c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  400890:	d1f0      	bne.n	400874 <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400892:	6833      	ldr	r3, [r6, #0]
  400894:	f023 0310 	bic.w	r3, r3, #16
  400898:	6033      	str	r3, [r6, #0]
  40089a:	e018      	b.n	4008ce <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  40089c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4008a0:	e7cc      	b.n	40083c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  4008a2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4008a6:	e7c9      	b.n	40083c <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  4008a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4008ac:	e7c6      	b.n	40083c <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4008ae:	6833      	ldr	r3, [r6, #0]
  4008b0:	f023 0310 	bic.w	r3, r3, #16
  4008b4:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4008b6:	ab03      	add	r3, sp, #12
  4008b8:	2201      	movs	r2, #1
  4008ba:	4621      	mov	r1, r4
  4008bc:	4630      	mov	r0, r6
  4008be:	4d1b      	ldr	r5, [pc, #108]	; (40092c <ethernet_phy_init+0x160>)
  4008c0:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  4008c2:	45a0      	cmp	r8, r4
  4008c4:	d003      	beq.n	4008ce <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4008c6:	4641      	mov	r1, r8
  4008c8:	4630      	mov	r0, r6
  4008ca:	4b11      	ldr	r3, [pc, #68]	; (400910 <ethernet_phy_init+0x144>)
  4008cc:	4798      	blx	r3
}
  4008ce:	2000      	movs	r0, #0
  4008d0:	b005      	add	sp, #20
  4008d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4008d6:	6833      	ldr	r3, [r6, #0]
  4008d8:	f023 0310 	bic.w	r3, r3, #16
  4008dc:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  4008de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4008e2:	d0f4      	beq.n	4008ce <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4008e4:	ab03      	add	r3, sp, #12
  4008e6:	2201      	movs	r2, #1
  4008e8:	4641      	mov	r1, r8
  4008ea:	4630      	mov	r0, r6
  4008ec:	4c0f      	ldr	r4, [pc, #60]	; (40092c <ethernet_phy_init+0x160>)
  4008ee:	47a0      	blx	r4
  4008f0:	e7ed      	b.n	4008ce <ethernet_phy_init+0x102>
  4008f2:	bf00      	nop
  4008f4:	400e1200 	.word	0x400e1200
  4008f8:	00401051 	.word	0x00401051
  4008fc:	400e0e00 	.word	0x400e0e00
  400900:	0040101b 	.word	0x0040101b
  400904:	400e1400 	.word	0x400e1400
  400908:	00400f89 	.word	0x00400f89
  40090c:	40050000 	.word	0x40050000
  400910:	0040076d 	.word	0x0040076d
  400914:	0e4e1c00 	.word	0x0e4e1c00
  400918:	09896800 	.word	0x09896800
  40091c:	07270e00 	.word	0x07270e00
  400920:	04c4b400 	.word	0x04c4b400
  400924:	02625a00 	.word	0x02625a00
  400928:	01312d00 	.word	0x01312d00
  40092c:	00401d71 	.word	0x00401d71

00400930 <circ_inc>:
#endif

/** Increment head or tail */
static void circ_inc(uint16_t *headortail, uint32_t size)
{
        (*headortail)++;
  400930:	8803      	ldrh	r3, [r0, #0]
  400932:	3301      	adds	r3, #1
  400934:	b29b      	uxth	r3, r3
        if((*headortail) >= size) {
            (*headortail) = 0;
  400936:	428b      	cmp	r3, r1
  400938:	bf28      	it	cs
  40093a:	2300      	movcs	r3, #0
  40093c:	8003      	strh	r3, [r0, #0]
  40093e:	4770      	bx	lr

00400940 <gmac_reset_tx_mem>:
 *
 * \param p_dev Pointer to GMAC driver instance.
 *
 */
static void gmac_reset_tx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  400940:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  400942:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_tx_buff = p_dev->gmac_queue_list[queue_idx].p_tx_buffer;
  400946:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40094a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40094e:	685a      	ldr	r2, [r3, #4]
	gmac_tx_descriptor_t *p_td = p_dev->gmac_queue_list[queue_idx].p_tx_dscr;
  400950:	691e      	ldr	r6, [r3, #16]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400952:	f8de 4000 	ldr.w	r4, [lr]
  400956:	f024 0408 	bic.w	r4, r4, #8
  40095a:	f8ce 4000 	str.w	r4, [lr]

	/* Disable TX */
	gmac_enable_transmit(p_hw, 0);

	/* Set up the TX descriptors */
	CIRC_CLEAR(p_dev->gmac_queue_list[queue_idx].us_tx_head, p_dev->gmac_queue_list[queue_idx].us_tx_tail);
  40095e:	2400      	movs	r4, #0
  400960:	851c      	strh	r4, [r3, #40]	; 0x28
  400962:	84dc      	strh	r4, [r3, #38]	; 0x26
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400966:	b1fb      	cbz	r3, 4009a8 <gmac_reset_tx_mem+0x68>
  400968:	4634      	mov	r4, r6
  40096a:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_tx_buff[ul_index * GMAC_TX_UNITSIZE]));
		p_td[ul_index].addr = ul_address;
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40096c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  400970:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400974:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		p_td[ul_index].addr = ul_address;
  400978:	f846 2033 	str.w	r2, [r6, r3, lsl #3]
		p_td[ul_index].status.val = GMAC_TXD_USED;
  40097c:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  40097e:	3301      	adds	r3, #1
  400980:	8c85      	ldrh	r5, [r0, #36]	; 0x24
  400982:	f202 52ee 	addw	r2, r2, #1518	; 0x5ee
  400986:	3408      	adds	r4, #8
  400988:	429d      	cmp	r5, r3
  40098a:	d8f5      	bhi.n	400978 <gmac_reset_tx_mem+0x38>
	}
	p_td[p_dev->gmac_queue_list[queue_idx].us_tx_list_size - 1].status.val =
  40098c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
  400990:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  400994:	f845 3c04 	str.w	r3, [r5, #-4]
			GMAC_TXD_USED | GMAC_TXD_WRAP;

	/* Set transmit buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  400998:	b141      	cbz	r1, 4009ac <gmac_reset_tx_mem+0x6c>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40099a:	f026 0603 	bic.w	r6, r6, #3
  40099e:	f201 110f 	addw	r1, r1, #271	; 0x10f
  4009a2:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  4009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_tx_list_size; ul_index++) {
  4009a8:	2500      	movs	r5, #0
  4009aa:	e7ef      	b.n	40098c <gmac_reset_tx_mem+0x4c>
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  4009ac:	f026 0603 	bic.w	r6, r6, #3
  4009b0:	f8ce 601c 	str.w	r6, [lr, #28]
  4009b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

004009b6 <gmac_reset_rx_mem>:
 * \brief Disable receiver, reset registers and descriptor list.
 *
 * \param p_dev Pointer to GMAC Driver instance.
 */
static void gmac_reset_rx_mem(gmac_device_t* p_dev, gmac_quelist_t queue_idx)
{
  4009b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	Gmac *p_hw = p_dev->p_hw;
  4009b8:	f8d0 e000 	ldr.w	lr, [r0]
	uint8_t *p_rx_buff = p_dev->gmac_queue_list[queue_idx].p_rx_buffer;
  4009bc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4009c0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  4009c4:	689a      	ldr	r2, [r3, #8]
	gmac_rx_descriptor_t *pRd = p_dev->gmac_queue_list[queue_idx].p_rx_dscr;
  4009c6:	68de      	ldr	r6, [r3, #12]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  4009c8:	f8de 4000 	ldr.w	r4, [lr]
  4009cc:	f024 0404 	bic.w	r4, r4, #4
  4009d0:	f8ce 4000 	str.w	r4, [lr]

	/* Disable RX */
	gmac_enable_receive(p_hw, 0);

	/* Set up the RX descriptors */
	p_dev->gmac_queue_list[queue_idx].us_rx_idx = 0;
  4009d4:	2400      	movs	r4, #0
  4009d6:	845c      	strh	r4, [r3, #34]	; 0x22
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4009d8:	8c1b      	ldrh	r3, [r3, #32]
  4009da:	b313      	cbz	r3, 400a22 <gmac_reset_rx_mem+0x6c>
  4009dc:	4634      	mov	r4, r6
  4009de:	2300      	movs	r3, #0
		ul_address = (uint32_t) (&(p_rx_buff[ul_index * GMAC_RX_UNITSIZE]));
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
		pRd[ul_index].status.val = 0;
  4009e0:	461f      	mov	r7, r3
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4009e2:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  4009e6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
		pRd[ul_index].addr.val = ul_address & GMAC_RXD_ADDR_MASK;
  4009ea:	f022 0503 	bic.w	r5, r2, #3
  4009ee:	f846 5033 	str.w	r5, [r6, r3, lsl #3]
		pRd[ul_index].status.val = 0;
  4009f2:	6067      	str	r7, [r4, #4]
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  4009f4:	3301      	adds	r3, #1
  4009f6:	8c05      	ldrh	r5, [r0, #32]
  4009f8:	3280      	adds	r2, #128	; 0x80
  4009fa:	3408      	adds	r4, #8
  4009fc:	429d      	cmp	r5, r3
  4009fe:	d8f4      	bhi.n	4009ea <gmac_reset_rx_mem+0x34>
	}
	pRd[p_dev->gmac_queue_list[queue_idx].us_rx_list_size - 1].addr.val |= GMAC_RXD_WRAP;
  400a00:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  400a04:	442b      	add	r3, r5
  400a06:	f856 2033 	ldr.w	r2, [r6, r3, lsl #3]
  400a0a:	f042 0202 	orr.w	r2, r2, #2
  400a0e:	f846 2033 	str.w	r2, [r6, r3, lsl #3]

	/* Set receive buffer queue */
	if(queue_idx == GMAC_QUE_0) {
  400a12:	b141      	cbz	r1, 400a26 <gmac_reset_rx_mem+0x70>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  400a14:	f026 0603 	bic.w	r6, r6, #3
  400a18:	f201 111f 	addw	r1, r1, #287	; 0x11f
  400a1c:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
  400a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (ul_index = 0; ul_index < p_dev->gmac_queue_list[queue_idx].us_rx_list_size; ul_index++) {
  400a22:	2500      	movs	r5, #0
  400a24:	e7ec      	b.n	400a00 <gmac_reset_rx_mem+0x4a>
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  400a26:	f026 0603 	bic.w	r6, r6, #3
  400a2a:	f8ce 6018 	str.w	r6, [lr, #24]
  400a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400a30 <gmac_dev_init>:
 * \param p_gmac_dev Pointer to the GMAC device instance.
 * \param p_opt GMAC configure options.
 */
void gmac_dev_init(Gmac* p_gmac, gmac_device_t* p_gmac_dev,
		gmac_options_t* p_opt)
{
  400a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a32:	4604      	mov	r4, r0
  400a34:	460e      	mov	r6, r1
  400a36:	4615      	mov	r5, r2
	p_gmac->GMAC_NCR = ul_ncr;
  400a38:	2300      	movs	r3, #0
  400a3a:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_IDR = ul_source;
  400a3c:	f04f 33ff 	mov.w	r3, #4294967295
  400a40:	62c3      	str	r3, [r0, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  400a42:	6803      	ldr	r3, [r0, #0]
  400a44:	f043 0320 	orr.w	r3, r3, #32
  400a48:	6003      	str	r3, [r0, #0]
	p_gmac->GMAC_RSR = ul_status;
  400a4a:	230f      	movs	r3, #15
  400a4c:	6203      	str	r3, [r0, #32]
	p_gmac->GMAC_TSR = ul_status;
  400a4e:	f240 133f 	movw	r3, #319	; 0x13f
  400a52:	6143      	str	r3, [r0, #20]
	return p_gmac->GMAC_NCFGR;
  400a54:	6842      	ldr	r2, [r0, #4]
	gmac_clear_tx_status(p_gmac, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
            | GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP | GMAC_TSR_HRESP );

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	gmac_set_config(p_gmac, gmac_get_config(p_gmac) |
  400a56:	4b45      	ldr	r3, [pc, #276]	; (400b6c <gmac_dev_init+0x13c>)
  400a58:	4313      	orrs	r3, r2
	p_gmac->GMAC_NCFGR = ul_cfg;
  400a5a:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  400a5c:	782b      	ldrb	r3, [r5, #0]
  400a5e:	2b00      	cmp	r3, #0
  400a60:	d07a      	beq.n	400b58 <gmac_dev_init+0x128>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  400a62:	6843      	ldr	r3, [r0, #4]
  400a64:	f043 0310 	orr.w	r3, r3, #16
  400a68:	6043      	str	r3, [r0, #4]
	if (uc_enable) {
  400a6a:	786b      	ldrb	r3, [r5, #1]
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	d178      	bne.n	400b62 <gmac_dev_init+0x132>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  400a70:	6863      	ldr	r3, [r4, #4]
  400a72:	f023 0320 	bic.w	r3, r3, #32
  400a76:	6063      	str	r3, [r4, #4]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  400a78:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  400a7c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  400a80:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  400a84:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  400a88:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  400a8c:	4b38      	ldr	r3, [pc, #224]	; (400b70 <gmac_dev_init+0x140>)
  400a8e:	f04f 32ff 	mov.w	r2, #4294967295
  400a92:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  400a94:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  400a98:	605a      	str	r2, [r3, #4]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  400a9a:	f023 0303 	bic.w	r3, r3, #3
  400a9e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  400aa2:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  400aa6:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  400aaa:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  400aae:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  400ab2:	4b30      	ldr	r3, [pc, #192]	; (400b74 <gmac_dev_init+0x144>)
  400ab4:	f06f 0201 	mvn.w	r2, #1
  400ab8:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  400aba:	2700      	movs	r7, #0
  400abc:	605f      	str	r7, [r3, #4]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  400abe:	f023 0303 	bic.w	r3, r3, #3
  400ac2:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  400ac6:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  400aca:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  400ace:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  400ad2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	return p_gmac->GMAC_ISR;
  400ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (((uint32_t) p_dev_mm->p_rx_buffer & 0x7)
  400ad8:	4b27      	ldr	r3, [pc, #156]	; (400b78 <gmac_dev_init+0x148>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_rx_buffer & 0xFFFFFFF8);
  400ada:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_buffer =
  400ade:	60b3      	str	r3, [r6, #8]
			(gmac_rx_descriptor_t *) ((uint32_t) p_dev_mm->p_rx_dscr
  400ae0:	4b26      	ldr	r3, [pc, #152]	; (400b7c <gmac_dev_init+0x14c>)
			& 0xFFFFFFF8);
  400ae2:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_rx_dscr =
  400ae6:	60f3      	str	r3, [r6, #12]
	p_gmac_queue->us_rx_list_size = p_dev_mm->us_rx_size;
  400ae8:	2310      	movs	r3, #16
  400aea:	8433      	strh	r3, [r6, #32]
	if (((uint32_t) p_dev_mm->p_tx_buffer & 0x7)
  400aec:	4b24      	ldr	r3, [pc, #144]	; (400b80 <gmac_dev_init+0x150>)
			(uint8_t *) ((uint32_t) p_dev_mm->p_tx_buffer & 0xFFFFFFF8);
  400aee:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_buffer =
  400af2:	6073      	str	r3, [r6, #4]
			(gmac_tx_descriptor_t *) ((uint32_t) p_dev_mm->p_tx_dscr
  400af4:	4b23      	ldr	r3, [pc, #140]	; (400b84 <gmac_dev_init+0x154>)
			& 0xFFFFFFF8);
  400af6:	f023 0307 	bic.w	r3, r3, #7
	p_gmac_queue->p_tx_dscr =
  400afa:	6133      	str	r3, [r6, #16]
	p_gmac_queue->us_tx_list_size = p_dev_mm->us_tx_size;
  400afc:	2308      	movs	r3, #8
  400afe:	84b3      	strh	r3, [r6, #36]	; 0x24
	p_gmac_queue->func_tx_cb_list = p_tx_cb;
  400b00:	4b21      	ldr	r3, [pc, #132]	; (400b88 <gmac_dev_init+0x158>)
  400b02:	61f3      	str	r3, [r6, #28]
	gmac_reset_rx_mem(p_gmac_dev, queue_idx);
  400b04:	4639      	mov	r1, r7
  400b06:	4630      	mov	r0, r6
  400b08:	4b20      	ldr	r3, [pc, #128]	; (400b8c <gmac_dev_init+0x15c>)
  400b0a:	4798      	blx	r3
	gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  400b0c:	4639      	mov	r1, r7
  400b0e:	4630      	mov	r0, r6
  400b10:	4b1f      	ldr	r3, [pc, #124]	; (400b90 <gmac_dev_init+0x160>)
  400b12:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400b14:	6823      	ldr	r3, [r4, #0]
  400b16:	f043 0308 	orr.w	r3, r3, #8
  400b1a:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400b1c:	6823      	ldr	r3, [r4, #0]
  400b1e:	f043 0304 	orr.w	r3, r3, #4
  400b22:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  400b24:	6823      	ldr	r3, [r4, #0]
  400b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400b2a:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  400b2c:	f643 43f6 	movw	r3, #15606	; 0x3cf6
  400b30:	62a3      	str	r3, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400b32:	796a      	ldrb	r2, [r5, #5]
			| (p_mac_addr[2] << 16)
  400b34:	792b      	ldrb	r3, [r5, #4]
  400b36:	041b      	lsls	r3, r3, #16
  400b38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  400b3c:	78aa      	ldrb	r2, [r5, #2]
  400b3e:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  400b40:	78ea      	ldrb	r2, [r5, #3]
			| (p_mac_addr[0]);
  400b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  400b46:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400b4a:	79ea      	ldrb	r2, [r5, #7]
			| (p_mac_addr[4]);
  400b4c:	79ab      	ldrb	r3, [r5, #6]
  400b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  400b52:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  400b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  400b58:	6843      	ldr	r3, [r0, #4]
  400b5a:	f023 0310 	bic.w	r3, r3, #16
  400b5e:	6043      	str	r3, [r0, #4]
  400b60:	e783      	b.n	400a6a <gmac_dev_init+0x3a>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  400b62:	6863      	ldr	r3, [r4, #4]
  400b64:	f043 0320 	orr.w	r3, r3, #32
  400b68:	6063      	str	r3, [r4, #4]
  400b6a:	e785      	b.n	400a78 <gmac_dev_init+0x48>
  400b6c:	00022102 	.word	0x00022102
  400b70:	20400ae0 	.word	0x20400ae0
  400b74:	20400a78 	.word	0x20400a78
  400b78:	20400ae8 	.word	0x20400ae8
  400b7c:	204009f8 	.word	0x204009f8
  400b80:	204012e8 	.word	0x204012e8
  400b84:	20400aa0 	.word	0x20400aa0
  400b88:	20400a80 	.word	0x20400a80
  400b8c:	004009b7 	.word	0x004009b7
  400b90:	00400941 	.word	0x00400941

00400b94 <gmac_dev_read>:
 *
 * \return GMAC_OK if receiving frame successfully, otherwise failed.
 */
uint32_t gmac_dev_read(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, uint8_t* p_frame,
		uint32_t ul_frame_size, uint32_t* p_rcv_size)
{
  400b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b98:	b087      	sub	sp, #28
	uint16_t us_buffer_length;
	uint32_t tmp_ul_frame_size = 0;
	uint8_t *p_tmp_frame = 0;

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  400b9a:	9102      	str	r1, [sp, #8]
	uint16_t us_tmp_idx = p_gmac_queue->us_rx_idx;
  400b9c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  400ba0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  400ba4:	8c66      	ldrh	r6, [r4, #34]	; 0x22
  400ba6:	f8ad 6016 	strh.w	r6, [sp, #22]
	gmac_rx_descriptor_t *p_rx_td =
			&p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
	int8_t c_is_frame = 0;

	if (p_frame == NULL)
  400baa:	2a00      	cmp	r2, #0
  400bac:	f000 80cb 	beq.w	400d46 <gmac_dev_read+0x1b2>
  400bb0:	468e      	mov	lr, r1
  400bb2:	4615      	mov	r5, r2
	gmac_rx_descriptor_t *p_rx_td =
  400bb4:	68e2      	ldr	r2, [r4, #12]
  400bb6:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
		return GMAC_PARAM;

	/* Set the default return value */
	*p_rcv_size = 0;
  400bba:	f04f 0c00 	mov.w	ip, #0
  400bbe:	9f10      	ldr	r7, [sp, #64]	; 0x40
  400bc0:	f8c7 c000 	str.w	ip, [r7]

	/* Process received RX descriptor */
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  400bc4:	f852 2036 	ldr.w	r2, [r2, r6, lsl #3]
  400bc8:	f012 0f01 	tst.w	r2, #1
  400bcc:	f000 80bd 	beq.w	400d4a <gmac_dev_read+0x1b6>
  400bd0:	9501      	str	r5, [sp, #4]
  400bd2:	469b      	mov	fp, r3
  400bd4:	9103      	str	r1, [sp, #12]
  400bd6:	4605      	mov	r5, r0
			/* Skip previous fragment */
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);

				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400bd8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400bdc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400be0:	3322      	adds	r3, #34	; 0x22
  400be2:	9300      	str	r3, [sp, #0]
  400be4:	46e0      	mov	r8, ip
  400be6:	46e1      	mov	r9, ip
  400be8:	4667      	mov	r7, ip
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);

		/* Copy data in the frame buffer */
		if (c_is_frame) {
			/* A complete turn has been made but no EOF found */
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  400bea:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  400bee:	00f6      	lsls	r6, r6, #3
  400bf0:	e01c      	b.n	400c2c <gmac_dev_read+0x98>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  400bf2:	19ab      	adds	r3, r5, r6
  400bf4:	8c19      	ldrh	r1, [r3, #32]
  400bf6:	f10d 0016 	add.w	r0, sp, #22
  400bfa:	4b55      	ldr	r3, [pc, #340]	; (400d50 <gmac_dev_read+0x1bc>)
  400bfc:	4798      	blx	r3
		if (c_is_frame) {
  400bfe:	f1b8 0f00 	cmp.w	r8, #0
  400c02:	d13a      	bne.n	400c7a <gmac_dev_read+0xe6>
				return GMAC_OK;
			}
		}
		/* SOF has not been detected, skip the fragment */
		else {
			p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400c04:	6823      	ldr	r3, [r4, #0]
  400c06:	f023 0301 	bic.w	r3, r3, #1
  400c0a:	6023      	str	r3, [r4, #0]
			p_gmac_queue->us_rx_idx = us_tmp_idx;
  400c0c:	19ab      	adds	r3, r5, r6
  400c0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400c12:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		/* Process the next buffer */
		p_rx_td = &p_gmac_queue->p_rx_dscr[us_tmp_idx];
  400c14:	19ab      	adds	r3, r5, r6
  400c16:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400c1a:	68db      	ldr	r3, [r3, #12]
  400c1c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
	while ((p_rx_td->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  400c20:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  400c24:	f013 0f01 	tst.w	r3, #1
  400c28:	f000 8089 	beq.w	400d3e <gmac_dev_read+0x1aa>
		if ((p_rx_td->status.val & GMAC_RXD_SOF) == GMAC_RXD_SOF) {
  400c2c:	6863      	ldr	r3, [r4, #4]
  400c2e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400c32:	d0de      	beq.n	400bf2 <gmac_dev_read+0x5e>
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400c34:	19ab      	adds	r3, r5, r6
  400c36:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400c38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400c3c:	429a      	cmp	r2, r3
  400c3e:	d013      	beq.n	400c68 <gmac_dev_read+0xd4>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400c40:	19af      	adds	r7, r5, r6
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400c42:	f8df 810c 	ldr.w	r8, [pc, #268]	; 400d50 <gmac_dev_read+0x1bc>
				p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400c46:	68fa      	ldr	r2, [r7, #12]
  400c48:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400c4c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
  400c50:	f021 0101 	bic.w	r1, r1, #1
  400c54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400c58:	8c39      	ldrh	r1, [r7, #32]
  400c5a:	9800      	ldr	r0, [sp, #0]
  400c5c:	47c0      	blx	r8
			while (us_tmp_idx != p_gmac_queue->us_rx_idx) {
  400c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  400c60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400c64:	429a      	cmp	r2, r3
  400c66:	d1ee      	bne.n	400c46 <gmac_dev_read+0xb2>
		circ_inc(&us_tmp_idx, p_gmac_queue->us_rx_list_size);
  400c68:	19ab      	adds	r3, r5, r6
  400c6a:	8c19      	ldrh	r1, [r3, #32]
  400c6c:	f10d 0016 	add.w	r0, sp, #22
  400c70:	4b37      	ldr	r3, [pc, #220]	; (400d50 <gmac_dev_read+0x1bc>)
  400c72:	4798      	blx	r3
  400c74:	f8dd 9004 	ldr.w	r9, [sp, #4]
  400c78:	2700      	movs	r7, #0
			if (us_tmp_idx == p_gmac_queue->us_rx_idx) {
  400c7a:	f8bd a016 	ldrh.w	sl, [sp, #22]
  400c7e:	19ab      	adds	r3, r5, r6
  400c80:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400c82:	4553      	cmp	r3, sl
  400c84:	d008      	beq.n	400c98 <gmac_dev_read+0x104>
			if ((tmp_ul_frame_size + us_buffer_length) > ul_frame_size) {
  400c86:	f107 0380 	add.w	r3, r7, #128	; 0x80
  400c8a:	455b      	cmp	r3, fp
  400c8c:	d91d      	bls.n	400cca <gmac_dev_read+0x136>
				us_buffer_length = ul_frame_size - tmp_ul_frame_size;
  400c8e:	ebab 0807 	sub.w	r8, fp, r7
  400c92:	fa1f f888 	uxth.w	r8, r8
  400c96:	e01a      	b.n	400cce <gmac_dev_read+0x13a>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400c98:	9b02      	ldr	r3, [sp, #8]
  400c9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400c9e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400ca2:	4c2b      	ldr	r4, [pc, #172]	; (400d50 <gmac_dev_read+0x1bc>)
  400ca4:	9e00      	ldr	r6, [sp, #0]
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400ca6:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  400ca8:	68ea      	ldr	r2, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400caa:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  400cae:	f023 0301 	bic.w	r3, r3, #1
  400cb2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400cb6:	8c29      	ldrh	r1, [r5, #32]
  400cb8:	4630      	mov	r0, r6
  400cba:	47a0      	blx	r4
				} while (us_tmp_idx != p_gmac_queue->us_rx_idx);
  400cbc:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  400cbe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  400cc2:	429a      	cmp	r2, r3
  400cc4:	d1ef      	bne.n	400ca6 <gmac_dev_read+0x112>
				return GMAC_RX_ERROR;
  400cc6:	2003      	movs	r0, #3
  400cc8:	e03a      	b.n	400d40 <gmac_dev_read+0x1ac>
			us_buffer_length = GMAC_RX_UNITSIZE;
  400cca:	f04f 0880 	mov.w	r8, #128	; 0x80
					(void *)(p_rx_td->addr.val & GMAC_RXD_ADDR_MASK),
  400cce:	6821      	ldr	r1, [r4, #0]
			memcpy(p_tmp_frame,
  400cd0:	4642      	mov	r2, r8
  400cd2:	f021 0103 	bic.w	r1, r1, #3
  400cd6:	4648      	mov	r0, r9
  400cd8:	4b1e      	ldr	r3, [pc, #120]	; (400d54 <gmac_dev_read+0x1c0>)
  400cda:	4798      	blx	r3
			p_tmp_frame += us_buffer_length;
  400cdc:	44c1      	add	r9, r8
			tmp_ul_frame_size += us_buffer_length;
  400cde:	4447      	add	r7, r8
			if ((p_rx_td->status.val & GMAC_RXD_EOF) == GMAC_RXD_EOF) {
  400ce0:	6863      	ldr	r3, [r4, #4]
  400ce2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  400ce6:	d102      	bne.n	400cee <gmac_dev_read+0x15a>
  400ce8:	f04f 0801 	mov.w	r8, #1
  400cec:	e792      	b.n	400c14 <gmac_dev_read+0x80>
				*p_rcv_size = (p_rx_td->status.val & GMAC_RXD_LEN_MASK);
  400cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400cf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  400cf4:	6013      	str	r3, [r2, #0]
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400cf6:	9b03      	ldr	r3, [sp, #12]
  400cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400cfc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400d00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400d02:	459a      	cmp	sl, r3
  400d04:	d014      	beq.n	400d30 <gmac_dev_read+0x19c>
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400d06:	9a02      	ldr	r2, [sp, #8]
  400d08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400d0c:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400d10:	4c0f      	ldr	r4, [pc, #60]	; (400d50 <gmac_dev_read+0x1bc>)
					p_rx_td = &p_gmac_queue->p_rx_dscr[p_gmac_queue->us_rx_idx];
  400d12:	68e9      	ldr	r1, [r5, #12]
					p_rx_td->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  400d14:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  400d18:	f022 0201 	bic.w	r2, r2, #1
  400d1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					circ_inc(&p_gmac_queue->us_rx_idx, p_gmac_queue->us_rx_list_size);
  400d20:	8c29      	ldrh	r1, [r5, #32]
  400d22:	9800      	ldr	r0, [sp, #0]
  400d24:	47a0      	blx	r4
				while (p_gmac_queue->us_rx_idx != us_tmp_idx) {
  400d26:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  400d28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  400d2c:	429a      	cmp	r2, r3
  400d2e:	d1f0      	bne.n	400d12 <gmac_dev_read+0x17e>
				if (tmp_ul_frame_size < *p_rcv_size) {
  400d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
  400d32:	6818      	ldr	r0, [r3, #0]
				return GMAC_OK;
  400d34:	4287      	cmp	r7, r0
  400d36:	bf34      	ite	cc
  400d38:	2005      	movcc	r0, #5
  400d3a:	2000      	movcs	r0, #0
  400d3c:	e000      	b.n	400d40 <gmac_dev_read+0x1ac>
	}

	return GMAC_RX_NO_DATA;
  400d3e:	2004      	movs	r0, #4
}
  400d40:	b007      	add	sp, #28
  400d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return GMAC_PARAM;
  400d46:	2006      	movs	r0, #6
  400d48:	e7fa      	b.n	400d40 <gmac_dev_read+0x1ac>
	return GMAC_RX_NO_DATA;
  400d4a:	2004      	movs	r0, #4
  400d4c:	e7f8      	b.n	400d40 <gmac_dev_read+0x1ac>
  400d4e:	bf00      	nop
  400d50:	00400931 	.word	0x00400931
  400d54:	0040276d 	.word	0x0040276d

00400d58 <gmac_dev_write>:
 *
 * \return Length sent.
 */
uint32_t gmac_dev_write(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx, void *p_buffer,
		uint32_t ul_size, gmac_dev_tx_cb_t func_tx_cb)
{
  400d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	Gmac *p_hw = p_gmac_dev->p_hw;
	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];

	/* Check parameter */
	if (ul_size > GMAC_TX_UNITSIZE) {
  400d5c:	f240 56ee 	movw	r6, #1518	; 0x5ee
  400d60:	42b3      	cmp	r3, r6
  400d62:	d902      	bls.n	400d6a <gmac_dev_write+0x12>
		return GMAC_PARAM;
  400d64:	2006      	movs	r0, #6
  400d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* Pointers to the current transmit descriptor */
	p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_head];
  400d6a:	eb01 0581 	add.w	r5, r1, r1, lsl #2
  400d6e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
  400d72:	8cef      	ldrh	r7, [r5, #38]	; 0x26
  400d74:	00fe      	lsls	r6, r7, #3
  400d76:	f8d5 e010 	ldr.w	lr, [r5, #16]
  400d7a:	eb0e 0806 	add.w	r8, lr, r6

	/* If no free TxTd, buffer can't be sent, schedule the wakeup callback */
	if (CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400d7e:	8d2c      	ldrh	r4, [r5, #40]	; 0x28
  400d80:	f107 0c01 	add.w	ip, r7, #1
  400d84:	eba4 040c 	sub.w	r4, r4, ip
  400d88:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
  400d8c:	fb94 f5fc 	sdiv	r5, r4, ip
  400d90:	fb0c 4415 	mls	r4, ip, r5, r4
  400d94:	b91c      	cbnz	r4, 400d9e <gmac_dev_write+0x46>
					p_gmac_queue->us_tx_list_size) == 0) {
		if (p_tx_td[p_gmac_queue->us_tx_head].status.val & GMAC_TXD_USED)
  400d96:	4446      	add	r6, r8
  400d98:	6874      	ldr	r4, [r6, #4]
  400d9a:	2c00      	cmp	r4, #0
  400d9c:	db41      	blt.n	400e22 <gmac_dev_write+0xca>
  400d9e:	461e      	mov	r6, r3
  400da0:	4694      	mov	ip, r2
  400da2:	460c      	mov	r4, r1
  400da4:	4605      	mov	r5, r0
	Gmac *p_hw = p_gmac_dev->p_hw;
  400da6:	f8d0 9000 	ldr.w	r9, [r0]
			return GMAC_TX_BUSY;
	}

	/* Pointers to the current Tx callback */
	p_func_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_head];
  400daa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400dae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  400db2:	f8d3 a01c 	ldr.w	sl, [r3, #28]

	/* Set up/copy data to transmission buffer */
	if (p_buffer && ul_size) {
  400db6:	b102      	cbz	r2, 400dba <gmac_dev_write+0x62>
  400db8:	bb2e      	cbnz	r6, 400e06 <gmac_dev_write+0xae>
		/* Driver manages the ring buffer */
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
	}

	/* Tx callback */
	*p_func_tx_cb = func_tx_cb;
  400dba:	9b08      	ldr	r3, [sp, #32]
  400dbc:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]

	/* Update transmit descriptor status */

	/* The buffer size defined is the length of ethernet frame,
	   so it's always the last buffer of the frame. */
	if (p_gmac_queue->us_tx_head == p_gmac_queue->us_tx_list_size - 1) {
  400dc0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  400dc4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400dc8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  400dca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  400dcc:	3b01      	subs	r3, #1
  400dce:	429a      	cmp	r2, r3
  400dd0:	d020      	beq.n	400e14 <gmac_dev_write+0xbc>
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
				| GMAC_TXD_WRAP;
	} else {
		p_tx_td->status.val =
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST;
  400dd2:	f3c6 030c 	ubfx	r3, r6, #0, #13
  400dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
		p_tx_td->status.val =
  400dda:	f8c8 3004 	str.w	r3, [r8, #4]
	}

	circ_inc(&p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_list_size);
  400dde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  400de2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  400de6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  400de8:	f103 0026 	add.w	r0, r3, #38	; 0x26
  400dec:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <gmac_dev_write+0xd0>)
  400dee:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
  400df0:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  400df4:	f8d9 3000 	ldr.w	r3, [r9]
  400df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400dfc:	f8c9 3000 	str.w	r3, [r9]

	/* Now start to transmit if it is still not done */
	gmac_start_transmission(p_hw);

	return GMAC_OK;
  400e00:	2000      	movs	r0, #0
  400e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy((void *)p_tx_td->addr, p_buffer, ul_size);
  400e06:	f85e 0037 	ldr.w	r0, [lr, r7, lsl #3]
  400e0a:	4632      	mov	r2, r6
  400e0c:	4661      	mov	r1, ip
  400e0e:	4b07      	ldr	r3, [pc, #28]	; (400e2c <gmac_dev_write+0xd4>)
  400e10:	4798      	blx	r3
  400e12:	e7d2      	b.n	400dba <gmac_dev_write+0x62>
				(ul_size & GMAC_TXD_LEN_MASK) | GMAC_TXD_LAST
  400e14:	f3c6 030c 	ubfx	r3, r6, #0, #13
				| GMAC_TXD_WRAP;
  400e18:	4a05      	ldr	r2, [pc, #20]	; (400e30 <gmac_dev_write+0xd8>)
  400e1a:	431a      	orrs	r2, r3
		p_tx_td->status.val =
  400e1c:	f8c8 2004 	str.w	r2, [r8, #4]
  400e20:	e7dd      	b.n	400dde <gmac_dev_write+0x86>
			return GMAC_TX_BUSY;
  400e22:	2002      	movs	r0, #2
}
  400e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e28:	00400931 	.word	0x00400931
  400e2c:	0040276d 	.word	0x0040276d
  400e30:	40008000 	.word	0x40008000

00400e34 <gmac_handler>:
 * \brief GMAC Interrupt handler.
 *
 * \param p_gmac_dev   Pointer to GMAC device instance.
 */
void gmac_handler(gmac_device_t* p_gmac_dev, gmac_quelist_t queue_idx)
{
  400e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e38:	b085      	sub	sp, #20
  400e3a:	4607      	mov	r7, r0
  400e3c:	460d      	mov	r5, r1
	Gmac *p_hw = p_gmac_dev->p_hw;
  400e3e:	6806      	ldr	r6, [r0, #0]
	uint32_t ul_tx_status_flag;
#ifdef FREERTOS_USED
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
#endif

	gmac_queue_t* p_gmac_queue = &p_gmac_dev->gmac_queue_list[queue_idx];
  400e40:	460c      	mov	r4, r1

	if(queue_idx == GMAC_QUE_0) {
  400e42:	2900      	cmp	r1, #0
  400e44:	d153      	bne.n	400eee <gmac_handler+0xba>
	return p_gmac->GMAC_ISR;
  400e46:	6a73      	ldr	r3, [r6, #36]	; 0x24
		ul_isr = gmac_get_interrupt_status(p_hw);
  400e48:	9303      	str	r3, [sp, #12]
	return p_gmac->GMAC_RSR;
  400e4a:	6a33      	ldr	r3, [r6, #32]
	} else {
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
	}
	ul_rsr = gmac_get_rx_status(p_hw);
  400e4c:	9302      	str	r3, [sp, #8]
	return p_gmac->GMAC_TSR;
  400e4e:	6973      	ldr	r3, [r6, #20]
	ul_tsr = gmac_get_tx_status(p_hw);
  400e50:	9301      	str	r3, [sp, #4]
	return p_gmac->GMAC_IMR;
  400e52:	6b31      	ldr	r1, [r6, #48]	; 0x30

	ul_isr &= ~(gmac_get_interrupt_mask(p_hw) | 0xF8030300);
  400e54:	9b03      	ldr	r3, [sp, #12]
  400e56:	4a49      	ldr	r2, [pc, #292]	; (400f7c <gmac_handler+0x148>)
  400e58:	430a      	orrs	r2, r1
  400e5a:	ea23 0302 	bic.w	r3, r3, r2
  400e5e:	9303      	str	r3, [sp, #12]

	/* RX packet */
	if ((ul_isr & GMAC_ISR_RCOMP) || (ul_rsr & GMAC_RSR_REC)) {
  400e60:	9b03      	ldr	r3, [sp, #12]
  400e62:	f013 0f02 	tst.w	r3, #2
  400e66:	d103      	bne.n	400e70 <gmac_handler+0x3c>
  400e68:	9b02      	ldr	r3, [sp, #8]
  400e6a:	f013 0f02 	tst.w	r3, #2
  400e6e:	d014      	beq.n	400e9a <gmac_handler+0x66>
		ul_rx_status_flag = GMAC_RSR_REC;

		/* Check OVR */
		if (ul_rsr & GMAC_RSR_RXOVR) {
  400e70:	9b02      	ldr	r3, [sp, #8]
  400e72:	f003 0304 	and.w	r3, r3, #4
			ul_rx_status_flag |= GMAC_RSR_RXOVR;
  400e76:	2b00      	cmp	r3, #0
  400e78:	bf0c      	ite	eq
  400e7a:	2002      	moveq	r0, #2
  400e7c:	2006      	movne	r0, #6
		}
		/* Check BNA */
		if (ul_rsr & GMAC_RSR_BNA) {
  400e7e:	9b02      	ldr	r3, [sp, #8]
  400e80:	f013 0f01 	tst.w	r3, #1
			ul_rx_status_flag |= GMAC_RSR_BNA;
  400e84:	bf18      	it	ne
  400e86:	f040 0001 	orrne.w	r0, r0, #1
	p_gmac->GMAC_RSR = ul_status;
  400e8a:	6230      	str	r0, [r6, #32]
		}
		/* Clear status */
		gmac_clear_rx_status(p_hw, ul_rx_status_flag);

		/* Invoke callbacks */
		if (p_gmac_queue->func_rx_cb) {
  400e8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400e90:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400e94:	695b      	ldr	r3, [r3, #20]
  400e96:	b103      	cbz	r3, 400e9a <gmac_handler+0x66>
			p_gmac_queue->func_rx_cb(ul_rx_status_flag);
  400e98:	4798      	blx	r3
		}
	}

	/* TX packet */
	if ((ul_isr & GMAC_ISR_TCOMP) || (ul_tsr & GMAC_TSR_TXCOMP)) {
  400e9a:	9b03      	ldr	r3, [sp, #12]
  400e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400ea0:	d103      	bne.n	400eaa <gmac_handler+0x76>
  400ea2:	9b01      	ldr	r3, [sp, #4]
  400ea4:	f013 0f20 	tst.w	r3, #32
  400ea8:	d065      	beq.n	400f76 <gmac_handler+0x142>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;

		/* Check RLE */
		if (ul_tsr & GMAC_TSR_RLE) {
  400eaa:	9b01      	ldr	r3, [sp, #4]
  400eac:	f013 0f04 	tst.w	r3, #4
  400eb0:	d123      	bne.n	400efa <gmac_handler+0xc6>
		ul_tx_status_flag = GMAC_TSR_TXCOMP;
  400eb2:	f04f 0920 	mov.w	r9, #32
			p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
			gmac_enable_transmit(p_hw, 1);
		}
		/* Check COL */
		if (ul_tsr & GMAC_TSR_COL) {
  400eb6:	9b01      	ldr	r3, [sp, #4]
  400eb8:	f013 0f02 	tst.w	r3, #2
			ul_tx_status_flag |= GMAC_TSR_COL;
  400ebc:	bf18      	it	ne
  400ebe:	f049 0902 	orrne.w	r9, r9, #2
	p_gmac->GMAC_TSR = ul_status;
  400ec2:	f8c6 9014 	str.w	r9, [r6, #20]
		}

		/* Clear status */
		gmac_clear_tx_status(p_hw, ul_tx_status_flag);

		if (!CIRC_EMPTY(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail)) {
  400ec6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400eca:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400ece:	8cda      	ldrh	r2, [r3, #38]	; 0x26
  400ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  400ed2:	429a      	cmp	r2, r3
  400ed4:	d037      	beq.n	400f46 <gmac_handler+0x112>
				/* Notify upper layer that a packet has been sent */
				if (*p_tx_cb) {
					(*p_tx_cb) (ul_tx_status_flag);
				}

				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400ed6:	1c6e      	adds	r6, r5, #1
  400ed8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400edc:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400ee0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400ee4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400ee8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 400f84 <gmac_handler+0x150>
  400eec:	e01c      	b.n	400f28 <gmac_handler+0xf4>
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  400eee:	f101 03ff 	add.w	r3, r1, #255	; 0xff
  400ef2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
		ul_isr = gmac_get_priority_interrupt_status(p_hw, queue_idx);
  400ef6:	9303      	str	r3, [sp, #12]
  400ef8:	e7a7      	b.n	400e4a <gmac_handler+0x16>
			gmac_reset_tx_mem(p_gmac_dev, queue_idx);
  400efa:	4629      	mov	r1, r5
  400efc:	4638      	mov	r0, r7
  400efe:	4b20      	ldr	r3, [pc, #128]	; (400f80 <gmac_handler+0x14c>)
  400f00:	4798      	blx	r3
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400f02:	6833      	ldr	r3, [r6, #0]
  400f04:	f043 0308 	orr.w	r3, r3, #8
  400f08:	6033      	str	r3, [r6, #0]
			ul_tx_status_flag = GMAC_TSR_RLE;
  400f0a:	f04f 0904 	mov.w	r9, #4
  400f0e:	e7d2      	b.n	400eb6 <gmac_handler+0x82>
				circ_inc(&p_gmac_queue->us_tx_tail, p_gmac_queue->us_tx_list_size);
  400f10:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  400f12:	4630      	mov	r0, r6
  400f14:	47c0      	blx	r8
			} while (CIRC_CNT(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400f16:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
  400f18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  400f1a:	1a9b      	subs	r3, r3, r2
  400f1c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
  400f1e:	fb93 f2f1 	sdiv	r2, r3, r1
  400f22:	fb01 3312 	mls	r3, r1, r2, r3
  400f26:	b173      	cbz	r3, 400f46 <gmac_handler+0x112>
				p_tx_td = &p_gmac_queue->p_tx_dscr[p_gmac_queue->us_tx_tail];
  400f28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				p_tx_cb = &p_gmac_queue->func_tx_cb_list[p_gmac_queue->us_tx_tail];
  400f2a:	69e1      	ldr	r1, [r4, #28]
				if ((p_tx_td->status.val & GMAC_TXD_USED) == 0) {
  400f2c:	6923      	ldr	r3, [r4, #16]
  400f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  400f32:	685b      	ldr	r3, [r3, #4]
  400f34:	2b00      	cmp	r3, #0
  400f36:	da06      	bge.n	400f46 <gmac_handler+0x112>
				if (*p_tx_cb) {
  400f38:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d0e7      	beq.n	400f10 <gmac_handler+0xdc>
					(*p_tx_cb) (ul_tx_status_flag);
  400f40:	4648      	mov	r0, r9
  400f42:	4798      	blx	r3
  400f44:	e7e4      	b.n	400f10 <gmac_handler+0xdc>
							p_gmac_queue->us_tx_list_size));
		}

		/* If a wakeup has been scheduled, notify upper layer that it can
		   send other packets, and the sending will be successful. */
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400f46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  400f4a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  400f4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  400f50:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
  400f52:	3101      	adds	r1, #1
  400f54:	1a52      	subs	r2, r2, r1
  400f56:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  400f58:	fb92 f1f0 	sdiv	r1, r2, r0
  400f5c:	fb00 2211 	mls	r2, r0, r1, r2
				p_gmac_queue->us_tx_list_size) >= p_gmac_queue->uc_wakeup_threshold)
  400f60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
		if ((CIRC_SPACE(p_gmac_queue->us_tx_head, p_gmac_queue->us_tx_tail,
  400f64:	429a      	cmp	r2, r3
  400f66:	db06      	blt.n	400f76 <gmac_handler+0x142>
				&& p_gmac_queue->func_wakeup_cb) {
  400f68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400f6c:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  400f70:	69ab      	ldr	r3, [r5, #24]
  400f72:	b103      	cbz	r3, 400f76 <gmac_handler+0x142>
			p_gmac_queue->func_wakeup_cb();
  400f74:	4798      	blx	r3
		/* the complete IP stack. */
		xSemaphoreGiveFromISR(netif_notification_semaphore,
				&xHigherPriorityTaskWoken);
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
#endif
}
  400f76:	b005      	add	sp, #20
  400f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400f7c:	f8030300 	.word	0xf8030300
  400f80:	00400941 	.word	0x00400941
  400f84:	00400931 	.word	0x00400931

00400f88 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f88:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f8a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f8e:	d03a      	beq.n	401006 <pio_set_peripheral+0x7e>
  400f90:	d813      	bhi.n	400fba <pio_set_peripheral+0x32>
  400f92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400f96:	d025      	beq.n	400fe4 <pio_set_peripheral+0x5c>
  400f98:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400f9c:	d10a      	bne.n	400fb4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f9e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fa0:	4313      	orrs	r3, r2
  400fa2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fa4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fa6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400fa8:	400b      	ands	r3, r1
  400faa:	ea23 0302 	bic.w	r3, r3, r2
  400fae:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400fb0:	6042      	str	r2, [r0, #4]
  400fb2:	4770      	bx	lr
	switch (ul_type) {
  400fb4:	2900      	cmp	r1, #0
  400fb6:	d1fb      	bne.n	400fb0 <pio_set_peripheral+0x28>
  400fb8:	4770      	bx	lr
  400fba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400fbe:	d021      	beq.n	401004 <pio_set_peripheral+0x7c>
  400fc0:	d809      	bhi.n	400fd6 <pio_set_peripheral+0x4e>
  400fc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fc6:	d1f3      	bne.n	400fb0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fc8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fca:	4313      	orrs	r3, r2
  400fcc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400fce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400fd0:	4313      	orrs	r3, r2
  400fd2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400fd4:	e7ec      	b.n	400fb0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400fd6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fda:	d013      	beq.n	401004 <pio_set_peripheral+0x7c>
  400fdc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fe0:	d010      	beq.n	401004 <pio_set_peripheral+0x7c>
  400fe2:	e7e5      	b.n	400fb0 <pio_set_peripheral+0x28>
{
  400fe4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fe6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400fe8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400fea:	43d3      	mvns	r3, r2
  400fec:	4021      	ands	r1, r4
  400fee:	461c      	mov	r4, r3
  400ff0:	4019      	ands	r1, r3
  400ff2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ff4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ff6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ff8:	400b      	ands	r3, r1
  400ffa:	4023      	ands	r3, r4
  400ffc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400ffe:	6042      	str	r2, [r0, #4]
}
  401000:	f85d 4b04 	ldr.w	r4, [sp], #4
  401004:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401006:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401008:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40100a:	400b      	ands	r3, r1
  40100c:	ea23 0302 	bic.w	r3, r3, r2
  401010:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401012:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401014:	4313      	orrs	r3, r2
  401016:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401018:	e7ca      	b.n	400fb0 <pio_set_peripheral+0x28>

0040101a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40101a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40101c:	f012 0f01 	tst.w	r2, #1
  401020:	d10d      	bne.n	40103e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401022:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401024:	f012 0f0a 	tst.w	r2, #10
  401028:	d00b      	beq.n	401042 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40102a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40102c:	f012 0f02 	tst.w	r2, #2
  401030:	d109      	bne.n	401046 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401032:	f012 0f08 	tst.w	r2, #8
  401036:	d008      	beq.n	40104a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401038:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40103c:	e005      	b.n	40104a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40103e:	6641      	str	r1, [r0, #100]	; 0x64
  401040:	e7f0      	b.n	401024 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401042:	6241      	str	r1, [r0, #36]	; 0x24
  401044:	e7f2      	b.n	40102c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401046:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40104a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40104c:	6001      	str	r1, [r0, #0]
  40104e:	4770      	bx	lr

00401050 <pio_set_output>:
{
  401050:	b410      	push	{r4}
  401052:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401054:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401056:	b94c      	cbnz	r4, 40106c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401058:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40105a:	b14b      	cbz	r3, 401070 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40105c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40105e:	b94a      	cbnz	r2, 401074 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401060:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401062:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401064:	6001      	str	r1, [r0, #0]
}
  401066:	f85d 4b04 	ldr.w	r4, [sp], #4
  40106a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40106c:	6641      	str	r1, [r0, #100]	; 0x64
  40106e:	e7f4      	b.n	40105a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401070:	6541      	str	r1, [r0, #84]	; 0x54
  401072:	e7f4      	b.n	40105e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401074:	6301      	str	r1, [r0, #48]	; 0x30
  401076:	e7f4      	b.n	401062 <pio_set_output+0x12>

00401078 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401078:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40107a:	4770      	bx	lr

0040107c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40107c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40107e:	4770      	bx	lr

00401080 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401084:	4604      	mov	r4, r0
  401086:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401088:	4b0e      	ldr	r3, [pc, #56]	; (4010c4 <pio_handler_process+0x44>)
  40108a:	4798      	blx	r3
  40108c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40108e:	4620      	mov	r0, r4
  401090:	4b0d      	ldr	r3, [pc, #52]	; (4010c8 <pio_handler_process+0x48>)
  401092:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401094:	4005      	ands	r5, r0
  401096:	d013      	beq.n	4010c0 <pio_handler_process+0x40>
  401098:	4c0c      	ldr	r4, [pc, #48]	; (4010cc <pio_handler_process+0x4c>)
  40109a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40109e:	e003      	b.n	4010a8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010a0:	42b4      	cmp	r4, r6
  4010a2:	d00d      	beq.n	4010c0 <pio_handler_process+0x40>
  4010a4:	3410      	adds	r4, #16
		while (status != 0) {
  4010a6:	b15d      	cbz	r5, 4010c0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4010a8:	6820      	ldr	r0, [r4, #0]
  4010aa:	4540      	cmp	r0, r8
  4010ac:	d1f8      	bne.n	4010a0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4010ae:	6861      	ldr	r1, [r4, #4]
  4010b0:	4229      	tst	r1, r5
  4010b2:	d0f5      	beq.n	4010a0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010b4:	68e3      	ldr	r3, [r4, #12]
  4010b6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010b8:	6863      	ldr	r3, [r4, #4]
  4010ba:	ea25 0503 	bic.w	r5, r5, r3
  4010be:	e7ef      	b.n	4010a0 <pio_handler_process+0x20>
  4010c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010c4:	00401079 	.word	0x00401079
  4010c8:	0040107d 	.word	0x0040107d
  4010cc:	20404258 	.word	0x20404258

004010d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010d2:	210a      	movs	r1, #10
  4010d4:	4801      	ldr	r0, [pc, #4]	; (4010dc <PIOA_Handler+0xc>)
  4010d6:	4b02      	ldr	r3, [pc, #8]	; (4010e0 <PIOA_Handler+0x10>)
  4010d8:	4798      	blx	r3
  4010da:	bd08      	pop	{r3, pc}
  4010dc:	400e0e00 	.word	0x400e0e00
  4010e0:	00401081 	.word	0x00401081

004010e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010e6:	210b      	movs	r1, #11
  4010e8:	4801      	ldr	r0, [pc, #4]	; (4010f0 <PIOB_Handler+0xc>)
  4010ea:	4b02      	ldr	r3, [pc, #8]	; (4010f4 <PIOB_Handler+0x10>)
  4010ec:	4798      	blx	r3
  4010ee:	bd08      	pop	{r3, pc}
  4010f0:	400e1000 	.word	0x400e1000
  4010f4:	00401081 	.word	0x00401081

004010f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010fa:	210c      	movs	r1, #12
  4010fc:	4801      	ldr	r0, [pc, #4]	; (401104 <PIOC_Handler+0xc>)
  4010fe:	4b02      	ldr	r3, [pc, #8]	; (401108 <PIOC_Handler+0x10>)
  401100:	4798      	blx	r3
  401102:	bd08      	pop	{r3, pc}
  401104:	400e1200 	.word	0x400e1200
  401108:	00401081 	.word	0x00401081

0040110c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40110c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40110e:	2110      	movs	r1, #16
  401110:	4801      	ldr	r0, [pc, #4]	; (401118 <PIOD_Handler+0xc>)
  401112:	4b02      	ldr	r3, [pc, #8]	; (40111c <PIOD_Handler+0x10>)
  401114:	4798      	blx	r3
  401116:	bd08      	pop	{r3, pc}
  401118:	400e1400 	.word	0x400e1400
  40111c:	00401081 	.word	0x00401081

00401120 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401120:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401122:	2111      	movs	r1, #17
  401124:	4801      	ldr	r0, [pc, #4]	; (40112c <PIOE_Handler+0xc>)
  401126:	4b02      	ldr	r3, [pc, #8]	; (401130 <PIOE_Handler+0x10>)
  401128:	4798      	blx	r3
  40112a:	bd08      	pop	{r3, pc}
  40112c:	400e1600 	.word	0x400e1600
  401130:	00401081 	.word	0x00401081

00401134 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401134:	2803      	cmp	r0, #3
  401136:	d011      	beq.n	40115c <pmc_mck_set_division+0x28>
  401138:	2804      	cmp	r0, #4
  40113a:	d012      	beq.n	401162 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40113c:	2802      	cmp	r0, #2
  40113e:	bf0c      	ite	eq
  401140:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401144:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401146:	4a08      	ldr	r2, [pc, #32]	; (401168 <pmc_mck_set_division+0x34>)
  401148:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40114a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40114e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401150:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401152:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401154:	f013 0f08 	tst.w	r3, #8
  401158:	d0fb      	beq.n	401152 <pmc_mck_set_division+0x1e>
}
  40115a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40115c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401160:	e7f1      	b.n	401146 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401162:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401166:	e7ee      	b.n	401146 <pmc_mck_set_division+0x12>
  401168:	400e0600 	.word	0x400e0600

0040116c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40116c:	4a17      	ldr	r2, [pc, #92]	; (4011cc <pmc_switch_mck_to_pllack+0x60>)
  40116e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401174:	4318      	orrs	r0, r3
  401176:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401178:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40117a:	f013 0f08 	tst.w	r3, #8
  40117e:	d10a      	bne.n	401196 <pmc_switch_mck_to_pllack+0x2a>
  401180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401184:	4911      	ldr	r1, [pc, #68]	; (4011cc <pmc_switch_mck_to_pllack+0x60>)
  401186:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401188:	f012 0f08 	tst.w	r2, #8
  40118c:	d103      	bne.n	401196 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40118e:	3b01      	subs	r3, #1
  401190:	d1f9      	bne.n	401186 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401192:	2001      	movs	r0, #1
  401194:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401196:	4a0d      	ldr	r2, [pc, #52]	; (4011cc <pmc_switch_mck_to_pllack+0x60>)
  401198:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40119a:	f023 0303 	bic.w	r3, r3, #3
  40119e:	f043 0302 	orr.w	r3, r3, #2
  4011a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011a6:	f013 0f08 	tst.w	r3, #8
  4011aa:	d10a      	bne.n	4011c2 <pmc_switch_mck_to_pllack+0x56>
  4011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011b0:	4906      	ldr	r1, [pc, #24]	; (4011cc <pmc_switch_mck_to_pllack+0x60>)
  4011b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011b4:	f012 0f08 	tst.w	r2, #8
  4011b8:	d105      	bne.n	4011c6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011ba:	3b01      	subs	r3, #1
  4011bc:	d1f9      	bne.n	4011b2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011be:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011c0:	4770      	bx	lr
	return 0;
  4011c2:	2000      	movs	r0, #0
  4011c4:	4770      	bx	lr
  4011c6:	2000      	movs	r0, #0
  4011c8:	4770      	bx	lr
  4011ca:	bf00      	nop
  4011cc:	400e0600 	.word	0x400e0600

004011d0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011d0:	b9a0      	cbnz	r0, 4011fc <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011d2:	480e      	ldr	r0, [pc, #56]	; (40120c <pmc_switch_mainck_to_xtal+0x3c>)
  4011d4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011d6:	0209      	lsls	r1, r1, #8
  4011d8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011da:	4a0d      	ldr	r2, [pc, #52]	; (401210 <pmc_switch_mainck_to_xtal+0x40>)
  4011dc:	401a      	ands	r2, r3
  4011de:	4b0d      	ldr	r3, [pc, #52]	; (401214 <pmc_switch_mainck_to_xtal+0x44>)
  4011e0:	4313      	orrs	r3, r2
  4011e2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011e4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011e6:	4602      	mov	r2, r0
  4011e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ea:	f013 0f01 	tst.w	r3, #1
  4011ee:	d0fb      	beq.n	4011e8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011f0:	4a06      	ldr	r2, [pc, #24]	; (40120c <pmc_switch_mainck_to_xtal+0x3c>)
  4011f2:	6a11      	ldr	r1, [r2, #32]
  4011f4:	4b08      	ldr	r3, [pc, #32]	; (401218 <pmc_switch_mainck_to_xtal+0x48>)
  4011f6:	430b      	orrs	r3, r1
  4011f8:	6213      	str	r3, [r2, #32]
  4011fa:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011fc:	4903      	ldr	r1, [pc, #12]	; (40120c <pmc_switch_mainck_to_xtal+0x3c>)
  4011fe:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401200:	4a06      	ldr	r2, [pc, #24]	; (40121c <pmc_switch_mainck_to_xtal+0x4c>)
  401202:	401a      	ands	r2, r3
  401204:	4b06      	ldr	r3, [pc, #24]	; (401220 <pmc_switch_mainck_to_xtal+0x50>)
  401206:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401208:	620b      	str	r3, [r1, #32]
  40120a:	4770      	bx	lr
  40120c:	400e0600 	.word	0x400e0600
  401210:	ffc8fffc 	.word	0xffc8fffc
  401214:	00370001 	.word	0x00370001
  401218:	01370000 	.word	0x01370000
  40121c:	fec8fffc 	.word	0xfec8fffc
  401220:	01370002 	.word	0x01370002

00401224 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401224:	4b02      	ldr	r3, [pc, #8]	; (401230 <pmc_osc_is_ready_mainck+0xc>)
  401226:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401228:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40122c:	4770      	bx	lr
  40122e:	bf00      	nop
  401230:	400e0600 	.word	0x400e0600

00401234 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401234:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401238:	4b01      	ldr	r3, [pc, #4]	; (401240 <pmc_disable_pllack+0xc>)
  40123a:	629a      	str	r2, [r3, #40]	; 0x28
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401244:	4b02      	ldr	r3, [pc, #8]	; (401250 <pmc_is_locked_pllack+0xc>)
  401246:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401248:	f000 0002 	and.w	r0, r0, #2
  40124c:	4770      	bx	lr
  40124e:	bf00      	nop
  401250:	400e0600 	.word	0x400e0600

00401254 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401254:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401258:	4b05      	ldr	r3, [pc, #20]	; (401270 <pmc_enable_periph_clk+0x1c>)
  40125a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40125e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401262:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401266:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40126a:	2000      	movs	r0, #0
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop
  401270:	400e0600 	.word	0x400e0600

00401274 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401274:	e7fe      	b.n	401274 <Dummy_Handler>
	...

00401278 <Reset_Handler>:
{
  401278:	b500      	push	{lr}
  40127a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40127c:	4b25      	ldr	r3, [pc, #148]	; (401314 <Reset_Handler+0x9c>)
  40127e:	4a26      	ldr	r2, [pc, #152]	; (401318 <Reset_Handler+0xa0>)
  401280:	429a      	cmp	r2, r3
  401282:	d010      	beq.n	4012a6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401284:	4b25      	ldr	r3, [pc, #148]	; (40131c <Reset_Handler+0xa4>)
  401286:	4a23      	ldr	r2, [pc, #140]	; (401314 <Reset_Handler+0x9c>)
  401288:	429a      	cmp	r2, r3
  40128a:	d20c      	bcs.n	4012a6 <Reset_Handler+0x2e>
  40128c:	3b01      	subs	r3, #1
  40128e:	1a9b      	subs	r3, r3, r2
  401290:	f023 0303 	bic.w	r3, r3, #3
  401294:	3304      	adds	r3, #4
  401296:	4413      	add	r3, r2
  401298:	491f      	ldr	r1, [pc, #124]	; (401318 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40129a:	f851 0b04 	ldr.w	r0, [r1], #4
  40129e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d1f9      	bne.n	40129a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4012a6:	4b1e      	ldr	r3, [pc, #120]	; (401320 <Reset_Handler+0xa8>)
  4012a8:	4a1e      	ldr	r2, [pc, #120]	; (401324 <Reset_Handler+0xac>)
  4012aa:	429a      	cmp	r2, r3
  4012ac:	d20a      	bcs.n	4012c4 <Reset_Handler+0x4c>
  4012ae:	3b01      	subs	r3, #1
  4012b0:	1a9b      	subs	r3, r3, r2
  4012b2:	f023 0303 	bic.w	r3, r3, #3
  4012b6:	3304      	adds	r3, #4
  4012b8:	4413      	add	r3, r2
                *pDest++ = 0;
  4012ba:	2100      	movs	r1, #0
  4012bc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4012c0:	4293      	cmp	r3, r2
  4012c2:	d1fb      	bne.n	4012bc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4012c4:	4a18      	ldr	r2, [pc, #96]	; (401328 <Reset_Handler+0xb0>)
  4012c6:	4b19      	ldr	r3, [pc, #100]	; (40132c <Reset_Handler+0xb4>)
  4012c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4012cc:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012d2:	fab3 f383 	clz	r3, r3
  4012d6:	095b      	lsrs	r3, r3, #5
  4012d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4012da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4012dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4012e0:	2200      	movs	r2, #0
  4012e2:	4b13      	ldr	r3, [pc, #76]	; (401330 <Reset_Handler+0xb8>)
  4012e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4012e6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4012e8:	4a12      	ldr	r2, [pc, #72]	; (401334 <Reset_Handler+0xbc>)
  4012ea:	6813      	ldr	r3, [r2, #0]
  4012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4012f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4012f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012f6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4012fa:	b129      	cbz	r1, 401308 <Reset_Handler+0x90>
		cpu_irq_enable();
  4012fc:	2201      	movs	r2, #1
  4012fe:	4b0c      	ldr	r3, [pc, #48]	; (401330 <Reset_Handler+0xb8>)
  401300:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401302:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401306:	b662      	cpsie	i
        __libc_init_array();
  401308:	4b0b      	ldr	r3, [pc, #44]	; (401338 <Reset_Handler+0xc0>)
  40130a:	4798      	blx	r3
        main();
  40130c:	4b0b      	ldr	r3, [pc, #44]	; (40133c <Reset_Handler+0xc4>)
  40130e:	4798      	blx	r3
  401310:	e7fe      	b.n	401310 <Reset_Handler+0x98>
  401312:	bf00      	nop
  401314:	20400000 	.word	0x20400000
  401318:	00405978 	.word	0x00405978
  40131c:	204009d8 	.word	0x204009d8
  401320:	20404c50 	.word	0x20404c50
  401324:	204009d8 	.word	0x204009d8
  401328:	e000ed00 	.word	0xe000ed00
  40132c:	00400000 	.word	0x00400000
  401330:	2040000a 	.word	0x2040000a
  401334:	e000ed88 	.word	0xe000ed88
  401338:	004026f5 	.word	0x004026f5
  40133c:	0040229d 	.word	0x0040229d

00401340 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401340:	4b3b      	ldr	r3, [pc, #236]	; (401430 <SystemCoreClockUpdate+0xf0>)
  401342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401344:	f003 0303 	and.w	r3, r3, #3
  401348:	2b01      	cmp	r3, #1
  40134a:	d01d      	beq.n	401388 <SystemCoreClockUpdate+0x48>
  40134c:	b183      	cbz	r3, 401370 <SystemCoreClockUpdate+0x30>
  40134e:	2b02      	cmp	r3, #2
  401350:	d036      	beq.n	4013c0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401352:	4b37      	ldr	r3, [pc, #220]	; (401430 <SystemCoreClockUpdate+0xf0>)
  401354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401356:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40135a:	2b70      	cmp	r3, #112	; 0x70
  40135c:	d05f      	beq.n	40141e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40135e:	4b34      	ldr	r3, [pc, #208]	; (401430 <SystemCoreClockUpdate+0xf0>)
  401360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401362:	4934      	ldr	r1, [pc, #208]	; (401434 <SystemCoreClockUpdate+0xf4>)
  401364:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401368:	680b      	ldr	r3, [r1, #0]
  40136a:	40d3      	lsrs	r3, r2
  40136c:	600b      	str	r3, [r1, #0]
  40136e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401370:	4b31      	ldr	r3, [pc, #196]	; (401438 <SystemCoreClockUpdate+0xf8>)
  401372:	695b      	ldr	r3, [r3, #20]
  401374:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401378:	bf14      	ite	ne
  40137a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40137e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401382:	4b2c      	ldr	r3, [pc, #176]	; (401434 <SystemCoreClockUpdate+0xf4>)
  401384:	601a      	str	r2, [r3, #0]
  401386:	e7e4      	b.n	401352 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401388:	4b29      	ldr	r3, [pc, #164]	; (401430 <SystemCoreClockUpdate+0xf0>)
  40138a:	6a1b      	ldr	r3, [r3, #32]
  40138c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401390:	d003      	beq.n	40139a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401392:	4a2a      	ldr	r2, [pc, #168]	; (40143c <SystemCoreClockUpdate+0xfc>)
  401394:	4b27      	ldr	r3, [pc, #156]	; (401434 <SystemCoreClockUpdate+0xf4>)
  401396:	601a      	str	r2, [r3, #0]
  401398:	e7db      	b.n	401352 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40139a:	4a29      	ldr	r2, [pc, #164]	; (401440 <SystemCoreClockUpdate+0x100>)
  40139c:	4b25      	ldr	r3, [pc, #148]	; (401434 <SystemCoreClockUpdate+0xf4>)
  40139e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4013a0:	4b23      	ldr	r3, [pc, #140]	; (401430 <SystemCoreClockUpdate+0xf0>)
  4013a2:	6a1b      	ldr	r3, [r3, #32]
  4013a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013a8:	2b10      	cmp	r3, #16
  4013aa:	d005      	beq.n	4013b8 <SystemCoreClockUpdate+0x78>
  4013ac:	2b20      	cmp	r3, #32
  4013ae:	d1d0      	bne.n	401352 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4013b0:	4a22      	ldr	r2, [pc, #136]	; (40143c <SystemCoreClockUpdate+0xfc>)
  4013b2:	4b20      	ldr	r3, [pc, #128]	; (401434 <SystemCoreClockUpdate+0xf4>)
  4013b4:	601a      	str	r2, [r3, #0]
          break;
  4013b6:	e7cc      	b.n	401352 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4013b8:	4a22      	ldr	r2, [pc, #136]	; (401444 <SystemCoreClockUpdate+0x104>)
  4013ba:	4b1e      	ldr	r3, [pc, #120]	; (401434 <SystemCoreClockUpdate+0xf4>)
  4013bc:	601a      	str	r2, [r3, #0]
          break;
  4013be:	e7c8      	b.n	401352 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013c0:	4b1b      	ldr	r3, [pc, #108]	; (401430 <SystemCoreClockUpdate+0xf0>)
  4013c2:	6a1b      	ldr	r3, [r3, #32]
  4013c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013c8:	d016      	beq.n	4013f8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4013ca:	4a1c      	ldr	r2, [pc, #112]	; (40143c <SystemCoreClockUpdate+0xfc>)
  4013cc:	4b19      	ldr	r3, [pc, #100]	; (401434 <SystemCoreClockUpdate+0xf4>)
  4013ce:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4013d0:	4b17      	ldr	r3, [pc, #92]	; (401430 <SystemCoreClockUpdate+0xf0>)
  4013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013d4:	f003 0303 	and.w	r3, r3, #3
  4013d8:	2b02      	cmp	r3, #2
  4013da:	d1ba      	bne.n	401352 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013dc:	4a14      	ldr	r2, [pc, #80]	; (401430 <SystemCoreClockUpdate+0xf0>)
  4013de:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4013e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4013e2:	4814      	ldr	r0, [pc, #80]	; (401434 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4013e4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4013e8:	6803      	ldr	r3, [r0, #0]
  4013ea:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4013ee:	b2d2      	uxtb	r2, r2
  4013f0:	fbb3 f3f2 	udiv	r3, r3, r2
  4013f4:	6003      	str	r3, [r0, #0]
  4013f6:	e7ac      	b.n	401352 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013f8:	4a11      	ldr	r2, [pc, #68]	; (401440 <SystemCoreClockUpdate+0x100>)
  4013fa:	4b0e      	ldr	r3, [pc, #56]	; (401434 <SystemCoreClockUpdate+0xf4>)
  4013fc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4013fe:	4b0c      	ldr	r3, [pc, #48]	; (401430 <SystemCoreClockUpdate+0xf0>)
  401400:	6a1b      	ldr	r3, [r3, #32]
  401402:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401406:	2b10      	cmp	r3, #16
  401408:	d005      	beq.n	401416 <SystemCoreClockUpdate+0xd6>
  40140a:	2b20      	cmp	r3, #32
  40140c:	d1e0      	bne.n	4013d0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40140e:	4a0b      	ldr	r2, [pc, #44]	; (40143c <SystemCoreClockUpdate+0xfc>)
  401410:	4b08      	ldr	r3, [pc, #32]	; (401434 <SystemCoreClockUpdate+0xf4>)
  401412:	601a      	str	r2, [r3, #0]
          break;
  401414:	e7dc      	b.n	4013d0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401416:	4a0b      	ldr	r2, [pc, #44]	; (401444 <SystemCoreClockUpdate+0x104>)
  401418:	4b06      	ldr	r3, [pc, #24]	; (401434 <SystemCoreClockUpdate+0xf4>)
  40141a:	601a      	str	r2, [r3, #0]
          break;
  40141c:	e7d8      	b.n	4013d0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40141e:	4a05      	ldr	r2, [pc, #20]	; (401434 <SystemCoreClockUpdate+0xf4>)
  401420:	6813      	ldr	r3, [r2, #0]
  401422:	4909      	ldr	r1, [pc, #36]	; (401448 <SystemCoreClockUpdate+0x108>)
  401424:	fba1 1303 	umull	r1, r3, r1, r3
  401428:	085b      	lsrs	r3, r3, #1
  40142a:	6013      	str	r3, [r2, #0]
  40142c:	4770      	bx	lr
  40142e:	bf00      	nop
  401430:	400e0600 	.word	0x400e0600
  401434:	2040000c 	.word	0x2040000c
  401438:	400e1810 	.word	0x400e1810
  40143c:	00b71b00 	.word	0x00b71b00
  401440:	003d0900 	.word	0x003d0900
  401444:	007a1200 	.word	0x007a1200
  401448:	aaaaaaab 	.word	0xaaaaaaab

0040144c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40144c:	4b16      	ldr	r3, [pc, #88]	; (4014a8 <system_init_flash+0x5c>)
  40144e:	4298      	cmp	r0, r3
  401450:	d913      	bls.n	40147a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401452:	4b16      	ldr	r3, [pc, #88]	; (4014ac <system_init_flash+0x60>)
  401454:	4298      	cmp	r0, r3
  401456:	d915      	bls.n	401484 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401458:	4b15      	ldr	r3, [pc, #84]	; (4014b0 <system_init_flash+0x64>)
  40145a:	4298      	cmp	r0, r3
  40145c:	d916      	bls.n	40148c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40145e:	4b15      	ldr	r3, [pc, #84]	; (4014b4 <system_init_flash+0x68>)
  401460:	4298      	cmp	r0, r3
  401462:	d917      	bls.n	401494 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401464:	4b14      	ldr	r3, [pc, #80]	; (4014b8 <system_init_flash+0x6c>)
  401466:	4298      	cmp	r0, r3
  401468:	d918      	bls.n	40149c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40146a:	4b14      	ldr	r3, [pc, #80]	; (4014bc <system_init_flash+0x70>)
  40146c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40146e:	bf94      	ite	ls
  401470:	4a13      	ldrls	r2, [pc, #76]	; (4014c0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401472:	4a14      	ldrhi	r2, [pc, #80]	; (4014c4 <system_init_flash+0x78>)
  401474:	4b14      	ldr	r3, [pc, #80]	; (4014c8 <system_init_flash+0x7c>)
  401476:	601a      	str	r2, [r3, #0]
  401478:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40147a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40147e:	4b12      	ldr	r3, [pc, #72]	; (4014c8 <system_init_flash+0x7c>)
  401480:	601a      	str	r2, [r3, #0]
  401482:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401484:	4a11      	ldr	r2, [pc, #68]	; (4014cc <system_init_flash+0x80>)
  401486:	4b10      	ldr	r3, [pc, #64]	; (4014c8 <system_init_flash+0x7c>)
  401488:	601a      	str	r2, [r3, #0]
  40148a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40148c:	4a10      	ldr	r2, [pc, #64]	; (4014d0 <system_init_flash+0x84>)
  40148e:	4b0e      	ldr	r3, [pc, #56]	; (4014c8 <system_init_flash+0x7c>)
  401490:	601a      	str	r2, [r3, #0]
  401492:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401494:	4a0f      	ldr	r2, [pc, #60]	; (4014d4 <system_init_flash+0x88>)
  401496:	4b0c      	ldr	r3, [pc, #48]	; (4014c8 <system_init_flash+0x7c>)
  401498:	601a      	str	r2, [r3, #0]
  40149a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40149c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4014a0:	4b09      	ldr	r3, [pc, #36]	; (4014c8 <system_init_flash+0x7c>)
  4014a2:	601a      	str	r2, [r3, #0]
  4014a4:	4770      	bx	lr
  4014a6:	bf00      	nop
  4014a8:	015ef3bf 	.word	0x015ef3bf
  4014ac:	02bde77f 	.word	0x02bde77f
  4014b0:	041cdb3f 	.word	0x041cdb3f
  4014b4:	057bceff 	.word	0x057bceff
  4014b8:	06dac2bf 	.word	0x06dac2bf
  4014bc:	0839b67f 	.word	0x0839b67f
  4014c0:	04000500 	.word	0x04000500
  4014c4:	04000600 	.word	0x04000600
  4014c8:	400e0c00 	.word	0x400e0c00
  4014cc:	04000100 	.word	0x04000100
  4014d0:	04000200 	.word	0x04000200
  4014d4:	04000300 	.word	0x04000300

004014d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4014d8:	4b0a      	ldr	r3, [pc, #40]	; (401504 <_sbrk+0x2c>)
  4014da:	681b      	ldr	r3, [r3, #0]
  4014dc:	b153      	cbz	r3, 4014f4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4014de:	4b09      	ldr	r3, [pc, #36]	; (401504 <_sbrk+0x2c>)
  4014e0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4014e2:	181a      	adds	r2, r3, r0
  4014e4:	4908      	ldr	r1, [pc, #32]	; (401508 <_sbrk+0x30>)
  4014e6:	4291      	cmp	r1, r2
  4014e8:	db08      	blt.n	4014fc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4014ea:	4610      	mov	r0, r2
  4014ec:	4a05      	ldr	r2, [pc, #20]	; (401504 <_sbrk+0x2c>)
  4014ee:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4014f0:	4618      	mov	r0, r3
  4014f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4014f4:	4a05      	ldr	r2, [pc, #20]	; (40150c <_sbrk+0x34>)
  4014f6:	4b03      	ldr	r3, [pc, #12]	; (401504 <_sbrk+0x2c>)
  4014f8:	601a      	str	r2, [r3, #0]
  4014fa:	e7f0      	b.n	4014de <_sbrk+0x6>
		return (caddr_t) -1;	
  4014fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  401500:	4770      	bx	lr
  401502:	bf00      	nop
  401504:	204042c8 	.word	0x204042c8
  401508:	2045fffc 	.word	0x2045fffc
  40150c:	20406e50 	.word	0x20406e50

00401510 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401510:	f04f 30ff 	mov.w	r0, #4294967295
  401514:	4770      	bx	lr

00401516 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40151a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40151c:	2000      	movs	r0, #0
  40151e:	4770      	bx	lr

00401520 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401520:	2001      	movs	r0, #1
  401522:	4770      	bx	lr

00401524 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401524:	2000      	movs	r0, #0
  401526:	4770      	bx	lr

00401528 <read_dev_gmac>:
 */ 

#include "GMAC_Artnet.h"

uint32_t read_dev_gmac(void)
{
  401528:	b510      	push	{r4, lr}
  40152a:	b082      	sub	sp, #8
	return gmac_dev_read(&gs_gmac_dev, GMAC_QUE_0, (uint8_t *) gs_uc_eth_buffer, sizeof(gs_uc_eth_buffer), &ul_frm_size);
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <read_dev_gmac+0x1c>)
  40152e:	9300      	str	r3, [sp, #0]
  401530:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  401534:	4a04      	ldr	r2, [pc, #16]	; (401548 <read_dev_gmac+0x20>)
  401536:	2100      	movs	r1, #0
  401538:	4804      	ldr	r0, [pc, #16]	; (40154c <read_dev_gmac+0x24>)
  40153a:	4c05      	ldr	r4, [pc, #20]	; (401550 <read_dev_gmac+0x28>)
  40153c:	47a0      	blx	r4
}
  40153e:	b002      	add	sp, #8
  401540:	bd10      	pop	{r4, pc}
  401542:	bf00      	nop
  401544:	2040490c 	.word	0x2040490c
  401548:	2040430c 	.word	0x2040430c
  40154c:	20404b10 	.word	0x20404b10
  401550:	00400b95 	.word	0x00400b95

00401554 <init_gmac_ethernet>:
uint32_t ul_frm_size;
volatile uint32_t ul_delay;
gmac_options_t gmac_option;

bool init_gmac_ethernet(void)
{
  401554:	b538      	push	{r3, r4, r5, lr}
	#ifdef ETH_SUPPORT_AT24MAC
	at24mac_get_mac_address();
	#endif

	// Wait for PHY to be ready (CAT811: Max400ms)
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  401556:	4a20      	ldr	r2, [pc, #128]	; (4015d8 <init_gmac_ethernet+0x84>)
  401558:	4b20      	ldr	r3, [pc, #128]	; (4015dc <init_gmac_ethernet+0x88>)
  40155a:	601a      	str	r2, [r3, #0]
	while (ul_delay--);
  40155c:	461a      	mov	r2, r3
  40155e:	6813      	ldr	r3, [r2, #0]
  401560:	1e59      	subs	r1, r3, #1
  401562:	6011      	str	r1, [r2, #0]
  401564:	2b00      	cmp	r3, #0
  401566:	d1fa      	bne.n	40155e <init_gmac_ethernet+0xa>

	// Enable GMAC clock
	pmc_enable_periph_clk(ID_GMAC);
  401568:	2027      	movs	r0, #39	; 0x27
  40156a:	4b1d      	ldr	r3, [pc, #116]	; (4015e0 <init_gmac_ethernet+0x8c>)
  40156c:	4798      	blx	r3

	// Fill in GMAC options
	gmac_option.uc_copy_all_frame = 0;
  40156e:	4a1d      	ldr	r2, [pc, #116]	; (4015e4 <init_gmac_ethernet+0x90>)
  401570:	2500      	movs	r5, #0
  401572:	7015      	strb	r5, [r2, #0]
	gmac_option.uc_no_boardcast = 0;
  401574:	7055      	strb	r5, [r2, #1]

	memcpy(gmac_option.uc_mac_addr, gs_uc_mac_address, sizeof(gs_uc_mac_address));
  401576:	4b1c      	ldr	r3, [pc, #112]	; (4015e8 <init_gmac_ethernet+0x94>)
  401578:	6818      	ldr	r0, [r3, #0]
  40157a:	f8c2 0002 	str.w	r0, [r2, #2]
  40157e:	889b      	ldrh	r3, [r3, #4]
  401580:	80d3      	strh	r3, [r2, #6]

	gs_gmac_dev.p_hw = GMAC;
  401582:	491a      	ldr	r1, [pc, #104]	; (4015ec <init_gmac_ethernet+0x98>)
  401584:	4c1a      	ldr	r4, [pc, #104]	; (4015f0 <init_gmac_ethernet+0x9c>)
  401586:	600c      	str	r4, [r1, #0]

	// Init GMAC driver structure
	gmac_dev_init(GMAC, &gs_gmac_dev, &gmac_option);
  401588:	4620      	mov	r0, r4
  40158a:	4b1a      	ldr	r3, [pc, #104]	; (4015f4 <init_gmac_ethernet+0xa0>)
  40158c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40158e:	2280      	movs	r2, #128	; 0x80
  401590:	4b19      	ldr	r3, [pc, #100]	; (4015f8 <init_gmac_ethernet+0xa4>)
  401592:	605a      	str	r2, [r3, #4]

	// Enable Interrupt
	NVIC_EnableIRQ(GMAC_IRQn);

	// Init MAC PHY driver
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz())
  401594:	4a19      	ldr	r2, [pc, #100]	; (4015fc <init_gmac_ethernet+0xa8>)
  401596:	4629      	mov	r1, r5
  401598:	4620      	mov	r0, r4
  40159a:	4b19      	ldr	r3, [pc, #100]	; (401600 <init_gmac_ethernet+0xac>)
  40159c:	4798      	blx	r3
  40159e:	b960      	cbnz	r0, 4015ba <init_gmac_ethernet+0x66>
		puts("PHY Initialize ERROR!\r");
		return 0;
	}

	// Auto Negotiate, work in RMII mode
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  4015a0:	2100      	movs	r1, #0
  4015a2:	4813      	ldr	r0, [pc, #76]	; (4015f0 <init_gmac_ethernet+0x9c>)
  4015a4:	4b17      	ldr	r3, [pc, #92]	; (401604 <init_gmac_ethernet+0xb0>)
  4015a6:	4798      	blx	r3
  4015a8:	b960      	cbnz	r0, 4015c4 <init_gmac_ethernet+0x70>
		puts("Auto Negotiate ERROR!\r");
		return 0;
	}

	// Establish ethernet link
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  4015aa:	2201      	movs	r2, #1
  4015ac:	2100      	movs	r1, #0
  4015ae:	4810      	ldr	r0, [pc, #64]	; (4015f0 <init_gmac_ethernet+0x9c>)
  4015b0:	4b15      	ldr	r3, [pc, #84]	; (401608 <init_gmac_ethernet+0xb4>)
  4015b2:	4798      	blx	r3
  4015b4:	b958      	cbnz	r0, 4015ce <init_gmac_ethernet+0x7a>
		puts("Set link ERROR!\r");
		return 0;
	}
	return 1;
  4015b6:	2001      	movs	r0, #1
}
  4015b8:	bd38      	pop	{r3, r4, r5, pc}
		puts("PHY Initialize ERROR!\r");
  4015ba:	4814      	ldr	r0, [pc, #80]	; (40160c <init_gmac_ethernet+0xb8>)
  4015bc:	4b14      	ldr	r3, [pc, #80]	; (401610 <init_gmac_ethernet+0xbc>)
  4015be:	4798      	blx	r3
		return 0;
  4015c0:	4628      	mov	r0, r5
  4015c2:	bd38      	pop	{r3, r4, r5, pc}
		puts("Auto Negotiate ERROR!\r");
  4015c4:	4813      	ldr	r0, [pc, #76]	; (401614 <init_gmac_ethernet+0xc0>)
  4015c6:	4b12      	ldr	r3, [pc, #72]	; (401610 <init_gmac_ethernet+0xbc>)
  4015c8:	4798      	blx	r3
		return 0;
  4015ca:	2000      	movs	r0, #0
  4015cc:	bd38      	pop	{r3, r4, r5, pc}
		puts("Set link ERROR!\r");
  4015ce:	4812      	ldr	r0, [pc, #72]	; (401618 <init_gmac_ethernet+0xc4>)
  4015d0:	4b0f      	ldr	r3, [pc, #60]	; (401610 <init_gmac_ethernet+0xbc>)
  4015d2:	4798      	blx	r3
		return 0;
  4015d4:	2000      	movs	r0, #0
  4015d6:	bd38      	pop	{r3, r4, r5, pc}
  4015d8:	02625a00 	.word	0x02625a00
  4015dc:	20404c04 	.word	0x20404c04
  4015e0:	00401255 	.word	0x00401255
  4015e4:	20404c08 	.word	0x20404c08
  4015e8:	2040001c 	.word	0x2040001c
  4015ec:	20404b10 	.word	0x20404b10
  4015f0:	40050000 	.word	0x40050000
  4015f4:	00400a31 	.word	0x00400a31
  4015f8:	e000e100 	.word	0xe000e100
  4015fc:	11e1a300 	.word	0x11e1a300
  401600:	004007cd 	.word	0x004007cd
  401604:	004005d1 	.word	0x004005d1
  401608:	004004dd 	.word	0x004004dd
  40160c:	00405518 	.word	0x00405518
  401610:	004029d9 	.word	0x004029d9
  401614:	00405530 	.word	0x00405530
  401618:	00405548 	.word	0x00405548

0040161c <display_artnet_packet>:
	p_ip_header->ip_dst[2], p_ip_header->ip_dst[3]);
	puts("\n\r----------------------------------------\r");
}

void display_artnet_packet(uint8_t *p_uc_data, uint32_t ul_size)
{
  40161c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40161e:	b087      	sub	sp, #28
  401620:	4605      	mov	r5, r0
	p_art_packet_t p_art_packet = (p_art_packet_t) (p_uc_data + ETH_HEADER_SIZE + ETH_IP_HEADER_SIZE + ICMP_HEADER_SIZE);
	
	printf("\n\r");
  401622:	481a      	ldr	r0, [pc, #104]	; (40168c <display_artnet_packet+0x70>)
  401624:	4c1a      	ldr	r4, [pc, #104]	; (401690 <display_artnet_packet+0x74>)
  401626:	47a0      	blx	r4
	printf("identifier: %c%c%c%c%c%c%c%c\n\r", (char)p_art_packet->art_id[0], (char)p_art_packet->art_id[1], (char)p_art_packet->art_id[2], (char)p_art_packet->art_id[3], (char)p_art_packet->art_id[4], (char)p_art_packet->art_id[5], (char)p_art_packet->art_id[6], (char)p_art_packet->art_id[7]);
  401628:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  40162c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
  401630:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  401634:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
  401638:	9004      	str	r0, [sp, #16]
  40163a:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
  40163e:	9003      	str	r0, [sp, #12]
  401640:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
  401644:	9002      	str	r0, [sp, #8]
  401646:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
  40164a:	9001      	str	r0, [sp, #4]
  40164c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
  401650:	9000      	str	r0, [sp, #0]
  401652:	4810      	ldr	r0, [pc, #64]	; (401694 <display_artnet_packet+0x78>)
  401654:	47a0      	blx	r4
	printf("Opcode: %d\n\r", p_art_packet->art_OpCode);
  401656:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  401658:	480f      	ldr	r0, [pc, #60]	; (401698 <display_artnet_packet+0x7c>)
  40165a:	47a0      	blx	r4
	printf("universe %d\n\n\r", p_art_packet->art_uninet);
  40165c:	8f29      	ldrh	r1, [r5, #56]	; 0x38
  40165e:	480f      	ldr	r0, [pc, #60]	; (40169c <display_artnet_packet+0x80>)
  401660:	47a0      	blx	r4
	
	if(p_art_packet->art_OpCode == 0x5000)
  401662:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
  401664:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
  401668:	d001      	beq.n	40166e <display_artnet_packet+0x52>
		for (long i = 0; i<512; i++)
		{
			printf("Channel %ld: %ld\n\r", i+1, p_art_packet->art_data[i]);
		}
	}
}
  40166a:	b007      	add	sp, #28
  40166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40166e:	353b      	adds	r5, #59	; 0x3b
	if(p_art_packet->art_OpCode == 0x5000)
  401670:	2400      	movs	r4, #0
			printf("Channel %ld: %ld\n\r", i+1, p_art_packet->art_data[i]);
  401672:	4f0b      	ldr	r7, [pc, #44]	; (4016a0 <display_artnet_packet+0x84>)
  401674:	4e06      	ldr	r6, [pc, #24]	; (401690 <display_artnet_packet+0x74>)
  401676:	3401      	adds	r4, #1
  401678:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  40167c:	4621      	mov	r1, r4
  40167e:	4638      	mov	r0, r7
  401680:	47b0      	blx	r6
		for (long i = 0; i<512; i++)
  401682:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  401686:	d1f6      	bne.n	401676 <display_artnet_packet+0x5a>
  401688:	e7ef      	b.n	40166a <display_artnet_packet+0x4e>
  40168a:	bf00      	nop
  40168c:	00405470 	.word	0x00405470
  401690:	00402745 	.word	0x00402745
  401694:	00405434 	.word	0x00405434
  401698:	00405454 	.word	0x00405454
  40169c:	00405464 	.word	0x00405464
  4016a0:	00405474 	.word	0x00405474

004016a4 <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  4016a4:	b508      	push	{r3, lr}
	gmac_handler(&gs_gmac_dev, GMAC_QUE_0);
  4016a6:	2100      	movs	r1, #0
  4016a8:	4801      	ldr	r0, [pc, #4]	; (4016b0 <GMAC_Handler+0xc>)
  4016aa:	4b02      	ldr	r3, [pc, #8]	; (4016b4 <GMAC_Handler+0x10>)
  4016ac:	4798      	blx	r3
  4016ae:	bd08      	pop	{r3, pc}
  4016b0:	20404b10 	.word	0x20404b10
  4016b4:	00400e35 	.word	0x00400e35

004016b8 <compareArray>:
}

char compareArray(uint8_t a[],uint8_t b[],uint8_t size)	
{
	int i;
	for(i=0;i<size;i++){
  4016b8:	b1a2      	cbz	r2, 4016e4 <compareArray+0x2c>
{
  4016ba:	b430      	push	{r4, r5}
  4016bc:	4614      	mov	r4, r2
		if(a[i]!=b[i])
  4016be:	7802      	ldrb	r2, [r0, #0]
  4016c0:	780b      	ldrb	r3, [r1, #0]
  4016c2:	429a      	cmp	r2, r3
  4016c4:	d110      	bne.n	4016e8 <compareArray+0x30>
  4016c6:	1c43      	adds	r3, r0, #1
  4016c8:	4420      	add	r0, r4
	for(i=0;i<size;i++){
  4016ca:	4283      	cmp	r3, r0
  4016cc:	d007      	beq.n	4016de <compareArray+0x26>
		if(a[i]!=b[i])
  4016ce:	f813 4b01 	ldrb.w	r4, [r3], #1
  4016d2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4016d6:	42a5      	cmp	r5, r4
  4016d8:	d0f7      	beq.n	4016ca <compareArray+0x12>
		return 1;
  4016da:	2001      	movs	r0, #1
  4016dc:	e000      	b.n	4016e0 <compareArray+0x28>
	}
	return 0;
  4016de:	2000      	movs	r0, #0
}
  4016e0:	bc30      	pop	{r4, r5}
  4016e2:	4770      	bx	lr
	return 0;
  4016e4:	2000      	movs	r0, #0
  4016e6:	4770      	bx	lr
		return 1;
  4016e8:	2001      	movs	r0, #1
  4016ea:	e7f9      	b.n	4016e0 <compareArray+0x28>

004016ec <gmac_process_eth_packet>:
{
  4016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016ee:	b087      	sub	sp, #28
  4016f0:	4604      	mov	r4, r0
  4016f2:	460d      	mov	r5, r1
	us_pkt_format = SWAP16(p_eth->et_protlen);
  4016f4:	8983      	ldrh	r3, [r0, #12]
  4016f6:	0a19      	lsrs	r1, r3, #8
  4016f8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4016fc:	b209      	sxth	r1, r1
	switch (us_pkt_format) {
  4016fe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  401702:	d054      	beq.n	4017ae <gmac_process_eth_packet+0xc2>
  401704:	f640 0306 	movw	r3, #2054	; 0x806
  401708:	4299      	cmp	r1, r3
  40170a:	f040 80df 	bne.w	4018cc <gmac_process_eth_packet+0x1e0>
	if (SWAP16(p_arp->ar_op) == ARP_REQUEST) {
  40170e:	8a82      	ldrh	r2, [r0, #20]
  401710:	0213      	lsls	r3, r2, #8
  401712:	b29b      	uxth	r3, r3
  401714:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  401718:	2b01      	cmp	r3, #1
  40171a:	f040 80db 	bne.w	4018d4 <gmac_process_eth_packet+0x1e8>
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  40171e:	7883      	ldrb	r3, [r0, #2]
  401720:	7842      	ldrb	r2, [r0, #1]
  401722:	7801      	ldrb	r1, [r0, #0]
  401724:	4f6c      	ldr	r7, [pc, #432]	; (4018d8 <gmac_process_eth_packet+0x1ec>)
  401726:	7940      	ldrb	r0, [r0, #5]
  401728:	9002      	str	r0, [sp, #8]
  40172a:	7920      	ldrb	r0, [r4, #4]
  40172c:	9001      	str	r0, [sp, #4]
  40172e:	78e0      	ldrb	r0, [r4, #3]
  401730:	9000      	str	r0, [sp, #0]
  401732:	4638      	mov	r0, r7
  401734:	4e69      	ldr	r6, [pc, #420]	; (4018dc <gmac_process_eth_packet+0x1f0>)
  401736:	47b0      	blx	r6
		printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  401738:	7a23      	ldrb	r3, [r4, #8]
  40173a:	79e2      	ldrb	r2, [r4, #7]
  40173c:	79a1      	ldrb	r1, [r4, #6]
  40173e:	7ae0      	ldrb	r0, [r4, #11]
  401740:	9002      	str	r0, [sp, #8]
  401742:	7aa0      	ldrb	r0, [r4, #10]
  401744:	9001      	str	r0, [sp, #4]
  401746:	7a60      	ldrb	r0, [r4, #9]
  401748:	9000      	str	r0, [sp, #0]
  40174a:	4638      	mov	r0, r7
  40174c:	47b0      	blx	r6
		p_arp->ar_op = SWAP16(ARP_REPLY);
  40174e:	2300      	movs	r3, #0
  401750:	7523      	strb	r3, [r4, #20]
  401752:	2302      	movs	r3, #2
  401754:	7563      	strb	r3, [r4, #21]
  401756:	1e63      	subs	r3, r4, #1
  401758:	4961      	ldr	r1, [pc, #388]	; (4018e0 <gmac_process_eth_packet+0x1f4>)
  40175a:	1d66      	adds	r6, r4, #5
			p_eth->et_dest[i] = p_eth->et_src[i];
  40175c:	79da      	ldrb	r2, [r3, #7]
  40175e:	f803 2f01 	strb.w	r2, [r3, #1]!
			p_eth->et_src[i] = gs_uc_mac_address[i];
  401762:	f811 2b01 	ldrb.w	r2, [r1], #1
  401766:	719a      	strb	r2, [r3, #6]
			p_arp->ar_tha[i] = p_arp->ar_sha[i];
  401768:	7d98      	ldrb	r0, [r3, #22]
  40176a:	f883 0020 	strb.w	r0, [r3, #32]
			p_arp->ar_sha[i] = gs_uc_mac_address[i];
  40176e:	759a      	strb	r2, [r3, #22]
		for (i = 0; i < 6; i++) {
  401770:	42b3      	cmp	r3, r6
  401772:	d1f3      	bne.n	40175c <gmac_process_eth_packet+0x70>
  401774:	f104 031b 	add.w	r3, r4, #27
  401778:	4a5a      	ldr	r2, [pc, #360]	; (4018e4 <gmac_process_eth_packet+0x1f8>)
  40177a:	f104 001f 	add.w	r0, r4, #31
			p_arp->ar_tpa[i] = p_arp->ar_spa[i];
  40177e:	7859      	ldrb	r1, [r3, #1]
  401780:	72d9      	strb	r1, [r3, #11]
			p_arp->ar_spa[i] = gs_uc_ip_address[i];
  401782:	f812 1b01 	ldrb.w	r1, [r2], #1
  401786:	f803 1f01 	strb.w	r1, [r3, #1]!
		for (i = 0; i < 4; i++) {
  40178a:	4283      	cmp	r3, r0
  40178c:	d1f7      	bne.n	40177e <gmac_process_eth_packet+0x92>
		ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data, ul_size, NULL);
  40178e:	2100      	movs	r1, #0
  401790:	9100      	str	r1, [sp, #0]
  401792:	462b      	mov	r3, r5
  401794:	4622      	mov	r2, r4
  401796:	4854      	ldr	r0, [pc, #336]	; (4018e8 <gmac_process_eth_packet+0x1fc>)
  401798:	4c54      	ldr	r4, [pc, #336]	; (4018ec <gmac_process_eth_packet+0x200>)
  40179a:	47a0      	blx	r4
		if (ul_rc != GMAC_OK) {
  40179c:	f010 0fff 	tst.w	r0, #255	; 0xff
  4017a0:	f000 8098 	beq.w	4018d4 <gmac_process_eth_packet+0x1e8>
			printf("E: ARP Send - 0x%x\n\r", ul_rc);
  4017a4:	b2c1      	uxtb	r1, r0
  4017a6:	4852      	ldr	r0, [pc, #328]	; (4018f0 <gmac_process_eth_packet+0x204>)
  4017a8:	4b4c      	ldr	r3, [pc, #304]	; (4018dc <gmac_process_eth_packet+0x1f0>)
  4017aa:	4798      	blx	r3
  4017ac:	e092      	b.n	4018d4 <gmac_process_eth_packet+0x1e8>
	if (ul_size > hdr_len)
  4017ae:	2d2a      	cmp	r5, #42	; 0x2a
  4017b0:	d911      	bls.n	4017d6 <gmac_process_eth_packet+0xea>
  4017b2:	f100 0329 	add.w	r3, r0, #41	; 0x29
  4017b6:	f10d 020f 	add.w	r2, sp, #15
  4017ba:	3031      	adds	r0, #49	; 0x31
			controle[i] = p_uc_data[hdr_len+i];
  4017bc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4017c0:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (i = 0; i < 8; i++)
  4017c4:	4283      	cmp	r3, r0
  4017c6:	d1f9      	bne.n	4017bc <gmac_process_eth_packet+0xd0>
		if (!compareArray(controle, artnet_id, 8))
  4017c8:	2208      	movs	r2, #8
  4017ca:	494a      	ldr	r1, [pc, #296]	; (4018f4 <gmac_process_eth_packet+0x208>)
  4017cc:	a804      	add	r0, sp, #16
  4017ce:	4b4a      	ldr	r3, [pc, #296]	; (4018f8 <gmac_process_eth_packet+0x20c>)
  4017d0:	4798      	blx	r3
  4017d2:	2800      	cmp	r0, #0
  4017d4:	d062      	beq.n	40189c <gmac_process_eth_packet+0x1b0>
	switch (p_ip_header->ip_p) {
  4017d6:	7de3      	ldrb	r3, [r4, #23]
  4017d8:	2b01      	cmp	r3, #1
  4017da:	d17b      	bne.n	4018d4 <gmac_process_eth_packet+0x1e8>
		if (p_icmp_echo->type == ICMP_ECHO_REQUEST) {
  4017dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4017e0:	2b08      	cmp	r3, #8
  4017e2:	d177      	bne.n	4018d4 <gmac_process_eth_packet+0x1e8>
	p_icmp_echo_header_t p_icmp_echo =
  4017e4:	f104 0522 	add.w	r5, r4, #34	; 0x22
			p_icmp_echo->type = ICMP_ECHO_REPLY;
  4017e8:	2300      	movs	r3, #0
  4017ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			p_icmp_echo->code = 0;
  4017ee:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			p_icmp_echo->cksum = 0;
  4017f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  4017f6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
			ul_icmp_len = (SWAP16(p_ip_header->ip_len) - ETH_IP_HEADER_SIZE);
  4017fa:	8a22      	ldrh	r2, [r4, #16]
  4017fc:	0213      	lsls	r3, r2, #8
  4017fe:	b29b      	uxth	r3, r3
  401800:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
  401804:	f1a3 0614 	sub.w	r6, r3, #20
			if (ul_icmp_len % 2) {
  401808:	f016 0f01 	tst.w	r6, #1
  40180c:	d003      	beq.n	401816 <gmac_process_eth_packet+0x12a>
				*((uint8_t *) p_icmp_echo + ul_icmp_len) = 0;
  40180e:	2200      	movs	r2, #0
  401810:	55aa      	strb	r2, [r5, r6]
				ul_icmp_len++;
  401812:	f1a3 0613 	sub.w	r6, r3, #19
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  401816:	0876      	lsrs	r6, r6, #1
  401818:	d056      	beq.n	4018c8 <gmac_process_eth_packet+0x1dc>
  40181a:	2200      	movs	r2, #0
  40181c:	4610      	mov	r0, r2
		ul_tmp += SWAP16(*p_buff);
  40181e:	f835 1b02 	ldrh.w	r1, [r5], #2
  401822:	020b      	lsls	r3, r1, #8
  401824:	b29b      	uxth	r3, r3
  401826:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
  40182a:	4418      	add	r0, r3
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  40182c:	3201      	adds	r2, #1
  40182e:	4296      	cmp	r6, r2
  401830:	d1f5      	bne.n	40181e <gmac_process_eth_packet+0x132>
	ul_tmp = (ul_tmp & 0xffff) + (ul_tmp >> 16);
  401832:	0c03      	lsrs	r3, r0, #16
  401834:	fa13 f380 	uxtah	r3, r3, r0
	return (uint16_t) (~ul_tmp);
  401838:	43db      	mvns	r3, r3
  40183a:	b29b      	uxth	r3, r3
			p_icmp_echo->cksum = SWAP16(
  40183c:	0a1a      	lsrs	r2, r3, #8
  40183e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  401842:	84a3      	strh	r3, [r4, #36]	; 0x24
  401844:	f104 0319 	add.w	r3, r4, #25
  401848:	4a26      	ldr	r2, [pc, #152]	; (4018e4 <gmac_process_eth_packet+0x1f8>)
  40184a:	f104 001d 	add.w	r0, r4, #29
				p_ip_header->ip_dst[i] =
  40184e:	7859      	ldrb	r1, [r3, #1]
  401850:	7159      	strb	r1, [r3, #5]
				p_ip_header->ip_src[i] = gs_uc_ip_address[i];
  401852:	f812 1b01 	ldrb.w	r1, [r2], #1
  401856:	f803 1f01 	strb.w	r1, [r3, #1]!
			for (i = 0; i < 4; i++) {
  40185a:	4283      	cmp	r3, r0
  40185c:	d1f7      	bne.n	40184e <gmac_process_eth_packet+0x162>
  40185e:	1e62      	subs	r2, r4, #1
  401860:	491f      	ldr	r1, [pc, #124]	; (4018e0 <gmac_process_eth_packet+0x1f4>)
  401862:	1d65      	adds	r5, r4, #5
  401864:	462b      	mov	r3, r5
				p_eth->et_dest[i] = p_eth->et_src[i];
  401866:	7858      	ldrb	r0, [r3, #1]
  401868:	f802 0f01 	strb.w	r0, [r2, #1]!
				p_eth->et_src[i] = gs_uc_mac_address[i];
  40186c:	f811 0b01 	ldrb.w	r0, [r1], #1
  401870:	f803 0f01 	strb.w	r0, [r3, #1]!
			for (i = 0; i < 6; i++) {
  401874:	42aa      	cmp	r2, r5
  401876:	d1f6      	bne.n	401866 <gmac_process_eth_packet+0x17a>
					SWAP16(p_ip_header->ip_len) + 14, NULL);
  401878:	8a22      	ldrh	r2, [r4, #16]
  40187a:	0213      	lsls	r3, r2, #8
  40187c:	b29b      	uxth	r3, r3
  40187e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
			ul_rc = gmac_dev_write(&gs_gmac_dev, GMAC_QUE_0, p_uc_data,
  401882:	2100      	movs	r1, #0
  401884:	9100      	str	r1, [sp, #0]
  401886:	330e      	adds	r3, #14
  401888:	4622      	mov	r2, r4
  40188a:	4817      	ldr	r0, [pc, #92]	; (4018e8 <gmac_process_eth_packet+0x1fc>)
  40188c:	4c17      	ldr	r4, [pc, #92]	; (4018ec <gmac_process_eth_packet+0x200>)
  40188e:	47a0      	blx	r4
			if (ul_rc != GMAC_OK) {
  401890:	4601      	mov	r1, r0
  401892:	b1f8      	cbz	r0, 4018d4 <gmac_process_eth_packet+0x1e8>
				printf("E: ICMP Send - 0x%x\n\r", ul_rc);
  401894:	4819      	ldr	r0, [pc, #100]	; (4018fc <gmac_process_eth_packet+0x210>)
  401896:	4b11      	ldr	r3, [pc, #68]	; (4018dc <gmac_process_eth_packet+0x1f0>)
  401898:	4798      	blx	r3
  40189a:	e01b      	b.n	4018d4 <gmac_process_eth_packet+0x1e8>
			puts("Art-Net detected");
  40189c:	4818      	ldr	r0, [pc, #96]	; (401900 <gmac_process_eth_packet+0x214>)
  40189e:	4b19      	ldr	r3, [pc, #100]	; (401904 <gmac_process_eth_packet+0x218>)
  4018a0:	4798      	blx	r3
			display_artnet_packet(p_uc_data, ul_size);
  4018a2:	4629      	mov	r1, r5
  4018a4:	4620      	mov	r0, r4
  4018a6:	4b18      	ldr	r3, [pc, #96]	; (401908 <gmac_process_eth_packet+0x21c>)
  4018a8:	4798      	blx	r3
	if(p_art_packet->art_OpCode == 0x5000)
  4018aa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  4018ac:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
  4018b0:	d191      	bne.n	4017d6 <gmac_process_eth_packet+0xea>
		memcpy(artnet_data_buffer, p_art_packet->art_data, sizeof(artnet_data_buffer));
  4018b2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4018b6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  4018ba:	4814      	ldr	r0, [pc, #80]	; (40190c <gmac_process_eth_packet+0x220>)
  4018bc:	4b14      	ldr	r3, [pc, #80]	; (401910 <gmac_process_eth_packet+0x224>)
  4018be:	4798      	blx	r3
		puts("DMX saved");
  4018c0:	4814      	ldr	r0, [pc, #80]	; (401914 <gmac_process_eth_packet+0x228>)
  4018c2:	4b10      	ldr	r3, [pc, #64]	; (401904 <gmac_process_eth_packet+0x218>)
  4018c4:	4798      	blx	r3
  4018c6:	e786      	b.n	4017d6 <gmac_process_eth_packet+0xea>
	for (i = 0, ul_tmp = 0; i < ul_len; i++, p_buff++) {
  4018c8:	4630      	mov	r0, r6
  4018ca:	e7b2      	b.n	401832 <gmac_process_eth_packet+0x146>
		printf("=== Default w_pkt_format= 0x%X===\n\r", us_pkt_format);
  4018cc:	b289      	uxth	r1, r1
  4018ce:	4812      	ldr	r0, [pc, #72]	; (401918 <gmac_process_eth_packet+0x22c>)
  4018d0:	4b02      	ldr	r3, [pc, #8]	; (4018dc <gmac_process_eth_packet+0x1f0>)
  4018d2:	4798      	blx	r3
}
  4018d4:	b007      	add	sp, #28
  4018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018d8:	00405488 	.word	0x00405488
  4018dc:	00402745 	.word	0x00402745
  4018e0:	2040001c 	.word	0x2040001c
  4018e4:	20400018 	.word	0x20400018
  4018e8:	20404b10 	.word	0x20404b10
  4018ec:	00400d59 	.word	0x00400d59
  4018f0:	004054a4 	.word	0x004054a4
  4018f4:	20400010 	.word	0x20400010
  4018f8:	004016b9 	.word	0x004016b9
  4018fc:	004054dc 	.word	0x004054dc
  401900:	004054bc 	.word	0x004054bc
  401904:	004029d9 	.word	0x004029d9
  401908:	0040161d 	.word	0x0040161d
  40190c:	20404910 	.word	0x20404910
  401910:	0040276d 	.word	0x0040276d
  401914:	004054d0 	.word	0x004054d0
  401918:	004054f4 	.word	0x004054f4

0040191c <proces_artnet_packet>:

void proces_artnet_packet(uint8_t *p_uc_data, uint32_t ul_size)
{
  40191c:	b508      	push	{r3, lr}
	gmac_process_eth_packet(p_uc_data, ul_size);
  40191e:	4b01      	ldr	r3, [pc, #4]	; (401924 <proces_artnet_packet+0x8>)
  401920:	4798      	blx	r3
  401922:	bd08      	pop	{r3, pc}
  401924:	004016ed 	.word	0x004016ed

00401928 <print_address_register>:
{
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
}

static void print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  401928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40192c:	b083      	sub	sp, #12
  40192e:	af00      	add	r7, sp, #0
  401930:	460e      	mov	r6, r1
  401932:	4614      	mov	r4, r2
	printf("%s\t", name);
  401934:	4601      	mov	r1, r0
  401936:	4829      	ldr	r0, [pc, #164]	; (4019dc <print_address_register+0xb4>)
  401938:	4b29      	ldr	r3, [pc, #164]	; (4019e0 <print_address_register+0xb8>)
  40193a:	4798      	blx	r3
	while(qty--){
  40193c:	2c00      	cmp	r4, #0
  40193e:	d045      	beq.n	4019cc <print_address_register+0xa4>
  401940:	4434      	add	r4, r6
  401942:	fa5f fa84 	uxtb.w	sl, r4
		uint8_t buffer[addr_width];
  401946:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4019f0 <print_address_register+0xc8>
	while(qty--){
  40194a:	f8c7 d004 	str.w	sp, [r7, #4]
		uint8_t buffer[addr_width];
  40194e:	f89b 4000 	ldrb.w	r4, [fp]
  401952:	1de3      	adds	r3, r4, #7
  401954:	f023 0307 	bic.w	r3, r3, #7
  401958:	ebad 0d03 	sub.w	sp, sp, r3
  40195c:	466d      	mov	r5, sp
		read_register(reg++, buffer, sizeof(buffer));
  40195e:	f106 0901 	add.w	r9, r6, #1
  401962:	fa5f f989 	uxtb.w	r9, r9
{
  401966:	f8c7 d000 	str.w	sp, [r7]
	uint8_t status[len+1];
  40196a:	f104 0308 	add.w	r3, r4, #8
  40196e:	f023 0307 	bic.w	r3, r3, #7
  401972:	ebad 0d03 	sub.w	sp, sp, r3
	status[0] = R_REGISTER | (REGISTER_MASK & reg);
  401976:	f006 061f 	and.w	r6, r6, #31
  40197a:	f88d 6000 	strb.w	r6, [sp]
	spi_master_transfer(&status, sizeof(status));
  40197e:	1c61      	adds	r1, r4, #1
  401980:	4668      	mov	r0, sp
  401982:	4b18      	ldr	r3, [pc, #96]	; (4019e4 <print_address_register+0xbc>)
  401984:	4798      	blx	r3
	for (uint8_t i = 0; i< len; i++)
  401986:	b15c      	cbz	r4, 4019a0 <print_address_register+0x78>
  401988:	f10d 0801 	add.w	r8, sp, #1
  40198c:	1e6b      	subs	r3, r5, #1
  40198e:	1e61      	subs	r1, r4, #1
  401990:	fa55 f181 	uxtab	r1, r5, r1
		buf[i] = status[i+1];
  401994:	f818 2b01 	ldrb.w	r2, [r8], #1
  401998:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint8_t i = 0; i< len; i++)
  40199c:	428b      	cmp	r3, r1
  40199e:	d1f9      	bne.n	401994 <print_address_register+0x6c>
  4019a0:	f8d7 d000 	ldr.w	sp, [r7]
		
		printf(" 0x");
  4019a4:	4810      	ldr	r0, [pc, #64]	; (4019e8 <print_address_register+0xc0>)
  4019a6:	4b0e      	ldr	r3, [pc, #56]	; (4019e0 <print_address_register+0xb8>)
  4019a8:	4798      	blx	r3
		uint8_t* bufptr = buffer + sizeof(buffer);
		while(--bufptr >= buffer){
  4019aa:	3c01      	subs	r4, #1
  4019ac:	192c      	adds	r4, r5, r4
  4019ae:	d208      	bcs.n	4019c2 <print_address_register+0x9a>
			printf("%02x", *bufptr);
  4019b0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4019f4 <print_address_register+0xcc>
  4019b4:	4e0a      	ldr	r6, [pc, #40]	; (4019e0 <print_address_register+0xb8>)
  4019b6:	f814 1901 	ldrb.w	r1, [r4], #-1
  4019ba:	4640      	mov	r0, r8
  4019bc:	47b0      	blx	r6
		while(--bufptr >= buffer){
  4019be:	42a5      	cmp	r5, r4
  4019c0:	d9f9      	bls.n	4019b6 <print_address_register+0x8e>
  4019c2:	f8d7 d004 	ldr.w	sp, [r7, #4]
		read_register(reg++, buffer, sizeof(buffer));
  4019c6:	464e      	mov	r6, r9
	while(qty--){
  4019c8:	45d1      	cmp	r9, sl
  4019ca:	d1be      	bne.n	40194a <print_address_register+0x22>
		}
	}
	printf("\r\n");
  4019cc:	4807      	ldr	r0, [pc, #28]	; (4019ec <print_address_register+0xc4>)
  4019ce:	4b04      	ldr	r3, [pc, #16]	; (4019e0 <print_address_register+0xb8>)
  4019d0:	4798      	blx	r3
}
  4019d2:	370c      	adds	r7, #12
  4019d4:	46bd      	mov	sp, r7
  4019d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019da:	bf00      	nop
  4019dc:	0040568c 	.word	0x0040568c
  4019e0:	00402745 	.word	0x00402745
  4019e4:	00401d11 	.word	0x00401d11
  4019e8:	00405690 	.word	0x00405690
  4019ec:	00405660 	.word	0x00405660
  4019f0:	20404c10 	.word	0x20404c10
  4019f4:	00405694 	.word	0x00405694

004019f8 <nRF24_readRegister>:
{
  4019f8:	b500      	push	{lr}
  4019fa:	b083      	sub	sp, #12
	uint8_t cmd[2] = {R_REGISTER | (REGISTER_MASK & reg), 0xFF};
  4019fc:	f000 001f 	and.w	r0, r0, #31
  401a00:	f88d 0004 	strb.w	r0, [sp, #4]
  401a04:	23ff      	movs	r3, #255	; 0xff
  401a06:	f88d 3005 	strb.w	r3, [sp, #5]
	spi_master_transfer(&cmd, sizeof(cmd));
  401a0a:	2102      	movs	r1, #2
  401a0c:	a801      	add	r0, sp, #4
  401a0e:	4b03      	ldr	r3, [pc, #12]	; (401a1c <nRF24_readRegister+0x24>)
  401a10:	4798      	blx	r3
}
  401a12:	f89d 0005 	ldrb.w	r0, [sp, #5]
  401a16:	b003      	add	sp, #12
  401a18:	f85d fb04 	ldr.w	pc, [sp], #4
  401a1c:	00401d11 	.word	0x00401d11

00401a20 <print_byte_register>:

static void print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  401a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a24:	460d      	mov	r5, r1
  401a26:	4616      	mov	r6, r2
	printf("%s\t", name);
  401a28:	4601      	mov	r1, r0
  401a2a:	480d      	ldr	r0, [pc, #52]	; (401a60 <print_byte_register+0x40>)
  401a2c:	4b0d      	ldr	r3, [pc, #52]	; (401a64 <print_byte_register+0x44>)
  401a2e:	4798      	blx	r3
	while (qty--)
  401a30:	b186      	cbz	r6, 401a54 <print_byte_register+0x34>
  401a32:	442e      	add	r6, r5
  401a34:	b2f6      	uxtb	r6, r6
	{
		printf(" 0x%02x", nRF24_readRegister(reg++));
  401a36:	f8df 9034 	ldr.w	r9, [pc, #52]	; 401a6c <print_byte_register+0x4c>
  401a3a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401a70 <print_byte_register+0x50>
  401a3e:	4f09      	ldr	r7, [pc, #36]	; (401a64 <print_byte_register+0x44>)
  401a40:	1c6c      	adds	r4, r5, #1
  401a42:	b2e4      	uxtb	r4, r4
  401a44:	4628      	mov	r0, r5
  401a46:	47c8      	blx	r9
  401a48:	4601      	mov	r1, r0
  401a4a:	4640      	mov	r0, r8
  401a4c:	47b8      	blx	r7
  401a4e:	4625      	mov	r5, r4
	while (qty--)
  401a50:	42a6      	cmp	r6, r4
  401a52:	d1f5      	bne.n	401a40 <print_byte_register+0x20>
	}
	printf("\r\n");
  401a54:	4804      	ldr	r0, [pc, #16]	; (401a68 <print_byte_register+0x48>)
  401a56:	4b03      	ldr	r3, [pc, #12]	; (401a64 <print_byte_register+0x44>)
  401a58:	4798      	blx	r3
  401a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a5e:	bf00      	nop
  401a60:	0040568c 	.word	0x0040568c
  401a64:	00402745 	.word	0x00402745
  401a68:	00405660 	.word	0x00405660
  401a6c:	004019f9 	.word	0x004019f9
  401a70:	0040569c 	.word	0x0040569c

00401a74 <nRF24_getStatus>:
{
  401a74:	b500      	push	{lr}
  401a76:	b083      	sub	sp, #12
	cmd = RF24_NOP;
  401a78:	a802      	add	r0, sp, #8
  401a7a:	23ff      	movs	r3, #255	; 0xff
  401a7c:	f800 3d01 	strb.w	r3, [r0, #-1]!
	spi_master_transfer(&cmd, sizeof(cmd));
  401a80:	2101      	movs	r1, #1
  401a82:	4b03      	ldr	r3, [pc, #12]	; (401a90 <nRF24_getStatus+0x1c>)
  401a84:	4798      	blx	r3
}
  401a86:	f89d 0007 	ldrb.w	r0, [sp, #7]
  401a8a:	b003      	add	sp, #12
  401a8c:	f85d fb04 	ldr.w	pc, [sp], #4
  401a90:	00401d11 	.word	0x00401d11

00401a94 <getDataRate>:
{
  401a94:	b508      	push	{r3, lr}
	uint8_t dr = nRF24_readRegister(RF_SETUP) & ((1<<RF_DR_LOW) | (1<<RF_DR_HIGH));
  401a96:	2006      	movs	r0, #6
  401a98:	4b04      	ldr	r3, [pc, #16]	; (401aac <getDataRate+0x18>)
  401a9a:	4798      	blx	r3
	if (dr == (1<<RF_DR_HIGH)) {
  401a9c:	f000 0028 	and.w	r0, r0, #40	; 0x28
}
  401aa0:	2808      	cmp	r0, #8
  401aa2:	bf14      	ite	ne
  401aa4:	2000      	movne	r0, #0
  401aa6:	2001      	moveq	r0, #1
  401aa8:	bd08      	pop	{r3, pc}
  401aaa:	bf00      	nop
  401aac:	004019f9 	.word	0x004019f9

00401ab0 <getCRCLength>:
{
  401ab0:	b538      	push	{r3, r4, r5, lr}
	uint8_t config = nRF24_readRegister(NRF_CONFIG) & ((1<<CRCO) | (1<<EN_CRC));
  401ab2:	2000      	movs	r0, #0
  401ab4:	4d08      	ldr	r5, [pc, #32]	; (401ad8 <getCRCLength+0x28>)
  401ab6:	47a8      	blx	r5
  401ab8:	4604      	mov	r4, r0
	uint8_t AA = nRF24_readRegister(EN_AA);
  401aba:	2001      	movs	r0, #1
  401abc:	47a8      	blx	r5
    if (config & (1<<EN_CRC) || AA) {
  401abe:	f014 0f08 	tst.w	r4, #8
  401ac2:	d102      	bne.n	401aca <getCRCLength+0x1a>
  401ac4:	b908      	cbnz	r0, 401aca <getCRCLength+0x1a>
	rf24_crclength_e result = RF24_CRC_DISABLED;
  401ac6:	2000      	movs	r0, #0
}
  401ac8:	bd38      	pop	{r3, r4, r5, pc}
	    if (config & (1<<CRCO)) {
  401aca:	f004 0404 	and.w	r4, r4, #4
		    result = RF24_CRC_8;
  401ace:	2c00      	cmp	r4, #0
  401ad0:	bf14      	ite	ne
  401ad2:	2002      	movne	r0, #2
  401ad4:	2001      	moveq	r0, #1
  401ad6:	bd38      	pop	{r3, r4, r5, pc}
  401ad8:	004019f9 	.word	0x004019f9

00401adc <nRF24_getPALevel>:
{
  401adc:	b508      	push	{r3, lr}
	return (nRF24_readRegister(RF_SETUP) & (1<<(RF_PWR_LOW) | (1<<RF_PWR_HIGH))) >> 1;
  401ade:	2006      	movs	r0, #6
  401ae0:	4b02      	ldr	r3, [pc, #8]	; (401aec <nRF24_getPALevel+0x10>)
  401ae2:	4798      	blx	r3
}
  401ae4:	f3c0 0041 	ubfx	r0, r0, #1, #2
  401ae8:	bd08      	pop	{r3, pc}
  401aea:	bf00      	nop
  401aec:	004019f9 	.word	0x004019f9

00401af0 <printDetails>:
}

void printDetails(void)
{
  401af0:	b570      	push	{r4, r5, r6, lr}
  401af2:	b084      	sub	sp, #16
	printf("SPI Speed\t = %ld MHz\r\n",gs_ul_spi_clock/1000000);
  401af4:	4b31      	ldr	r3, [pc, #196]	; (401bbc <printDetails+0xcc>)
  401af6:	6819      	ldr	r1, [r3, #0]
  401af8:	4b31      	ldr	r3, [pc, #196]	; (401bc0 <printDetails+0xd0>)
  401afa:	fba3 3101 	umull	r3, r1, r3, r1
  401afe:	0c89      	lsrs	r1, r1, #18
  401b00:	4830      	ldr	r0, [pc, #192]	; (401bc4 <printDetails+0xd4>)
  401b02:	4d31      	ldr	r5, [pc, #196]	; (401bc8 <printDetails+0xd8>)
  401b04:	47a8      	blx	r5
	print_status(nRF24_getStatus());
  401b06:	4b31      	ldr	r3, [pc, #196]	; (401bcc <printDetails+0xdc>)
  401b08:	4798      	blx	r3
  401b0a:	4601      	mov	r1, r0
	printf("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n", status, (status & (1<<RX_DR)) ? 1 : 0, (status & (1<<TX_DS)) ? 1 : 0, (status & (1<<MAX_RT)) ? 1 : 0, (status & (1<<RX_P_NO)) ? 1 : 0, (status & (1<<TX_FULL)) ? 1 : 0);
  401b0c:	f000 0301 	and.w	r3, r0, #1
  401b10:	9302      	str	r3, [sp, #8]
  401b12:	f3c0 0340 	ubfx	r3, r0, #1, #1
  401b16:	9301      	str	r3, [sp, #4]
  401b18:	f3c0 1300 	ubfx	r3, r0, #4, #1
  401b1c:	9300      	str	r3, [sp, #0]
  401b1e:	f3c0 1340 	ubfx	r3, r0, #5, #1
  401b22:	f3c0 1280 	ubfx	r2, r0, #6, #1
  401b26:	482a      	ldr	r0, [pc, #168]	; (401bd0 <printDetails+0xe0>)
  401b28:	47a8      	blx	r5
	print_address_register("RX_ADDR_P0-1", RX_ADDR_P0, 2);
  401b2a:	2202      	movs	r2, #2
  401b2c:	210a      	movs	r1, #10
  401b2e:	4829      	ldr	r0, [pc, #164]	; (401bd4 <printDetails+0xe4>)
  401b30:	4e29      	ldr	r6, [pc, #164]	; (401bd8 <printDetails+0xe8>)
  401b32:	47b0      	blx	r6
	print_byte_register("RX_ADDR_P2-5", RX_ADDR_P2, 4);
  401b34:	2204      	movs	r2, #4
  401b36:	210c      	movs	r1, #12
  401b38:	4828      	ldr	r0, [pc, #160]	; (401bdc <printDetails+0xec>)
  401b3a:	4c29      	ldr	r4, [pc, #164]	; (401be0 <printDetails+0xf0>)
  401b3c:	47a0      	blx	r4
	print_address_register("TX_ADDR\t", TX_ADDR, 1);
  401b3e:	2201      	movs	r2, #1
  401b40:	2110      	movs	r1, #16
  401b42:	4828      	ldr	r0, [pc, #160]	; (401be4 <printDetails+0xf4>)
  401b44:	47b0      	blx	r6

	print_byte_register("RX_PW_P0-5", RX_PW_P0, 6);
  401b46:	2206      	movs	r2, #6
  401b48:	2111      	movs	r1, #17
  401b4a:	4827      	ldr	r0, [pc, #156]	; (401be8 <printDetails+0xf8>)
  401b4c:	47a0      	blx	r4
	print_byte_register("SETUP_AW", SETUP_AW, 1);
  401b4e:	2201      	movs	r2, #1
  401b50:	2103      	movs	r1, #3
  401b52:	4826      	ldr	r0, [pc, #152]	; (401bec <printDetails+0xfc>)
  401b54:	47a0      	blx	r4
	print_byte_register("EN_AA\t", EN_AA, 1);
  401b56:	2201      	movs	r2, #1
  401b58:	4611      	mov	r1, r2
  401b5a:	4825      	ldr	r0, [pc, #148]	; (401bf0 <printDetails+0x100>)
  401b5c:	47a0      	blx	r4
	print_byte_register("EN_RXADDR", EN_RXADDR, 1);
  401b5e:	2201      	movs	r2, #1
  401b60:	2102      	movs	r1, #2
  401b62:	4824      	ldr	r0, [pc, #144]	; (401bf4 <printDetails+0x104>)
  401b64:	47a0      	blx	r4
	print_byte_register("RF_CH\t", RF_CH, 1);
  401b66:	2201      	movs	r2, #1
  401b68:	2105      	movs	r1, #5
  401b6a:	4823      	ldr	r0, [pc, #140]	; (401bf8 <printDetails+0x108>)
  401b6c:	47a0      	blx	r4
	print_byte_register("RF_SETUP", RF_SETUP, 1);
  401b6e:	2201      	movs	r2, #1
  401b70:	2106      	movs	r1, #6
  401b72:	4822      	ldr	r0, [pc, #136]	; (401bfc <printDetails+0x10c>)
  401b74:	47a0      	blx	r4
	print_byte_register("CONFIG\t", NRF_CONFIG, 1);
  401b76:	2201      	movs	r2, #1
  401b78:	2100      	movs	r1, #0
  401b7a:	4821      	ldr	r0, [pc, #132]	; (401c00 <printDetails+0x110>)
  401b7c:	47a0      	blx	r4
	print_byte_register("DYNPD/FEATURE", DYNPD, 2);
  401b7e:	2202      	movs	r2, #2
  401b80:	211c      	movs	r1, #28
  401b82:	4820      	ldr	r0, [pc, #128]	; (401c04 <printDetails+0x114>)
  401b84:	47a0      	blx	r4
	
	printf("Data Rate\t = %s\r\n", rf24_datarate_e_str_P[getDataRate()]);
  401b86:	4b20      	ldr	r3, [pc, #128]	; (401c08 <printDetails+0x118>)
  401b88:	4798      	blx	r3
  401b8a:	4b20      	ldr	r3, [pc, #128]	; (401c0c <printDetails+0x11c>)
  401b8c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401b90:	481f      	ldr	r0, [pc, #124]	; (401c10 <printDetails+0x120>)
  401b92:	47a8      	blx	r5
	printf("Model\t\t = %s\r\n", rf24_model_e_str_P[isPVariant()]);
  401b94:	491f      	ldr	r1, [pc, #124]	; (401c14 <printDetails+0x124>)
  401b96:	4820      	ldr	r0, [pc, #128]	; (401c18 <printDetails+0x128>)
  401b98:	47a8      	blx	r5
	printf("CRC Length\t = %s\r\n", rf24_crclength_e_str_P[getCRCLength()]);
  401b9a:	4b20      	ldr	r3, [pc, #128]	; (401c1c <printDetails+0x12c>)
  401b9c:	4798      	blx	r3
  401b9e:	4b20      	ldr	r3, [pc, #128]	; (401c20 <printDetails+0x130>)
  401ba0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401ba4:	481f      	ldr	r0, [pc, #124]	; (401c24 <printDetails+0x134>)
  401ba6:	47a8      	blx	r5
	printf("PA Power\t = %s\r\n", rf24_pa_dbm_e_str_P[nRF24_getPALevel()]);
  401ba8:	4b1f      	ldr	r3, [pc, #124]	; (401c28 <printDetails+0x138>)
  401baa:	4798      	blx	r3
  401bac:	4b1f      	ldr	r3, [pc, #124]	; (401c2c <printDetails+0x13c>)
  401bae:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401bb2:	481f      	ldr	r0, [pc, #124]	; (401c30 <printDetails+0x140>)
  401bb4:	47a8      	blx	r5
}
  401bb6:	b004      	add	sp, #16
  401bb8:	bd70      	pop	{r4, r5, r6, pc}
  401bba:	bf00      	nop
  401bbc:	20400024 	.word	0x20400024
  401bc0:	431bde83 	.word	0x431bde83
  401bc4:	0040555c 	.word	0x0040555c
  401bc8:	00402745 	.word	0x00402745
  401bcc:	00401a75 	.word	0x00401a75
  401bd0:	00405574 	.word	0x00405574
  401bd4:	004055bc 	.word	0x004055bc
  401bd8:	00401929 	.word	0x00401929
  401bdc:	004055cc 	.word	0x004055cc
  401be0:	00401a21 	.word	0x00401a21
  401be4:	004055dc 	.word	0x004055dc
  401be8:	004055e8 	.word	0x004055e8
  401bec:	004055f4 	.word	0x004055f4
  401bf0:	00405600 	.word	0x00405600
  401bf4:	00405608 	.word	0x00405608
  401bf8:	00405614 	.word	0x00405614
  401bfc:	0040561c 	.word	0x0040561c
  401c00:	00405628 	.word	0x00405628
  401c04:	00405630 	.word	0x00405630
  401c08:	00401a95 	.word	0x00401a95
  401c0c:	004056e4 	.word	0x004056e4
  401c10:	00405640 	.word	0x00405640
  401c14:	004056f0 	.word	0x004056f0
  401c18:	00405654 	.word	0x00405654
  401c1c:	00401ab1 	.word	0x00401ab1
  401c20:	004056c0 	.word	0x004056c0
  401c24:	00405664 	.word	0x00405664
  401c28:	00401add 	.word	0x00401add
  401c2c:	0040571c 	.word	0x0040571c
  401c30:	00405678 	.word	0x00405678

00401c34 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
void spi_master_initialize(void)
{	
  401c34:	b570      	push	{r4, r5, r6, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c36:	4b27      	ldr	r3, [pc, #156]	; (401cd4 <spi_master_initialize+0xa0>)
  401c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401c3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  401c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c48:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401c4c:	2500      	movs	r5, #0
  401c4e:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c52:	601a      	str	r2, [r3, #0]
	printf("Setting SPI clock #%lu ... \n\r", (unsigned long)gs_ul_spi_clock);
  401c54:	4e20      	ldr	r6, [pc, #128]	; (401cd8 <spi_master_initialize+0xa4>)
  401c56:	6831      	ldr	r1, [r6, #0]
  401c58:	4820      	ldr	r0, [pc, #128]	; (401cdc <spi_master_initialize+0xa8>)
  401c5a:	4b21      	ldr	r3, [pc, #132]	; (401ce0 <spi_master_initialize+0xac>)
  401c5c:	4798      	blx	r3
	spi_set_clock_configuration(gs_ul_spi_clock);
	puts("-I- Initialize SPI as master\r");
  401c5e:	4821      	ldr	r0, [pc, #132]	; (401ce4 <spi_master_initialize+0xb0>)
  401c60:	4b21      	ldr	r3, [pc, #132]	; (401ce8 <spi_master_initialize+0xb4>)
  401c62:	4798      	blx	r3
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
  401c64:	4c21      	ldr	r4, [pc, #132]	; (401cec <spi_master_initialize+0xb8>)
  401c66:	4620      	mov	r0, r4
  401c68:	4b21      	ldr	r3, [pc, #132]	; (401cf0 <spi_master_initialize+0xbc>)
  401c6a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401c6c:	2302      	movs	r3, #2
  401c6e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401c70:	2380      	movs	r3, #128	; 0x80
  401c72:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  401c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401c78:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401c7a:	6863      	ldr	r3, [r4, #4]
  401c7c:	f043 0301 	orr.w	r3, r3, #1
  401c80:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401c82:	6863      	ldr	r3, [r4, #4]
  401c84:	f043 0310 	orr.w	r3, r3, #16
  401c88:	6063      	str	r3, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_PCS);
  401c8a:	210d      	movs	r1, #13
  401c8c:	4620      	mov	r0, r4
  401c8e:	4b19      	ldr	r3, [pc, #100]	; (401cf4 <spi_master_initialize+0xc0>)
  401c90:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  401c92:	462a      	mov	r2, r5
  401c94:	2101      	movs	r1, #1
  401c96:	4620      	mov	r0, r4
  401c98:	4b17      	ldr	r3, [pc, #92]	; (401cf8 <spi_master_initialize+0xc4>)
  401c9a:	4798      	blx	r3
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
  401c9c:	2201      	movs	r2, #1
  401c9e:	4611      	mov	r1, r2
  401ca0:	4620      	mov	r0, r4
  401ca2:	4b16      	ldr	r3, [pc, #88]	; (401cfc <spi_master_initialize+0xc8>)
  401ca4:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL,
  401ca6:	462a      	mov	r2, r5
  401ca8:	2101      	movs	r1, #1
  401caa:	4620      	mov	r0, r4
  401cac:	4b14      	ldr	r3, [pc, #80]	; (401d00 <spi_master_initialize+0xcc>)
  401cae:	4798      	blx	r3
	SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
	(sysclk_get_peripheral_hz() / gs_ul_spi_clock));
  401cb0:	6833      	ldr	r3, [r6, #0]
  401cb2:	4a14      	ldr	r2, [pc, #80]	; (401d04 <spi_master_initialize+0xd0>)
  401cb4:	fbb2 f2f3 	udiv	r2, r2, r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL,
  401cb8:	b2d2      	uxtb	r2, r2
  401cba:	2101      	movs	r1, #1
  401cbc:	4620      	mov	r0, r4
  401cbe:	4b12      	ldr	r3, [pc, #72]	; (401d08 <spi_master_initialize+0xd4>)
  401cc0:	4798      	blx	r3
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS,
  401cc2:	2304      	movs	r3, #4
  401cc4:	2210      	movs	r2, #16
  401cc6:	2101      	movs	r1, #1
  401cc8:	4620      	mov	r0, r4
  401cca:	4d10      	ldr	r5, [pc, #64]	; (401d0c <spi_master_initialize+0xd8>)
  401ccc:	47a8      	blx	r5
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401cce:	2301      	movs	r3, #1
  401cd0:	6023      	str	r3, [r4, #0]
  401cd2:	bd70      	pop	{r4, r5, r6, pc}
  401cd4:	e000e100 	.word	0xe000e100
  401cd8:	20400024 	.word	0x20400024
  401cdc:	0040572c 	.word	0x0040572c
  401ce0:	00402745 	.word	0x00402745
  401ce4:	0040574c 	.word	0x0040574c
  401ce8:	004029d9 	.word	0x004029d9
  401cec:	40008000 	.word	0x40008000
  401cf0:	00401e25 	.word	0x00401e25
  401cf4:	00401e51 	.word	0x00401e51
  401cf8:	00401ecb 	.word	0x00401ecb
  401cfc:	00401ee9 	.word	0x00401ee9
  401d00:	00401f07 	.word	0x00401f07
  401d04:	08f0d180 	.word	0x08f0d180
  401d08:	00401f1b 	.word	0x00401f1b
  401d0c:	00401f43 	.word	0x00401f43

00401d10 <spi_master_transfer>:
 * \param size Size of the buffer.
 * 
 * \brief after function p_buf will contain the received SPI data  
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
  401d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401d14:	b083      	sub	sp, #12

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
  401d16:	b1d9      	cbz	r1, 401d50 <spi_master_transfer+0x40>
  401d18:	4688      	mov	r8, r1
  401d1a:	4605      	mov	r5, r0
  401d1c:	4480      	add	r8, r0
		spi_write(SPI0, p_buffer[i], 0, 0);
  401d1e:	4c0f      	ldr	r4, [pc, #60]	; (401d5c <spi_master_transfer+0x4c>)
  401d20:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401d6c <spi_master_transfer+0x5c>
		
		/* Wait transfer done. */
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
		spi_read(SPI0, &data, &uc_pcs);
  401d24:	4e0e      	ldr	r6, [pc, #56]	; (401d60 <spi_master_transfer+0x50>)
  401d26:	462f      	mov	r7, r5
		spi_write(SPI0, p_buffer[i], 0, 0);
  401d28:	2300      	movs	r3, #0
  401d2a:	461a      	mov	r2, r3
  401d2c:	7829      	ldrb	r1, [r5, #0]
  401d2e:	4620      	mov	r0, r4
  401d30:	47c8      	blx	r9
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  401d32:	6923      	ldr	r3, [r4, #16]
		while ((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
  401d34:	f013 0f01 	tst.w	r3, #1
  401d38:	d0fb      	beq.n	401d32 <spi_master_transfer+0x22>
		spi_read(SPI0, &data, &uc_pcs);
  401d3a:	f10d 0207 	add.w	r2, sp, #7
  401d3e:	4631      	mov	r1, r6
  401d40:	4620      	mov	r0, r4
  401d42:	4b08      	ldr	r3, [pc, #32]	; (401d64 <spi_master_transfer+0x54>)
  401d44:	4798      	blx	r3
		p_buffer[i] = data;
  401d46:	8833      	ldrh	r3, [r6, #0]
  401d48:	703b      	strb	r3, [r7, #0]
  401d4a:	3501      	adds	r5, #1
	for (i = 0; i < size; i++) {
  401d4c:	4545      	cmp	r5, r8
  401d4e:	d1ea      	bne.n	401d26 <spi_master_transfer+0x16>
	}
	delay_us(5);
  401d50:	20fd      	movs	r0, #253	; 0xfd
  401d52:	4b05      	ldr	r3, [pc, #20]	; (401d68 <spi_master_transfer+0x58>)
  401d54:	4798      	blx	r3
  401d56:	b003      	add	sp, #12
  401d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401d5c:	40008000 	.word	0x40008000
  401d60:	204042cc 	.word	0x204042cc
  401d64:	00401e67 	.word	0x00401e67
  401d68:	20400001 	.word	0x20400001
  401d6c:	00401e97 	.word	0x00401e97

00401d70 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401d70:	b410      	push	{r4}
  401d72:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401d74:	6884      	ldr	r4, [r0, #8]
  401d76:	f014 0f04 	tst.w	r4, #4
  401d7a:	d0fb      	beq.n	401d74 <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401d7c:	0492      	lsls	r2, r2, #18
  401d7e:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401d82:	4a11      	ldr	r2, [pc, #68]	; (401dc8 <gmac_phy_read+0x58>)
  401d84:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401d86:	05c9      	lsls	r1, r1, #23
  401d88:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401d8c:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401d8e:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401d90:	2200      	movs	r2, #0
  401d92:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401d94:	490d      	ldr	r1, [pc, #52]	; (401dcc <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401d96:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401d98:	f012 0f04 	tst.w	r2, #4
  401d9c:	d107      	bne.n	401dae <gmac_phy_read+0x3e>
		ul_retry_count++;
  401d9e:	9a01      	ldr	r2, [sp, #4]
  401da0:	3201      	adds	r2, #1
  401da2:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401da4:	9a01      	ldr	r2, [sp, #4]
  401da6:	428a      	cmp	r2, r1
  401da8:	d9f5      	bls.n	401d96 <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  401daa:	2001      	movs	r0, #1
  401dac:	e007      	b.n	401dbe <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401dae:	6882      	ldr	r2, [r0, #8]
  401db0:	f012 0f04 	tst.w	r2, #4
  401db4:	d0fb      	beq.n	401dae <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  401db6:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401db8:	b292      	uxth	r2, r2
  401dba:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401dbc:	2000      	movs	r0, #0
}
  401dbe:	b003      	add	sp, #12
  401dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dc4:	4770      	bx	lr
  401dc6:	bf00      	nop
  401dc8:	60020000 	.word	0x60020000
  401dcc:	000f423f 	.word	0x000f423f

00401dd0 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401dd0:	b410      	push	{r4}
  401dd2:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401dd4:	6884      	ldr	r4, [r0, #8]
  401dd6:	f014 0f04 	tst.w	r4, #4
  401dda:	d0fb      	beq.n	401dd4 <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  401ddc:	0492      	lsls	r2, r2, #18
  401dde:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  401de2:	4a0e      	ldr	r2, [pc, #56]	; (401e1c <gmac_phy_write+0x4c>)
  401de4:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  401de6:	05c9      	lsls	r1, r1, #23
  401de8:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  401dec:	430a      	orrs	r2, r1
  401dee:	b29b      	uxth	r3, r3
  401df0:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401df2:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  401df4:	2300      	movs	r3, #0
  401df6:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401df8:	4a09      	ldr	r2, [pc, #36]	; (401e20 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401dfa:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  401dfc:	f013 0f04 	tst.w	r3, #4
  401e00:	d107      	bne.n	401e12 <gmac_phy_write+0x42>
		ul_retry_count++;
  401e02:	9b01      	ldr	r3, [sp, #4]
  401e04:	3301      	adds	r3, #1
  401e06:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  401e08:	9b01      	ldr	r3, [sp, #4]
  401e0a:	4293      	cmp	r3, r2
  401e0c:	d9f5      	bls.n	401dfa <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  401e0e:	2001      	movs	r0, #1
  401e10:	e000      	b.n	401e14 <gmac_phy_write+0x44>
	return GMAC_OK;
  401e12:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  401e14:	b003      	add	sp, #12
  401e16:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e1a:	4770      	bx	lr
  401e1c:	50020000 	.word	0x50020000
  401e20:	000f423f 	.word	0x000f423f

00401e24 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401e24:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401e26:	4b07      	ldr	r3, [pc, #28]	; (401e44 <spi_enable_clock+0x20>)
  401e28:	4298      	cmp	r0, r3
  401e2a:	d003      	beq.n	401e34 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401e2c:	4b06      	ldr	r3, [pc, #24]	; (401e48 <spi_enable_clock+0x24>)
  401e2e:	4298      	cmp	r0, r3
  401e30:	d004      	beq.n	401e3c <spi_enable_clock+0x18>
  401e32:	bd08      	pop	{r3, pc}
  401e34:	2015      	movs	r0, #21
  401e36:	4b05      	ldr	r3, [pc, #20]	; (401e4c <spi_enable_clock+0x28>)
  401e38:	4798      	blx	r3
  401e3a:	bd08      	pop	{r3, pc}
  401e3c:	202a      	movs	r0, #42	; 0x2a
  401e3e:	4b03      	ldr	r3, [pc, #12]	; (401e4c <spi_enable_clock+0x28>)
  401e40:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401e42:	e7f6      	b.n	401e32 <spi_enable_clock+0xe>
  401e44:	40008000 	.word	0x40008000
  401e48:	40058000 	.word	0x40058000
  401e4c:	00401255 	.word	0x00401255

00401e50 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401e50:	6843      	ldr	r3, [r0, #4]
  401e52:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401e56:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401e58:	6843      	ldr	r3, [r0, #4]
  401e5a:	0409      	lsls	r1, r1, #16
  401e5c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401e60:	4319      	orrs	r1, r3
  401e62:	6041      	str	r1, [r0, #4]
  401e64:	4770      	bx	lr

00401e66 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  401e66:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  401e68:	f643 2399 	movw	r3, #15001	; 0x3a99
  401e6c:	6904      	ldr	r4, [r0, #16]
  401e6e:	f014 0f01 	tst.w	r4, #1
  401e72:	d103      	bne.n	401e7c <spi_read+0x16>
		if (!timeout--) {
  401e74:	3b01      	subs	r3, #1
  401e76:	d1f9      	bne.n	401e6c <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  401e78:	2001      	movs	r0, #1
  401e7a:	e009      	b.n	401e90 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  401e7c:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401e7e:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  401e80:	f010 0f02 	tst.w	r0, #2
  401e84:	d002      	beq.n	401e8c <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  401e86:	f3c3 4003 	ubfx	r0, r3, #16, #4
  401e8a:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  401e8c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  401e8e:	2000      	movs	r0, #0
}
  401e90:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e94:	4770      	bx	lr

00401e96 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401e96:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401e98:	f643 2499 	movw	r4, #15001	; 0x3a99
  401e9c:	6905      	ldr	r5, [r0, #16]
  401e9e:	f015 0f02 	tst.w	r5, #2
  401ea2:	d103      	bne.n	401eac <spi_write+0x16>
		if (!timeout--) {
  401ea4:	3c01      	subs	r4, #1
  401ea6:	d1f9      	bne.n	401e9c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401ea8:	2001      	movs	r0, #1
  401eaa:	e00c      	b.n	401ec6 <spi_write+0x30>
  401eac:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401eae:	f014 0f02 	tst.w	r4, #2
  401eb2:	d006      	beq.n	401ec2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401eb4:	0412      	lsls	r2, r2, #16
  401eb6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401eba:	4311      	orrs	r1, r2
		if (uc_last) {
  401ebc:	b10b      	cbz	r3, 401ec2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401ebe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401ec2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401ec4:	2000      	movs	r0, #0
}
  401ec6:	bc30      	pop	{r4, r5}
  401ec8:	4770      	bx	lr

00401eca <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401eca:	b932      	cbnz	r2, 401eda <spi_set_clock_polarity+0x10>
  401ecc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401ed0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ed2:	f023 0301 	bic.w	r3, r3, #1
  401ed6:	6303      	str	r3, [r0, #48]	; 0x30
  401ed8:	4770      	bx	lr
  401eda:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401ede:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ee0:	f043 0301 	orr.w	r3, r3, #1
  401ee4:	6303      	str	r3, [r0, #48]	; 0x30
  401ee6:	4770      	bx	lr

00401ee8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401ee8:	b932      	cbnz	r2, 401ef8 <spi_set_clock_phase+0x10>
  401eea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401eee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ef0:	f023 0302 	bic.w	r3, r3, #2
  401ef4:	6303      	str	r3, [r0, #48]	; 0x30
  401ef6:	4770      	bx	lr
  401ef8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401efc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401efe:	f043 0302 	orr.w	r3, r3, #2
  401f02:	6303      	str	r3, [r0, #48]	; 0x30
  401f04:	4770      	bx	lr

00401f06 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401f06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401f0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401f10:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401f12:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f14:	431a      	orrs	r2, r3
  401f16:	630a      	str	r2, [r1, #48]	; 0x30
  401f18:	4770      	bx	lr

00401f1a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401f1a:	b17a      	cbz	r2, 401f3c <spi_set_baudrate_div+0x22>
{
  401f1c:	b410      	push	{r4}
  401f1e:	4614      	mov	r4, r2
  401f20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401f24:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401f2a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401f2c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401f2e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401f32:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401f34:	2000      	movs	r0, #0
}
  401f36:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f3a:	4770      	bx	lr
        return -1;
  401f3c:	f04f 30ff 	mov.w	r0, #4294967295
  401f40:	4770      	bx	lr

00401f42 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401f42:	b410      	push	{r4}
  401f44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401f48:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401f4a:	b280      	uxth	r0, r0
  401f4c:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401f4e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401f50:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401f58:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f5e:	4770      	bx	lr

00401f60 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401f60:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401f62:	010b      	lsls	r3, r1, #4
  401f64:	4293      	cmp	r3, r2
  401f66:	d914      	bls.n	401f92 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f68:	00c9      	lsls	r1, r1, #3
  401f6a:	084b      	lsrs	r3, r1, #1
  401f6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401f70:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401f74:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f76:	1e5c      	subs	r4, r3, #1
  401f78:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401f7c:	428c      	cmp	r4, r1
  401f7e:	d901      	bls.n	401f84 <usart_set_async_baudrate+0x24>
		return 1;
  401f80:	2001      	movs	r0, #1
  401f82:	e017      	b.n	401fb4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401f84:	6841      	ldr	r1, [r0, #4]
  401f86:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401f8a:	6041      	str	r1, [r0, #4]
  401f8c:	e00c      	b.n	401fa8 <usart_set_async_baudrate+0x48>
		return 1;
  401f8e:	2001      	movs	r0, #1
  401f90:	e010      	b.n	401fb4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f92:	0859      	lsrs	r1, r3, #1
  401f94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401f98:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401f9c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f9e:	1e5c      	subs	r4, r3, #1
  401fa0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401fa4:	428c      	cmp	r4, r1
  401fa6:	d8f2      	bhi.n	401f8e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401fa8:	0412      	lsls	r2, r2, #16
  401faa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401fae:	431a      	orrs	r2, r3
  401fb0:	6202      	str	r2, [r0, #32]

	return 0;
  401fb2:	2000      	movs	r0, #0
}
  401fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401fb8:	4770      	bx	lr
	...

00401fbc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401fbc:	4b08      	ldr	r3, [pc, #32]	; (401fe0 <usart_reset+0x24>)
  401fbe:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401fc2:	2300      	movs	r3, #0
  401fc4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401fc6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401fc8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401fca:	2388      	movs	r3, #136	; 0x88
  401fcc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401fce:	2324      	movs	r3, #36	; 0x24
  401fd0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
  401fd6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401fd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401fdc:	6003      	str	r3, [r0, #0]
  401fde:	4770      	bx	lr
  401fe0:	55534100 	.word	0x55534100

00401fe4 <usart_init_rs232>:
{
  401fe4:	b570      	push	{r4, r5, r6, lr}
  401fe6:	4605      	mov	r5, r0
  401fe8:	460c      	mov	r4, r1
  401fea:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401fec:	4b0f      	ldr	r3, [pc, #60]	; (40202c <usart_init_rs232+0x48>)
  401fee:	4798      	blx	r3
	ul_reg_val = 0;
  401ff0:	2200      	movs	r2, #0
  401ff2:	4b0f      	ldr	r3, [pc, #60]	; (402030 <usart_init_rs232+0x4c>)
  401ff4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401ff6:	b1a4      	cbz	r4, 402022 <usart_init_rs232+0x3e>
  401ff8:	4632      	mov	r2, r6
  401ffa:	6821      	ldr	r1, [r4, #0]
  401ffc:	4628      	mov	r0, r5
  401ffe:	4b0d      	ldr	r3, [pc, #52]	; (402034 <usart_init_rs232+0x50>)
  402000:	4798      	blx	r3
  402002:	4602      	mov	r2, r0
  402004:	b978      	cbnz	r0, 402026 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402006:	6863      	ldr	r3, [r4, #4]
  402008:	68a1      	ldr	r1, [r4, #8]
  40200a:	430b      	orrs	r3, r1
  40200c:	6921      	ldr	r1, [r4, #16]
  40200e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402010:	68e1      	ldr	r1, [r4, #12]
  402012:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402014:	4906      	ldr	r1, [pc, #24]	; (402030 <usart_init_rs232+0x4c>)
  402016:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402018:	6869      	ldr	r1, [r5, #4]
  40201a:	430b      	orrs	r3, r1
  40201c:	606b      	str	r3, [r5, #4]
}
  40201e:	4610      	mov	r0, r2
  402020:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  402022:	2201      	movs	r2, #1
  402024:	e7fb      	b.n	40201e <usart_init_rs232+0x3a>
  402026:	2201      	movs	r2, #1
  402028:	e7f9      	b.n	40201e <usart_init_rs232+0x3a>
  40202a:	bf00      	nop
  40202c:	00401fbd 	.word	0x00401fbd
  402030:	204042d0 	.word	0x204042d0
  402034:	00401f61 	.word	0x00401f61

00402038 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402038:	2340      	movs	r3, #64	; 0x40
  40203a:	6003      	str	r3, [r0, #0]
  40203c:	4770      	bx	lr

0040203e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40203e:	2310      	movs	r3, #16
  402040:	6003      	str	r3, [r0, #0]
  402042:	4770      	bx	lr

00402044 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402044:	6943      	ldr	r3, [r0, #20]
  402046:	f013 0f02 	tst.w	r3, #2
  40204a:	d004      	beq.n	402056 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40204c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  402050:	61c1      	str	r1, [r0, #28]
	return 0;
  402052:	2000      	movs	r0, #0
  402054:	4770      	bx	lr
		return 1;
  402056:	2001      	movs	r0, #1
}
  402058:	4770      	bx	lr

0040205a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40205a:	6943      	ldr	r3, [r0, #20]
  40205c:	f013 0f01 	tst.w	r3, #1
  402060:	d005      	beq.n	40206e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402062:	6983      	ldr	r3, [r0, #24]
  402064:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402068:	600b      	str	r3, [r1, #0]
	return 0;
  40206a:	2000      	movs	r0, #0
  40206c:	4770      	bx	lr
		return 1;
  40206e:	2001      	movs	r0, #1
}
  402070:	4770      	bx	lr
	...

00402074 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402074:	3801      	subs	r0, #1
  402076:	2802      	cmp	r0, #2
  402078:	d815      	bhi.n	4020a6 <_write+0x32>
{
  40207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40207e:	460e      	mov	r6, r1
  402080:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  402082:	b19a      	cbz	r2, 4020ac <_write+0x38>
  402084:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402086:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4020c0 <_write+0x4c>
  40208a:	4f0c      	ldr	r7, [pc, #48]	; (4020bc <_write+0x48>)
  40208c:	f8d8 0000 	ldr.w	r0, [r8]
  402090:	f815 1b01 	ldrb.w	r1, [r5], #1
  402094:	683b      	ldr	r3, [r7, #0]
  402096:	4798      	blx	r3
  402098:	2800      	cmp	r0, #0
  40209a:	db0a      	blt.n	4020b2 <_write+0x3e>
  40209c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40209e:	3c01      	subs	r4, #1
  4020a0:	d1f4      	bne.n	40208c <_write+0x18>
  4020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4020a6:	f04f 30ff 	mov.w	r0, #4294967295
  4020aa:	4770      	bx	lr
	for (; len != 0; --len) {
  4020ac:	4610      	mov	r0, r2
  4020ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4020b2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4020b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020ba:	bf00      	nop
  4020bc:	20404c20 	.word	0x20404c20
  4020c0:	20404c24 	.word	0x20404c24

004020c4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4020c4:	6943      	ldr	r3, [r0, #20]
  4020c6:	f013 0f02 	tst.w	r3, #2
  4020ca:	d002      	beq.n	4020d2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4020cc:	61c1      	str	r1, [r0, #28]
	return 0;
  4020ce:	2000      	movs	r0, #0
  4020d0:	4770      	bx	lr
		return 1;
  4020d2:	2001      	movs	r0, #1
}
  4020d4:	4770      	bx	lr

004020d6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4020d6:	6943      	ldr	r3, [r0, #20]
  4020d8:	f013 0f01 	tst.w	r3, #1
  4020dc:	d003      	beq.n	4020e6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4020de:	6983      	ldr	r3, [r0, #24]
  4020e0:	700b      	strb	r3, [r1, #0]
	return 0;
  4020e2:	2000      	movs	r0, #0
  4020e4:	4770      	bx	lr
		return 1;
  4020e6:	2001      	movs	r0, #1
}
  4020e8:	4770      	bx	lr
	...

004020ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020ee:	b083      	sub	sp, #12
  4020f0:	4605      	mov	r5, r0
  4020f2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4020f4:	2300      	movs	r3, #0
  4020f6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4020f8:	4b2a      	ldr	r3, [pc, #168]	; (4021a4 <usart_serial_getchar+0xb8>)
  4020fa:	4298      	cmp	r0, r3
  4020fc:	d013      	beq.n	402126 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4020fe:	4b2a      	ldr	r3, [pc, #168]	; (4021a8 <usart_serial_getchar+0xbc>)
  402100:	4298      	cmp	r0, r3
  402102:	d018      	beq.n	402136 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402104:	4b29      	ldr	r3, [pc, #164]	; (4021ac <usart_serial_getchar+0xc0>)
  402106:	4298      	cmp	r0, r3
  402108:	d01d      	beq.n	402146 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40210a:	4b29      	ldr	r3, [pc, #164]	; (4021b0 <usart_serial_getchar+0xc4>)
  40210c:	429d      	cmp	r5, r3
  40210e:	d022      	beq.n	402156 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402110:	4b28      	ldr	r3, [pc, #160]	; (4021b4 <usart_serial_getchar+0xc8>)
  402112:	429d      	cmp	r5, r3
  402114:	d027      	beq.n	402166 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402116:	4b28      	ldr	r3, [pc, #160]	; (4021b8 <usart_serial_getchar+0xcc>)
  402118:	429d      	cmp	r5, r3
  40211a:	d02e      	beq.n	40217a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40211c:	4b27      	ldr	r3, [pc, #156]	; (4021bc <usart_serial_getchar+0xd0>)
  40211e:	429d      	cmp	r5, r3
  402120:	d035      	beq.n	40218e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402122:	b003      	add	sp, #12
  402124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402126:	461f      	mov	r7, r3
  402128:	4e25      	ldr	r6, [pc, #148]	; (4021c0 <usart_serial_getchar+0xd4>)
  40212a:	4621      	mov	r1, r4
  40212c:	4638      	mov	r0, r7
  40212e:	47b0      	blx	r6
  402130:	2800      	cmp	r0, #0
  402132:	d1fa      	bne.n	40212a <usart_serial_getchar+0x3e>
  402134:	e7e9      	b.n	40210a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402136:	461f      	mov	r7, r3
  402138:	4e21      	ldr	r6, [pc, #132]	; (4021c0 <usart_serial_getchar+0xd4>)
  40213a:	4621      	mov	r1, r4
  40213c:	4638      	mov	r0, r7
  40213e:	47b0      	blx	r6
  402140:	2800      	cmp	r0, #0
  402142:	d1fa      	bne.n	40213a <usart_serial_getchar+0x4e>
  402144:	e7e4      	b.n	402110 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402146:	461f      	mov	r7, r3
  402148:	4e1d      	ldr	r6, [pc, #116]	; (4021c0 <usart_serial_getchar+0xd4>)
  40214a:	4621      	mov	r1, r4
  40214c:	4638      	mov	r0, r7
  40214e:	47b0      	blx	r6
  402150:	2800      	cmp	r0, #0
  402152:	d1fa      	bne.n	40214a <usart_serial_getchar+0x5e>
  402154:	e7df      	b.n	402116 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402156:	461f      	mov	r7, r3
  402158:	4e19      	ldr	r6, [pc, #100]	; (4021c0 <usart_serial_getchar+0xd4>)
  40215a:	4621      	mov	r1, r4
  40215c:	4638      	mov	r0, r7
  40215e:	47b0      	blx	r6
  402160:	2800      	cmp	r0, #0
  402162:	d1fa      	bne.n	40215a <usart_serial_getchar+0x6e>
  402164:	e7da      	b.n	40211c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402166:	461e      	mov	r6, r3
  402168:	4d16      	ldr	r5, [pc, #88]	; (4021c4 <usart_serial_getchar+0xd8>)
  40216a:	a901      	add	r1, sp, #4
  40216c:	4630      	mov	r0, r6
  40216e:	47a8      	blx	r5
  402170:	2800      	cmp	r0, #0
  402172:	d1fa      	bne.n	40216a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402174:	9b01      	ldr	r3, [sp, #4]
  402176:	7023      	strb	r3, [r4, #0]
  402178:	e7d3      	b.n	402122 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40217a:	461e      	mov	r6, r3
  40217c:	4d11      	ldr	r5, [pc, #68]	; (4021c4 <usart_serial_getchar+0xd8>)
  40217e:	a901      	add	r1, sp, #4
  402180:	4630      	mov	r0, r6
  402182:	47a8      	blx	r5
  402184:	2800      	cmp	r0, #0
  402186:	d1fa      	bne.n	40217e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402188:	9b01      	ldr	r3, [sp, #4]
  40218a:	7023      	strb	r3, [r4, #0]
  40218c:	e7c9      	b.n	402122 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40218e:	461e      	mov	r6, r3
  402190:	4d0c      	ldr	r5, [pc, #48]	; (4021c4 <usart_serial_getchar+0xd8>)
  402192:	a901      	add	r1, sp, #4
  402194:	4630      	mov	r0, r6
  402196:	47a8      	blx	r5
  402198:	2800      	cmp	r0, #0
  40219a:	d1fa      	bne.n	402192 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40219c:	9b01      	ldr	r3, [sp, #4]
  40219e:	7023      	strb	r3, [r4, #0]
}
  4021a0:	e7bf      	b.n	402122 <usart_serial_getchar+0x36>
  4021a2:	bf00      	nop
  4021a4:	400e0800 	.word	0x400e0800
  4021a8:	400e0a00 	.word	0x400e0a00
  4021ac:	400e1a00 	.word	0x400e1a00
  4021b0:	400e1c00 	.word	0x400e1c00
  4021b4:	40024000 	.word	0x40024000
  4021b8:	40028000 	.word	0x40028000
  4021bc:	4002c000 	.word	0x4002c000
  4021c0:	004020d7 	.word	0x004020d7
  4021c4:	0040205b 	.word	0x0040205b

004021c8 <usart_serial_putchar>:
{
  4021c8:	b570      	push	{r4, r5, r6, lr}
  4021ca:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4021cc:	4b2a      	ldr	r3, [pc, #168]	; (402278 <usart_serial_putchar+0xb0>)
  4021ce:	4298      	cmp	r0, r3
  4021d0:	d013      	beq.n	4021fa <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4021d2:	4b2a      	ldr	r3, [pc, #168]	; (40227c <usart_serial_putchar+0xb4>)
  4021d4:	4298      	cmp	r0, r3
  4021d6:	d019      	beq.n	40220c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4021d8:	4b29      	ldr	r3, [pc, #164]	; (402280 <usart_serial_putchar+0xb8>)
  4021da:	4298      	cmp	r0, r3
  4021dc:	d01f      	beq.n	40221e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4021de:	4b29      	ldr	r3, [pc, #164]	; (402284 <usart_serial_putchar+0xbc>)
  4021e0:	4298      	cmp	r0, r3
  4021e2:	d025      	beq.n	402230 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4021e4:	4b28      	ldr	r3, [pc, #160]	; (402288 <usart_serial_putchar+0xc0>)
  4021e6:	4298      	cmp	r0, r3
  4021e8:	d02b      	beq.n	402242 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4021ea:	4b28      	ldr	r3, [pc, #160]	; (40228c <usart_serial_putchar+0xc4>)
  4021ec:	4298      	cmp	r0, r3
  4021ee:	d031      	beq.n	402254 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4021f0:	4b27      	ldr	r3, [pc, #156]	; (402290 <usart_serial_putchar+0xc8>)
  4021f2:	4298      	cmp	r0, r3
  4021f4:	d037      	beq.n	402266 <usart_serial_putchar+0x9e>
	return 0;
  4021f6:	2000      	movs	r0, #0
}
  4021f8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4021fa:	461e      	mov	r6, r3
  4021fc:	4d25      	ldr	r5, [pc, #148]	; (402294 <usart_serial_putchar+0xcc>)
  4021fe:	4621      	mov	r1, r4
  402200:	4630      	mov	r0, r6
  402202:	47a8      	blx	r5
  402204:	2800      	cmp	r0, #0
  402206:	d1fa      	bne.n	4021fe <usart_serial_putchar+0x36>
		return 1;
  402208:	2001      	movs	r0, #1
  40220a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40220c:	461e      	mov	r6, r3
  40220e:	4d21      	ldr	r5, [pc, #132]	; (402294 <usart_serial_putchar+0xcc>)
  402210:	4621      	mov	r1, r4
  402212:	4630      	mov	r0, r6
  402214:	47a8      	blx	r5
  402216:	2800      	cmp	r0, #0
  402218:	d1fa      	bne.n	402210 <usart_serial_putchar+0x48>
		return 1;
  40221a:	2001      	movs	r0, #1
  40221c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40221e:	461e      	mov	r6, r3
  402220:	4d1c      	ldr	r5, [pc, #112]	; (402294 <usart_serial_putchar+0xcc>)
  402222:	4621      	mov	r1, r4
  402224:	4630      	mov	r0, r6
  402226:	47a8      	blx	r5
  402228:	2800      	cmp	r0, #0
  40222a:	d1fa      	bne.n	402222 <usart_serial_putchar+0x5a>
		return 1;
  40222c:	2001      	movs	r0, #1
  40222e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402230:	461e      	mov	r6, r3
  402232:	4d18      	ldr	r5, [pc, #96]	; (402294 <usart_serial_putchar+0xcc>)
  402234:	4621      	mov	r1, r4
  402236:	4630      	mov	r0, r6
  402238:	47a8      	blx	r5
  40223a:	2800      	cmp	r0, #0
  40223c:	d1fa      	bne.n	402234 <usart_serial_putchar+0x6c>
		return 1;
  40223e:	2001      	movs	r0, #1
  402240:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402242:	461e      	mov	r6, r3
  402244:	4d14      	ldr	r5, [pc, #80]	; (402298 <usart_serial_putchar+0xd0>)
  402246:	4621      	mov	r1, r4
  402248:	4630      	mov	r0, r6
  40224a:	47a8      	blx	r5
  40224c:	2800      	cmp	r0, #0
  40224e:	d1fa      	bne.n	402246 <usart_serial_putchar+0x7e>
		return 1;
  402250:	2001      	movs	r0, #1
  402252:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402254:	461e      	mov	r6, r3
  402256:	4d10      	ldr	r5, [pc, #64]	; (402298 <usart_serial_putchar+0xd0>)
  402258:	4621      	mov	r1, r4
  40225a:	4630      	mov	r0, r6
  40225c:	47a8      	blx	r5
  40225e:	2800      	cmp	r0, #0
  402260:	d1fa      	bne.n	402258 <usart_serial_putchar+0x90>
		return 1;
  402262:	2001      	movs	r0, #1
  402264:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402266:	461e      	mov	r6, r3
  402268:	4d0b      	ldr	r5, [pc, #44]	; (402298 <usart_serial_putchar+0xd0>)
  40226a:	4621      	mov	r1, r4
  40226c:	4630      	mov	r0, r6
  40226e:	47a8      	blx	r5
  402270:	2800      	cmp	r0, #0
  402272:	d1fa      	bne.n	40226a <usart_serial_putchar+0xa2>
		return 1;
  402274:	2001      	movs	r0, #1
  402276:	bd70      	pop	{r4, r5, r6, pc}
  402278:	400e0800 	.word	0x400e0800
  40227c:	400e0a00 	.word	0x400e0a00
  402280:	400e1a00 	.word	0x400e1a00
  402284:	400e1c00 	.word	0x400e1c00
  402288:	40024000 	.word	0x40024000
  40228c:	40028000 	.word	0x40028000
  402290:	4002c000 	.word	0x4002c000
  402294:	004020c5 	.word	0x004020c5
  402298:	00402045 	.word	0x00402045

0040229c <main>:
	
}


int main (void)
{
  40229c:	b570      	push	{r4, r5, r6, lr}
  40229e:	b08a      	sub	sp, #40	; 0x28
	/************************************************************************/
	/* Initialization of the masterNode                                     */
	/************************************************************************/
	sysclk_init();
  4022a0:	4b32      	ldr	r3, [pc, #200]	; (40236c <main+0xd0>)
  4022a2:	4798      	blx	r3
	board_init();
  4022a4:	4b32      	ldr	r3, [pc, #200]	; (402370 <main+0xd4>)
  4022a6:	4798      	blx	r3
  4022a8:	200e      	movs	r0, #14
  4022aa:	4e32      	ldr	r6, [pc, #200]	; (402374 <main+0xd8>)
  4022ac:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4022ae:	4d32      	ldr	r5, [pc, #200]	; (402378 <main+0xdc>)
  4022b0:	4b32      	ldr	r3, [pc, #200]	; (40237c <main+0xe0>)
  4022b2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4022b4:	4a32      	ldr	r2, [pc, #200]	; (402380 <main+0xe4>)
  4022b6:	4b33      	ldr	r3, [pc, #204]	; (402384 <main+0xe8>)
  4022b8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4022ba:	4a33      	ldr	r2, [pc, #204]	; (402388 <main+0xec>)
  4022bc:	4b33      	ldr	r3, [pc, #204]	; (40238c <main+0xf0>)
  4022be:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4022c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4022c4:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4022c6:	23c0      	movs	r3, #192	; 0xc0
  4022c8:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4022ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4022ce:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4022d0:	2400      	movs	r4, #0
  4022d2:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4022d4:	9408      	str	r4, [sp, #32]
  4022d6:	200e      	movs	r0, #14
  4022d8:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4022da:	4a2d      	ldr	r2, [pc, #180]	; (402390 <main+0xf4>)
  4022dc:	a904      	add	r1, sp, #16
  4022de:	4628      	mov	r0, r5
  4022e0:	4b2c      	ldr	r3, [pc, #176]	; (402394 <main+0xf8>)
  4022e2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4022e4:	4628      	mov	r0, r5
  4022e6:	4b2c      	ldr	r3, [pc, #176]	; (402398 <main+0xfc>)
  4022e8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4022ea:	4628      	mov	r0, r5
  4022ec:	4b2b      	ldr	r3, [pc, #172]	; (40239c <main+0x100>)
  4022ee:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4022f0:	4e2b      	ldr	r6, [pc, #172]	; (4023a0 <main+0x104>)
  4022f2:	6833      	ldr	r3, [r6, #0]
  4022f4:	4621      	mov	r1, r4
  4022f6:	6898      	ldr	r0, [r3, #8]
  4022f8:	4d2a      	ldr	r5, [pc, #168]	; (4023a4 <main+0x108>)
  4022fa:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4022fc:	6833      	ldr	r3, [r6, #0]
  4022fe:	4621      	mov	r1, r4
  402300:	6858      	ldr	r0, [r3, #4]
  402302:	47a8      	blx	r5
	
#ifdef _DEBUG
	/* Initialize the console UART. */
	configure_console();

	puts(STRING_HEADER);
  402304:	4828      	ldr	r0, [pc, #160]	; (4023a8 <main+0x10c>)
  402306:	4b29      	ldr	r3, [pc, #164]	; (4023ac <main+0x110>)
  402308:	4798      	blx	r3
#endif	
	/*Initialize SPI module*/
	spi_master_initialize();
  40230a:	4b29      	ldr	r3, [pc, #164]	; (4023b0 <main+0x114>)
  40230c:	4798      	blx	r3
	
#ifdef _DEBUG
	
	// Display MAC & IP settings
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
	gs_uc_mac_address[0], gs_uc_mac_address[1], gs_uc_mac_address[2],
  40230e:	4829      	ldr	r0, [pc, #164]	; (4023b4 <main+0x118>)
	printf("-- MAC %x:%x:%x:%x:%x:%x\n\r",
  402310:	7883      	ldrb	r3, [r0, #2]
  402312:	7842      	ldrb	r2, [r0, #1]
  402314:	7801      	ldrb	r1, [r0, #0]
  402316:	7944      	ldrb	r4, [r0, #5]
  402318:	9402      	str	r4, [sp, #8]
  40231a:	7904      	ldrb	r4, [r0, #4]
  40231c:	9401      	str	r4, [sp, #4]
  40231e:	78c0      	ldrb	r0, [r0, #3]
  402320:	9000      	str	r0, [sp, #0]
  402322:	4825      	ldr	r0, [pc, #148]	; (4023b8 <main+0x11c>)
  402324:	4c25      	ldr	r4, [pc, #148]	; (4023bc <main+0x120>)
  402326:	47a0      	blx	r4
	gs_uc_mac_address[3], gs_uc_mac_address[4], gs_uc_mac_address[5]);

	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
	gs_uc_ip_address[2], gs_uc_ip_address[3]);
  402328:	4825      	ldr	r0, [pc, #148]	; (4023c0 <main+0x124>)
	printf("-- IP  %d.%d.%d.%d\n\r", gs_uc_ip_address[0], gs_uc_ip_address[1],
  40232a:	7883      	ldrb	r3, [r0, #2]
  40232c:	7842      	ldrb	r2, [r0, #1]
  40232e:	7801      	ldrb	r1, [r0, #0]
  402330:	78c0      	ldrb	r0, [r0, #3]
  402332:	9000      	str	r0, [sp, #0]
  402334:	4823      	ldr	r0, [pc, #140]	; (4023c4 <main+0x128>)
  402336:	47a0      	blx	r4
	
	//display nRF settings
	printDetails();
  402338:	4b23      	ldr	r3, [pc, #140]	; (4023c8 <main+0x12c>)
  40233a:	4798      	blx	r3
#endif
	
	/*Initialize ETH module and set link*/
	if (!init_gmac_ethernet())
  40233c:	4b23      	ldr	r3, [pc, #140]	; (4023cc <main+0x130>)
  40233e:	4798      	blx	r3
  402340:	b918      	cbnz	r0, 40234a <main+0xae>
			//gmac_process_eth_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
			//artnetToCommand();
		}
	}//end loop
}//end main
  402342:	f04f 30ff 	mov.w	r0, #4294967295
  402346:	b00a      	add	sp, #40	; 0x28
  402348:	bd70      	pop	{r4, r5, r6, pc}
	puts("link detected\r");
  40234a:	4821      	ldr	r0, [pc, #132]	; (4023d0 <main+0x134>)
  40234c:	4b17      	ldr	r3, [pc, #92]	; (4023ac <main+0x110>)
  40234e:	4798      	blx	r3
		if (GMAC_OK != read_dev_gmac()) {
  402350:	4c20      	ldr	r4, [pc, #128]	; (4023d4 <main+0x138>)
		if (ul_frm_size > 0) {
  402352:	4d21      	ldr	r5, [pc, #132]	; (4023d8 <main+0x13c>)
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
  402354:	4e21      	ldr	r6, [pc, #132]	; (4023dc <main+0x140>)
		if (GMAC_OK != read_dev_gmac()) {
  402356:	47a0      	blx	r4
  402358:	2800      	cmp	r0, #0
  40235a:	d1fc      	bne.n	402356 <main+0xba>
		if (ul_frm_size > 0) {
  40235c:	6829      	ldr	r1, [r5, #0]
  40235e:	2900      	cmp	r1, #0
  402360:	d0f9      	beq.n	402356 <main+0xba>
			proces_artnet_packet((uint8_t *) gs_uc_eth_buffer, ul_frm_size);
  402362:	4630      	mov	r0, r6
  402364:	4b1e      	ldr	r3, [pc, #120]	; (4023e0 <main+0x144>)
  402366:	4798      	blx	r3
  402368:	e7f5      	b.n	402356 <main+0xba>
  40236a:	bf00      	nop
  40236c:	004001d5 	.word	0x004001d5
  402370:	00400281 	.word	0x00400281
  402374:	00401255 	.word	0x00401255
  402378:	40028000 	.word	0x40028000
  40237c:	20404c24 	.word	0x20404c24
  402380:	004021c9 	.word	0x004021c9
  402384:	20404c20 	.word	0x20404c20
  402388:	004020ed 	.word	0x004020ed
  40238c:	20404308 	.word	0x20404308
  402390:	08f0d180 	.word	0x08f0d180
  402394:	00401fe5 	.word	0x00401fe5
  402398:	00402039 	.word	0x00402039
  40239c:	0040203f 	.word	0x0040203f
  4023a0:	20400028 	.word	0x20400028
  4023a4:	004029e9 	.word	0x004029e9
  4023a8:	0040576c 	.word	0x0040576c
  4023ac:	004029d9 	.word	0x004029d9
  4023b0:	00401c35 	.word	0x00401c35
  4023b4:	2040001c 	.word	0x2040001c
  4023b8:	00405488 	.word	0x00405488
  4023bc:	00402745 	.word	0x00402745
  4023c0:	20400018 	.word	0x20400018
  4023c4:	004057bc 	.word	0x004057bc
  4023c8:	00401af1 	.word	0x00401af1
  4023cc:	00401555 	.word	0x00401555
  4023d0:	004057d4 	.word	0x004057d4
  4023d4:	00401529 	.word	0x00401529
  4023d8:	2040490c 	.word	0x2040490c
  4023dc:	2040430c 	.word	0x2040430c
  4023e0:	0040191d 	.word	0x0040191d

004023e4 <__aeabi_uldivmod>:
  4023e4:	b953      	cbnz	r3, 4023fc <__aeabi_uldivmod+0x18>
  4023e6:	b94a      	cbnz	r2, 4023fc <__aeabi_uldivmod+0x18>
  4023e8:	2900      	cmp	r1, #0
  4023ea:	bf08      	it	eq
  4023ec:	2800      	cmpeq	r0, #0
  4023ee:	bf1c      	itt	ne
  4023f0:	f04f 31ff 	movne.w	r1, #4294967295
  4023f4:	f04f 30ff 	movne.w	r0, #4294967295
  4023f8:	f000 b97a 	b.w	4026f0 <__aeabi_idiv0>
  4023fc:	f1ad 0c08 	sub.w	ip, sp, #8
  402400:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402404:	f000 f806 	bl	402414 <__udivmoddi4>
  402408:	f8dd e004 	ldr.w	lr, [sp, #4]
  40240c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402410:	b004      	add	sp, #16
  402412:	4770      	bx	lr

00402414 <__udivmoddi4>:
  402414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402418:	468c      	mov	ip, r1
  40241a:	460d      	mov	r5, r1
  40241c:	4604      	mov	r4, r0
  40241e:	9e08      	ldr	r6, [sp, #32]
  402420:	2b00      	cmp	r3, #0
  402422:	d151      	bne.n	4024c8 <__udivmoddi4+0xb4>
  402424:	428a      	cmp	r2, r1
  402426:	4617      	mov	r7, r2
  402428:	d96d      	bls.n	402506 <__udivmoddi4+0xf2>
  40242a:	fab2 fe82 	clz	lr, r2
  40242e:	f1be 0f00 	cmp.w	lr, #0
  402432:	d00b      	beq.n	40244c <__udivmoddi4+0x38>
  402434:	f1ce 0c20 	rsb	ip, lr, #32
  402438:	fa01 f50e 	lsl.w	r5, r1, lr
  40243c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402440:	fa02 f70e 	lsl.w	r7, r2, lr
  402444:	ea4c 0c05 	orr.w	ip, ip, r5
  402448:	fa00 f40e 	lsl.w	r4, r0, lr
  40244c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402450:	0c25      	lsrs	r5, r4, #16
  402452:	fbbc f8fa 	udiv	r8, ip, sl
  402456:	fa1f f987 	uxth.w	r9, r7
  40245a:	fb0a cc18 	mls	ip, sl, r8, ip
  40245e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402462:	fb08 f309 	mul.w	r3, r8, r9
  402466:	42ab      	cmp	r3, r5
  402468:	d90a      	bls.n	402480 <__udivmoddi4+0x6c>
  40246a:	19ed      	adds	r5, r5, r7
  40246c:	f108 32ff 	add.w	r2, r8, #4294967295
  402470:	f080 8123 	bcs.w	4026ba <__udivmoddi4+0x2a6>
  402474:	42ab      	cmp	r3, r5
  402476:	f240 8120 	bls.w	4026ba <__udivmoddi4+0x2a6>
  40247a:	f1a8 0802 	sub.w	r8, r8, #2
  40247e:	443d      	add	r5, r7
  402480:	1aed      	subs	r5, r5, r3
  402482:	b2a4      	uxth	r4, r4
  402484:	fbb5 f0fa 	udiv	r0, r5, sl
  402488:	fb0a 5510 	mls	r5, sl, r0, r5
  40248c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402490:	fb00 f909 	mul.w	r9, r0, r9
  402494:	45a1      	cmp	r9, r4
  402496:	d909      	bls.n	4024ac <__udivmoddi4+0x98>
  402498:	19e4      	adds	r4, r4, r7
  40249a:	f100 33ff 	add.w	r3, r0, #4294967295
  40249e:	f080 810a 	bcs.w	4026b6 <__udivmoddi4+0x2a2>
  4024a2:	45a1      	cmp	r9, r4
  4024a4:	f240 8107 	bls.w	4026b6 <__udivmoddi4+0x2a2>
  4024a8:	3802      	subs	r0, #2
  4024aa:	443c      	add	r4, r7
  4024ac:	eba4 0409 	sub.w	r4, r4, r9
  4024b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4024b4:	2100      	movs	r1, #0
  4024b6:	2e00      	cmp	r6, #0
  4024b8:	d061      	beq.n	40257e <__udivmoddi4+0x16a>
  4024ba:	fa24 f40e 	lsr.w	r4, r4, lr
  4024be:	2300      	movs	r3, #0
  4024c0:	6034      	str	r4, [r6, #0]
  4024c2:	6073      	str	r3, [r6, #4]
  4024c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024c8:	428b      	cmp	r3, r1
  4024ca:	d907      	bls.n	4024dc <__udivmoddi4+0xc8>
  4024cc:	2e00      	cmp	r6, #0
  4024ce:	d054      	beq.n	40257a <__udivmoddi4+0x166>
  4024d0:	2100      	movs	r1, #0
  4024d2:	e886 0021 	stmia.w	r6, {r0, r5}
  4024d6:	4608      	mov	r0, r1
  4024d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024dc:	fab3 f183 	clz	r1, r3
  4024e0:	2900      	cmp	r1, #0
  4024e2:	f040 808e 	bne.w	402602 <__udivmoddi4+0x1ee>
  4024e6:	42ab      	cmp	r3, r5
  4024e8:	d302      	bcc.n	4024f0 <__udivmoddi4+0xdc>
  4024ea:	4282      	cmp	r2, r0
  4024ec:	f200 80fa 	bhi.w	4026e4 <__udivmoddi4+0x2d0>
  4024f0:	1a84      	subs	r4, r0, r2
  4024f2:	eb65 0503 	sbc.w	r5, r5, r3
  4024f6:	2001      	movs	r0, #1
  4024f8:	46ac      	mov	ip, r5
  4024fa:	2e00      	cmp	r6, #0
  4024fc:	d03f      	beq.n	40257e <__udivmoddi4+0x16a>
  4024fe:	e886 1010 	stmia.w	r6, {r4, ip}
  402502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402506:	b912      	cbnz	r2, 40250e <__udivmoddi4+0xfa>
  402508:	2701      	movs	r7, #1
  40250a:	fbb7 f7f2 	udiv	r7, r7, r2
  40250e:	fab7 fe87 	clz	lr, r7
  402512:	f1be 0f00 	cmp.w	lr, #0
  402516:	d134      	bne.n	402582 <__udivmoddi4+0x16e>
  402518:	1beb      	subs	r3, r5, r7
  40251a:	0c3a      	lsrs	r2, r7, #16
  40251c:	fa1f fc87 	uxth.w	ip, r7
  402520:	2101      	movs	r1, #1
  402522:	fbb3 f8f2 	udiv	r8, r3, r2
  402526:	0c25      	lsrs	r5, r4, #16
  402528:	fb02 3318 	mls	r3, r2, r8, r3
  40252c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402530:	fb0c f308 	mul.w	r3, ip, r8
  402534:	42ab      	cmp	r3, r5
  402536:	d907      	bls.n	402548 <__udivmoddi4+0x134>
  402538:	19ed      	adds	r5, r5, r7
  40253a:	f108 30ff 	add.w	r0, r8, #4294967295
  40253e:	d202      	bcs.n	402546 <__udivmoddi4+0x132>
  402540:	42ab      	cmp	r3, r5
  402542:	f200 80d1 	bhi.w	4026e8 <__udivmoddi4+0x2d4>
  402546:	4680      	mov	r8, r0
  402548:	1aed      	subs	r5, r5, r3
  40254a:	b2a3      	uxth	r3, r4
  40254c:	fbb5 f0f2 	udiv	r0, r5, r2
  402550:	fb02 5510 	mls	r5, r2, r0, r5
  402554:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402558:	fb0c fc00 	mul.w	ip, ip, r0
  40255c:	45a4      	cmp	ip, r4
  40255e:	d907      	bls.n	402570 <__udivmoddi4+0x15c>
  402560:	19e4      	adds	r4, r4, r7
  402562:	f100 33ff 	add.w	r3, r0, #4294967295
  402566:	d202      	bcs.n	40256e <__udivmoddi4+0x15a>
  402568:	45a4      	cmp	ip, r4
  40256a:	f200 80b8 	bhi.w	4026de <__udivmoddi4+0x2ca>
  40256e:	4618      	mov	r0, r3
  402570:	eba4 040c 	sub.w	r4, r4, ip
  402574:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402578:	e79d      	b.n	4024b6 <__udivmoddi4+0xa2>
  40257a:	4631      	mov	r1, r6
  40257c:	4630      	mov	r0, r6
  40257e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402582:	f1ce 0420 	rsb	r4, lr, #32
  402586:	fa05 f30e 	lsl.w	r3, r5, lr
  40258a:	fa07 f70e 	lsl.w	r7, r7, lr
  40258e:	fa20 f804 	lsr.w	r8, r0, r4
  402592:	0c3a      	lsrs	r2, r7, #16
  402594:	fa25 f404 	lsr.w	r4, r5, r4
  402598:	ea48 0803 	orr.w	r8, r8, r3
  40259c:	fbb4 f1f2 	udiv	r1, r4, r2
  4025a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4025a4:	fb02 4411 	mls	r4, r2, r1, r4
  4025a8:	fa1f fc87 	uxth.w	ip, r7
  4025ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4025b0:	fb01 f30c 	mul.w	r3, r1, ip
  4025b4:	42ab      	cmp	r3, r5
  4025b6:	fa00 f40e 	lsl.w	r4, r0, lr
  4025ba:	d909      	bls.n	4025d0 <__udivmoddi4+0x1bc>
  4025bc:	19ed      	adds	r5, r5, r7
  4025be:	f101 30ff 	add.w	r0, r1, #4294967295
  4025c2:	f080 808a 	bcs.w	4026da <__udivmoddi4+0x2c6>
  4025c6:	42ab      	cmp	r3, r5
  4025c8:	f240 8087 	bls.w	4026da <__udivmoddi4+0x2c6>
  4025cc:	3902      	subs	r1, #2
  4025ce:	443d      	add	r5, r7
  4025d0:	1aeb      	subs	r3, r5, r3
  4025d2:	fa1f f588 	uxth.w	r5, r8
  4025d6:	fbb3 f0f2 	udiv	r0, r3, r2
  4025da:	fb02 3310 	mls	r3, r2, r0, r3
  4025de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4025e2:	fb00 f30c 	mul.w	r3, r0, ip
  4025e6:	42ab      	cmp	r3, r5
  4025e8:	d907      	bls.n	4025fa <__udivmoddi4+0x1e6>
  4025ea:	19ed      	adds	r5, r5, r7
  4025ec:	f100 38ff 	add.w	r8, r0, #4294967295
  4025f0:	d26f      	bcs.n	4026d2 <__udivmoddi4+0x2be>
  4025f2:	42ab      	cmp	r3, r5
  4025f4:	d96d      	bls.n	4026d2 <__udivmoddi4+0x2be>
  4025f6:	3802      	subs	r0, #2
  4025f8:	443d      	add	r5, r7
  4025fa:	1aeb      	subs	r3, r5, r3
  4025fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402600:	e78f      	b.n	402522 <__udivmoddi4+0x10e>
  402602:	f1c1 0720 	rsb	r7, r1, #32
  402606:	fa22 f807 	lsr.w	r8, r2, r7
  40260a:	408b      	lsls	r3, r1
  40260c:	fa05 f401 	lsl.w	r4, r5, r1
  402610:	ea48 0303 	orr.w	r3, r8, r3
  402614:	fa20 fe07 	lsr.w	lr, r0, r7
  402618:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40261c:	40fd      	lsrs	r5, r7
  40261e:	ea4e 0e04 	orr.w	lr, lr, r4
  402622:	fbb5 f9fc 	udiv	r9, r5, ip
  402626:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40262a:	fb0c 5519 	mls	r5, ip, r9, r5
  40262e:	fa1f f883 	uxth.w	r8, r3
  402632:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402636:	fb09 f408 	mul.w	r4, r9, r8
  40263a:	42ac      	cmp	r4, r5
  40263c:	fa02 f201 	lsl.w	r2, r2, r1
  402640:	fa00 fa01 	lsl.w	sl, r0, r1
  402644:	d908      	bls.n	402658 <__udivmoddi4+0x244>
  402646:	18ed      	adds	r5, r5, r3
  402648:	f109 30ff 	add.w	r0, r9, #4294967295
  40264c:	d243      	bcs.n	4026d6 <__udivmoddi4+0x2c2>
  40264e:	42ac      	cmp	r4, r5
  402650:	d941      	bls.n	4026d6 <__udivmoddi4+0x2c2>
  402652:	f1a9 0902 	sub.w	r9, r9, #2
  402656:	441d      	add	r5, r3
  402658:	1b2d      	subs	r5, r5, r4
  40265a:	fa1f fe8e 	uxth.w	lr, lr
  40265e:	fbb5 f0fc 	udiv	r0, r5, ip
  402662:	fb0c 5510 	mls	r5, ip, r0, r5
  402666:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40266a:	fb00 f808 	mul.w	r8, r0, r8
  40266e:	45a0      	cmp	r8, r4
  402670:	d907      	bls.n	402682 <__udivmoddi4+0x26e>
  402672:	18e4      	adds	r4, r4, r3
  402674:	f100 35ff 	add.w	r5, r0, #4294967295
  402678:	d229      	bcs.n	4026ce <__udivmoddi4+0x2ba>
  40267a:	45a0      	cmp	r8, r4
  40267c:	d927      	bls.n	4026ce <__udivmoddi4+0x2ba>
  40267e:	3802      	subs	r0, #2
  402680:	441c      	add	r4, r3
  402682:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402686:	eba4 0408 	sub.w	r4, r4, r8
  40268a:	fba0 8902 	umull	r8, r9, r0, r2
  40268e:	454c      	cmp	r4, r9
  402690:	46c6      	mov	lr, r8
  402692:	464d      	mov	r5, r9
  402694:	d315      	bcc.n	4026c2 <__udivmoddi4+0x2ae>
  402696:	d012      	beq.n	4026be <__udivmoddi4+0x2aa>
  402698:	b156      	cbz	r6, 4026b0 <__udivmoddi4+0x29c>
  40269a:	ebba 030e 	subs.w	r3, sl, lr
  40269e:	eb64 0405 	sbc.w	r4, r4, r5
  4026a2:	fa04 f707 	lsl.w	r7, r4, r7
  4026a6:	40cb      	lsrs	r3, r1
  4026a8:	431f      	orrs	r7, r3
  4026aa:	40cc      	lsrs	r4, r1
  4026ac:	6037      	str	r7, [r6, #0]
  4026ae:	6074      	str	r4, [r6, #4]
  4026b0:	2100      	movs	r1, #0
  4026b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026b6:	4618      	mov	r0, r3
  4026b8:	e6f8      	b.n	4024ac <__udivmoddi4+0x98>
  4026ba:	4690      	mov	r8, r2
  4026bc:	e6e0      	b.n	402480 <__udivmoddi4+0x6c>
  4026be:	45c2      	cmp	sl, r8
  4026c0:	d2ea      	bcs.n	402698 <__udivmoddi4+0x284>
  4026c2:	ebb8 0e02 	subs.w	lr, r8, r2
  4026c6:	eb69 0503 	sbc.w	r5, r9, r3
  4026ca:	3801      	subs	r0, #1
  4026cc:	e7e4      	b.n	402698 <__udivmoddi4+0x284>
  4026ce:	4628      	mov	r0, r5
  4026d0:	e7d7      	b.n	402682 <__udivmoddi4+0x26e>
  4026d2:	4640      	mov	r0, r8
  4026d4:	e791      	b.n	4025fa <__udivmoddi4+0x1e6>
  4026d6:	4681      	mov	r9, r0
  4026d8:	e7be      	b.n	402658 <__udivmoddi4+0x244>
  4026da:	4601      	mov	r1, r0
  4026dc:	e778      	b.n	4025d0 <__udivmoddi4+0x1bc>
  4026de:	3802      	subs	r0, #2
  4026e0:	443c      	add	r4, r7
  4026e2:	e745      	b.n	402570 <__udivmoddi4+0x15c>
  4026e4:	4608      	mov	r0, r1
  4026e6:	e708      	b.n	4024fa <__udivmoddi4+0xe6>
  4026e8:	f1a8 0802 	sub.w	r8, r8, #2
  4026ec:	443d      	add	r5, r7
  4026ee:	e72b      	b.n	402548 <__udivmoddi4+0x134>

004026f0 <__aeabi_idiv0>:
  4026f0:	4770      	bx	lr
  4026f2:	bf00      	nop

004026f4 <__libc_init_array>:
  4026f4:	b570      	push	{r4, r5, r6, lr}
  4026f6:	4e0f      	ldr	r6, [pc, #60]	; (402734 <__libc_init_array+0x40>)
  4026f8:	4d0f      	ldr	r5, [pc, #60]	; (402738 <__libc_init_array+0x44>)
  4026fa:	1b76      	subs	r6, r6, r5
  4026fc:	10b6      	asrs	r6, r6, #2
  4026fe:	bf18      	it	ne
  402700:	2400      	movne	r4, #0
  402702:	d005      	beq.n	402710 <__libc_init_array+0x1c>
  402704:	3401      	adds	r4, #1
  402706:	f855 3b04 	ldr.w	r3, [r5], #4
  40270a:	4798      	blx	r3
  40270c:	42a6      	cmp	r6, r4
  40270e:	d1f9      	bne.n	402704 <__libc_init_array+0x10>
  402710:	4e0a      	ldr	r6, [pc, #40]	; (40273c <__libc_init_array+0x48>)
  402712:	4d0b      	ldr	r5, [pc, #44]	; (402740 <__libc_init_array+0x4c>)
  402714:	1b76      	subs	r6, r6, r5
  402716:	f003 f919 	bl	40594c <_init>
  40271a:	10b6      	asrs	r6, r6, #2
  40271c:	bf18      	it	ne
  40271e:	2400      	movne	r4, #0
  402720:	d006      	beq.n	402730 <__libc_init_array+0x3c>
  402722:	3401      	adds	r4, #1
  402724:	f855 3b04 	ldr.w	r3, [r5], #4
  402728:	4798      	blx	r3
  40272a:	42a6      	cmp	r6, r4
  40272c:	d1f9      	bne.n	402722 <__libc_init_array+0x2e>
  40272e:	bd70      	pop	{r4, r5, r6, pc}
  402730:	bd70      	pop	{r4, r5, r6, pc}
  402732:	bf00      	nop
  402734:	00405958 	.word	0x00405958
  402738:	00405958 	.word	0x00405958
  40273c:	00405960 	.word	0x00405960
  402740:	00405958 	.word	0x00405958

00402744 <iprintf>:
  402744:	b40f      	push	{r0, r1, r2, r3}
  402746:	b500      	push	{lr}
  402748:	4907      	ldr	r1, [pc, #28]	; (402768 <iprintf+0x24>)
  40274a:	b083      	sub	sp, #12
  40274c:	ab04      	add	r3, sp, #16
  40274e:	6808      	ldr	r0, [r1, #0]
  402750:	f853 2b04 	ldr.w	r2, [r3], #4
  402754:	6881      	ldr	r1, [r0, #8]
  402756:	9301      	str	r3, [sp, #4]
  402758:	f000 fae0 	bl	402d1c <_vfiprintf_r>
  40275c:	b003      	add	sp, #12
  40275e:	f85d eb04 	ldr.w	lr, [sp], #4
  402762:	b004      	add	sp, #16
  402764:	4770      	bx	lr
  402766:	bf00      	nop
  402768:	20400028 	.word	0x20400028

0040276c <memcpy>:
  40276c:	4684      	mov	ip, r0
  40276e:	ea41 0300 	orr.w	r3, r1, r0
  402772:	f013 0303 	ands.w	r3, r3, #3
  402776:	d16d      	bne.n	402854 <memcpy+0xe8>
  402778:	3a40      	subs	r2, #64	; 0x40
  40277a:	d341      	bcc.n	402800 <memcpy+0x94>
  40277c:	f851 3b04 	ldr.w	r3, [r1], #4
  402780:	f840 3b04 	str.w	r3, [r0], #4
  402784:	f851 3b04 	ldr.w	r3, [r1], #4
  402788:	f840 3b04 	str.w	r3, [r0], #4
  40278c:	f851 3b04 	ldr.w	r3, [r1], #4
  402790:	f840 3b04 	str.w	r3, [r0], #4
  402794:	f851 3b04 	ldr.w	r3, [r1], #4
  402798:	f840 3b04 	str.w	r3, [r0], #4
  40279c:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a0:	f840 3b04 	str.w	r3, [r0], #4
  4027a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027a8:	f840 3b04 	str.w	r3, [r0], #4
  4027ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b0:	f840 3b04 	str.w	r3, [r0], #4
  4027b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027b8:	f840 3b04 	str.w	r3, [r0], #4
  4027bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4027c0:	f840 3b04 	str.w	r3, [r0], #4
  4027c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027c8:	f840 3b04 	str.w	r3, [r0], #4
  4027cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4027d0:	f840 3b04 	str.w	r3, [r0], #4
  4027d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027d8:	f840 3b04 	str.w	r3, [r0], #4
  4027dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4027e0:	f840 3b04 	str.w	r3, [r0], #4
  4027e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027e8:	f840 3b04 	str.w	r3, [r0], #4
  4027ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4027f0:	f840 3b04 	str.w	r3, [r0], #4
  4027f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4027f8:	f840 3b04 	str.w	r3, [r0], #4
  4027fc:	3a40      	subs	r2, #64	; 0x40
  4027fe:	d2bd      	bcs.n	40277c <memcpy+0x10>
  402800:	3230      	adds	r2, #48	; 0x30
  402802:	d311      	bcc.n	402828 <memcpy+0xbc>
  402804:	f851 3b04 	ldr.w	r3, [r1], #4
  402808:	f840 3b04 	str.w	r3, [r0], #4
  40280c:	f851 3b04 	ldr.w	r3, [r1], #4
  402810:	f840 3b04 	str.w	r3, [r0], #4
  402814:	f851 3b04 	ldr.w	r3, [r1], #4
  402818:	f840 3b04 	str.w	r3, [r0], #4
  40281c:	f851 3b04 	ldr.w	r3, [r1], #4
  402820:	f840 3b04 	str.w	r3, [r0], #4
  402824:	3a10      	subs	r2, #16
  402826:	d2ed      	bcs.n	402804 <memcpy+0x98>
  402828:	320c      	adds	r2, #12
  40282a:	d305      	bcc.n	402838 <memcpy+0xcc>
  40282c:	f851 3b04 	ldr.w	r3, [r1], #4
  402830:	f840 3b04 	str.w	r3, [r0], #4
  402834:	3a04      	subs	r2, #4
  402836:	d2f9      	bcs.n	40282c <memcpy+0xc0>
  402838:	3204      	adds	r2, #4
  40283a:	d008      	beq.n	40284e <memcpy+0xe2>
  40283c:	07d2      	lsls	r2, r2, #31
  40283e:	bf1c      	itt	ne
  402840:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402844:	f800 3b01 	strbne.w	r3, [r0], #1
  402848:	d301      	bcc.n	40284e <memcpy+0xe2>
  40284a:	880b      	ldrh	r3, [r1, #0]
  40284c:	8003      	strh	r3, [r0, #0]
  40284e:	4660      	mov	r0, ip
  402850:	4770      	bx	lr
  402852:	bf00      	nop
  402854:	2a08      	cmp	r2, #8
  402856:	d313      	bcc.n	402880 <memcpy+0x114>
  402858:	078b      	lsls	r3, r1, #30
  40285a:	d08d      	beq.n	402778 <memcpy+0xc>
  40285c:	f010 0303 	ands.w	r3, r0, #3
  402860:	d08a      	beq.n	402778 <memcpy+0xc>
  402862:	f1c3 0304 	rsb	r3, r3, #4
  402866:	1ad2      	subs	r2, r2, r3
  402868:	07db      	lsls	r3, r3, #31
  40286a:	bf1c      	itt	ne
  40286c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402870:	f800 3b01 	strbne.w	r3, [r0], #1
  402874:	d380      	bcc.n	402778 <memcpy+0xc>
  402876:	f831 3b02 	ldrh.w	r3, [r1], #2
  40287a:	f820 3b02 	strh.w	r3, [r0], #2
  40287e:	e77b      	b.n	402778 <memcpy+0xc>
  402880:	3a04      	subs	r2, #4
  402882:	d3d9      	bcc.n	402838 <memcpy+0xcc>
  402884:	3a01      	subs	r2, #1
  402886:	f811 3b01 	ldrb.w	r3, [r1], #1
  40288a:	f800 3b01 	strb.w	r3, [r0], #1
  40288e:	d2f9      	bcs.n	402884 <memcpy+0x118>
  402890:	780b      	ldrb	r3, [r1, #0]
  402892:	7003      	strb	r3, [r0, #0]
  402894:	784b      	ldrb	r3, [r1, #1]
  402896:	7043      	strb	r3, [r0, #1]
  402898:	788b      	ldrb	r3, [r1, #2]
  40289a:	7083      	strb	r3, [r0, #2]
  40289c:	4660      	mov	r0, ip
  40289e:	4770      	bx	lr

004028a0 <memset>:
  4028a0:	b470      	push	{r4, r5, r6}
  4028a2:	0786      	lsls	r6, r0, #30
  4028a4:	d046      	beq.n	402934 <memset+0x94>
  4028a6:	1e54      	subs	r4, r2, #1
  4028a8:	2a00      	cmp	r2, #0
  4028aa:	d041      	beq.n	402930 <memset+0x90>
  4028ac:	b2ca      	uxtb	r2, r1
  4028ae:	4603      	mov	r3, r0
  4028b0:	e002      	b.n	4028b8 <memset+0x18>
  4028b2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4028b6:	d33b      	bcc.n	402930 <memset+0x90>
  4028b8:	f803 2b01 	strb.w	r2, [r3], #1
  4028bc:	079d      	lsls	r5, r3, #30
  4028be:	d1f8      	bne.n	4028b2 <memset+0x12>
  4028c0:	2c03      	cmp	r4, #3
  4028c2:	d92e      	bls.n	402922 <memset+0x82>
  4028c4:	b2cd      	uxtb	r5, r1
  4028c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4028ca:	2c0f      	cmp	r4, #15
  4028cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4028d0:	d919      	bls.n	402906 <memset+0x66>
  4028d2:	f103 0210 	add.w	r2, r3, #16
  4028d6:	4626      	mov	r6, r4
  4028d8:	3e10      	subs	r6, #16
  4028da:	2e0f      	cmp	r6, #15
  4028dc:	f842 5c10 	str.w	r5, [r2, #-16]
  4028e0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4028e4:	f842 5c08 	str.w	r5, [r2, #-8]
  4028e8:	f842 5c04 	str.w	r5, [r2, #-4]
  4028ec:	f102 0210 	add.w	r2, r2, #16
  4028f0:	d8f2      	bhi.n	4028d8 <memset+0x38>
  4028f2:	f1a4 0210 	sub.w	r2, r4, #16
  4028f6:	f022 020f 	bic.w	r2, r2, #15
  4028fa:	f004 040f 	and.w	r4, r4, #15
  4028fe:	3210      	adds	r2, #16
  402900:	2c03      	cmp	r4, #3
  402902:	4413      	add	r3, r2
  402904:	d90d      	bls.n	402922 <memset+0x82>
  402906:	461e      	mov	r6, r3
  402908:	4622      	mov	r2, r4
  40290a:	3a04      	subs	r2, #4
  40290c:	2a03      	cmp	r2, #3
  40290e:	f846 5b04 	str.w	r5, [r6], #4
  402912:	d8fa      	bhi.n	40290a <memset+0x6a>
  402914:	1f22      	subs	r2, r4, #4
  402916:	f022 0203 	bic.w	r2, r2, #3
  40291a:	3204      	adds	r2, #4
  40291c:	4413      	add	r3, r2
  40291e:	f004 0403 	and.w	r4, r4, #3
  402922:	b12c      	cbz	r4, 402930 <memset+0x90>
  402924:	b2c9      	uxtb	r1, r1
  402926:	441c      	add	r4, r3
  402928:	f803 1b01 	strb.w	r1, [r3], #1
  40292c:	429c      	cmp	r4, r3
  40292e:	d1fb      	bne.n	402928 <memset+0x88>
  402930:	bc70      	pop	{r4, r5, r6}
  402932:	4770      	bx	lr
  402934:	4614      	mov	r4, r2
  402936:	4603      	mov	r3, r0
  402938:	e7c2      	b.n	4028c0 <memset+0x20>
  40293a:	bf00      	nop

0040293c <_puts_r>:
  40293c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40293e:	4605      	mov	r5, r0
  402940:	b089      	sub	sp, #36	; 0x24
  402942:	4608      	mov	r0, r1
  402944:	460c      	mov	r4, r1
  402946:	f000 f93b 	bl	402bc0 <strlen>
  40294a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40294c:	4f21      	ldr	r7, [pc, #132]	; (4029d4 <_puts_r+0x98>)
  40294e:	9404      	str	r4, [sp, #16]
  402950:	2601      	movs	r6, #1
  402952:	1c44      	adds	r4, r0, #1
  402954:	a904      	add	r1, sp, #16
  402956:	2202      	movs	r2, #2
  402958:	9403      	str	r4, [sp, #12]
  40295a:	9005      	str	r0, [sp, #20]
  40295c:	68ac      	ldr	r4, [r5, #8]
  40295e:	9706      	str	r7, [sp, #24]
  402960:	9607      	str	r6, [sp, #28]
  402962:	9101      	str	r1, [sp, #4]
  402964:	9202      	str	r2, [sp, #8]
  402966:	b353      	cbz	r3, 4029be <_puts_r+0x82>
  402968:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40296a:	f013 0f01 	tst.w	r3, #1
  40296e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402972:	b29a      	uxth	r2, r3
  402974:	d101      	bne.n	40297a <_puts_r+0x3e>
  402976:	0590      	lsls	r0, r2, #22
  402978:	d525      	bpl.n	4029c6 <_puts_r+0x8a>
  40297a:	0491      	lsls	r1, r2, #18
  40297c:	d406      	bmi.n	40298c <_puts_r+0x50>
  40297e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402988:	81a3      	strh	r3, [r4, #12]
  40298a:	6662      	str	r2, [r4, #100]	; 0x64
  40298c:	4628      	mov	r0, r5
  40298e:	aa01      	add	r2, sp, #4
  402990:	4621      	mov	r1, r4
  402992:	f001 fbc5 	bl	404120 <__sfvwrite_r>
  402996:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402998:	2800      	cmp	r0, #0
  40299a:	bf0c      	ite	eq
  40299c:	250a      	moveq	r5, #10
  40299e:	f04f 35ff 	movne.w	r5, #4294967295
  4029a2:	07da      	lsls	r2, r3, #31
  4029a4:	d402      	bmi.n	4029ac <_puts_r+0x70>
  4029a6:	89a3      	ldrh	r3, [r4, #12]
  4029a8:	059b      	lsls	r3, r3, #22
  4029aa:	d502      	bpl.n	4029b2 <_puts_r+0x76>
  4029ac:	4628      	mov	r0, r5
  4029ae:	b009      	add	sp, #36	; 0x24
  4029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4029b4:	f001 fd6a 	bl	40448c <__retarget_lock_release_recursive>
  4029b8:	4628      	mov	r0, r5
  4029ba:	b009      	add	sp, #36	; 0x24
  4029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029be:	4628      	mov	r0, r5
  4029c0:	f001 f9a2 	bl	403d08 <__sinit>
  4029c4:	e7d0      	b.n	402968 <_puts_r+0x2c>
  4029c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4029c8:	f001 fd5e 	bl	404488 <__retarget_lock_acquire_recursive>
  4029cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029d0:	b29a      	uxth	r2, r3
  4029d2:	e7d2      	b.n	40297a <_puts_r+0x3e>
  4029d4:	00405650 	.word	0x00405650

004029d8 <puts>:
  4029d8:	4b02      	ldr	r3, [pc, #8]	; (4029e4 <puts+0xc>)
  4029da:	4601      	mov	r1, r0
  4029dc:	6818      	ldr	r0, [r3, #0]
  4029de:	f7ff bfad 	b.w	40293c <_puts_r>
  4029e2:	bf00      	nop
  4029e4:	20400028 	.word	0x20400028

004029e8 <setbuf>:
  4029e8:	2900      	cmp	r1, #0
  4029ea:	bf0c      	ite	eq
  4029ec:	2202      	moveq	r2, #2
  4029ee:	2200      	movne	r2, #0
  4029f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4029f4:	f000 b800 	b.w	4029f8 <setvbuf>

004029f8 <setvbuf>:
  4029f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4029fc:	4c61      	ldr	r4, [pc, #388]	; (402b84 <setvbuf+0x18c>)
  4029fe:	6825      	ldr	r5, [r4, #0]
  402a00:	b083      	sub	sp, #12
  402a02:	4604      	mov	r4, r0
  402a04:	460f      	mov	r7, r1
  402a06:	4690      	mov	r8, r2
  402a08:	461e      	mov	r6, r3
  402a0a:	b115      	cbz	r5, 402a12 <setvbuf+0x1a>
  402a0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402a0e:	2b00      	cmp	r3, #0
  402a10:	d064      	beq.n	402adc <setvbuf+0xe4>
  402a12:	f1b8 0f02 	cmp.w	r8, #2
  402a16:	d006      	beq.n	402a26 <setvbuf+0x2e>
  402a18:	f1b8 0f01 	cmp.w	r8, #1
  402a1c:	f200 809f 	bhi.w	402b5e <setvbuf+0x166>
  402a20:	2e00      	cmp	r6, #0
  402a22:	f2c0 809c 	blt.w	402b5e <setvbuf+0x166>
  402a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402a28:	07d8      	lsls	r0, r3, #31
  402a2a:	d534      	bpl.n	402a96 <setvbuf+0x9e>
  402a2c:	4621      	mov	r1, r4
  402a2e:	4628      	mov	r0, r5
  402a30:	f001 f912 	bl	403c58 <_fflush_r>
  402a34:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402a36:	b141      	cbz	r1, 402a4a <setvbuf+0x52>
  402a38:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402a3c:	4299      	cmp	r1, r3
  402a3e:	d002      	beq.n	402a46 <setvbuf+0x4e>
  402a40:	4628      	mov	r0, r5
  402a42:	f001 fa87 	bl	403f54 <_free_r>
  402a46:	2300      	movs	r3, #0
  402a48:	6323      	str	r3, [r4, #48]	; 0x30
  402a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a4e:	2200      	movs	r2, #0
  402a50:	61a2      	str	r2, [r4, #24]
  402a52:	6062      	str	r2, [r4, #4]
  402a54:	061a      	lsls	r2, r3, #24
  402a56:	d43a      	bmi.n	402ace <setvbuf+0xd6>
  402a58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402a5c:	f023 0303 	bic.w	r3, r3, #3
  402a60:	f1b8 0f02 	cmp.w	r8, #2
  402a64:	81a3      	strh	r3, [r4, #12]
  402a66:	d01d      	beq.n	402aa4 <setvbuf+0xac>
  402a68:	ab01      	add	r3, sp, #4
  402a6a:	466a      	mov	r2, sp
  402a6c:	4621      	mov	r1, r4
  402a6e:	4628      	mov	r0, r5
  402a70:	f001 fd0e 	bl	404490 <__swhatbuf_r>
  402a74:	89a3      	ldrh	r3, [r4, #12]
  402a76:	4318      	orrs	r0, r3
  402a78:	81a0      	strh	r0, [r4, #12]
  402a7a:	2e00      	cmp	r6, #0
  402a7c:	d132      	bne.n	402ae4 <setvbuf+0xec>
  402a7e:	9e00      	ldr	r6, [sp, #0]
  402a80:	4630      	mov	r0, r6
  402a82:	f001 fd7d 	bl	404580 <malloc>
  402a86:	4607      	mov	r7, r0
  402a88:	2800      	cmp	r0, #0
  402a8a:	d06b      	beq.n	402b64 <setvbuf+0x16c>
  402a8c:	89a3      	ldrh	r3, [r4, #12]
  402a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402a92:	81a3      	strh	r3, [r4, #12]
  402a94:	e028      	b.n	402ae8 <setvbuf+0xf0>
  402a96:	89a3      	ldrh	r3, [r4, #12]
  402a98:	0599      	lsls	r1, r3, #22
  402a9a:	d4c7      	bmi.n	402a2c <setvbuf+0x34>
  402a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402a9e:	f001 fcf3 	bl	404488 <__retarget_lock_acquire_recursive>
  402aa2:	e7c3      	b.n	402a2c <setvbuf+0x34>
  402aa4:	2500      	movs	r5, #0
  402aa6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402aa8:	2600      	movs	r6, #0
  402aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402aae:	f043 0302 	orr.w	r3, r3, #2
  402ab2:	2001      	movs	r0, #1
  402ab4:	60a6      	str	r6, [r4, #8]
  402ab6:	07ce      	lsls	r6, r1, #31
  402ab8:	81a3      	strh	r3, [r4, #12]
  402aba:	6022      	str	r2, [r4, #0]
  402abc:	6122      	str	r2, [r4, #16]
  402abe:	6160      	str	r0, [r4, #20]
  402ac0:	d401      	bmi.n	402ac6 <setvbuf+0xce>
  402ac2:	0598      	lsls	r0, r3, #22
  402ac4:	d53e      	bpl.n	402b44 <setvbuf+0x14c>
  402ac6:	4628      	mov	r0, r5
  402ac8:	b003      	add	sp, #12
  402aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402ace:	6921      	ldr	r1, [r4, #16]
  402ad0:	4628      	mov	r0, r5
  402ad2:	f001 fa3f 	bl	403f54 <_free_r>
  402ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402ada:	e7bd      	b.n	402a58 <setvbuf+0x60>
  402adc:	4628      	mov	r0, r5
  402ade:	f001 f913 	bl	403d08 <__sinit>
  402ae2:	e796      	b.n	402a12 <setvbuf+0x1a>
  402ae4:	2f00      	cmp	r7, #0
  402ae6:	d0cb      	beq.n	402a80 <setvbuf+0x88>
  402ae8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402aea:	2b00      	cmp	r3, #0
  402aec:	d033      	beq.n	402b56 <setvbuf+0x15e>
  402aee:	9b00      	ldr	r3, [sp, #0]
  402af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402af4:	6027      	str	r7, [r4, #0]
  402af6:	429e      	cmp	r6, r3
  402af8:	bf1c      	itt	ne
  402afa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  402afe:	81a2      	strhne	r2, [r4, #12]
  402b00:	f1b8 0f01 	cmp.w	r8, #1
  402b04:	bf04      	itt	eq
  402b06:	f042 0201 	orreq.w	r2, r2, #1
  402b0a:	81a2      	strheq	r2, [r4, #12]
  402b0c:	b292      	uxth	r2, r2
  402b0e:	f012 0308 	ands.w	r3, r2, #8
  402b12:	6127      	str	r7, [r4, #16]
  402b14:	6166      	str	r6, [r4, #20]
  402b16:	d00e      	beq.n	402b36 <setvbuf+0x13e>
  402b18:	07d1      	lsls	r1, r2, #31
  402b1a:	d51a      	bpl.n	402b52 <setvbuf+0x15a>
  402b1c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402b1e:	4276      	negs	r6, r6
  402b20:	2300      	movs	r3, #0
  402b22:	f015 0501 	ands.w	r5, r5, #1
  402b26:	61a6      	str	r6, [r4, #24]
  402b28:	60a3      	str	r3, [r4, #8]
  402b2a:	d009      	beq.n	402b40 <setvbuf+0x148>
  402b2c:	2500      	movs	r5, #0
  402b2e:	4628      	mov	r0, r5
  402b30:	b003      	add	sp, #12
  402b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b36:	60a3      	str	r3, [r4, #8]
  402b38:	6e65      	ldr	r5, [r4, #100]	; 0x64
  402b3a:	f015 0501 	ands.w	r5, r5, #1
  402b3e:	d1f5      	bne.n	402b2c <setvbuf+0x134>
  402b40:	0593      	lsls	r3, r2, #22
  402b42:	d4c0      	bmi.n	402ac6 <setvbuf+0xce>
  402b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402b46:	f001 fca1 	bl	40448c <__retarget_lock_release_recursive>
  402b4a:	4628      	mov	r0, r5
  402b4c:	b003      	add	sp, #12
  402b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b52:	60a6      	str	r6, [r4, #8]
  402b54:	e7f0      	b.n	402b38 <setvbuf+0x140>
  402b56:	4628      	mov	r0, r5
  402b58:	f001 f8d6 	bl	403d08 <__sinit>
  402b5c:	e7c7      	b.n	402aee <setvbuf+0xf6>
  402b5e:	f04f 35ff 	mov.w	r5, #4294967295
  402b62:	e7b0      	b.n	402ac6 <setvbuf+0xce>
  402b64:	f8dd 9000 	ldr.w	r9, [sp]
  402b68:	45b1      	cmp	r9, r6
  402b6a:	d004      	beq.n	402b76 <setvbuf+0x17e>
  402b6c:	4648      	mov	r0, r9
  402b6e:	f001 fd07 	bl	404580 <malloc>
  402b72:	4607      	mov	r7, r0
  402b74:	b920      	cbnz	r0, 402b80 <setvbuf+0x188>
  402b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b7a:	f04f 35ff 	mov.w	r5, #4294967295
  402b7e:	e792      	b.n	402aa6 <setvbuf+0xae>
  402b80:	464e      	mov	r6, r9
  402b82:	e783      	b.n	402a8c <setvbuf+0x94>
  402b84:	20400028 	.word	0x20400028
	...

00402bc0 <strlen>:
  402bc0:	f890 f000 	pld	[r0]
  402bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402bc8:	f020 0107 	bic.w	r1, r0, #7
  402bcc:	f06f 0c00 	mvn.w	ip, #0
  402bd0:	f010 0407 	ands.w	r4, r0, #7
  402bd4:	f891 f020 	pld	[r1, #32]
  402bd8:	f040 8049 	bne.w	402c6e <strlen+0xae>
  402bdc:	f04f 0400 	mov.w	r4, #0
  402be0:	f06f 0007 	mvn.w	r0, #7
  402be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  402be8:	f891 f040 	pld	[r1, #64]	; 0x40
  402bec:	f100 0008 	add.w	r0, r0, #8
  402bf0:	fa82 f24c 	uadd8	r2, r2, ip
  402bf4:	faa4 f28c 	sel	r2, r4, ip
  402bf8:	fa83 f34c 	uadd8	r3, r3, ip
  402bfc:	faa2 f38c 	sel	r3, r2, ip
  402c00:	bb4b      	cbnz	r3, 402c56 <strlen+0x96>
  402c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402c06:	fa82 f24c 	uadd8	r2, r2, ip
  402c0a:	f100 0008 	add.w	r0, r0, #8
  402c0e:	faa4 f28c 	sel	r2, r4, ip
  402c12:	fa83 f34c 	uadd8	r3, r3, ip
  402c16:	faa2 f38c 	sel	r3, r2, ip
  402c1a:	b9e3      	cbnz	r3, 402c56 <strlen+0x96>
  402c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402c20:	fa82 f24c 	uadd8	r2, r2, ip
  402c24:	f100 0008 	add.w	r0, r0, #8
  402c28:	faa4 f28c 	sel	r2, r4, ip
  402c2c:	fa83 f34c 	uadd8	r3, r3, ip
  402c30:	faa2 f38c 	sel	r3, r2, ip
  402c34:	b97b      	cbnz	r3, 402c56 <strlen+0x96>
  402c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402c3a:	f101 0120 	add.w	r1, r1, #32
  402c3e:	fa82 f24c 	uadd8	r2, r2, ip
  402c42:	f100 0008 	add.w	r0, r0, #8
  402c46:	faa4 f28c 	sel	r2, r4, ip
  402c4a:	fa83 f34c 	uadd8	r3, r3, ip
  402c4e:	faa2 f38c 	sel	r3, r2, ip
  402c52:	2b00      	cmp	r3, #0
  402c54:	d0c6      	beq.n	402be4 <strlen+0x24>
  402c56:	2a00      	cmp	r2, #0
  402c58:	bf04      	itt	eq
  402c5a:	3004      	addeq	r0, #4
  402c5c:	461a      	moveq	r2, r3
  402c5e:	ba12      	rev	r2, r2
  402c60:	fab2 f282 	clz	r2, r2
  402c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402c6c:	4770      	bx	lr
  402c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402c72:	f004 0503 	and.w	r5, r4, #3
  402c76:	f1c4 0000 	rsb	r0, r4, #0
  402c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402c7e:	f014 0f04 	tst.w	r4, #4
  402c82:	f891 f040 	pld	[r1, #64]	; 0x40
  402c86:	fa0c f505 	lsl.w	r5, ip, r5
  402c8a:	ea62 0205 	orn	r2, r2, r5
  402c8e:	bf1c      	itt	ne
  402c90:	ea63 0305 	ornne	r3, r3, r5
  402c94:	4662      	movne	r2, ip
  402c96:	f04f 0400 	mov.w	r4, #0
  402c9a:	e7a9      	b.n	402bf0 <strlen+0x30>

00402c9c <__sprint_r.part.0>:
  402c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ca0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402ca2:	049c      	lsls	r4, r3, #18
  402ca4:	4693      	mov	fp, r2
  402ca6:	d52f      	bpl.n	402d08 <__sprint_r.part.0+0x6c>
  402ca8:	6893      	ldr	r3, [r2, #8]
  402caa:	6812      	ldr	r2, [r2, #0]
  402cac:	b353      	cbz	r3, 402d04 <__sprint_r.part.0+0x68>
  402cae:	460e      	mov	r6, r1
  402cb0:	4607      	mov	r7, r0
  402cb2:	f102 0908 	add.w	r9, r2, #8
  402cb6:	e919 0420 	ldmdb	r9, {r5, sl}
  402cba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402cbe:	d017      	beq.n	402cf0 <__sprint_r.part.0+0x54>
  402cc0:	3d04      	subs	r5, #4
  402cc2:	2400      	movs	r4, #0
  402cc4:	e001      	b.n	402cca <__sprint_r.part.0+0x2e>
  402cc6:	45a0      	cmp	r8, r4
  402cc8:	d010      	beq.n	402cec <__sprint_r.part.0+0x50>
  402cca:	4632      	mov	r2, r6
  402ccc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402cd0:	4638      	mov	r0, r7
  402cd2:	f001 f8bb 	bl	403e4c <_fputwc_r>
  402cd6:	1c43      	adds	r3, r0, #1
  402cd8:	f104 0401 	add.w	r4, r4, #1
  402cdc:	d1f3      	bne.n	402cc6 <__sprint_r.part.0+0x2a>
  402cde:	2300      	movs	r3, #0
  402ce0:	f8cb 3008 	str.w	r3, [fp, #8]
  402ce4:	f8cb 3004 	str.w	r3, [fp, #4]
  402ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cec:	f8db 3008 	ldr.w	r3, [fp, #8]
  402cf0:	f02a 0a03 	bic.w	sl, sl, #3
  402cf4:	eba3 030a 	sub.w	r3, r3, sl
  402cf8:	f8cb 3008 	str.w	r3, [fp, #8]
  402cfc:	f109 0908 	add.w	r9, r9, #8
  402d00:	2b00      	cmp	r3, #0
  402d02:	d1d8      	bne.n	402cb6 <__sprint_r.part.0+0x1a>
  402d04:	2000      	movs	r0, #0
  402d06:	e7ea      	b.n	402cde <__sprint_r.part.0+0x42>
  402d08:	f001 fa0a 	bl	404120 <__sfvwrite_r>
  402d0c:	2300      	movs	r3, #0
  402d0e:	f8cb 3008 	str.w	r3, [fp, #8]
  402d12:	f8cb 3004 	str.w	r3, [fp, #4]
  402d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d1a:	bf00      	nop

00402d1c <_vfiprintf_r>:
  402d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d20:	b0ad      	sub	sp, #180	; 0xb4
  402d22:	461d      	mov	r5, r3
  402d24:	468b      	mov	fp, r1
  402d26:	4690      	mov	r8, r2
  402d28:	9307      	str	r3, [sp, #28]
  402d2a:	9006      	str	r0, [sp, #24]
  402d2c:	b118      	cbz	r0, 402d36 <_vfiprintf_r+0x1a>
  402d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d30:	2b00      	cmp	r3, #0
  402d32:	f000 80f3 	beq.w	402f1c <_vfiprintf_r+0x200>
  402d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402d3a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402d3e:	07df      	lsls	r7, r3, #31
  402d40:	b281      	uxth	r1, r0
  402d42:	d402      	bmi.n	402d4a <_vfiprintf_r+0x2e>
  402d44:	058e      	lsls	r6, r1, #22
  402d46:	f140 80fc 	bpl.w	402f42 <_vfiprintf_r+0x226>
  402d4a:	048c      	lsls	r4, r1, #18
  402d4c:	d40a      	bmi.n	402d64 <_vfiprintf_r+0x48>
  402d4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402d52:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402d5a:	f8ab 100c 	strh.w	r1, [fp, #12]
  402d5e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402d62:	b289      	uxth	r1, r1
  402d64:	0708      	lsls	r0, r1, #28
  402d66:	f140 80b3 	bpl.w	402ed0 <_vfiprintf_r+0x1b4>
  402d6a:	f8db 3010 	ldr.w	r3, [fp, #16]
  402d6e:	2b00      	cmp	r3, #0
  402d70:	f000 80ae 	beq.w	402ed0 <_vfiprintf_r+0x1b4>
  402d74:	f001 031a 	and.w	r3, r1, #26
  402d78:	2b0a      	cmp	r3, #10
  402d7a:	f000 80b5 	beq.w	402ee8 <_vfiprintf_r+0x1cc>
  402d7e:	2300      	movs	r3, #0
  402d80:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402d84:	930b      	str	r3, [sp, #44]	; 0x2c
  402d86:	9311      	str	r3, [sp, #68]	; 0x44
  402d88:	9310      	str	r3, [sp, #64]	; 0x40
  402d8a:	9303      	str	r3, [sp, #12]
  402d8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402d90:	46ca      	mov	sl, r9
  402d92:	f8cd b010 	str.w	fp, [sp, #16]
  402d96:	f898 3000 	ldrb.w	r3, [r8]
  402d9a:	4644      	mov	r4, r8
  402d9c:	b1fb      	cbz	r3, 402dde <_vfiprintf_r+0xc2>
  402d9e:	2b25      	cmp	r3, #37	; 0x25
  402da0:	d102      	bne.n	402da8 <_vfiprintf_r+0x8c>
  402da2:	e01c      	b.n	402dde <_vfiprintf_r+0xc2>
  402da4:	2b25      	cmp	r3, #37	; 0x25
  402da6:	d003      	beq.n	402db0 <_vfiprintf_r+0x94>
  402da8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402dac:	2b00      	cmp	r3, #0
  402dae:	d1f9      	bne.n	402da4 <_vfiprintf_r+0x88>
  402db0:	eba4 0508 	sub.w	r5, r4, r8
  402db4:	b19d      	cbz	r5, 402dde <_vfiprintf_r+0xc2>
  402db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402dba:	f8ca 8000 	str.w	r8, [sl]
  402dbe:	3301      	adds	r3, #1
  402dc0:	442a      	add	r2, r5
  402dc2:	2b07      	cmp	r3, #7
  402dc4:	f8ca 5004 	str.w	r5, [sl, #4]
  402dc8:	9211      	str	r2, [sp, #68]	; 0x44
  402dca:	9310      	str	r3, [sp, #64]	; 0x40
  402dcc:	dd7a      	ble.n	402ec4 <_vfiprintf_r+0x1a8>
  402dce:	2a00      	cmp	r2, #0
  402dd0:	f040 84b0 	bne.w	403734 <_vfiprintf_r+0xa18>
  402dd4:	9b03      	ldr	r3, [sp, #12]
  402dd6:	9210      	str	r2, [sp, #64]	; 0x40
  402dd8:	442b      	add	r3, r5
  402dda:	46ca      	mov	sl, r9
  402ddc:	9303      	str	r3, [sp, #12]
  402dde:	7823      	ldrb	r3, [r4, #0]
  402de0:	2b00      	cmp	r3, #0
  402de2:	f000 83e0 	beq.w	4035a6 <_vfiprintf_r+0x88a>
  402de6:	2000      	movs	r0, #0
  402de8:	f04f 0300 	mov.w	r3, #0
  402dec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402df0:	f104 0801 	add.w	r8, r4, #1
  402df4:	7862      	ldrb	r2, [r4, #1]
  402df6:	4605      	mov	r5, r0
  402df8:	4606      	mov	r6, r0
  402dfa:	4603      	mov	r3, r0
  402dfc:	f04f 34ff 	mov.w	r4, #4294967295
  402e00:	f108 0801 	add.w	r8, r8, #1
  402e04:	f1a2 0120 	sub.w	r1, r2, #32
  402e08:	2958      	cmp	r1, #88	; 0x58
  402e0a:	f200 82de 	bhi.w	4033ca <_vfiprintf_r+0x6ae>
  402e0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402e12:	0221      	.short	0x0221
  402e14:	02dc02dc 	.word	0x02dc02dc
  402e18:	02dc0229 	.word	0x02dc0229
  402e1c:	02dc02dc 	.word	0x02dc02dc
  402e20:	02dc02dc 	.word	0x02dc02dc
  402e24:	028902dc 	.word	0x028902dc
  402e28:	02dc0295 	.word	0x02dc0295
  402e2c:	02bd00a2 	.word	0x02bd00a2
  402e30:	019f02dc 	.word	0x019f02dc
  402e34:	01a401a4 	.word	0x01a401a4
  402e38:	01a401a4 	.word	0x01a401a4
  402e3c:	01a401a4 	.word	0x01a401a4
  402e40:	01a401a4 	.word	0x01a401a4
  402e44:	02dc01a4 	.word	0x02dc01a4
  402e48:	02dc02dc 	.word	0x02dc02dc
  402e4c:	02dc02dc 	.word	0x02dc02dc
  402e50:	02dc02dc 	.word	0x02dc02dc
  402e54:	02dc02dc 	.word	0x02dc02dc
  402e58:	01b202dc 	.word	0x01b202dc
  402e5c:	02dc02dc 	.word	0x02dc02dc
  402e60:	02dc02dc 	.word	0x02dc02dc
  402e64:	02dc02dc 	.word	0x02dc02dc
  402e68:	02dc02dc 	.word	0x02dc02dc
  402e6c:	02dc02dc 	.word	0x02dc02dc
  402e70:	02dc0197 	.word	0x02dc0197
  402e74:	02dc02dc 	.word	0x02dc02dc
  402e78:	02dc02dc 	.word	0x02dc02dc
  402e7c:	02dc019b 	.word	0x02dc019b
  402e80:	025302dc 	.word	0x025302dc
  402e84:	02dc02dc 	.word	0x02dc02dc
  402e88:	02dc02dc 	.word	0x02dc02dc
  402e8c:	02dc02dc 	.word	0x02dc02dc
  402e90:	02dc02dc 	.word	0x02dc02dc
  402e94:	02dc02dc 	.word	0x02dc02dc
  402e98:	021b025a 	.word	0x021b025a
  402e9c:	02dc02dc 	.word	0x02dc02dc
  402ea0:	026e02dc 	.word	0x026e02dc
  402ea4:	02dc021b 	.word	0x02dc021b
  402ea8:	027302dc 	.word	0x027302dc
  402eac:	01f502dc 	.word	0x01f502dc
  402eb0:	02090182 	.word	0x02090182
  402eb4:	02dc02d7 	.word	0x02dc02d7
  402eb8:	02dc029a 	.word	0x02dc029a
  402ebc:	02dc00a7 	.word	0x02dc00a7
  402ec0:	022e02dc 	.word	0x022e02dc
  402ec4:	f10a 0a08 	add.w	sl, sl, #8
  402ec8:	9b03      	ldr	r3, [sp, #12]
  402eca:	442b      	add	r3, r5
  402ecc:	9303      	str	r3, [sp, #12]
  402ece:	e786      	b.n	402dde <_vfiprintf_r+0xc2>
  402ed0:	4659      	mov	r1, fp
  402ed2:	9806      	ldr	r0, [sp, #24]
  402ed4:	f000 fdac 	bl	403a30 <__swsetup_r>
  402ed8:	bb18      	cbnz	r0, 402f22 <_vfiprintf_r+0x206>
  402eda:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402ede:	f001 031a 	and.w	r3, r1, #26
  402ee2:	2b0a      	cmp	r3, #10
  402ee4:	f47f af4b 	bne.w	402d7e <_vfiprintf_r+0x62>
  402ee8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402eec:	2b00      	cmp	r3, #0
  402eee:	f6ff af46 	blt.w	402d7e <_vfiprintf_r+0x62>
  402ef2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402ef6:	07db      	lsls	r3, r3, #31
  402ef8:	d405      	bmi.n	402f06 <_vfiprintf_r+0x1ea>
  402efa:	058f      	lsls	r7, r1, #22
  402efc:	d403      	bmi.n	402f06 <_vfiprintf_r+0x1ea>
  402efe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402f02:	f001 fac3 	bl	40448c <__retarget_lock_release_recursive>
  402f06:	462b      	mov	r3, r5
  402f08:	4642      	mov	r2, r8
  402f0a:	4659      	mov	r1, fp
  402f0c:	9806      	ldr	r0, [sp, #24]
  402f0e:	f000 fd4d 	bl	4039ac <__sbprintf>
  402f12:	9003      	str	r0, [sp, #12]
  402f14:	9803      	ldr	r0, [sp, #12]
  402f16:	b02d      	add	sp, #180	; 0xb4
  402f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f1c:	f000 fef4 	bl	403d08 <__sinit>
  402f20:	e709      	b.n	402d36 <_vfiprintf_r+0x1a>
  402f22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402f26:	07d9      	lsls	r1, r3, #31
  402f28:	d404      	bmi.n	402f34 <_vfiprintf_r+0x218>
  402f2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402f2e:	059a      	lsls	r2, r3, #22
  402f30:	f140 84aa 	bpl.w	403888 <_vfiprintf_r+0xb6c>
  402f34:	f04f 33ff 	mov.w	r3, #4294967295
  402f38:	9303      	str	r3, [sp, #12]
  402f3a:	9803      	ldr	r0, [sp, #12]
  402f3c:	b02d      	add	sp, #180	; 0xb4
  402f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402f46:	f001 fa9f 	bl	404488 <__retarget_lock_acquire_recursive>
  402f4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402f4e:	b281      	uxth	r1, r0
  402f50:	e6fb      	b.n	402d4a <_vfiprintf_r+0x2e>
  402f52:	4276      	negs	r6, r6
  402f54:	9207      	str	r2, [sp, #28]
  402f56:	f043 0304 	orr.w	r3, r3, #4
  402f5a:	f898 2000 	ldrb.w	r2, [r8]
  402f5e:	e74f      	b.n	402e00 <_vfiprintf_r+0xe4>
  402f60:	9608      	str	r6, [sp, #32]
  402f62:	069e      	lsls	r6, r3, #26
  402f64:	f100 8450 	bmi.w	403808 <_vfiprintf_r+0xaec>
  402f68:	9907      	ldr	r1, [sp, #28]
  402f6a:	06dd      	lsls	r5, r3, #27
  402f6c:	460a      	mov	r2, r1
  402f6e:	f100 83ef 	bmi.w	403750 <_vfiprintf_r+0xa34>
  402f72:	0658      	lsls	r0, r3, #25
  402f74:	f140 83ec 	bpl.w	403750 <_vfiprintf_r+0xa34>
  402f78:	880e      	ldrh	r6, [r1, #0]
  402f7a:	3104      	adds	r1, #4
  402f7c:	2700      	movs	r7, #0
  402f7e:	2201      	movs	r2, #1
  402f80:	9107      	str	r1, [sp, #28]
  402f82:	f04f 0100 	mov.w	r1, #0
  402f86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402f8a:	2500      	movs	r5, #0
  402f8c:	1c61      	adds	r1, r4, #1
  402f8e:	f000 8116 	beq.w	4031be <_vfiprintf_r+0x4a2>
  402f92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402f96:	9102      	str	r1, [sp, #8]
  402f98:	ea56 0107 	orrs.w	r1, r6, r7
  402f9c:	f040 8114 	bne.w	4031c8 <_vfiprintf_r+0x4ac>
  402fa0:	2c00      	cmp	r4, #0
  402fa2:	f040 835c 	bne.w	40365e <_vfiprintf_r+0x942>
  402fa6:	2a00      	cmp	r2, #0
  402fa8:	f040 83b7 	bne.w	40371a <_vfiprintf_r+0x9fe>
  402fac:	f013 0301 	ands.w	r3, r3, #1
  402fb0:	9305      	str	r3, [sp, #20]
  402fb2:	f000 8457 	beq.w	403864 <_vfiprintf_r+0xb48>
  402fb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402fba:	2330      	movs	r3, #48	; 0x30
  402fbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402fc0:	9b05      	ldr	r3, [sp, #20]
  402fc2:	42a3      	cmp	r3, r4
  402fc4:	bfb8      	it	lt
  402fc6:	4623      	movlt	r3, r4
  402fc8:	9301      	str	r3, [sp, #4]
  402fca:	b10d      	cbz	r5, 402fd0 <_vfiprintf_r+0x2b4>
  402fcc:	3301      	adds	r3, #1
  402fce:	9301      	str	r3, [sp, #4]
  402fd0:	9b02      	ldr	r3, [sp, #8]
  402fd2:	f013 0302 	ands.w	r3, r3, #2
  402fd6:	9309      	str	r3, [sp, #36]	; 0x24
  402fd8:	d002      	beq.n	402fe0 <_vfiprintf_r+0x2c4>
  402fda:	9b01      	ldr	r3, [sp, #4]
  402fdc:	3302      	adds	r3, #2
  402fde:	9301      	str	r3, [sp, #4]
  402fe0:	9b02      	ldr	r3, [sp, #8]
  402fe2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402fe6:	930a      	str	r3, [sp, #40]	; 0x28
  402fe8:	f040 8217 	bne.w	40341a <_vfiprintf_r+0x6fe>
  402fec:	9b08      	ldr	r3, [sp, #32]
  402fee:	9a01      	ldr	r2, [sp, #4]
  402ff0:	1a9d      	subs	r5, r3, r2
  402ff2:	2d00      	cmp	r5, #0
  402ff4:	f340 8211 	ble.w	40341a <_vfiprintf_r+0x6fe>
  402ff8:	2d10      	cmp	r5, #16
  402ffa:	f340 8490 	ble.w	40391e <_vfiprintf_r+0xc02>
  402ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403000:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403002:	4ec4      	ldr	r6, [pc, #784]	; (403314 <_vfiprintf_r+0x5f8>)
  403004:	46d6      	mov	lr, sl
  403006:	2710      	movs	r7, #16
  403008:	46a2      	mov	sl, r4
  40300a:	4619      	mov	r1, r3
  40300c:	9c06      	ldr	r4, [sp, #24]
  40300e:	e007      	b.n	403020 <_vfiprintf_r+0x304>
  403010:	f101 0c02 	add.w	ip, r1, #2
  403014:	f10e 0e08 	add.w	lr, lr, #8
  403018:	4601      	mov	r1, r0
  40301a:	3d10      	subs	r5, #16
  40301c:	2d10      	cmp	r5, #16
  40301e:	dd11      	ble.n	403044 <_vfiprintf_r+0x328>
  403020:	1c48      	adds	r0, r1, #1
  403022:	3210      	adds	r2, #16
  403024:	2807      	cmp	r0, #7
  403026:	9211      	str	r2, [sp, #68]	; 0x44
  403028:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40302c:	9010      	str	r0, [sp, #64]	; 0x40
  40302e:	ddef      	ble.n	403010 <_vfiprintf_r+0x2f4>
  403030:	2a00      	cmp	r2, #0
  403032:	f040 81e4 	bne.w	4033fe <_vfiprintf_r+0x6e2>
  403036:	3d10      	subs	r5, #16
  403038:	2d10      	cmp	r5, #16
  40303a:	4611      	mov	r1, r2
  40303c:	f04f 0c01 	mov.w	ip, #1
  403040:	46ce      	mov	lr, r9
  403042:	dced      	bgt.n	403020 <_vfiprintf_r+0x304>
  403044:	4654      	mov	r4, sl
  403046:	4661      	mov	r1, ip
  403048:	46f2      	mov	sl, lr
  40304a:	442a      	add	r2, r5
  40304c:	2907      	cmp	r1, #7
  40304e:	9211      	str	r2, [sp, #68]	; 0x44
  403050:	f8ca 6000 	str.w	r6, [sl]
  403054:	f8ca 5004 	str.w	r5, [sl, #4]
  403058:	9110      	str	r1, [sp, #64]	; 0x40
  40305a:	f300 82ec 	bgt.w	403636 <_vfiprintf_r+0x91a>
  40305e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403062:	f10a 0a08 	add.w	sl, sl, #8
  403066:	1c48      	adds	r0, r1, #1
  403068:	2d00      	cmp	r5, #0
  40306a:	f040 81de 	bne.w	40342a <_vfiprintf_r+0x70e>
  40306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403070:	2b00      	cmp	r3, #0
  403072:	f000 81f8 	beq.w	403466 <_vfiprintf_r+0x74a>
  403076:	3202      	adds	r2, #2
  403078:	a90e      	add	r1, sp, #56	; 0x38
  40307a:	2302      	movs	r3, #2
  40307c:	2807      	cmp	r0, #7
  40307e:	9211      	str	r2, [sp, #68]	; 0x44
  403080:	9010      	str	r0, [sp, #64]	; 0x40
  403082:	e88a 000a 	stmia.w	sl, {r1, r3}
  403086:	f340 81ea 	ble.w	40345e <_vfiprintf_r+0x742>
  40308a:	2a00      	cmp	r2, #0
  40308c:	f040 838c 	bne.w	4037a8 <_vfiprintf_r+0xa8c>
  403090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403092:	2b80      	cmp	r3, #128	; 0x80
  403094:	f04f 0001 	mov.w	r0, #1
  403098:	4611      	mov	r1, r2
  40309a:	46ca      	mov	sl, r9
  40309c:	f040 81e7 	bne.w	40346e <_vfiprintf_r+0x752>
  4030a0:	9b08      	ldr	r3, [sp, #32]
  4030a2:	9d01      	ldr	r5, [sp, #4]
  4030a4:	1b5e      	subs	r6, r3, r5
  4030a6:	2e00      	cmp	r6, #0
  4030a8:	f340 81e1 	ble.w	40346e <_vfiprintf_r+0x752>
  4030ac:	2e10      	cmp	r6, #16
  4030ae:	4d9a      	ldr	r5, [pc, #616]	; (403318 <_vfiprintf_r+0x5fc>)
  4030b0:	f340 8450 	ble.w	403954 <_vfiprintf_r+0xc38>
  4030b4:	46d4      	mov	ip, sl
  4030b6:	2710      	movs	r7, #16
  4030b8:	46a2      	mov	sl, r4
  4030ba:	9c06      	ldr	r4, [sp, #24]
  4030bc:	e007      	b.n	4030ce <_vfiprintf_r+0x3b2>
  4030be:	f101 0e02 	add.w	lr, r1, #2
  4030c2:	f10c 0c08 	add.w	ip, ip, #8
  4030c6:	4601      	mov	r1, r0
  4030c8:	3e10      	subs	r6, #16
  4030ca:	2e10      	cmp	r6, #16
  4030cc:	dd11      	ble.n	4030f2 <_vfiprintf_r+0x3d6>
  4030ce:	1c48      	adds	r0, r1, #1
  4030d0:	3210      	adds	r2, #16
  4030d2:	2807      	cmp	r0, #7
  4030d4:	9211      	str	r2, [sp, #68]	; 0x44
  4030d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4030da:	9010      	str	r0, [sp, #64]	; 0x40
  4030dc:	ddef      	ble.n	4030be <_vfiprintf_r+0x3a2>
  4030de:	2a00      	cmp	r2, #0
  4030e0:	f040 829d 	bne.w	40361e <_vfiprintf_r+0x902>
  4030e4:	3e10      	subs	r6, #16
  4030e6:	2e10      	cmp	r6, #16
  4030e8:	f04f 0e01 	mov.w	lr, #1
  4030ec:	4611      	mov	r1, r2
  4030ee:	46cc      	mov	ip, r9
  4030f0:	dced      	bgt.n	4030ce <_vfiprintf_r+0x3b2>
  4030f2:	4654      	mov	r4, sl
  4030f4:	46e2      	mov	sl, ip
  4030f6:	4432      	add	r2, r6
  4030f8:	f1be 0f07 	cmp.w	lr, #7
  4030fc:	9211      	str	r2, [sp, #68]	; 0x44
  4030fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  403102:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403106:	f300 8369 	bgt.w	4037dc <_vfiprintf_r+0xac0>
  40310a:	f10a 0a08 	add.w	sl, sl, #8
  40310e:	f10e 0001 	add.w	r0, lr, #1
  403112:	4671      	mov	r1, lr
  403114:	e1ab      	b.n	40346e <_vfiprintf_r+0x752>
  403116:	9608      	str	r6, [sp, #32]
  403118:	f013 0220 	ands.w	r2, r3, #32
  40311c:	f040 838c 	bne.w	403838 <_vfiprintf_r+0xb1c>
  403120:	f013 0110 	ands.w	r1, r3, #16
  403124:	f040 831a 	bne.w	40375c <_vfiprintf_r+0xa40>
  403128:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40312c:	f000 8316 	beq.w	40375c <_vfiprintf_r+0xa40>
  403130:	9807      	ldr	r0, [sp, #28]
  403132:	460a      	mov	r2, r1
  403134:	4601      	mov	r1, r0
  403136:	3104      	adds	r1, #4
  403138:	8806      	ldrh	r6, [r0, #0]
  40313a:	9107      	str	r1, [sp, #28]
  40313c:	2700      	movs	r7, #0
  40313e:	e720      	b.n	402f82 <_vfiprintf_r+0x266>
  403140:	9608      	str	r6, [sp, #32]
  403142:	f043 0310 	orr.w	r3, r3, #16
  403146:	e7e7      	b.n	403118 <_vfiprintf_r+0x3fc>
  403148:	9608      	str	r6, [sp, #32]
  40314a:	f043 0310 	orr.w	r3, r3, #16
  40314e:	e708      	b.n	402f62 <_vfiprintf_r+0x246>
  403150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403154:	f898 2000 	ldrb.w	r2, [r8]
  403158:	e652      	b.n	402e00 <_vfiprintf_r+0xe4>
  40315a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40315e:	2600      	movs	r6, #0
  403160:	f818 2b01 	ldrb.w	r2, [r8], #1
  403164:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403168:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40316c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403170:	2909      	cmp	r1, #9
  403172:	d9f5      	bls.n	403160 <_vfiprintf_r+0x444>
  403174:	e646      	b.n	402e04 <_vfiprintf_r+0xe8>
  403176:	9608      	str	r6, [sp, #32]
  403178:	2800      	cmp	r0, #0
  40317a:	f040 8408 	bne.w	40398e <_vfiprintf_r+0xc72>
  40317e:	f043 0310 	orr.w	r3, r3, #16
  403182:	069e      	lsls	r6, r3, #26
  403184:	f100 834c 	bmi.w	403820 <_vfiprintf_r+0xb04>
  403188:	06dd      	lsls	r5, r3, #27
  40318a:	f100 82f3 	bmi.w	403774 <_vfiprintf_r+0xa58>
  40318e:	0658      	lsls	r0, r3, #25
  403190:	f140 82f0 	bpl.w	403774 <_vfiprintf_r+0xa58>
  403194:	9d07      	ldr	r5, [sp, #28]
  403196:	f9b5 6000 	ldrsh.w	r6, [r5]
  40319a:	462a      	mov	r2, r5
  40319c:	17f7      	asrs	r7, r6, #31
  40319e:	3204      	adds	r2, #4
  4031a0:	4630      	mov	r0, r6
  4031a2:	4639      	mov	r1, r7
  4031a4:	9207      	str	r2, [sp, #28]
  4031a6:	2800      	cmp	r0, #0
  4031a8:	f171 0200 	sbcs.w	r2, r1, #0
  4031ac:	f2c0 835d 	blt.w	40386a <_vfiprintf_r+0xb4e>
  4031b0:	1c61      	adds	r1, r4, #1
  4031b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4031b6:	f04f 0201 	mov.w	r2, #1
  4031ba:	f47f aeea 	bne.w	402f92 <_vfiprintf_r+0x276>
  4031be:	ea56 0107 	orrs.w	r1, r6, r7
  4031c2:	f000 824d 	beq.w	403660 <_vfiprintf_r+0x944>
  4031c6:	9302      	str	r3, [sp, #8]
  4031c8:	2a01      	cmp	r2, #1
  4031ca:	f000 828c 	beq.w	4036e6 <_vfiprintf_r+0x9ca>
  4031ce:	2a02      	cmp	r2, #2
  4031d0:	f040 825c 	bne.w	40368c <_vfiprintf_r+0x970>
  4031d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4031d6:	46cb      	mov	fp, r9
  4031d8:	0933      	lsrs	r3, r6, #4
  4031da:	f006 010f 	and.w	r1, r6, #15
  4031de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4031e2:	093a      	lsrs	r2, r7, #4
  4031e4:	461e      	mov	r6, r3
  4031e6:	4617      	mov	r7, r2
  4031e8:	5c43      	ldrb	r3, [r0, r1]
  4031ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4031ee:	ea56 0307 	orrs.w	r3, r6, r7
  4031f2:	d1f1      	bne.n	4031d8 <_vfiprintf_r+0x4bc>
  4031f4:	eba9 030b 	sub.w	r3, r9, fp
  4031f8:	9305      	str	r3, [sp, #20]
  4031fa:	e6e1      	b.n	402fc0 <_vfiprintf_r+0x2a4>
  4031fc:	2800      	cmp	r0, #0
  4031fe:	f040 83c0 	bne.w	403982 <_vfiprintf_r+0xc66>
  403202:	0699      	lsls	r1, r3, #26
  403204:	f100 8367 	bmi.w	4038d6 <_vfiprintf_r+0xbba>
  403208:	06da      	lsls	r2, r3, #27
  40320a:	f100 80f1 	bmi.w	4033f0 <_vfiprintf_r+0x6d4>
  40320e:	065b      	lsls	r3, r3, #25
  403210:	f140 80ee 	bpl.w	4033f0 <_vfiprintf_r+0x6d4>
  403214:	9a07      	ldr	r2, [sp, #28]
  403216:	6813      	ldr	r3, [r2, #0]
  403218:	3204      	adds	r2, #4
  40321a:	9207      	str	r2, [sp, #28]
  40321c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403220:	801a      	strh	r2, [r3, #0]
  403222:	e5b8      	b.n	402d96 <_vfiprintf_r+0x7a>
  403224:	9807      	ldr	r0, [sp, #28]
  403226:	4a3d      	ldr	r2, [pc, #244]	; (40331c <_vfiprintf_r+0x600>)
  403228:	9608      	str	r6, [sp, #32]
  40322a:	920b      	str	r2, [sp, #44]	; 0x2c
  40322c:	6806      	ldr	r6, [r0, #0]
  40322e:	2278      	movs	r2, #120	; 0x78
  403230:	2130      	movs	r1, #48	; 0x30
  403232:	3004      	adds	r0, #4
  403234:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403238:	f043 0302 	orr.w	r3, r3, #2
  40323c:	9007      	str	r0, [sp, #28]
  40323e:	2700      	movs	r7, #0
  403240:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403244:	2202      	movs	r2, #2
  403246:	e69c      	b.n	402f82 <_vfiprintf_r+0x266>
  403248:	9608      	str	r6, [sp, #32]
  40324a:	2800      	cmp	r0, #0
  40324c:	d099      	beq.n	403182 <_vfiprintf_r+0x466>
  40324e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403252:	e796      	b.n	403182 <_vfiprintf_r+0x466>
  403254:	f898 2000 	ldrb.w	r2, [r8]
  403258:	2d00      	cmp	r5, #0
  40325a:	f47f add1 	bne.w	402e00 <_vfiprintf_r+0xe4>
  40325e:	2001      	movs	r0, #1
  403260:	2520      	movs	r5, #32
  403262:	e5cd      	b.n	402e00 <_vfiprintf_r+0xe4>
  403264:	f043 0301 	orr.w	r3, r3, #1
  403268:	f898 2000 	ldrb.w	r2, [r8]
  40326c:	e5c8      	b.n	402e00 <_vfiprintf_r+0xe4>
  40326e:	9608      	str	r6, [sp, #32]
  403270:	2800      	cmp	r0, #0
  403272:	f040 8393 	bne.w	40399c <_vfiprintf_r+0xc80>
  403276:	4929      	ldr	r1, [pc, #164]	; (40331c <_vfiprintf_r+0x600>)
  403278:	910b      	str	r1, [sp, #44]	; 0x2c
  40327a:	069f      	lsls	r7, r3, #26
  40327c:	f100 82e8 	bmi.w	403850 <_vfiprintf_r+0xb34>
  403280:	9807      	ldr	r0, [sp, #28]
  403282:	06de      	lsls	r6, r3, #27
  403284:	4601      	mov	r1, r0
  403286:	f100 8270 	bmi.w	40376a <_vfiprintf_r+0xa4e>
  40328a:	065d      	lsls	r5, r3, #25
  40328c:	f140 826d 	bpl.w	40376a <_vfiprintf_r+0xa4e>
  403290:	3104      	adds	r1, #4
  403292:	8806      	ldrh	r6, [r0, #0]
  403294:	9107      	str	r1, [sp, #28]
  403296:	2700      	movs	r7, #0
  403298:	07d8      	lsls	r0, r3, #31
  40329a:	f140 8222 	bpl.w	4036e2 <_vfiprintf_r+0x9c6>
  40329e:	ea56 0107 	orrs.w	r1, r6, r7
  4032a2:	f000 821e 	beq.w	4036e2 <_vfiprintf_r+0x9c6>
  4032a6:	2130      	movs	r1, #48	; 0x30
  4032a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4032ac:	f043 0302 	orr.w	r3, r3, #2
  4032b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4032b4:	2202      	movs	r2, #2
  4032b6:	e664      	b.n	402f82 <_vfiprintf_r+0x266>
  4032b8:	9608      	str	r6, [sp, #32]
  4032ba:	2800      	cmp	r0, #0
  4032bc:	f040 836b 	bne.w	403996 <_vfiprintf_r+0xc7a>
  4032c0:	4917      	ldr	r1, [pc, #92]	; (403320 <_vfiprintf_r+0x604>)
  4032c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4032c4:	e7d9      	b.n	40327a <_vfiprintf_r+0x55e>
  4032c6:	9907      	ldr	r1, [sp, #28]
  4032c8:	9608      	str	r6, [sp, #32]
  4032ca:	680a      	ldr	r2, [r1, #0]
  4032cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4032d0:	f04f 0000 	mov.w	r0, #0
  4032d4:	460a      	mov	r2, r1
  4032d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4032da:	3204      	adds	r2, #4
  4032dc:	2001      	movs	r0, #1
  4032de:	9001      	str	r0, [sp, #4]
  4032e0:	9207      	str	r2, [sp, #28]
  4032e2:	9005      	str	r0, [sp, #20]
  4032e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4032e8:	9302      	str	r3, [sp, #8]
  4032ea:	2400      	movs	r4, #0
  4032ec:	e670      	b.n	402fd0 <_vfiprintf_r+0x2b4>
  4032ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032f2:	f898 2000 	ldrb.w	r2, [r8]
  4032f6:	e583      	b.n	402e00 <_vfiprintf_r+0xe4>
  4032f8:	f898 2000 	ldrb.w	r2, [r8]
  4032fc:	2a6c      	cmp	r2, #108	; 0x6c
  4032fe:	bf03      	ittte	eq
  403300:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403304:	f043 0320 	orreq.w	r3, r3, #32
  403308:	f108 0801 	addeq.w	r8, r8, #1
  40330c:	f043 0310 	orrne.w	r3, r3, #16
  403310:	e576      	b.n	402e00 <_vfiprintf_r+0xe4>
  403312:	bf00      	nop
  403314:	00405818 	.word	0x00405818
  403318:	00405828 	.word	0x00405828
  40331c:	004057fc 	.word	0x004057fc
  403320:	004057e8 	.word	0x004057e8
  403324:	9907      	ldr	r1, [sp, #28]
  403326:	680e      	ldr	r6, [r1, #0]
  403328:	460a      	mov	r2, r1
  40332a:	2e00      	cmp	r6, #0
  40332c:	f102 0204 	add.w	r2, r2, #4
  403330:	f6ff ae0f 	blt.w	402f52 <_vfiprintf_r+0x236>
  403334:	9207      	str	r2, [sp, #28]
  403336:	f898 2000 	ldrb.w	r2, [r8]
  40333a:	e561      	b.n	402e00 <_vfiprintf_r+0xe4>
  40333c:	f898 2000 	ldrb.w	r2, [r8]
  403340:	2001      	movs	r0, #1
  403342:	252b      	movs	r5, #43	; 0x2b
  403344:	e55c      	b.n	402e00 <_vfiprintf_r+0xe4>
  403346:	9907      	ldr	r1, [sp, #28]
  403348:	9608      	str	r6, [sp, #32]
  40334a:	f8d1 b000 	ldr.w	fp, [r1]
  40334e:	f04f 0200 	mov.w	r2, #0
  403352:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403356:	1d0e      	adds	r6, r1, #4
  403358:	f1bb 0f00 	cmp.w	fp, #0
  40335c:	f000 82e5 	beq.w	40392a <_vfiprintf_r+0xc0e>
  403360:	1c67      	adds	r7, r4, #1
  403362:	f000 82c4 	beq.w	4038ee <_vfiprintf_r+0xbd2>
  403366:	4622      	mov	r2, r4
  403368:	2100      	movs	r1, #0
  40336a:	4658      	mov	r0, fp
  40336c:	9301      	str	r3, [sp, #4]
  40336e:	f001 fbd7 	bl	404b20 <memchr>
  403372:	9b01      	ldr	r3, [sp, #4]
  403374:	2800      	cmp	r0, #0
  403376:	f000 82e5 	beq.w	403944 <_vfiprintf_r+0xc28>
  40337a:	eba0 020b 	sub.w	r2, r0, fp
  40337e:	9205      	str	r2, [sp, #20]
  403380:	9607      	str	r6, [sp, #28]
  403382:	9302      	str	r3, [sp, #8]
  403384:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403388:	2400      	movs	r4, #0
  40338a:	e619      	b.n	402fc0 <_vfiprintf_r+0x2a4>
  40338c:	f898 2000 	ldrb.w	r2, [r8]
  403390:	2a2a      	cmp	r2, #42	; 0x2a
  403392:	f108 0701 	add.w	r7, r8, #1
  403396:	f000 82e9 	beq.w	40396c <_vfiprintf_r+0xc50>
  40339a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40339e:	2909      	cmp	r1, #9
  4033a0:	46b8      	mov	r8, r7
  4033a2:	f04f 0400 	mov.w	r4, #0
  4033a6:	f63f ad2d 	bhi.w	402e04 <_vfiprintf_r+0xe8>
  4033aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4033ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4033b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4033b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4033ba:	2909      	cmp	r1, #9
  4033bc:	d9f5      	bls.n	4033aa <_vfiprintf_r+0x68e>
  4033be:	e521      	b.n	402e04 <_vfiprintf_r+0xe8>
  4033c0:	f043 0320 	orr.w	r3, r3, #32
  4033c4:	f898 2000 	ldrb.w	r2, [r8]
  4033c8:	e51a      	b.n	402e00 <_vfiprintf_r+0xe4>
  4033ca:	9608      	str	r6, [sp, #32]
  4033cc:	2800      	cmp	r0, #0
  4033ce:	f040 82db 	bne.w	403988 <_vfiprintf_r+0xc6c>
  4033d2:	2a00      	cmp	r2, #0
  4033d4:	f000 80e7 	beq.w	4035a6 <_vfiprintf_r+0x88a>
  4033d8:	2101      	movs	r1, #1
  4033da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4033de:	f04f 0200 	mov.w	r2, #0
  4033e2:	9101      	str	r1, [sp, #4]
  4033e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4033e8:	9105      	str	r1, [sp, #20]
  4033ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4033ee:	e77b      	b.n	4032e8 <_vfiprintf_r+0x5cc>
  4033f0:	9a07      	ldr	r2, [sp, #28]
  4033f2:	6813      	ldr	r3, [r2, #0]
  4033f4:	3204      	adds	r2, #4
  4033f6:	9207      	str	r2, [sp, #28]
  4033f8:	9a03      	ldr	r2, [sp, #12]
  4033fa:	601a      	str	r2, [r3, #0]
  4033fc:	e4cb      	b.n	402d96 <_vfiprintf_r+0x7a>
  4033fe:	aa0f      	add	r2, sp, #60	; 0x3c
  403400:	9904      	ldr	r1, [sp, #16]
  403402:	4620      	mov	r0, r4
  403404:	f7ff fc4a 	bl	402c9c <__sprint_r.part.0>
  403408:	2800      	cmp	r0, #0
  40340a:	f040 8139 	bne.w	403680 <_vfiprintf_r+0x964>
  40340e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403410:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403412:	f101 0c01 	add.w	ip, r1, #1
  403416:	46ce      	mov	lr, r9
  403418:	e5ff      	b.n	40301a <_vfiprintf_r+0x2fe>
  40341a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40341c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40341e:	1c48      	adds	r0, r1, #1
  403420:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403424:	2d00      	cmp	r5, #0
  403426:	f43f ae22 	beq.w	40306e <_vfiprintf_r+0x352>
  40342a:	3201      	adds	r2, #1
  40342c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403430:	2101      	movs	r1, #1
  403432:	2807      	cmp	r0, #7
  403434:	9211      	str	r2, [sp, #68]	; 0x44
  403436:	9010      	str	r0, [sp, #64]	; 0x40
  403438:	f8ca 5000 	str.w	r5, [sl]
  40343c:	f8ca 1004 	str.w	r1, [sl, #4]
  403440:	f340 8108 	ble.w	403654 <_vfiprintf_r+0x938>
  403444:	2a00      	cmp	r2, #0
  403446:	f040 81bc 	bne.w	4037c2 <_vfiprintf_r+0xaa6>
  40344a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40344c:	2b00      	cmp	r3, #0
  40344e:	f43f ae1f 	beq.w	403090 <_vfiprintf_r+0x374>
  403452:	ab0e      	add	r3, sp, #56	; 0x38
  403454:	2202      	movs	r2, #2
  403456:	4608      	mov	r0, r1
  403458:	931c      	str	r3, [sp, #112]	; 0x70
  40345a:	921d      	str	r2, [sp, #116]	; 0x74
  40345c:	46ca      	mov	sl, r9
  40345e:	4601      	mov	r1, r0
  403460:	f10a 0a08 	add.w	sl, sl, #8
  403464:	3001      	adds	r0, #1
  403466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403468:	2b80      	cmp	r3, #128	; 0x80
  40346a:	f43f ae19 	beq.w	4030a0 <_vfiprintf_r+0x384>
  40346e:	9b05      	ldr	r3, [sp, #20]
  403470:	1ae4      	subs	r4, r4, r3
  403472:	2c00      	cmp	r4, #0
  403474:	dd2e      	ble.n	4034d4 <_vfiprintf_r+0x7b8>
  403476:	2c10      	cmp	r4, #16
  403478:	4db3      	ldr	r5, [pc, #716]	; (403748 <_vfiprintf_r+0xa2c>)
  40347a:	dd1e      	ble.n	4034ba <_vfiprintf_r+0x79e>
  40347c:	46d6      	mov	lr, sl
  40347e:	2610      	movs	r6, #16
  403480:	9f06      	ldr	r7, [sp, #24]
  403482:	f8dd a010 	ldr.w	sl, [sp, #16]
  403486:	e006      	b.n	403496 <_vfiprintf_r+0x77a>
  403488:	1c88      	adds	r0, r1, #2
  40348a:	f10e 0e08 	add.w	lr, lr, #8
  40348e:	4619      	mov	r1, r3
  403490:	3c10      	subs	r4, #16
  403492:	2c10      	cmp	r4, #16
  403494:	dd10      	ble.n	4034b8 <_vfiprintf_r+0x79c>
  403496:	1c4b      	adds	r3, r1, #1
  403498:	3210      	adds	r2, #16
  40349a:	2b07      	cmp	r3, #7
  40349c:	9211      	str	r2, [sp, #68]	; 0x44
  40349e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4034a2:	9310      	str	r3, [sp, #64]	; 0x40
  4034a4:	ddf0      	ble.n	403488 <_vfiprintf_r+0x76c>
  4034a6:	2a00      	cmp	r2, #0
  4034a8:	d165      	bne.n	403576 <_vfiprintf_r+0x85a>
  4034aa:	3c10      	subs	r4, #16
  4034ac:	2c10      	cmp	r4, #16
  4034ae:	f04f 0001 	mov.w	r0, #1
  4034b2:	4611      	mov	r1, r2
  4034b4:	46ce      	mov	lr, r9
  4034b6:	dcee      	bgt.n	403496 <_vfiprintf_r+0x77a>
  4034b8:	46f2      	mov	sl, lr
  4034ba:	4422      	add	r2, r4
  4034bc:	2807      	cmp	r0, #7
  4034be:	9211      	str	r2, [sp, #68]	; 0x44
  4034c0:	f8ca 5000 	str.w	r5, [sl]
  4034c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4034c8:	9010      	str	r0, [sp, #64]	; 0x40
  4034ca:	f300 8085 	bgt.w	4035d8 <_vfiprintf_r+0x8bc>
  4034ce:	f10a 0a08 	add.w	sl, sl, #8
  4034d2:	3001      	adds	r0, #1
  4034d4:	9905      	ldr	r1, [sp, #20]
  4034d6:	f8ca b000 	str.w	fp, [sl]
  4034da:	440a      	add	r2, r1
  4034dc:	2807      	cmp	r0, #7
  4034de:	9211      	str	r2, [sp, #68]	; 0x44
  4034e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4034e4:	9010      	str	r0, [sp, #64]	; 0x40
  4034e6:	f340 8082 	ble.w	4035ee <_vfiprintf_r+0x8d2>
  4034ea:	2a00      	cmp	r2, #0
  4034ec:	f040 8118 	bne.w	403720 <_vfiprintf_r+0xa04>
  4034f0:	9b02      	ldr	r3, [sp, #8]
  4034f2:	9210      	str	r2, [sp, #64]	; 0x40
  4034f4:	0758      	lsls	r0, r3, #29
  4034f6:	d535      	bpl.n	403564 <_vfiprintf_r+0x848>
  4034f8:	9b08      	ldr	r3, [sp, #32]
  4034fa:	9901      	ldr	r1, [sp, #4]
  4034fc:	1a5c      	subs	r4, r3, r1
  4034fe:	2c00      	cmp	r4, #0
  403500:	f340 80e7 	ble.w	4036d2 <_vfiprintf_r+0x9b6>
  403504:	46ca      	mov	sl, r9
  403506:	2c10      	cmp	r4, #16
  403508:	f340 8218 	ble.w	40393c <_vfiprintf_r+0xc20>
  40350c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40350e:	4e8f      	ldr	r6, [pc, #572]	; (40374c <_vfiprintf_r+0xa30>)
  403510:	9f06      	ldr	r7, [sp, #24]
  403512:	f8dd b010 	ldr.w	fp, [sp, #16]
  403516:	2510      	movs	r5, #16
  403518:	e006      	b.n	403528 <_vfiprintf_r+0x80c>
  40351a:	1c88      	adds	r0, r1, #2
  40351c:	f10a 0a08 	add.w	sl, sl, #8
  403520:	4619      	mov	r1, r3
  403522:	3c10      	subs	r4, #16
  403524:	2c10      	cmp	r4, #16
  403526:	dd11      	ble.n	40354c <_vfiprintf_r+0x830>
  403528:	1c4b      	adds	r3, r1, #1
  40352a:	3210      	adds	r2, #16
  40352c:	2b07      	cmp	r3, #7
  40352e:	9211      	str	r2, [sp, #68]	; 0x44
  403530:	f8ca 6000 	str.w	r6, [sl]
  403534:	f8ca 5004 	str.w	r5, [sl, #4]
  403538:	9310      	str	r3, [sp, #64]	; 0x40
  40353a:	ddee      	ble.n	40351a <_vfiprintf_r+0x7fe>
  40353c:	bb42      	cbnz	r2, 403590 <_vfiprintf_r+0x874>
  40353e:	3c10      	subs	r4, #16
  403540:	2c10      	cmp	r4, #16
  403542:	f04f 0001 	mov.w	r0, #1
  403546:	4611      	mov	r1, r2
  403548:	46ca      	mov	sl, r9
  40354a:	dced      	bgt.n	403528 <_vfiprintf_r+0x80c>
  40354c:	4422      	add	r2, r4
  40354e:	2807      	cmp	r0, #7
  403550:	9211      	str	r2, [sp, #68]	; 0x44
  403552:	f8ca 6000 	str.w	r6, [sl]
  403556:	f8ca 4004 	str.w	r4, [sl, #4]
  40355a:	9010      	str	r0, [sp, #64]	; 0x40
  40355c:	dd51      	ble.n	403602 <_vfiprintf_r+0x8e6>
  40355e:	2a00      	cmp	r2, #0
  403560:	f040 819b 	bne.w	40389a <_vfiprintf_r+0xb7e>
  403564:	9b03      	ldr	r3, [sp, #12]
  403566:	9a08      	ldr	r2, [sp, #32]
  403568:	9901      	ldr	r1, [sp, #4]
  40356a:	428a      	cmp	r2, r1
  40356c:	bfac      	ite	ge
  40356e:	189b      	addge	r3, r3, r2
  403570:	185b      	addlt	r3, r3, r1
  403572:	9303      	str	r3, [sp, #12]
  403574:	e04e      	b.n	403614 <_vfiprintf_r+0x8f8>
  403576:	aa0f      	add	r2, sp, #60	; 0x3c
  403578:	4651      	mov	r1, sl
  40357a:	4638      	mov	r0, r7
  40357c:	f7ff fb8e 	bl	402c9c <__sprint_r.part.0>
  403580:	2800      	cmp	r0, #0
  403582:	f040 813f 	bne.w	403804 <_vfiprintf_r+0xae8>
  403586:	9910      	ldr	r1, [sp, #64]	; 0x40
  403588:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40358a:	1c48      	adds	r0, r1, #1
  40358c:	46ce      	mov	lr, r9
  40358e:	e77f      	b.n	403490 <_vfiprintf_r+0x774>
  403590:	aa0f      	add	r2, sp, #60	; 0x3c
  403592:	4659      	mov	r1, fp
  403594:	4638      	mov	r0, r7
  403596:	f7ff fb81 	bl	402c9c <__sprint_r.part.0>
  40359a:	b960      	cbnz	r0, 4035b6 <_vfiprintf_r+0x89a>
  40359c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40359e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4035a0:	1c48      	adds	r0, r1, #1
  4035a2:	46ca      	mov	sl, r9
  4035a4:	e7bd      	b.n	403522 <_vfiprintf_r+0x806>
  4035a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4035a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4035ac:	2b00      	cmp	r3, #0
  4035ae:	f040 81d4 	bne.w	40395a <_vfiprintf_r+0xc3e>
  4035b2:	2300      	movs	r3, #0
  4035b4:	9310      	str	r3, [sp, #64]	; 0x40
  4035b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4035ba:	f013 0f01 	tst.w	r3, #1
  4035be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4035c2:	d102      	bne.n	4035ca <_vfiprintf_r+0x8ae>
  4035c4:	059a      	lsls	r2, r3, #22
  4035c6:	f140 80de 	bpl.w	403786 <_vfiprintf_r+0xa6a>
  4035ca:	065b      	lsls	r3, r3, #25
  4035cc:	f53f acb2 	bmi.w	402f34 <_vfiprintf_r+0x218>
  4035d0:	9803      	ldr	r0, [sp, #12]
  4035d2:	b02d      	add	sp, #180	; 0xb4
  4035d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035d8:	2a00      	cmp	r2, #0
  4035da:	f040 8106 	bne.w	4037ea <_vfiprintf_r+0xace>
  4035de:	9a05      	ldr	r2, [sp, #20]
  4035e0:	921d      	str	r2, [sp, #116]	; 0x74
  4035e2:	2301      	movs	r3, #1
  4035e4:	9211      	str	r2, [sp, #68]	; 0x44
  4035e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4035ea:	9310      	str	r3, [sp, #64]	; 0x40
  4035ec:	46ca      	mov	sl, r9
  4035ee:	f10a 0a08 	add.w	sl, sl, #8
  4035f2:	9b02      	ldr	r3, [sp, #8]
  4035f4:	0759      	lsls	r1, r3, #29
  4035f6:	d504      	bpl.n	403602 <_vfiprintf_r+0x8e6>
  4035f8:	9b08      	ldr	r3, [sp, #32]
  4035fa:	9901      	ldr	r1, [sp, #4]
  4035fc:	1a5c      	subs	r4, r3, r1
  4035fe:	2c00      	cmp	r4, #0
  403600:	dc81      	bgt.n	403506 <_vfiprintf_r+0x7ea>
  403602:	9b03      	ldr	r3, [sp, #12]
  403604:	9908      	ldr	r1, [sp, #32]
  403606:	9801      	ldr	r0, [sp, #4]
  403608:	4281      	cmp	r1, r0
  40360a:	bfac      	ite	ge
  40360c:	185b      	addge	r3, r3, r1
  40360e:	181b      	addlt	r3, r3, r0
  403610:	9303      	str	r3, [sp, #12]
  403612:	bb72      	cbnz	r2, 403672 <_vfiprintf_r+0x956>
  403614:	2300      	movs	r3, #0
  403616:	9310      	str	r3, [sp, #64]	; 0x40
  403618:	46ca      	mov	sl, r9
  40361a:	f7ff bbbc 	b.w	402d96 <_vfiprintf_r+0x7a>
  40361e:	aa0f      	add	r2, sp, #60	; 0x3c
  403620:	9904      	ldr	r1, [sp, #16]
  403622:	4620      	mov	r0, r4
  403624:	f7ff fb3a 	bl	402c9c <__sprint_r.part.0>
  403628:	bb50      	cbnz	r0, 403680 <_vfiprintf_r+0x964>
  40362a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40362c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40362e:	f101 0e01 	add.w	lr, r1, #1
  403632:	46cc      	mov	ip, r9
  403634:	e548      	b.n	4030c8 <_vfiprintf_r+0x3ac>
  403636:	2a00      	cmp	r2, #0
  403638:	f040 8140 	bne.w	4038bc <_vfiprintf_r+0xba0>
  40363c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  403640:	2900      	cmp	r1, #0
  403642:	f000 811b 	beq.w	40387c <_vfiprintf_r+0xb60>
  403646:	2201      	movs	r2, #1
  403648:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40364c:	4610      	mov	r0, r2
  40364e:	921d      	str	r2, [sp, #116]	; 0x74
  403650:	911c      	str	r1, [sp, #112]	; 0x70
  403652:	46ca      	mov	sl, r9
  403654:	4601      	mov	r1, r0
  403656:	f10a 0a08 	add.w	sl, sl, #8
  40365a:	3001      	adds	r0, #1
  40365c:	e507      	b.n	40306e <_vfiprintf_r+0x352>
  40365e:	9b02      	ldr	r3, [sp, #8]
  403660:	2a01      	cmp	r2, #1
  403662:	f000 8098 	beq.w	403796 <_vfiprintf_r+0xa7a>
  403666:	2a02      	cmp	r2, #2
  403668:	d10d      	bne.n	403686 <_vfiprintf_r+0x96a>
  40366a:	9302      	str	r3, [sp, #8]
  40366c:	2600      	movs	r6, #0
  40366e:	2700      	movs	r7, #0
  403670:	e5b0      	b.n	4031d4 <_vfiprintf_r+0x4b8>
  403672:	aa0f      	add	r2, sp, #60	; 0x3c
  403674:	9904      	ldr	r1, [sp, #16]
  403676:	9806      	ldr	r0, [sp, #24]
  403678:	f7ff fb10 	bl	402c9c <__sprint_r.part.0>
  40367c:	2800      	cmp	r0, #0
  40367e:	d0c9      	beq.n	403614 <_vfiprintf_r+0x8f8>
  403680:	f8dd b010 	ldr.w	fp, [sp, #16]
  403684:	e797      	b.n	4035b6 <_vfiprintf_r+0x89a>
  403686:	9302      	str	r3, [sp, #8]
  403688:	2600      	movs	r6, #0
  40368a:	2700      	movs	r7, #0
  40368c:	4649      	mov	r1, r9
  40368e:	e000      	b.n	403692 <_vfiprintf_r+0x976>
  403690:	4659      	mov	r1, fp
  403692:	08f2      	lsrs	r2, r6, #3
  403694:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403698:	08f8      	lsrs	r0, r7, #3
  40369a:	f006 0307 	and.w	r3, r6, #7
  40369e:	4607      	mov	r7, r0
  4036a0:	4616      	mov	r6, r2
  4036a2:	3330      	adds	r3, #48	; 0x30
  4036a4:	ea56 0207 	orrs.w	r2, r6, r7
  4036a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4036ac:	f101 3bff 	add.w	fp, r1, #4294967295
  4036b0:	d1ee      	bne.n	403690 <_vfiprintf_r+0x974>
  4036b2:	9a02      	ldr	r2, [sp, #8]
  4036b4:	07d6      	lsls	r6, r2, #31
  4036b6:	f57f ad9d 	bpl.w	4031f4 <_vfiprintf_r+0x4d8>
  4036ba:	2b30      	cmp	r3, #48	; 0x30
  4036bc:	f43f ad9a 	beq.w	4031f4 <_vfiprintf_r+0x4d8>
  4036c0:	3902      	subs	r1, #2
  4036c2:	2330      	movs	r3, #48	; 0x30
  4036c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4036c8:	eba9 0301 	sub.w	r3, r9, r1
  4036cc:	9305      	str	r3, [sp, #20]
  4036ce:	468b      	mov	fp, r1
  4036d0:	e476      	b.n	402fc0 <_vfiprintf_r+0x2a4>
  4036d2:	9b03      	ldr	r3, [sp, #12]
  4036d4:	9a08      	ldr	r2, [sp, #32]
  4036d6:	428a      	cmp	r2, r1
  4036d8:	bfac      	ite	ge
  4036da:	189b      	addge	r3, r3, r2
  4036dc:	185b      	addlt	r3, r3, r1
  4036de:	9303      	str	r3, [sp, #12]
  4036e0:	e798      	b.n	403614 <_vfiprintf_r+0x8f8>
  4036e2:	2202      	movs	r2, #2
  4036e4:	e44d      	b.n	402f82 <_vfiprintf_r+0x266>
  4036e6:	2f00      	cmp	r7, #0
  4036e8:	bf08      	it	eq
  4036ea:	2e0a      	cmpeq	r6, #10
  4036ec:	d352      	bcc.n	403794 <_vfiprintf_r+0xa78>
  4036ee:	46cb      	mov	fp, r9
  4036f0:	4630      	mov	r0, r6
  4036f2:	4639      	mov	r1, r7
  4036f4:	220a      	movs	r2, #10
  4036f6:	2300      	movs	r3, #0
  4036f8:	f7fe fe74 	bl	4023e4 <__aeabi_uldivmod>
  4036fc:	3230      	adds	r2, #48	; 0x30
  4036fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403702:	4630      	mov	r0, r6
  403704:	4639      	mov	r1, r7
  403706:	2300      	movs	r3, #0
  403708:	220a      	movs	r2, #10
  40370a:	f7fe fe6b 	bl	4023e4 <__aeabi_uldivmod>
  40370e:	4606      	mov	r6, r0
  403710:	460f      	mov	r7, r1
  403712:	ea56 0307 	orrs.w	r3, r6, r7
  403716:	d1eb      	bne.n	4036f0 <_vfiprintf_r+0x9d4>
  403718:	e56c      	b.n	4031f4 <_vfiprintf_r+0x4d8>
  40371a:	9405      	str	r4, [sp, #20]
  40371c:	46cb      	mov	fp, r9
  40371e:	e44f      	b.n	402fc0 <_vfiprintf_r+0x2a4>
  403720:	aa0f      	add	r2, sp, #60	; 0x3c
  403722:	9904      	ldr	r1, [sp, #16]
  403724:	9806      	ldr	r0, [sp, #24]
  403726:	f7ff fab9 	bl	402c9c <__sprint_r.part.0>
  40372a:	2800      	cmp	r0, #0
  40372c:	d1a8      	bne.n	403680 <_vfiprintf_r+0x964>
  40372e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403730:	46ca      	mov	sl, r9
  403732:	e75e      	b.n	4035f2 <_vfiprintf_r+0x8d6>
  403734:	aa0f      	add	r2, sp, #60	; 0x3c
  403736:	9904      	ldr	r1, [sp, #16]
  403738:	9806      	ldr	r0, [sp, #24]
  40373a:	f7ff faaf 	bl	402c9c <__sprint_r.part.0>
  40373e:	2800      	cmp	r0, #0
  403740:	d19e      	bne.n	403680 <_vfiprintf_r+0x964>
  403742:	46ca      	mov	sl, r9
  403744:	f7ff bbc0 	b.w	402ec8 <_vfiprintf_r+0x1ac>
  403748:	00405828 	.word	0x00405828
  40374c:	00405818 	.word	0x00405818
  403750:	3104      	adds	r1, #4
  403752:	6816      	ldr	r6, [r2, #0]
  403754:	9107      	str	r1, [sp, #28]
  403756:	2201      	movs	r2, #1
  403758:	2700      	movs	r7, #0
  40375a:	e412      	b.n	402f82 <_vfiprintf_r+0x266>
  40375c:	9807      	ldr	r0, [sp, #28]
  40375e:	4601      	mov	r1, r0
  403760:	3104      	adds	r1, #4
  403762:	6806      	ldr	r6, [r0, #0]
  403764:	9107      	str	r1, [sp, #28]
  403766:	2700      	movs	r7, #0
  403768:	e40b      	b.n	402f82 <_vfiprintf_r+0x266>
  40376a:	680e      	ldr	r6, [r1, #0]
  40376c:	3104      	adds	r1, #4
  40376e:	9107      	str	r1, [sp, #28]
  403770:	2700      	movs	r7, #0
  403772:	e591      	b.n	403298 <_vfiprintf_r+0x57c>
  403774:	9907      	ldr	r1, [sp, #28]
  403776:	680e      	ldr	r6, [r1, #0]
  403778:	460a      	mov	r2, r1
  40377a:	17f7      	asrs	r7, r6, #31
  40377c:	3204      	adds	r2, #4
  40377e:	9207      	str	r2, [sp, #28]
  403780:	4630      	mov	r0, r6
  403782:	4639      	mov	r1, r7
  403784:	e50f      	b.n	4031a6 <_vfiprintf_r+0x48a>
  403786:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40378a:	f000 fe7f 	bl	40448c <__retarget_lock_release_recursive>
  40378e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403792:	e71a      	b.n	4035ca <_vfiprintf_r+0x8ae>
  403794:	9b02      	ldr	r3, [sp, #8]
  403796:	9302      	str	r3, [sp, #8]
  403798:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40379c:	3630      	adds	r6, #48	; 0x30
  40379e:	2301      	movs	r3, #1
  4037a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4037a4:	9305      	str	r3, [sp, #20]
  4037a6:	e40b      	b.n	402fc0 <_vfiprintf_r+0x2a4>
  4037a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4037aa:	9904      	ldr	r1, [sp, #16]
  4037ac:	9806      	ldr	r0, [sp, #24]
  4037ae:	f7ff fa75 	bl	402c9c <__sprint_r.part.0>
  4037b2:	2800      	cmp	r0, #0
  4037b4:	f47f af64 	bne.w	403680 <_vfiprintf_r+0x964>
  4037b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037bc:	1c48      	adds	r0, r1, #1
  4037be:	46ca      	mov	sl, r9
  4037c0:	e651      	b.n	403466 <_vfiprintf_r+0x74a>
  4037c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4037c4:	9904      	ldr	r1, [sp, #16]
  4037c6:	9806      	ldr	r0, [sp, #24]
  4037c8:	f7ff fa68 	bl	402c9c <__sprint_r.part.0>
  4037cc:	2800      	cmp	r0, #0
  4037ce:	f47f af57 	bne.w	403680 <_vfiprintf_r+0x964>
  4037d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4037d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037d6:	1c48      	adds	r0, r1, #1
  4037d8:	46ca      	mov	sl, r9
  4037da:	e448      	b.n	40306e <_vfiprintf_r+0x352>
  4037dc:	2a00      	cmp	r2, #0
  4037de:	f040 8091 	bne.w	403904 <_vfiprintf_r+0xbe8>
  4037e2:	2001      	movs	r0, #1
  4037e4:	4611      	mov	r1, r2
  4037e6:	46ca      	mov	sl, r9
  4037e8:	e641      	b.n	40346e <_vfiprintf_r+0x752>
  4037ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4037ec:	9904      	ldr	r1, [sp, #16]
  4037ee:	9806      	ldr	r0, [sp, #24]
  4037f0:	f7ff fa54 	bl	402c9c <__sprint_r.part.0>
  4037f4:	2800      	cmp	r0, #0
  4037f6:	f47f af43 	bne.w	403680 <_vfiprintf_r+0x964>
  4037fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4037fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4037fe:	3001      	adds	r0, #1
  403800:	46ca      	mov	sl, r9
  403802:	e667      	b.n	4034d4 <_vfiprintf_r+0x7b8>
  403804:	46d3      	mov	fp, sl
  403806:	e6d6      	b.n	4035b6 <_vfiprintf_r+0x89a>
  403808:	9e07      	ldr	r6, [sp, #28]
  40380a:	3607      	adds	r6, #7
  40380c:	f026 0207 	bic.w	r2, r6, #7
  403810:	f102 0108 	add.w	r1, r2, #8
  403814:	e9d2 6700 	ldrd	r6, r7, [r2]
  403818:	9107      	str	r1, [sp, #28]
  40381a:	2201      	movs	r2, #1
  40381c:	f7ff bbb1 	b.w	402f82 <_vfiprintf_r+0x266>
  403820:	9e07      	ldr	r6, [sp, #28]
  403822:	3607      	adds	r6, #7
  403824:	f026 0607 	bic.w	r6, r6, #7
  403828:	e9d6 0100 	ldrd	r0, r1, [r6]
  40382c:	f106 0208 	add.w	r2, r6, #8
  403830:	9207      	str	r2, [sp, #28]
  403832:	4606      	mov	r6, r0
  403834:	460f      	mov	r7, r1
  403836:	e4b6      	b.n	4031a6 <_vfiprintf_r+0x48a>
  403838:	9e07      	ldr	r6, [sp, #28]
  40383a:	3607      	adds	r6, #7
  40383c:	f026 0207 	bic.w	r2, r6, #7
  403840:	f102 0108 	add.w	r1, r2, #8
  403844:	e9d2 6700 	ldrd	r6, r7, [r2]
  403848:	9107      	str	r1, [sp, #28]
  40384a:	2200      	movs	r2, #0
  40384c:	f7ff bb99 	b.w	402f82 <_vfiprintf_r+0x266>
  403850:	9e07      	ldr	r6, [sp, #28]
  403852:	3607      	adds	r6, #7
  403854:	f026 0107 	bic.w	r1, r6, #7
  403858:	f101 0008 	add.w	r0, r1, #8
  40385c:	9007      	str	r0, [sp, #28]
  40385e:	e9d1 6700 	ldrd	r6, r7, [r1]
  403862:	e519      	b.n	403298 <_vfiprintf_r+0x57c>
  403864:	46cb      	mov	fp, r9
  403866:	f7ff bbab 	b.w	402fc0 <_vfiprintf_r+0x2a4>
  40386a:	252d      	movs	r5, #45	; 0x2d
  40386c:	4276      	negs	r6, r6
  40386e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  403872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403876:	2201      	movs	r2, #1
  403878:	f7ff bb88 	b.w	402f8c <_vfiprintf_r+0x270>
  40387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40387e:	b9b3      	cbnz	r3, 4038ae <_vfiprintf_r+0xb92>
  403880:	4611      	mov	r1, r2
  403882:	2001      	movs	r0, #1
  403884:	46ca      	mov	sl, r9
  403886:	e5f2      	b.n	40346e <_vfiprintf_r+0x752>
  403888:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40388c:	f000 fdfe 	bl	40448c <__retarget_lock_release_recursive>
  403890:	f04f 33ff 	mov.w	r3, #4294967295
  403894:	9303      	str	r3, [sp, #12]
  403896:	f7ff bb50 	b.w	402f3a <_vfiprintf_r+0x21e>
  40389a:	aa0f      	add	r2, sp, #60	; 0x3c
  40389c:	9904      	ldr	r1, [sp, #16]
  40389e:	9806      	ldr	r0, [sp, #24]
  4038a0:	f7ff f9fc 	bl	402c9c <__sprint_r.part.0>
  4038a4:	2800      	cmp	r0, #0
  4038a6:	f47f aeeb 	bne.w	403680 <_vfiprintf_r+0x964>
  4038aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4038ac:	e6a9      	b.n	403602 <_vfiprintf_r+0x8e6>
  4038ae:	ab0e      	add	r3, sp, #56	; 0x38
  4038b0:	2202      	movs	r2, #2
  4038b2:	931c      	str	r3, [sp, #112]	; 0x70
  4038b4:	921d      	str	r2, [sp, #116]	; 0x74
  4038b6:	2001      	movs	r0, #1
  4038b8:	46ca      	mov	sl, r9
  4038ba:	e5d0      	b.n	40345e <_vfiprintf_r+0x742>
  4038bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4038be:	9904      	ldr	r1, [sp, #16]
  4038c0:	9806      	ldr	r0, [sp, #24]
  4038c2:	f7ff f9eb 	bl	402c9c <__sprint_r.part.0>
  4038c6:	2800      	cmp	r0, #0
  4038c8:	f47f aeda 	bne.w	403680 <_vfiprintf_r+0x964>
  4038cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4038ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4038d0:	1c48      	adds	r0, r1, #1
  4038d2:	46ca      	mov	sl, r9
  4038d4:	e5a4      	b.n	403420 <_vfiprintf_r+0x704>
  4038d6:	9a07      	ldr	r2, [sp, #28]
  4038d8:	9903      	ldr	r1, [sp, #12]
  4038da:	6813      	ldr	r3, [r2, #0]
  4038dc:	17cd      	asrs	r5, r1, #31
  4038de:	4608      	mov	r0, r1
  4038e0:	3204      	adds	r2, #4
  4038e2:	4629      	mov	r1, r5
  4038e4:	9207      	str	r2, [sp, #28]
  4038e6:	e9c3 0100 	strd	r0, r1, [r3]
  4038ea:	f7ff ba54 	b.w	402d96 <_vfiprintf_r+0x7a>
  4038ee:	4658      	mov	r0, fp
  4038f0:	9607      	str	r6, [sp, #28]
  4038f2:	9302      	str	r3, [sp, #8]
  4038f4:	f7ff f964 	bl	402bc0 <strlen>
  4038f8:	2400      	movs	r4, #0
  4038fa:	9005      	str	r0, [sp, #20]
  4038fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403900:	f7ff bb5e 	b.w	402fc0 <_vfiprintf_r+0x2a4>
  403904:	aa0f      	add	r2, sp, #60	; 0x3c
  403906:	9904      	ldr	r1, [sp, #16]
  403908:	9806      	ldr	r0, [sp, #24]
  40390a:	f7ff f9c7 	bl	402c9c <__sprint_r.part.0>
  40390e:	2800      	cmp	r0, #0
  403910:	f47f aeb6 	bne.w	403680 <_vfiprintf_r+0x964>
  403914:	9910      	ldr	r1, [sp, #64]	; 0x40
  403916:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403918:	1c48      	adds	r0, r1, #1
  40391a:	46ca      	mov	sl, r9
  40391c:	e5a7      	b.n	40346e <_vfiprintf_r+0x752>
  40391e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403920:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403922:	4e20      	ldr	r6, [pc, #128]	; (4039a4 <_vfiprintf_r+0xc88>)
  403924:	3101      	adds	r1, #1
  403926:	f7ff bb90 	b.w	40304a <_vfiprintf_r+0x32e>
  40392a:	2c06      	cmp	r4, #6
  40392c:	bf28      	it	cs
  40392e:	2406      	movcs	r4, #6
  403930:	9405      	str	r4, [sp, #20]
  403932:	9607      	str	r6, [sp, #28]
  403934:	9401      	str	r4, [sp, #4]
  403936:	f8df b070 	ldr.w	fp, [pc, #112]	; 4039a8 <_vfiprintf_r+0xc8c>
  40393a:	e4d5      	b.n	4032e8 <_vfiprintf_r+0x5cc>
  40393c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40393e:	4e19      	ldr	r6, [pc, #100]	; (4039a4 <_vfiprintf_r+0xc88>)
  403940:	3001      	adds	r0, #1
  403942:	e603      	b.n	40354c <_vfiprintf_r+0x830>
  403944:	9405      	str	r4, [sp, #20]
  403946:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40394a:	9607      	str	r6, [sp, #28]
  40394c:	9302      	str	r3, [sp, #8]
  40394e:	4604      	mov	r4, r0
  403950:	f7ff bb36 	b.w	402fc0 <_vfiprintf_r+0x2a4>
  403954:	4686      	mov	lr, r0
  403956:	f7ff bbce 	b.w	4030f6 <_vfiprintf_r+0x3da>
  40395a:	9806      	ldr	r0, [sp, #24]
  40395c:	aa0f      	add	r2, sp, #60	; 0x3c
  40395e:	4659      	mov	r1, fp
  403960:	f7ff f99c 	bl	402c9c <__sprint_r.part.0>
  403964:	2800      	cmp	r0, #0
  403966:	f43f ae24 	beq.w	4035b2 <_vfiprintf_r+0x896>
  40396a:	e624      	b.n	4035b6 <_vfiprintf_r+0x89a>
  40396c:	9907      	ldr	r1, [sp, #28]
  40396e:	f898 2001 	ldrb.w	r2, [r8, #1]
  403972:	680c      	ldr	r4, [r1, #0]
  403974:	3104      	adds	r1, #4
  403976:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40397a:	46b8      	mov	r8, r7
  40397c:	9107      	str	r1, [sp, #28]
  40397e:	f7ff ba3f 	b.w	402e00 <_vfiprintf_r+0xe4>
  403982:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403986:	e43c      	b.n	403202 <_vfiprintf_r+0x4e6>
  403988:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40398c:	e521      	b.n	4033d2 <_vfiprintf_r+0x6b6>
  40398e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403992:	f7ff bbf4 	b.w	40317e <_vfiprintf_r+0x462>
  403996:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40399a:	e491      	b.n	4032c0 <_vfiprintf_r+0x5a4>
  40399c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4039a0:	e469      	b.n	403276 <_vfiprintf_r+0x55a>
  4039a2:	bf00      	nop
  4039a4:	00405818 	.word	0x00405818
  4039a8:	00405810 	.word	0x00405810

004039ac <__sbprintf>:
  4039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039b0:	460c      	mov	r4, r1
  4039b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4039b6:	8989      	ldrh	r1, [r1, #12]
  4039b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4039ba:	89e5      	ldrh	r5, [r4, #14]
  4039bc:	9619      	str	r6, [sp, #100]	; 0x64
  4039be:	f021 0102 	bic.w	r1, r1, #2
  4039c2:	4606      	mov	r6, r0
  4039c4:	69e0      	ldr	r0, [r4, #28]
  4039c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4039ca:	4617      	mov	r7, r2
  4039cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4039d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4039d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4039d6:	4698      	mov	r8, r3
  4039d8:	ad1a      	add	r5, sp, #104	; 0x68
  4039da:	2300      	movs	r3, #0
  4039dc:	9007      	str	r0, [sp, #28]
  4039de:	a816      	add	r0, sp, #88	; 0x58
  4039e0:	9209      	str	r2, [sp, #36]	; 0x24
  4039e2:	9306      	str	r3, [sp, #24]
  4039e4:	9500      	str	r5, [sp, #0]
  4039e6:	9504      	str	r5, [sp, #16]
  4039e8:	9102      	str	r1, [sp, #8]
  4039ea:	9105      	str	r1, [sp, #20]
  4039ec:	f000 fd48 	bl	404480 <__retarget_lock_init_recursive>
  4039f0:	4643      	mov	r3, r8
  4039f2:	463a      	mov	r2, r7
  4039f4:	4669      	mov	r1, sp
  4039f6:	4630      	mov	r0, r6
  4039f8:	f7ff f990 	bl	402d1c <_vfiprintf_r>
  4039fc:	1e05      	subs	r5, r0, #0
  4039fe:	db07      	blt.n	403a10 <__sbprintf+0x64>
  403a00:	4630      	mov	r0, r6
  403a02:	4669      	mov	r1, sp
  403a04:	f000 f928 	bl	403c58 <_fflush_r>
  403a08:	2800      	cmp	r0, #0
  403a0a:	bf18      	it	ne
  403a0c:	f04f 35ff 	movne.w	r5, #4294967295
  403a10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403a14:	065b      	lsls	r3, r3, #25
  403a16:	d503      	bpl.n	403a20 <__sbprintf+0x74>
  403a18:	89a3      	ldrh	r3, [r4, #12]
  403a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403a1e:	81a3      	strh	r3, [r4, #12]
  403a20:	9816      	ldr	r0, [sp, #88]	; 0x58
  403a22:	f000 fd2f 	bl	404484 <__retarget_lock_close_recursive>
  403a26:	4628      	mov	r0, r5
  403a28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  403a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403a30 <__swsetup_r>:
  403a30:	b538      	push	{r3, r4, r5, lr}
  403a32:	4b30      	ldr	r3, [pc, #192]	; (403af4 <__swsetup_r+0xc4>)
  403a34:	681b      	ldr	r3, [r3, #0]
  403a36:	4605      	mov	r5, r0
  403a38:	460c      	mov	r4, r1
  403a3a:	b113      	cbz	r3, 403a42 <__swsetup_r+0x12>
  403a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403a3e:	2a00      	cmp	r2, #0
  403a40:	d038      	beq.n	403ab4 <__swsetup_r+0x84>
  403a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a46:	b293      	uxth	r3, r2
  403a48:	0718      	lsls	r0, r3, #28
  403a4a:	d50c      	bpl.n	403a66 <__swsetup_r+0x36>
  403a4c:	6920      	ldr	r0, [r4, #16]
  403a4e:	b1a8      	cbz	r0, 403a7c <__swsetup_r+0x4c>
  403a50:	f013 0201 	ands.w	r2, r3, #1
  403a54:	d01e      	beq.n	403a94 <__swsetup_r+0x64>
  403a56:	6963      	ldr	r3, [r4, #20]
  403a58:	2200      	movs	r2, #0
  403a5a:	425b      	negs	r3, r3
  403a5c:	61a3      	str	r3, [r4, #24]
  403a5e:	60a2      	str	r2, [r4, #8]
  403a60:	b1f0      	cbz	r0, 403aa0 <__swsetup_r+0x70>
  403a62:	2000      	movs	r0, #0
  403a64:	bd38      	pop	{r3, r4, r5, pc}
  403a66:	06d9      	lsls	r1, r3, #27
  403a68:	d53c      	bpl.n	403ae4 <__swsetup_r+0xb4>
  403a6a:	0758      	lsls	r0, r3, #29
  403a6c:	d426      	bmi.n	403abc <__swsetup_r+0x8c>
  403a6e:	6920      	ldr	r0, [r4, #16]
  403a70:	f042 0308 	orr.w	r3, r2, #8
  403a74:	81a3      	strh	r3, [r4, #12]
  403a76:	b29b      	uxth	r3, r3
  403a78:	2800      	cmp	r0, #0
  403a7a:	d1e9      	bne.n	403a50 <__swsetup_r+0x20>
  403a7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403a80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403a84:	d0e4      	beq.n	403a50 <__swsetup_r+0x20>
  403a86:	4628      	mov	r0, r5
  403a88:	4621      	mov	r1, r4
  403a8a:	f000 fd2f 	bl	4044ec <__smakebuf_r>
  403a8e:	89a3      	ldrh	r3, [r4, #12]
  403a90:	6920      	ldr	r0, [r4, #16]
  403a92:	e7dd      	b.n	403a50 <__swsetup_r+0x20>
  403a94:	0799      	lsls	r1, r3, #30
  403a96:	bf58      	it	pl
  403a98:	6962      	ldrpl	r2, [r4, #20]
  403a9a:	60a2      	str	r2, [r4, #8]
  403a9c:	2800      	cmp	r0, #0
  403a9e:	d1e0      	bne.n	403a62 <__swsetup_r+0x32>
  403aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aa4:	061a      	lsls	r2, r3, #24
  403aa6:	d5dd      	bpl.n	403a64 <__swsetup_r+0x34>
  403aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403aac:	81a3      	strh	r3, [r4, #12]
  403aae:	f04f 30ff 	mov.w	r0, #4294967295
  403ab2:	bd38      	pop	{r3, r4, r5, pc}
  403ab4:	4618      	mov	r0, r3
  403ab6:	f000 f927 	bl	403d08 <__sinit>
  403aba:	e7c2      	b.n	403a42 <__swsetup_r+0x12>
  403abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403abe:	b151      	cbz	r1, 403ad6 <__swsetup_r+0xa6>
  403ac0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403ac4:	4299      	cmp	r1, r3
  403ac6:	d004      	beq.n	403ad2 <__swsetup_r+0xa2>
  403ac8:	4628      	mov	r0, r5
  403aca:	f000 fa43 	bl	403f54 <_free_r>
  403ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403ad2:	2300      	movs	r3, #0
  403ad4:	6323      	str	r3, [r4, #48]	; 0x30
  403ad6:	2300      	movs	r3, #0
  403ad8:	6920      	ldr	r0, [r4, #16]
  403ada:	6063      	str	r3, [r4, #4]
  403adc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403ae0:	6020      	str	r0, [r4, #0]
  403ae2:	e7c5      	b.n	403a70 <__swsetup_r+0x40>
  403ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403ae8:	2309      	movs	r3, #9
  403aea:	602b      	str	r3, [r5, #0]
  403aec:	f04f 30ff 	mov.w	r0, #4294967295
  403af0:	81a2      	strh	r2, [r4, #12]
  403af2:	bd38      	pop	{r3, r4, r5, pc}
  403af4:	20400028 	.word	0x20400028

00403af8 <register_fini>:
  403af8:	4b02      	ldr	r3, [pc, #8]	; (403b04 <register_fini+0xc>)
  403afa:	b113      	cbz	r3, 403b02 <register_fini+0xa>
  403afc:	4802      	ldr	r0, [pc, #8]	; (403b08 <register_fini+0x10>)
  403afe:	f000 b805 	b.w	403b0c <atexit>
  403b02:	4770      	bx	lr
  403b04:	00000000 	.word	0x00000000
  403b08:	00403d79 	.word	0x00403d79

00403b0c <atexit>:
  403b0c:	2300      	movs	r3, #0
  403b0e:	4601      	mov	r1, r0
  403b10:	461a      	mov	r2, r3
  403b12:	4618      	mov	r0, r3
  403b14:	f001 bb66 	b.w	4051e4 <__register_exitproc>

00403b18 <__sflush_r>:
  403b18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  403b1c:	b29a      	uxth	r2, r3
  403b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b22:	460d      	mov	r5, r1
  403b24:	0711      	lsls	r1, r2, #28
  403b26:	4680      	mov	r8, r0
  403b28:	d43a      	bmi.n	403ba0 <__sflush_r+0x88>
  403b2a:	686a      	ldr	r2, [r5, #4]
  403b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403b30:	2a00      	cmp	r2, #0
  403b32:	81ab      	strh	r3, [r5, #12]
  403b34:	dd6f      	ble.n	403c16 <__sflush_r+0xfe>
  403b36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403b38:	2c00      	cmp	r4, #0
  403b3a:	d049      	beq.n	403bd0 <__sflush_r+0xb8>
  403b3c:	2200      	movs	r2, #0
  403b3e:	b29b      	uxth	r3, r3
  403b40:	f8d8 6000 	ldr.w	r6, [r8]
  403b44:	f8c8 2000 	str.w	r2, [r8]
  403b48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  403b4c:	d067      	beq.n	403c1e <__sflush_r+0x106>
  403b4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403b50:	075f      	lsls	r7, r3, #29
  403b52:	d505      	bpl.n	403b60 <__sflush_r+0x48>
  403b54:	6869      	ldr	r1, [r5, #4]
  403b56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403b58:	1a52      	subs	r2, r2, r1
  403b5a:	b10b      	cbz	r3, 403b60 <__sflush_r+0x48>
  403b5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  403b5e:	1ad2      	subs	r2, r2, r3
  403b60:	2300      	movs	r3, #0
  403b62:	69e9      	ldr	r1, [r5, #28]
  403b64:	4640      	mov	r0, r8
  403b66:	47a0      	blx	r4
  403b68:	1c44      	adds	r4, r0, #1
  403b6a:	d03c      	beq.n	403be6 <__sflush_r+0xce>
  403b6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403b70:	692a      	ldr	r2, [r5, #16]
  403b72:	602a      	str	r2, [r5, #0]
  403b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403b78:	2200      	movs	r2, #0
  403b7a:	81ab      	strh	r3, [r5, #12]
  403b7c:	04db      	lsls	r3, r3, #19
  403b7e:	606a      	str	r2, [r5, #4]
  403b80:	d447      	bmi.n	403c12 <__sflush_r+0xfa>
  403b82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403b84:	f8c8 6000 	str.w	r6, [r8]
  403b88:	b311      	cbz	r1, 403bd0 <__sflush_r+0xb8>
  403b8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  403b8e:	4299      	cmp	r1, r3
  403b90:	d002      	beq.n	403b98 <__sflush_r+0x80>
  403b92:	4640      	mov	r0, r8
  403b94:	f000 f9de 	bl	403f54 <_free_r>
  403b98:	2000      	movs	r0, #0
  403b9a:	6328      	str	r0, [r5, #48]	; 0x30
  403b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ba0:	692e      	ldr	r6, [r5, #16]
  403ba2:	b1ae      	cbz	r6, 403bd0 <__sflush_r+0xb8>
  403ba4:	682c      	ldr	r4, [r5, #0]
  403ba6:	602e      	str	r6, [r5, #0]
  403ba8:	0791      	lsls	r1, r2, #30
  403baa:	bf0c      	ite	eq
  403bac:	696b      	ldreq	r3, [r5, #20]
  403bae:	2300      	movne	r3, #0
  403bb0:	1ba4      	subs	r4, r4, r6
  403bb2:	60ab      	str	r3, [r5, #8]
  403bb4:	e00a      	b.n	403bcc <__sflush_r+0xb4>
  403bb6:	4623      	mov	r3, r4
  403bb8:	4632      	mov	r2, r6
  403bba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  403bbc:	69e9      	ldr	r1, [r5, #28]
  403bbe:	4640      	mov	r0, r8
  403bc0:	47b8      	blx	r7
  403bc2:	2800      	cmp	r0, #0
  403bc4:	eba4 0400 	sub.w	r4, r4, r0
  403bc8:	4406      	add	r6, r0
  403bca:	dd04      	ble.n	403bd6 <__sflush_r+0xbe>
  403bcc:	2c00      	cmp	r4, #0
  403bce:	dcf2      	bgt.n	403bb6 <__sflush_r+0x9e>
  403bd0:	2000      	movs	r0, #0
  403bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bd6:	89ab      	ldrh	r3, [r5, #12]
  403bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403bdc:	81ab      	strh	r3, [r5, #12]
  403bde:	f04f 30ff 	mov.w	r0, #4294967295
  403be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403be6:	f8d8 4000 	ldr.w	r4, [r8]
  403bea:	2c1d      	cmp	r4, #29
  403bec:	d8f3      	bhi.n	403bd6 <__sflush_r+0xbe>
  403bee:	4b19      	ldr	r3, [pc, #100]	; (403c54 <__sflush_r+0x13c>)
  403bf0:	40e3      	lsrs	r3, r4
  403bf2:	43db      	mvns	r3, r3
  403bf4:	f013 0301 	ands.w	r3, r3, #1
  403bf8:	d1ed      	bne.n	403bd6 <__sflush_r+0xbe>
  403bfa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  403bfe:	606b      	str	r3, [r5, #4]
  403c00:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403c04:	6929      	ldr	r1, [r5, #16]
  403c06:	81ab      	strh	r3, [r5, #12]
  403c08:	04da      	lsls	r2, r3, #19
  403c0a:	6029      	str	r1, [r5, #0]
  403c0c:	d5b9      	bpl.n	403b82 <__sflush_r+0x6a>
  403c0e:	2c00      	cmp	r4, #0
  403c10:	d1b7      	bne.n	403b82 <__sflush_r+0x6a>
  403c12:	6528      	str	r0, [r5, #80]	; 0x50
  403c14:	e7b5      	b.n	403b82 <__sflush_r+0x6a>
  403c16:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403c18:	2a00      	cmp	r2, #0
  403c1a:	dc8c      	bgt.n	403b36 <__sflush_r+0x1e>
  403c1c:	e7d8      	b.n	403bd0 <__sflush_r+0xb8>
  403c1e:	2301      	movs	r3, #1
  403c20:	69e9      	ldr	r1, [r5, #28]
  403c22:	4640      	mov	r0, r8
  403c24:	47a0      	blx	r4
  403c26:	1c43      	adds	r3, r0, #1
  403c28:	4602      	mov	r2, r0
  403c2a:	d002      	beq.n	403c32 <__sflush_r+0x11a>
  403c2c:	89ab      	ldrh	r3, [r5, #12]
  403c2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  403c30:	e78e      	b.n	403b50 <__sflush_r+0x38>
  403c32:	f8d8 3000 	ldr.w	r3, [r8]
  403c36:	2b00      	cmp	r3, #0
  403c38:	d0f8      	beq.n	403c2c <__sflush_r+0x114>
  403c3a:	2b1d      	cmp	r3, #29
  403c3c:	d001      	beq.n	403c42 <__sflush_r+0x12a>
  403c3e:	2b16      	cmp	r3, #22
  403c40:	d102      	bne.n	403c48 <__sflush_r+0x130>
  403c42:	f8c8 6000 	str.w	r6, [r8]
  403c46:	e7c3      	b.n	403bd0 <__sflush_r+0xb8>
  403c48:	89ab      	ldrh	r3, [r5, #12]
  403c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c4e:	81ab      	strh	r3, [r5, #12]
  403c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c54:	20400001 	.word	0x20400001

00403c58 <_fflush_r>:
  403c58:	b538      	push	{r3, r4, r5, lr}
  403c5a:	460d      	mov	r5, r1
  403c5c:	4604      	mov	r4, r0
  403c5e:	b108      	cbz	r0, 403c64 <_fflush_r+0xc>
  403c60:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c62:	b1bb      	cbz	r3, 403c94 <_fflush_r+0x3c>
  403c64:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403c68:	b188      	cbz	r0, 403c8e <_fflush_r+0x36>
  403c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c6c:	07db      	lsls	r3, r3, #31
  403c6e:	d401      	bmi.n	403c74 <_fflush_r+0x1c>
  403c70:	0581      	lsls	r1, r0, #22
  403c72:	d517      	bpl.n	403ca4 <_fflush_r+0x4c>
  403c74:	4620      	mov	r0, r4
  403c76:	4629      	mov	r1, r5
  403c78:	f7ff ff4e 	bl	403b18 <__sflush_r>
  403c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403c7e:	07da      	lsls	r2, r3, #31
  403c80:	4604      	mov	r4, r0
  403c82:	d402      	bmi.n	403c8a <_fflush_r+0x32>
  403c84:	89ab      	ldrh	r3, [r5, #12]
  403c86:	059b      	lsls	r3, r3, #22
  403c88:	d507      	bpl.n	403c9a <_fflush_r+0x42>
  403c8a:	4620      	mov	r0, r4
  403c8c:	bd38      	pop	{r3, r4, r5, pc}
  403c8e:	4604      	mov	r4, r0
  403c90:	4620      	mov	r0, r4
  403c92:	bd38      	pop	{r3, r4, r5, pc}
  403c94:	f000 f838 	bl	403d08 <__sinit>
  403c98:	e7e4      	b.n	403c64 <_fflush_r+0xc>
  403c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403c9c:	f000 fbf6 	bl	40448c <__retarget_lock_release_recursive>
  403ca0:	4620      	mov	r0, r4
  403ca2:	bd38      	pop	{r3, r4, r5, pc}
  403ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403ca6:	f000 fbef 	bl	404488 <__retarget_lock_acquire_recursive>
  403caa:	e7e3      	b.n	403c74 <_fflush_r+0x1c>

00403cac <_cleanup_r>:
  403cac:	4901      	ldr	r1, [pc, #4]	; (403cb4 <_cleanup_r+0x8>)
  403cae:	f000 bbaf 	b.w	404410 <_fwalk_reent>
  403cb2:	bf00      	nop
  403cb4:	004052cd 	.word	0x004052cd

00403cb8 <std.isra.0>:
  403cb8:	b510      	push	{r4, lr}
  403cba:	2300      	movs	r3, #0
  403cbc:	4604      	mov	r4, r0
  403cbe:	8181      	strh	r1, [r0, #12]
  403cc0:	81c2      	strh	r2, [r0, #14]
  403cc2:	6003      	str	r3, [r0, #0]
  403cc4:	6043      	str	r3, [r0, #4]
  403cc6:	6083      	str	r3, [r0, #8]
  403cc8:	6643      	str	r3, [r0, #100]	; 0x64
  403cca:	6103      	str	r3, [r0, #16]
  403ccc:	6143      	str	r3, [r0, #20]
  403cce:	6183      	str	r3, [r0, #24]
  403cd0:	4619      	mov	r1, r3
  403cd2:	2208      	movs	r2, #8
  403cd4:	305c      	adds	r0, #92	; 0x5c
  403cd6:	f7fe fde3 	bl	4028a0 <memset>
  403cda:	4807      	ldr	r0, [pc, #28]	; (403cf8 <std.isra.0+0x40>)
  403cdc:	4907      	ldr	r1, [pc, #28]	; (403cfc <std.isra.0+0x44>)
  403cde:	4a08      	ldr	r2, [pc, #32]	; (403d00 <std.isra.0+0x48>)
  403ce0:	4b08      	ldr	r3, [pc, #32]	; (403d04 <std.isra.0+0x4c>)
  403ce2:	6220      	str	r0, [r4, #32]
  403ce4:	61e4      	str	r4, [r4, #28]
  403ce6:	6261      	str	r1, [r4, #36]	; 0x24
  403ce8:	62a2      	str	r2, [r4, #40]	; 0x28
  403cea:	62e3      	str	r3, [r4, #44]	; 0x2c
  403cec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403cf4:	f000 bbc4 	b.w	404480 <__retarget_lock_init_recursive>
  403cf8:	00405011 	.word	0x00405011
  403cfc:	00405035 	.word	0x00405035
  403d00:	00405071 	.word	0x00405071
  403d04:	00405091 	.word	0x00405091

00403d08 <__sinit>:
  403d08:	b510      	push	{r4, lr}
  403d0a:	4604      	mov	r4, r0
  403d0c:	4812      	ldr	r0, [pc, #72]	; (403d58 <__sinit+0x50>)
  403d0e:	f000 fbbb 	bl	404488 <__retarget_lock_acquire_recursive>
  403d12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403d14:	b9d2      	cbnz	r2, 403d4c <__sinit+0x44>
  403d16:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403d1a:	4810      	ldr	r0, [pc, #64]	; (403d5c <__sinit+0x54>)
  403d1c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403d20:	2103      	movs	r1, #3
  403d22:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403d26:	63e0      	str	r0, [r4, #60]	; 0x3c
  403d28:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403d2c:	6860      	ldr	r0, [r4, #4]
  403d2e:	2104      	movs	r1, #4
  403d30:	f7ff ffc2 	bl	403cb8 <std.isra.0>
  403d34:	2201      	movs	r2, #1
  403d36:	2109      	movs	r1, #9
  403d38:	68a0      	ldr	r0, [r4, #8]
  403d3a:	f7ff ffbd 	bl	403cb8 <std.isra.0>
  403d3e:	2202      	movs	r2, #2
  403d40:	2112      	movs	r1, #18
  403d42:	68e0      	ldr	r0, [r4, #12]
  403d44:	f7ff ffb8 	bl	403cb8 <std.isra.0>
  403d48:	2301      	movs	r3, #1
  403d4a:	63a3      	str	r3, [r4, #56]	; 0x38
  403d4c:	4802      	ldr	r0, [pc, #8]	; (403d58 <__sinit+0x50>)
  403d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d52:	f000 bb9b 	b.w	40448c <__retarget_lock_release_recursive>
  403d56:	bf00      	nop
  403d58:	20404c34 	.word	0x20404c34
  403d5c:	00403cad 	.word	0x00403cad

00403d60 <__sfp_lock_acquire>:
  403d60:	4801      	ldr	r0, [pc, #4]	; (403d68 <__sfp_lock_acquire+0x8>)
  403d62:	f000 bb91 	b.w	404488 <__retarget_lock_acquire_recursive>
  403d66:	bf00      	nop
  403d68:	20404c48 	.word	0x20404c48

00403d6c <__sfp_lock_release>:
  403d6c:	4801      	ldr	r0, [pc, #4]	; (403d74 <__sfp_lock_release+0x8>)
  403d6e:	f000 bb8d 	b.w	40448c <__retarget_lock_release_recursive>
  403d72:	bf00      	nop
  403d74:	20404c48 	.word	0x20404c48

00403d78 <__libc_fini_array>:
  403d78:	b538      	push	{r3, r4, r5, lr}
  403d7a:	4c0a      	ldr	r4, [pc, #40]	; (403da4 <__libc_fini_array+0x2c>)
  403d7c:	4d0a      	ldr	r5, [pc, #40]	; (403da8 <__libc_fini_array+0x30>)
  403d7e:	1b64      	subs	r4, r4, r5
  403d80:	10a4      	asrs	r4, r4, #2
  403d82:	d00a      	beq.n	403d9a <__libc_fini_array+0x22>
  403d84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403d88:	3b01      	subs	r3, #1
  403d8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403d8e:	3c01      	subs	r4, #1
  403d90:	f855 3904 	ldr.w	r3, [r5], #-4
  403d94:	4798      	blx	r3
  403d96:	2c00      	cmp	r4, #0
  403d98:	d1f9      	bne.n	403d8e <__libc_fini_array+0x16>
  403d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403d9e:	f001 bddf 	b.w	405960 <_fini>
  403da2:	bf00      	nop
  403da4:	00405970 	.word	0x00405970
  403da8:	0040596c 	.word	0x0040596c

00403dac <__fputwc>:
  403dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403db0:	b082      	sub	sp, #8
  403db2:	4680      	mov	r8, r0
  403db4:	4689      	mov	r9, r1
  403db6:	4614      	mov	r4, r2
  403db8:	f000 fb54 	bl	404464 <__locale_mb_cur_max>
  403dbc:	2801      	cmp	r0, #1
  403dbe:	d036      	beq.n	403e2e <__fputwc+0x82>
  403dc0:	464a      	mov	r2, r9
  403dc2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403dc6:	a901      	add	r1, sp, #4
  403dc8:	4640      	mov	r0, r8
  403dca:	f001 f9bd 	bl	405148 <_wcrtomb_r>
  403dce:	1c42      	adds	r2, r0, #1
  403dd0:	4606      	mov	r6, r0
  403dd2:	d025      	beq.n	403e20 <__fputwc+0x74>
  403dd4:	b3a8      	cbz	r0, 403e42 <__fputwc+0x96>
  403dd6:	f89d e004 	ldrb.w	lr, [sp, #4]
  403dda:	2500      	movs	r5, #0
  403ddc:	f10d 0a04 	add.w	sl, sp, #4
  403de0:	e009      	b.n	403df6 <__fputwc+0x4a>
  403de2:	6823      	ldr	r3, [r4, #0]
  403de4:	1c5a      	adds	r2, r3, #1
  403de6:	6022      	str	r2, [r4, #0]
  403de8:	f883 e000 	strb.w	lr, [r3]
  403dec:	3501      	adds	r5, #1
  403dee:	42b5      	cmp	r5, r6
  403df0:	d227      	bcs.n	403e42 <__fputwc+0x96>
  403df2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403df6:	68a3      	ldr	r3, [r4, #8]
  403df8:	3b01      	subs	r3, #1
  403dfa:	2b00      	cmp	r3, #0
  403dfc:	60a3      	str	r3, [r4, #8]
  403dfe:	daf0      	bge.n	403de2 <__fputwc+0x36>
  403e00:	69a7      	ldr	r7, [r4, #24]
  403e02:	42bb      	cmp	r3, r7
  403e04:	4671      	mov	r1, lr
  403e06:	4622      	mov	r2, r4
  403e08:	4640      	mov	r0, r8
  403e0a:	db02      	blt.n	403e12 <__fputwc+0x66>
  403e0c:	f1be 0f0a 	cmp.w	lr, #10
  403e10:	d1e7      	bne.n	403de2 <__fputwc+0x36>
  403e12:	f001 f941 	bl	405098 <__swbuf_r>
  403e16:	1c43      	adds	r3, r0, #1
  403e18:	d1e8      	bne.n	403dec <__fputwc+0x40>
  403e1a:	b002      	add	sp, #8
  403e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e20:	89a3      	ldrh	r3, [r4, #12]
  403e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e26:	81a3      	strh	r3, [r4, #12]
  403e28:	b002      	add	sp, #8
  403e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e2e:	f109 33ff 	add.w	r3, r9, #4294967295
  403e32:	2bfe      	cmp	r3, #254	; 0xfe
  403e34:	d8c4      	bhi.n	403dc0 <__fputwc+0x14>
  403e36:	fa5f fe89 	uxtb.w	lr, r9
  403e3a:	4606      	mov	r6, r0
  403e3c:	f88d e004 	strb.w	lr, [sp, #4]
  403e40:	e7cb      	b.n	403dda <__fputwc+0x2e>
  403e42:	4648      	mov	r0, r9
  403e44:	b002      	add	sp, #8
  403e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e4a:	bf00      	nop

00403e4c <_fputwc_r>:
  403e4c:	b530      	push	{r4, r5, lr}
  403e4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403e50:	f013 0f01 	tst.w	r3, #1
  403e54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403e58:	4614      	mov	r4, r2
  403e5a:	b083      	sub	sp, #12
  403e5c:	4605      	mov	r5, r0
  403e5e:	b29a      	uxth	r2, r3
  403e60:	d101      	bne.n	403e66 <_fputwc_r+0x1a>
  403e62:	0590      	lsls	r0, r2, #22
  403e64:	d51c      	bpl.n	403ea0 <_fputwc_r+0x54>
  403e66:	0490      	lsls	r0, r2, #18
  403e68:	d406      	bmi.n	403e78 <_fputwc_r+0x2c>
  403e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403e74:	81a3      	strh	r3, [r4, #12]
  403e76:	6662      	str	r2, [r4, #100]	; 0x64
  403e78:	4628      	mov	r0, r5
  403e7a:	4622      	mov	r2, r4
  403e7c:	f7ff ff96 	bl	403dac <__fputwc>
  403e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403e82:	07da      	lsls	r2, r3, #31
  403e84:	4605      	mov	r5, r0
  403e86:	d402      	bmi.n	403e8e <_fputwc_r+0x42>
  403e88:	89a3      	ldrh	r3, [r4, #12]
  403e8a:	059b      	lsls	r3, r3, #22
  403e8c:	d502      	bpl.n	403e94 <_fputwc_r+0x48>
  403e8e:	4628      	mov	r0, r5
  403e90:	b003      	add	sp, #12
  403e92:	bd30      	pop	{r4, r5, pc}
  403e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403e96:	f000 faf9 	bl	40448c <__retarget_lock_release_recursive>
  403e9a:	4628      	mov	r0, r5
  403e9c:	b003      	add	sp, #12
  403e9e:	bd30      	pop	{r4, r5, pc}
  403ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ea2:	9101      	str	r1, [sp, #4]
  403ea4:	f000 faf0 	bl	404488 <__retarget_lock_acquire_recursive>
  403ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403eac:	9901      	ldr	r1, [sp, #4]
  403eae:	b29a      	uxth	r2, r3
  403eb0:	e7d9      	b.n	403e66 <_fputwc_r+0x1a>
  403eb2:	bf00      	nop

00403eb4 <_malloc_trim_r>:
  403eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403eb6:	4f24      	ldr	r7, [pc, #144]	; (403f48 <_malloc_trim_r+0x94>)
  403eb8:	460c      	mov	r4, r1
  403eba:	4606      	mov	r6, r0
  403ebc:	f000 fee4 	bl	404c88 <__malloc_lock>
  403ec0:	68bb      	ldr	r3, [r7, #8]
  403ec2:	685d      	ldr	r5, [r3, #4]
  403ec4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403ec8:	310f      	adds	r1, #15
  403eca:	f025 0503 	bic.w	r5, r5, #3
  403ece:	4429      	add	r1, r5
  403ed0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403ed4:	f021 010f 	bic.w	r1, r1, #15
  403ed8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403edc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403ee0:	db07      	blt.n	403ef2 <_malloc_trim_r+0x3e>
  403ee2:	2100      	movs	r1, #0
  403ee4:	4630      	mov	r0, r6
  403ee6:	f001 f881 	bl	404fec <_sbrk_r>
  403eea:	68bb      	ldr	r3, [r7, #8]
  403eec:	442b      	add	r3, r5
  403eee:	4298      	cmp	r0, r3
  403ef0:	d004      	beq.n	403efc <_malloc_trim_r+0x48>
  403ef2:	4630      	mov	r0, r6
  403ef4:	f000 fece 	bl	404c94 <__malloc_unlock>
  403ef8:	2000      	movs	r0, #0
  403efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403efc:	4261      	negs	r1, r4
  403efe:	4630      	mov	r0, r6
  403f00:	f001 f874 	bl	404fec <_sbrk_r>
  403f04:	3001      	adds	r0, #1
  403f06:	d00d      	beq.n	403f24 <_malloc_trim_r+0x70>
  403f08:	4b10      	ldr	r3, [pc, #64]	; (403f4c <_malloc_trim_r+0x98>)
  403f0a:	68ba      	ldr	r2, [r7, #8]
  403f0c:	6819      	ldr	r1, [r3, #0]
  403f0e:	1b2d      	subs	r5, r5, r4
  403f10:	f045 0501 	orr.w	r5, r5, #1
  403f14:	4630      	mov	r0, r6
  403f16:	1b09      	subs	r1, r1, r4
  403f18:	6055      	str	r5, [r2, #4]
  403f1a:	6019      	str	r1, [r3, #0]
  403f1c:	f000 feba 	bl	404c94 <__malloc_unlock>
  403f20:	2001      	movs	r0, #1
  403f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f24:	2100      	movs	r1, #0
  403f26:	4630      	mov	r0, r6
  403f28:	f001 f860 	bl	404fec <_sbrk_r>
  403f2c:	68ba      	ldr	r2, [r7, #8]
  403f2e:	1a83      	subs	r3, r0, r2
  403f30:	2b0f      	cmp	r3, #15
  403f32:	ddde      	ble.n	403ef2 <_malloc_trim_r+0x3e>
  403f34:	4c06      	ldr	r4, [pc, #24]	; (403f50 <_malloc_trim_r+0x9c>)
  403f36:	4905      	ldr	r1, [pc, #20]	; (403f4c <_malloc_trim_r+0x98>)
  403f38:	6824      	ldr	r4, [r4, #0]
  403f3a:	f043 0301 	orr.w	r3, r3, #1
  403f3e:	1b00      	subs	r0, r0, r4
  403f40:	6053      	str	r3, [r2, #4]
  403f42:	6008      	str	r0, [r1, #0]
  403f44:	e7d5      	b.n	403ef2 <_malloc_trim_r+0x3e>
  403f46:	bf00      	nop
  403f48:	204005c8 	.word	0x204005c8
  403f4c:	204042d4 	.word	0x204042d4
  403f50:	204009d0 	.word	0x204009d0

00403f54 <_free_r>:
  403f54:	2900      	cmp	r1, #0
  403f56:	d044      	beq.n	403fe2 <_free_r+0x8e>
  403f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f5c:	460d      	mov	r5, r1
  403f5e:	4680      	mov	r8, r0
  403f60:	f000 fe92 	bl	404c88 <__malloc_lock>
  403f64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403f68:	4969      	ldr	r1, [pc, #420]	; (404110 <_free_r+0x1bc>)
  403f6a:	f027 0301 	bic.w	r3, r7, #1
  403f6e:	f1a5 0408 	sub.w	r4, r5, #8
  403f72:	18e2      	adds	r2, r4, r3
  403f74:	688e      	ldr	r6, [r1, #8]
  403f76:	6850      	ldr	r0, [r2, #4]
  403f78:	42b2      	cmp	r2, r6
  403f7a:	f020 0003 	bic.w	r0, r0, #3
  403f7e:	d05e      	beq.n	40403e <_free_r+0xea>
  403f80:	07fe      	lsls	r6, r7, #31
  403f82:	6050      	str	r0, [r2, #4]
  403f84:	d40b      	bmi.n	403f9e <_free_r+0x4a>
  403f86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403f8a:	1be4      	subs	r4, r4, r7
  403f8c:	f101 0e08 	add.w	lr, r1, #8
  403f90:	68a5      	ldr	r5, [r4, #8]
  403f92:	4575      	cmp	r5, lr
  403f94:	443b      	add	r3, r7
  403f96:	d06d      	beq.n	404074 <_free_r+0x120>
  403f98:	68e7      	ldr	r7, [r4, #12]
  403f9a:	60ef      	str	r7, [r5, #12]
  403f9c:	60bd      	str	r5, [r7, #8]
  403f9e:	1815      	adds	r5, r2, r0
  403fa0:	686d      	ldr	r5, [r5, #4]
  403fa2:	07ed      	lsls	r5, r5, #31
  403fa4:	d53e      	bpl.n	404024 <_free_r+0xd0>
  403fa6:	f043 0201 	orr.w	r2, r3, #1
  403faa:	6062      	str	r2, [r4, #4]
  403fac:	50e3      	str	r3, [r4, r3]
  403fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403fb2:	d217      	bcs.n	403fe4 <_free_r+0x90>
  403fb4:	08db      	lsrs	r3, r3, #3
  403fb6:	1c58      	adds	r0, r3, #1
  403fb8:	109a      	asrs	r2, r3, #2
  403fba:	684d      	ldr	r5, [r1, #4]
  403fbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403fc0:	60a7      	str	r7, [r4, #8]
  403fc2:	2301      	movs	r3, #1
  403fc4:	4093      	lsls	r3, r2
  403fc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403fca:	432b      	orrs	r3, r5
  403fcc:	3a08      	subs	r2, #8
  403fce:	60e2      	str	r2, [r4, #12]
  403fd0:	604b      	str	r3, [r1, #4]
  403fd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403fd6:	60fc      	str	r4, [r7, #12]
  403fd8:	4640      	mov	r0, r8
  403fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403fde:	f000 be59 	b.w	404c94 <__malloc_unlock>
  403fe2:	4770      	bx	lr
  403fe4:	0a5a      	lsrs	r2, r3, #9
  403fe6:	2a04      	cmp	r2, #4
  403fe8:	d852      	bhi.n	404090 <_free_r+0x13c>
  403fea:	099a      	lsrs	r2, r3, #6
  403fec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403ff0:	00ff      	lsls	r7, r7, #3
  403ff2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403ff6:	19c8      	adds	r0, r1, r7
  403ff8:	59ca      	ldr	r2, [r1, r7]
  403ffa:	3808      	subs	r0, #8
  403ffc:	4290      	cmp	r0, r2
  403ffe:	d04f      	beq.n	4040a0 <_free_r+0x14c>
  404000:	6851      	ldr	r1, [r2, #4]
  404002:	f021 0103 	bic.w	r1, r1, #3
  404006:	428b      	cmp	r3, r1
  404008:	d232      	bcs.n	404070 <_free_r+0x11c>
  40400a:	6892      	ldr	r2, [r2, #8]
  40400c:	4290      	cmp	r0, r2
  40400e:	d1f7      	bne.n	404000 <_free_r+0xac>
  404010:	68c3      	ldr	r3, [r0, #12]
  404012:	60a0      	str	r0, [r4, #8]
  404014:	60e3      	str	r3, [r4, #12]
  404016:	609c      	str	r4, [r3, #8]
  404018:	60c4      	str	r4, [r0, #12]
  40401a:	4640      	mov	r0, r8
  40401c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404020:	f000 be38 	b.w	404c94 <__malloc_unlock>
  404024:	6895      	ldr	r5, [r2, #8]
  404026:	4f3b      	ldr	r7, [pc, #236]	; (404114 <_free_r+0x1c0>)
  404028:	42bd      	cmp	r5, r7
  40402a:	4403      	add	r3, r0
  40402c:	d040      	beq.n	4040b0 <_free_r+0x15c>
  40402e:	68d0      	ldr	r0, [r2, #12]
  404030:	60e8      	str	r0, [r5, #12]
  404032:	f043 0201 	orr.w	r2, r3, #1
  404036:	6085      	str	r5, [r0, #8]
  404038:	6062      	str	r2, [r4, #4]
  40403a:	50e3      	str	r3, [r4, r3]
  40403c:	e7b7      	b.n	403fae <_free_r+0x5a>
  40403e:	07ff      	lsls	r7, r7, #31
  404040:	4403      	add	r3, r0
  404042:	d407      	bmi.n	404054 <_free_r+0x100>
  404044:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404048:	1aa4      	subs	r4, r4, r2
  40404a:	4413      	add	r3, r2
  40404c:	68a0      	ldr	r0, [r4, #8]
  40404e:	68e2      	ldr	r2, [r4, #12]
  404050:	60c2      	str	r2, [r0, #12]
  404052:	6090      	str	r0, [r2, #8]
  404054:	4a30      	ldr	r2, [pc, #192]	; (404118 <_free_r+0x1c4>)
  404056:	6812      	ldr	r2, [r2, #0]
  404058:	f043 0001 	orr.w	r0, r3, #1
  40405c:	4293      	cmp	r3, r2
  40405e:	6060      	str	r0, [r4, #4]
  404060:	608c      	str	r4, [r1, #8]
  404062:	d3b9      	bcc.n	403fd8 <_free_r+0x84>
  404064:	4b2d      	ldr	r3, [pc, #180]	; (40411c <_free_r+0x1c8>)
  404066:	4640      	mov	r0, r8
  404068:	6819      	ldr	r1, [r3, #0]
  40406a:	f7ff ff23 	bl	403eb4 <_malloc_trim_r>
  40406e:	e7b3      	b.n	403fd8 <_free_r+0x84>
  404070:	4610      	mov	r0, r2
  404072:	e7cd      	b.n	404010 <_free_r+0xbc>
  404074:	1811      	adds	r1, r2, r0
  404076:	6849      	ldr	r1, [r1, #4]
  404078:	07c9      	lsls	r1, r1, #31
  40407a:	d444      	bmi.n	404106 <_free_r+0x1b2>
  40407c:	6891      	ldr	r1, [r2, #8]
  40407e:	68d2      	ldr	r2, [r2, #12]
  404080:	60ca      	str	r2, [r1, #12]
  404082:	4403      	add	r3, r0
  404084:	f043 0001 	orr.w	r0, r3, #1
  404088:	6091      	str	r1, [r2, #8]
  40408a:	6060      	str	r0, [r4, #4]
  40408c:	50e3      	str	r3, [r4, r3]
  40408e:	e7a3      	b.n	403fd8 <_free_r+0x84>
  404090:	2a14      	cmp	r2, #20
  404092:	d816      	bhi.n	4040c2 <_free_r+0x16e>
  404094:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404098:	00ff      	lsls	r7, r7, #3
  40409a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40409e:	e7aa      	b.n	403ff6 <_free_r+0xa2>
  4040a0:	10aa      	asrs	r2, r5, #2
  4040a2:	2301      	movs	r3, #1
  4040a4:	684d      	ldr	r5, [r1, #4]
  4040a6:	4093      	lsls	r3, r2
  4040a8:	432b      	orrs	r3, r5
  4040aa:	604b      	str	r3, [r1, #4]
  4040ac:	4603      	mov	r3, r0
  4040ae:	e7b0      	b.n	404012 <_free_r+0xbe>
  4040b0:	f043 0201 	orr.w	r2, r3, #1
  4040b4:	614c      	str	r4, [r1, #20]
  4040b6:	610c      	str	r4, [r1, #16]
  4040b8:	60e5      	str	r5, [r4, #12]
  4040ba:	60a5      	str	r5, [r4, #8]
  4040bc:	6062      	str	r2, [r4, #4]
  4040be:	50e3      	str	r3, [r4, r3]
  4040c0:	e78a      	b.n	403fd8 <_free_r+0x84>
  4040c2:	2a54      	cmp	r2, #84	; 0x54
  4040c4:	d806      	bhi.n	4040d4 <_free_r+0x180>
  4040c6:	0b1a      	lsrs	r2, r3, #12
  4040c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4040cc:	00ff      	lsls	r7, r7, #3
  4040ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4040d2:	e790      	b.n	403ff6 <_free_r+0xa2>
  4040d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4040d8:	d806      	bhi.n	4040e8 <_free_r+0x194>
  4040da:	0bda      	lsrs	r2, r3, #15
  4040dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4040e0:	00ff      	lsls	r7, r7, #3
  4040e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4040e6:	e786      	b.n	403ff6 <_free_r+0xa2>
  4040e8:	f240 5054 	movw	r0, #1364	; 0x554
  4040ec:	4282      	cmp	r2, r0
  4040ee:	d806      	bhi.n	4040fe <_free_r+0x1aa>
  4040f0:	0c9a      	lsrs	r2, r3, #18
  4040f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4040f6:	00ff      	lsls	r7, r7, #3
  4040f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4040fc:	e77b      	b.n	403ff6 <_free_r+0xa2>
  4040fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404102:	257e      	movs	r5, #126	; 0x7e
  404104:	e777      	b.n	403ff6 <_free_r+0xa2>
  404106:	f043 0101 	orr.w	r1, r3, #1
  40410a:	6061      	str	r1, [r4, #4]
  40410c:	6013      	str	r3, [r2, #0]
  40410e:	e763      	b.n	403fd8 <_free_r+0x84>
  404110:	204005c8 	.word	0x204005c8
  404114:	204005d0 	.word	0x204005d0
  404118:	204009d4 	.word	0x204009d4
  40411c:	20404304 	.word	0x20404304

00404120 <__sfvwrite_r>:
  404120:	6893      	ldr	r3, [r2, #8]
  404122:	2b00      	cmp	r3, #0
  404124:	d073      	beq.n	40420e <__sfvwrite_r+0xee>
  404126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40412a:	898b      	ldrh	r3, [r1, #12]
  40412c:	b083      	sub	sp, #12
  40412e:	460c      	mov	r4, r1
  404130:	0719      	lsls	r1, r3, #28
  404132:	9000      	str	r0, [sp, #0]
  404134:	4616      	mov	r6, r2
  404136:	d526      	bpl.n	404186 <__sfvwrite_r+0x66>
  404138:	6922      	ldr	r2, [r4, #16]
  40413a:	b322      	cbz	r2, 404186 <__sfvwrite_r+0x66>
  40413c:	f013 0002 	ands.w	r0, r3, #2
  404140:	6835      	ldr	r5, [r6, #0]
  404142:	d02c      	beq.n	40419e <__sfvwrite_r+0x7e>
  404144:	f04f 0900 	mov.w	r9, #0
  404148:	4fb0      	ldr	r7, [pc, #704]	; (40440c <__sfvwrite_r+0x2ec>)
  40414a:	46c8      	mov	r8, r9
  40414c:	46b2      	mov	sl, r6
  40414e:	45b8      	cmp	r8, r7
  404150:	4643      	mov	r3, r8
  404152:	464a      	mov	r2, r9
  404154:	bf28      	it	cs
  404156:	463b      	movcs	r3, r7
  404158:	9800      	ldr	r0, [sp, #0]
  40415a:	f1b8 0f00 	cmp.w	r8, #0
  40415e:	d050      	beq.n	404202 <__sfvwrite_r+0xe2>
  404160:	69e1      	ldr	r1, [r4, #28]
  404162:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404164:	47b0      	blx	r6
  404166:	2800      	cmp	r0, #0
  404168:	dd58      	ble.n	40421c <__sfvwrite_r+0xfc>
  40416a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40416e:	1a1b      	subs	r3, r3, r0
  404170:	4481      	add	r9, r0
  404172:	eba8 0800 	sub.w	r8, r8, r0
  404176:	f8ca 3008 	str.w	r3, [sl, #8]
  40417a:	2b00      	cmp	r3, #0
  40417c:	d1e7      	bne.n	40414e <__sfvwrite_r+0x2e>
  40417e:	2000      	movs	r0, #0
  404180:	b003      	add	sp, #12
  404182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404186:	4621      	mov	r1, r4
  404188:	9800      	ldr	r0, [sp, #0]
  40418a:	f7ff fc51 	bl	403a30 <__swsetup_r>
  40418e:	2800      	cmp	r0, #0
  404190:	f040 8133 	bne.w	4043fa <__sfvwrite_r+0x2da>
  404194:	89a3      	ldrh	r3, [r4, #12]
  404196:	6835      	ldr	r5, [r6, #0]
  404198:	f013 0002 	ands.w	r0, r3, #2
  40419c:	d1d2      	bne.n	404144 <__sfvwrite_r+0x24>
  40419e:	f013 0901 	ands.w	r9, r3, #1
  4041a2:	d145      	bne.n	404230 <__sfvwrite_r+0x110>
  4041a4:	464f      	mov	r7, r9
  4041a6:	9601      	str	r6, [sp, #4]
  4041a8:	b337      	cbz	r7, 4041f8 <__sfvwrite_r+0xd8>
  4041aa:	059a      	lsls	r2, r3, #22
  4041ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4041b0:	f140 8083 	bpl.w	4042ba <__sfvwrite_r+0x19a>
  4041b4:	4547      	cmp	r7, r8
  4041b6:	46c3      	mov	fp, r8
  4041b8:	f0c0 80ab 	bcc.w	404312 <__sfvwrite_r+0x1f2>
  4041bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4041c0:	f040 80ac 	bne.w	40431c <__sfvwrite_r+0x1fc>
  4041c4:	6820      	ldr	r0, [r4, #0]
  4041c6:	46ba      	mov	sl, r7
  4041c8:	465a      	mov	r2, fp
  4041ca:	4649      	mov	r1, r9
  4041cc:	f000 fcf8 	bl	404bc0 <memmove>
  4041d0:	68a2      	ldr	r2, [r4, #8]
  4041d2:	6823      	ldr	r3, [r4, #0]
  4041d4:	eba2 0208 	sub.w	r2, r2, r8
  4041d8:	445b      	add	r3, fp
  4041da:	60a2      	str	r2, [r4, #8]
  4041dc:	6023      	str	r3, [r4, #0]
  4041de:	9a01      	ldr	r2, [sp, #4]
  4041e0:	6893      	ldr	r3, [r2, #8]
  4041e2:	eba3 030a 	sub.w	r3, r3, sl
  4041e6:	44d1      	add	r9, sl
  4041e8:	eba7 070a 	sub.w	r7, r7, sl
  4041ec:	6093      	str	r3, [r2, #8]
  4041ee:	2b00      	cmp	r3, #0
  4041f0:	d0c5      	beq.n	40417e <__sfvwrite_r+0x5e>
  4041f2:	89a3      	ldrh	r3, [r4, #12]
  4041f4:	2f00      	cmp	r7, #0
  4041f6:	d1d8      	bne.n	4041aa <__sfvwrite_r+0x8a>
  4041f8:	f8d5 9000 	ldr.w	r9, [r5]
  4041fc:	686f      	ldr	r7, [r5, #4]
  4041fe:	3508      	adds	r5, #8
  404200:	e7d2      	b.n	4041a8 <__sfvwrite_r+0x88>
  404202:	f8d5 9000 	ldr.w	r9, [r5]
  404206:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40420a:	3508      	adds	r5, #8
  40420c:	e79f      	b.n	40414e <__sfvwrite_r+0x2e>
  40420e:	2000      	movs	r0, #0
  404210:	4770      	bx	lr
  404212:	4621      	mov	r1, r4
  404214:	9800      	ldr	r0, [sp, #0]
  404216:	f7ff fd1f 	bl	403c58 <_fflush_r>
  40421a:	b370      	cbz	r0, 40427a <__sfvwrite_r+0x15a>
  40421c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404224:	f04f 30ff 	mov.w	r0, #4294967295
  404228:	81a3      	strh	r3, [r4, #12]
  40422a:	b003      	add	sp, #12
  40422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404230:	4681      	mov	r9, r0
  404232:	4633      	mov	r3, r6
  404234:	464e      	mov	r6, r9
  404236:	46a8      	mov	r8, r5
  404238:	469a      	mov	sl, r3
  40423a:	464d      	mov	r5, r9
  40423c:	b34e      	cbz	r6, 404292 <__sfvwrite_r+0x172>
  40423e:	b380      	cbz	r0, 4042a2 <__sfvwrite_r+0x182>
  404240:	6820      	ldr	r0, [r4, #0]
  404242:	6923      	ldr	r3, [r4, #16]
  404244:	6962      	ldr	r2, [r4, #20]
  404246:	45b1      	cmp	r9, r6
  404248:	46cb      	mov	fp, r9
  40424a:	bf28      	it	cs
  40424c:	46b3      	movcs	fp, r6
  40424e:	4298      	cmp	r0, r3
  404250:	465f      	mov	r7, fp
  404252:	d904      	bls.n	40425e <__sfvwrite_r+0x13e>
  404254:	68a3      	ldr	r3, [r4, #8]
  404256:	4413      	add	r3, r2
  404258:	459b      	cmp	fp, r3
  40425a:	f300 80a6 	bgt.w	4043aa <__sfvwrite_r+0x28a>
  40425e:	4593      	cmp	fp, r2
  404260:	db4b      	blt.n	4042fa <__sfvwrite_r+0x1da>
  404262:	4613      	mov	r3, r2
  404264:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404266:	69e1      	ldr	r1, [r4, #28]
  404268:	9800      	ldr	r0, [sp, #0]
  40426a:	462a      	mov	r2, r5
  40426c:	47b8      	blx	r7
  40426e:	1e07      	subs	r7, r0, #0
  404270:	ddd4      	ble.n	40421c <__sfvwrite_r+0xfc>
  404272:	ebb9 0907 	subs.w	r9, r9, r7
  404276:	d0cc      	beq.n	404212 <__sfvwrite_r+0xf2>
  404278:	2001      	movs	r0, #1
  40427a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40427e:	1bdb      	subs	r3, r3, r7
  404280:	443d      	add	r5, r7
  404282:	1bf6      	subs	r6, r6, r7
  404284:	f8ca 3008 	str.w	r3, [sl, #8]
  404288:	2b00      	cmp	r3, #0
  40428a:	f43f af78 	beq.w	40417e <__sfvwrite_r+0x5e>
  40428e:	2e00      	cmp	r6, #0
  404290:	d1d5      	bne.n	40423e <__sfvwrite_r+0x11e>
  404292:	f108 0308 	add.w	r3, r8, #8
  404296:	e913 0060 	ldmdb	r3, {r5, r6}
  40429a:	4698      	mov	r8, r3
  40429c:	3308      	adds	r3, #8
  40429e:	2e00      	cmp	r6, #0
  4042a0:	d0f9      	beq.n	404296 <__sfvwrite_r+0x176>
  4042a2:	4632      	mov	r2, r6
  4042a4:	210a      	movs	r1, #10
  4042a6:	4628      	mov	r0, r5
  4042a8:	f000 fc3a 	bl	404b20 <memchr>
  4042ac:	2800      	cmp	r0, #0
  4042ae:	f000 80a1 	beq.w	4043f4 <__sfvwrite_r+0x2d4>
  4042b2:	3001      	adds	r0, #1
  4042b4:	eba0 0905 	sub.w	r9, r0, r5
  4042b8:	e7c2      	b.n	404240 <__sfvwrite_r+0x120>
  4042ba:	6820      	ldr	r0, [r4, #0]
  4042bc:	6923      	ldr	r3, [r4, #16]
  4042be:	4298      	cmp	r0, r3
  4042c0:	d802      	bhi.n	4042c8 <__sfvwrite_r+0x1a8>
  4042c2:	6963      	ldr	r3, [r4, #20]
  4042c4:	429f      	cmp	r7, r3
  4042c6:	d25d      	bcs.n	404384 <__sfvwrite_r+0x264>
  4042c8:	45b8      	cmp	r8, r7
  4042ca:	bf28      	it	cs
  4042cc:	46b8      	movcs	r8, r7
  4042ce:	4642      	mov	r2, r8
  4042d0:	4649      	mov	r1, r9
  4042d2:	f000 fc75 	bl	404bc0 <memmove>
  4042d6:	68a3      	ldr	r3, [r4, #8]
  4042d8:	6822      	ldr	r2, [r4, #0]
  4042da:	eba3 0308 	sub.w	r3, r3, r8
  4042de:	4442      	add	r2, r8
  4042e0:	60a3      	str	r3, [r4, #8]
  4042e2:	6022      	str	r2, [r4, #0]
  4042e4:	b10b      	cbz	r3, 4042ea <__sfvwrite_r+0x1ca>
  4042e6:	46c2      	mov	sl, r8
  4042e8:	e779      	b.n	4041de <__sfvwrite_r+0xbe>
  4042ea:	4621      	mov	r1, r4
  4042ec:	9800      	ldr	r0, [sp, #0]
  4042ee:	f7ff fcb3 	bl	403c58 <_fflush_r>
  4042f2:	2800      	cmp	r0, #0
  4042f4:	d192      	bne.n	40421c <__sfvwrite_r+0xfc>
  4042f6:	46c2      	mov	sl, r8
  4042f8:	e771      	b.n	4041de <__sfvwrite_r+0xbe>
  4042fa:	465a      	mov	r2, fp
  4042fc:	4629      	mov	r1, r5
  4042fe:	f000 fc5f 	bl	404bc0 <memmove>
  404302:	68a2      	ldr	r2, [r4, #8]
  404304:	6823      	ldr	r3, [r4, #0]
  404306:	eba2 020b 	sub.w	r2, r2, fp
  40430a:	445b      	add	r3, fp
  40430c:	60a2      	str	r2, [r4, #8]
  40430e:	6023      	str	r3, [r4, #0]
  404310:	e7af      	b.n	404272 <__sfvwrite_r+0x152>
  404312:	6820      	ldr	r0, [r4, #0]
  404314:	46b8      	mov	r8, r7
  404316:	46ba      	mov	sl, r7
  404318:	46bb      	mov	fp, r7
  40431a:	e755      	b.n	4041c8 <__sfvwrite_r+0xa8>
  40431c:	6962      	ldr	r2, [r4, #20]
  40431e:	6820      	ldr	r0, [r4, #0]
  404320:	6921      	ldr	r1, [r4, #16]
  404322:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404326:	eba0 0a01 	sub.w	sl, r0, r1
  40432a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40432e:	f10a 0001 	add.w	r0, sl, #1
  404332:	ea4f 0868 	mov.w	r8, r8, asr #1
  404336:	4438      	add	r0, r7
  404338:	4540      	cmp	r0, r8
  40433a:	4642      	mov	r2, r8
  40433c:	bf84      	itt	hi
  40433e:	4680      	movhi	r8, r0
  404340:	4642      	movhi	r2, r8
  404342:	055b      	lsls	r3, r3, #21
  404344:	d544      	bpl.n	4043d0 <__sfvwrite_r+0x2b0>
  404346:	4611      	mov	r1, r2
  404348:	9800      	ldr	r0, [sp, #0]
  40434a:	f000 f921 	bl	404590 <_malloc_r>
  40434e:	4683      	mov	fp, r0
  404350:	2800      	cmp	r0, #0
  404352:	d055      	beq.n	404400 <__sfvwrite_r+0x2e0>
  404354:	4652      	mov	r2, sl
  404356:	6921      	ldr	r1, [r4, #16]
  404358:	f7fe fa08 	bl	40276c <memcpy>
  40435c:	89a3      	ldrh	r3, [r4, #12]
  40435e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404366:	81a3      	strh	r3, [r4, #12]
  404368:	eb0b 000a 	add.w	r0, fp, sl
  40436c:	eba8 030a 	sub.w	r3, r8, sl
  404370:	f8c4 b010 	str.w	fp, [r4, #16]
  404374:	f8c4 8014 	str.w	r8, [r4, #20]
  404378:	6020      	str	r0, [r4, #0]
  40437a:	60a3      	str	r3, [r4, #8]
  40437c:	46b8      	mov	r8, r7
  40437e:	46ba      	mov	sl, r7
  404380:	46bb      	mov	fp, r7
  404382:	e721      	b.n	4041c8 <__sfvwrite_r+0xa8>
  404384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404388:	42b9      	cmp	r1, r7
  40438a:	bf28      	it	cs
  40438c:	4639      	movcs	r1, r7
  40438e:	464a      	mov	r2, r9
  404390:	fb91 f1f3 	sdiv	r1, r1, r3
  404394:	9800      	ldr	r0, [sp, #0]
  404396:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404398:	fb03 f301 	mul.w	r3, r3, r1
  40439c:	69e1      	ldr	r1, [r4, #28]
  40439e:	47b0      	blx	r6
  4043a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4043a4:	f73f af1b 	bgt.w	4041de <__sfvwrite_r+0xbe>
  4043a8:	e738      	b.n	40421c <__sfvwrite_r+0xfc>
  4043aa:	461a      	mov	r2, r3
  4043ac:	4629      	mov	r1, r5
  4043ae:	9301      	str	r3, [sp, #4]
  4043b0:	f000 fc06 	bl	404bc0 <memmove>
  4043b4:	6822      	ldr	r2, [r4, #0]
  4043b6:	9b01      	ldr	r3, [sp, #4]
  4043b8:	9800      	ldr	r0, [sp, #0]
  4043ba:	441a      	add	r2, r3
  4043bc:	6022      	str	r2, [r4, #0]
  4043be:	4621      	mov	r1, r4
  4043c0:	f7ff fc4a 	bl	403c58 <_fflush_r>
  4043c4:	9b01      	ldr	r3, [sp, #4]
  4043c6:	2800      	cmp	r0, #0
  4043c8:	f47f af28 	bne.w	40421c <__sfvwrite_r+0xfc>
  4043cc:	461f      	mov	r7, r3
  4043ce:	e750      	b.n	404272 <__sfvwrite_r+0x152>
  4043d0:	9800      	ldr	r0, [sp, #0]
  4043d2:	f000 fc65 	bl	404ca0 <_realloc_r>
  4043d6:	4683      	mov	fp, r0
  4043d8:	2800      	cmp	r0, #0
  4043da:	d1c5      	bne.n	404368 <__sfvwrite_r+0x248>
  4043dc:	9d00      	ldr	r5, [sp, #0]
  4043de:	6921      	ldr	r1, [r4, #16]
  4043e0:	4628      	mov	r0, r5
  4043e2:	f7ff fdb7 	bl	403f54 <_free_r>
  4043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ea:	220c      	movs	r2, #12
  4043ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4043f0:	602a      	str	r2, [r5, #0]
  4043f2:	e715      	b.n	404220 <__sfvwrite_r+0x100>
  4043f4:	f106 0901 	add.w	r9, r6, #1
  4043f8:	e722      	b.n	404240 <__sfvwrite_r+0x120>
  4043fa:	f04f 30ff 	mov.w	r0, #4294967295
  4043fe:	e6bf      	b.n	404180 <__sfvwrite_r+0x60>
  404400:	9a00      	ldr	r2, [sp, #0]
  404402:	230c      	movs	r3, #12
  404404:	6013      	str	r3, [r2, #0]
  404406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40440a:	e709      	b.n	404220 <__sfvwrite_r+0x100>
  40440c:	7ffffc00 	.word	0x7ffffc00

00404410 <_fwalk_reent>:
  404410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404414:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404418:	d01f      	beq.n	40445a <_fwalk_reent+0x4a>
  40441a:	4688      	mov	r8, r1
  40441c:	4606      	mov	r6, r0
  40441e:	f04f 0900 	mov.w	r9, #0
  404422:	687d      	ldr	r5, [r7, #4]
  404424:	68bc      	ldr	r4, [r7, #8]
  404426:	3d01      	subs	r5, #1
  404428:	d411      	bmi.n	40444e <_fwalk_reent+0x3e>
  40442a:	89a3      	ldrh	r3, [r4, #12]
  40442c:	2b01      	cmp	r3, #1
  40442e:	f105 35ff 	add.w	r5, r5, #4294967295
  404432:	d908      	bls.n	404446 <_fwalk_reent+0x36>
  404434:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404438:	3301      	adds	r3, #1
  40443a:	4621      	mov	r1, r4
  40443c:	4630      	mov	r0, r6
  40443e:	d002      	beq.n	404446 <_fwalk_reent+0x36>
  404440:	47c0      	blx	r8
  404442:	ea49 0900 	orr.w	r9, r9, r0
  404446:	1c6b      	adds	r3, r5, #1
  404448:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40444c:	d1ed      	bne.n	40442a <_fwalk_reent+0x1a>
  40444e:	683f      	ldr	r7, [r7, #0]
  404450:	2f00      	cmp	r7, #0
  404452:	d1e6      	bne.n	404422 <_fwalk_reent+0x12>
  404454:	4648      	mov	r0, r9
  404456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40445a:	46b9      	mov	r9, r7
  40445c:	4648      	mov	r0, r9
  40445e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404462:	bf00      	nop

00404464 <__locale_mb_cur_max>:
  404464:	4b04      	ldr	r3, [pc, #16]	; (404478 <__locale_mb_cur_max+0x14>)
  404466:	4a05      	ldr	r2, [pc, #20]	; (40447c <__locale_mb_cur_max+0x18>)
  404468:	681b      	ldr	r3, [r3, #0]
  40446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40446c:	2b00      	cmp	r3, #0
  40446e:	bf08      	it	eq
  404470:	4613      	moveq	r3, r2
  404472:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404476:	4770      	bx	lr
  404478:	20400028 	.word	0x20400028
  40447c:	2040045c 	.word	0x2040045c

00404480 <__retarget_lock_init_recursive>:
  404480:	4770      	bx	lr
  404482:	bf00      	nop

00404484 <__retarget_lock_close_recursive>:
  404484:	4770      	bx	lr
  404486:	bf00      	nop

00404488 <__retarget_lock_acquire_recursive>:
  404488:	4770      	bx	lr
  40448a:	bf00      	nop

0040448c <__retarget_lock_release_recursive>:
  40448c:	4770      	bx	lr
  40448e:	bf00      	nop

00404490 <__swhatbuf_r>:
  404490:	b570      	push	{r4, r5, r6, lr}
  404492:	460c      	mov	r4, r1
  404494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404498:	2900      	cmp	r1, #0
  40449a:	b090      	sub	sp, #64	; 0x40
  40449c:	4615      	mov	r5, r2
  40449e:	461e      	mov	r6, r3
  4044a0:	db14      	blt.n	4044cc <__swhatbuf_r+0x3c>
  4044a2:	aa01      	add	r2, sp, #4
  4044a4:	f000 ff74 	bl	405390 <_fstat_r>
  4044a8:	2800      	cmp	r0, #0
  4044aa:	db0f      	blt.n	4044cc <__swhatbuf_r+0x3c>
  4044ac:	9a02      	ldr	r2, [sp, #8]
  4044ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4044b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4044b6:	fab2 f282 	clz	r2, r2
  4044ba:	0952      	lsrs	r2, r2, #5
  4044bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4044c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4044c4:	6032      	str	r2, [r6, #0]
  4044c6:	602b      	str	r3, [r5, #0]
  4044c8:	b010      	add	sp, #64	; 0x40
  4044ca:	bd70      	pop	{r4, r5, r6, pc}
  4044cc:	89a2      	ldrh	r2, [r4, #12]
  4044ce:	2300      	movs	r3, #0
  4044d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4044d4:	6033      	str	r3, [r6, #0]
  4044d6:	d004      	beq.n	4044e2 <__swhatbuf_r+0x52>
  4044d8:	2240      	movs	r2, #64	; 0x40
  4044da:	4618      	mov	r0, r3
  4044dc:	602a      	str	r2, [r5, #0]
  4044de:	b010      	add	sp, #64	; 0x40
  4044e0:	bd70      	pop	{r4, r5, r6, pc}
  4044e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4044e6:	602b      	str	r3, [r5, #0]
  4044e8:	b010      	add	sp, #64	; 0x40
  4044ea:	bd70      	pop	{r4, r5, r6, pc}

004044ec <__smakebuf_r>:
  4044ec:	898a      	ldrh	r2, [r1, #12]
  4044ee:	0792      	lsls	r2, r2, #30
  4044f0:	460b      	mov	r3, r1
  4044f2:	d506      	bpl.n	404502 <__smakebuf_r+0x16>
  4044f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4044f8:	2101      	movs	r1, #1
  4044fa:	601a      	str	r2, [r3, #0]
  4044fc:	611a      	str	r2, [r3, #16]
  4044fe:	6159      	str	r1, [r3, #20]
  404500:	4770      	bx	lr
  404502:	b5f0      	push	{r4, r5, r6, r7, lr}
  404504:	b083      	sub	sp, #12
  404506:	ab01      	add	r3, sp, #4
  404508:	466a      	mov	r2, sp
  40450a:	460c      	mov	r4, r1
  40450c:	4606      	mov	r6, r0
  40450e:	f7ff ffbf 	bl	404490 <__swhatbuf_r>
  404512:	9900      	ldr	r1, [sp, #0]
  404514:	4605      	mov	r5, r0
  404516:	4630      	mov	r0, r6
  404518:	f000 f83a 	bl	404590 <_malloc_r>
  40451c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404520:	b1d8      	cbz	r0, 40455a <__smakebuf_r+0x6e>
  404522:	9a01      	ldr	r2, [sp, #4]
  404524:	4f15      	ldr	r7, [pc, #84]	; (40457c <__smakebuf_r+0x90>)
  404526:	9900      	ldr	r1, [sp, #0]
  404528:	63f7      	str	r7, [r6, #60]	; 0x3c
  40452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40452e:	81a3      	strh	r3, [r4, #12]
  404530:	6020      	str	r0, [r4, #0]
  404532:	6120      	str	r0, [r4, #16]
  404534:	6161      	str	r1, [r4, #20]
  404536:	b91a      	cbnz	r2, 404540 <__smakebuf_r+0x54>
  404538:	432b      	orrs	r3, r5
  40453a:	81a3      	strh	r3, [r4, #12]
  40453c:	b003      	add	sp, #12
  40453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404540:	4630      	mov	r0, r6
  404542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404546:	f000 ff37 	bl	4053b8 <_isatty_r>
  40454a:	b1a0      	cbz	r0, 404576 <__smakebuf_r+0x8a>
  40454c:	89a3      	ldrh	r3, [r4, #12]
  40454e:	f023 0303 	bic.w	r3, r3, #3
  404552:	f043 0301 	orr.w	r3, r3, #1
  404556:	b21b      	sxth	r3, r3
  404558:	e7ee      	b.n	404538 <__smakebuf_r+0x4c>
  40455a:	059a      	lsls	r2, r3, #22
  40455c:	d4ee      	bmi.n	40453c <__smakebuf_r+0x50>
  40455e:	f023 0303 	bic.w	r3, r3, #3
  404562:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404566:	f043 0302 	orr.w	r3, r3, #2
  40456a:	2101      	movs	r1, #1
  40456c:	81a3      	strh	r3, [r4, #12]
  40456e:	6022      	str	r2, [r4, #0]
  404570:	6122      	str	r2, [r4, #16]
  404572:	6161      	str	r1, [r4, #20]
  404574:	e7e2      	b.n	40453c <__smakebuf_r+0x50>
  404576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40457a:	e7dd      	b.n	404538 <__smakebuf_r+0x4c>
  40457c:	00403cad 	.word	0x00403cad

00404580 <malloc>:
  404580:	4b02      	ldr	r3, [pc, #8]	; (40458c <malloc+0xc>)
  404582:	4601      	mov	r1, r0
  404584:	6818      	ldr	r0, [r3, #0]
  404586:	f000 b803 	b.w	404590 <_malloc_r>
  40458a:	bf00      	nop
  40458c:	20400028 	.word	0x20400028

00404590 <_malloc_r>:
  404590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404594:	f101 060b 	add.w	r6, r1, #11
  404598:	2e16      	cmp	r6, #22
  40459a:	b083      	sub	sp, #12
  40459c:	4605      	mov	r5, r0
  40459e:	f240 809e 	bls.w	4046de <_malloc_r+0x14e>
  4045a2:	f036 0607 	bics.w	r6, r6, #7
  4045a6:	f100 80bd 	bmi.w	404724 <_malloc_r+0x194>
  4045aa:	42b1      	cmp	r1, r6
  4045ac:	f200 80ba 	bhi.w	404724 <_malloc_r+0x194>
  4045b0:	f000 fb6a 	bl	404c88 <__malloc_lock>
  4045b4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4045b8:	f0c0 8293 	bcc.w	404ae2 <_malloc_r+0x552>
  4045bc:	0a73      	lsrs	r3, r6, #9
  4045be:	f000 80b8 	beq.w	404732 <_malloc_r+0x1a2>
  4045c2:	2b04      	cmp	r3, #4
  4045c4:	f200 8179 	bhi.w	4048ba <_malloc_r+0x32a>
  4045c8:	09b3      	lsrs	r3, r6, #6
  4045ca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4045ce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4045d2:	00c3      	lsls	r3, r0, #3
  4045d4:	4fbf      	ldr	r7, [pc, #764]	; (4048d4 <_malloc_r+0x344>)
  4045d6:	443b      	add	r3, r7
  4045d8:	f1a3 0108 	sub.w	r1, r3, #8
  4045dc:	685c      	ldr	r4, [r3, #4]
  4045de:	42a1      	cmp	r1, r4
  4045e0:	d106      	bne.n	4045f0 <_malloc_r+0x60>
  4045e2:	e00c      	b.n	4045fe <_malloc_r+0x6e>
  4045e4:	2a00      	cmp	r2, #0
  4045e6:	f280 80aa 	bge.w	40473e <_malloc_r+0x1ae>
  4045ea:	68e4      	ldr	r4, [r4, #12]
  4045ec:	42a1      	cmp	r1, r4
  4045ee:	d006      	beq.n	4045fe <_malloc_r+0x6e>
  4045f0:	6863      	ldr	r3, [r4, #4]
  4045f2:	f023 0303 	bic.w	r3, r3, #3
  4045f6:	1b9a      	subs	r2, r3, r6
  4045f8:	2a0f      	cmp	r2, #15
  4045fa:	ddf3      	ble.n	4045e4 <_malloc_r+0x54>
  4045fc:	4670      	mov	r0, lr
  4045fe:	693c      	ldr	r4, [r7, #16]
  404600:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4048e8 <_malloc_r+0x358>
  404604:	4574      	cmp	r4, lr
  404606:	f000 81ab 	beq.w	404960 <_malloc_r+0x3d0>
  40460a:	6863      	ldr	r3, [r4, #4]
  40460c:	f023 0303 	bic.w	r3, r3, #3
  404610:	1b9a      	subs	r2, r3, r6
  404612:	2a0f      	cmp	r2, #15
  404614:	f300 8190 	bgt.w	404938 <_malloc_r+0x3a8>
  404618:	2a00      	cmp	r2, #0
  40461a:	f8c7 e014 	str.w	lr, [r7, #20]
  40461e:	f8c7 e010 	str.w	lr, [r7, #16]
  404622:	f280 809d 	bge.w	404760 <_malloc_r+0x1d0>
  404626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40462a:	f080 8161 	bcs.w	4048f0 <_malloc_r+0x360>
  40462e:	08db      	lsrs	r3, r3, #3
  404630:	f103 0c01 	add.w	ip, r3, #1
  404634:	1099      	asrs	r1, r3, #2
  404636:	687a      	ldr	r2, [r7, #4]
  404638:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40463c:	f8c4 8008 	str.w	r8, [r4, #8]
  404640:	2301      	movs	r3, #1
  404642:	408b      	lsls	r3, r1
  404644:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404648:	4313      	orrs	r3, r2
  40464a:	3908      	subs	r1, #8
  40464c:	60e1      	str	r1, [r4, #12]
  40464e:	607b      	str	r3, [r7, #4]
  404650:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404654:	f8c8 400c 	str.w	r4, [r8, #12]
  404658:	1082      	asrs	r2, r0, #2
  40465a:	2401      	movs	r4, #1
  40465c:	4094      	lsls	r4, r2
  40465e:	429c      	cmp	r4, r3
  404660:	f200 808b 	bhi.w	40477a <_malloc_r+0x1ea>
  404664:	421c      	tst	r4, r3
  404666:	d106      	bne.n	404676 <_malloc_r+0xe6>
  404668:	f020 0003 	bic.w	r0, r0, #3
  40466c:	0064      	lsls	r4, r4, #1
  40466e:	421c      	tst	r4, r3
  404670:	f100 0004 	add.w	r0, r0, #4
  404674:	d0fa      	beq.n	40466c <_malloc_r+0xdc>
  404676:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40467a:	46cc      	mov	ip, r9
  40467c:	4680      	mov	r8, r0
  40467e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404682:	459c      	cmp	ip, r3
  404684:	d107      	bne.n	404696 <_malloc_r+0x106>
  404686:	e16d      	b.n	404964 <_malloc_r+0x3d4>
  404688:	2a00      	cmp	r2, #0
  40468a:	f280 817b 	bge.w	404984 <_malloc_r+0x3f4>
  40468e:	68db      	ldr	r3, [r3, #12]
  404690:	459c      	cmp	ip, r3
  404692:	f000 8167 	beq.w	404964 <_malloc_r+0x3d4>
  404696:	6859      	ldr	r1, [r3, #4]
  404698:	f021 0103 	bic.w	r1, r1, #3
  40469c:	1b8a      	subs	r2, r1, r6
  40469e:	2a0f      	cmp	r2, #15
  4046a0:	ddf2      	ble.n	404688 <_malloc_r+0xf8>
  4046a2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4046a6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4046aa:	9300      	str	r3, [sp, #0]
  4046ac:	199c      	adds	r4, r3, r6
  4046ae:	4628      	mov	r0, r5
  4046b0:	f046 0601 	orr.w	r6, r6, #1
  4046b4:	f042 0501 	orr.w	r5, r2, #1
  4046b8:	605e      	str	r6, [r3, #4]
  4046ba:	f8c8 c00c 	str.w	ip, [r8, #12]
  4046be:	f8cc 8008 	str.w	r8, [ip, #8]
  4046c2:	617c      	str	r4, [r7, #20]
  4046c4:	613c      	str	r4, [r7, #16]
  4046c6:	f8c4 e00c 	str.w	lr, [r4, #12]
  4046ca:	f8c4 e008 	str.w	lr, [r4, #8]
  4046ce:	6065      	str	r5, [r4, #4]
  4046d0:	505a      	str	r2, [r3, r1]
  4046d2:	f000 fadf 	bl	404c94 <__malloc_unlock>
  4046d6:	9b00      	ldr	r3, [sp, #0]
  4046d8:	f103 0408 	add.w	r4, r3, #8
  4046dc:	e01e      	b.n	40471c <_malloc_r+0x18c>
  4046de:	2910      	cmp	r1, #16
  4046e0:	d820      	bhi.n	404724 <_malloc_r+0x194>
  4046e2:	f000 fad1 	bl	404c88 <__malloc_lock>
  4046e6:	2610      	movs	r6, #16
  4046e8:	2318      	movs	r3, #24
  4046ea:	2002      	movs	r0, #2
  4046ec:	4f79      	ldr	r7, [pc, #484]	; (4048d4 <_malloc_r+0x344>)
  4046ee:	443b      	add	r3, r7
  4046f0:	f1a3 0208 	sub.w	r2, r3, #8
  4046f4:	685c      	ldr	r4, [r3, #4]
  4046f6:	4294      	cmp	r4, r2
  4046f8:	f000 813d 	beq.w	404976 <_malloc_r+0x3e6>
  4046fc:	6863      	ldr	r3, [r4, #4]
  4046fe:	68e1      	ldr	r1, [r4, #12]
  404700:	68a6      	ldr	r6, [r4, #8]
  404702:	f023 0303 	bic.w	r3, r3, #3
  404706:	4423      	add	r3, r4
  404708:	4628      	mov	r0, r5
  40470a:	685a      	ldr	r2, [r3, #4]
  40470c:	60f1      	str	r1, [r6, #12]
  40470e:	f042 0201 	orr.w	r2, r2, #1
  404712:	608e      	str	r6, [r1, #8]
  404714:	605a      	str	r2, [r3, #4]
  404716:	f000 fabd 	bl	404c94 <__malloc_unlock>
  40471a:	3408      	adds	r4, #8
  40471c:	4620      	mov	r0, r4
  40471e:	b003      	add	sp, #12
  404720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404724:	2400      	movs	r4, #0
  404726:	230c      	movs	r3, #12
  404728:	4620      	mov	r0, r4
  40472a:	602b      	str	r3, [r5, #0]
  40472c:	b003      	add	sp, #12
  40472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404732:	2040      	movs	r0, #64	; 0x40
  404734:	f44f 7300 	mov.w	r3, #512	; 0x200
  404738:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40473c:	e74a      	b.n	4045d4 <_malloc_r+0x44>
  40473e:	4423      	add	r3, r4
  404740:	68e1      	ldr	r1, [r4, #12]
  404742:	685a      	ldr	r2, [r3, #4]
  404744:	68a6      	ldr	r6, [r4, #8]
  404746:	f042 0201 	orr.w	r2, r2, #1
  40474a:	60f1      	str	r1, [r6, #12]
  40474c:	4628      	mov	r0, r5
  40474e:	608e      	str	r6, [r1, #8]
  404750:	605a      	str	r2, [r3, #4]
  404752:	f000 fa9f 	bl	404c94 <__malloc_unlock>
  404756:	3408      	adds	r4, #8
  404758:	4620      	mov	r0, r4
  40475a:	b003      	add	sp, #12
  40475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404760:	4423      	add	r3, r4
  404762:	4628      	mov	r0, r5
  404764:	685a      	ldr	r2, [r3, #4]
  404766:	f042 0201 	orr.w	r2, r2, #1
  40476a:	605a      	str	r2, [r3, #4]
  40476c:	f000 fa92 	bl	404c94 <__malloc_unlock>
  404770:	3408      	adds	r4, #8
  404772:	4620      	mov	r0, r4
  404774:	b003      	add	sp, #12
  404776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40477a:	68bc      	ldr	r4, [r7, #8]
  40477c:	6863      	ldr	r3, [r4, #4]
  40477e:	f023 0803 	bic.w	r8, r3, #3
  404782:	45b0      	cmp	r8, r6
  404784:	d304      	bcc.n	404790 <_malloc_r+0x200>
  404786:	eba8 0306 	sub.w	r3, r8, r6
  40478a:	2b0f      	cmp	r3, #15
  40478c:	f300 8085 	bgt.w	40489a <_malloc_r+0x30a>
  404790:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4048ec <_malloc_r+0x35c>
  404794:	4b50      	ldr	r3, [pc, #320]	; (4048d8 <_malloc_r+0x348>)
  404796:	f8d9 2000 	ldr.w	r2, [r9]
  40479a:	681b      	ldr	r3, [r3, #0]
  40479c:	3201      	adds	r2, #1
  40479e:	4433      	add	r3, r6
  4047a0:	eb04 0a08 	add.w	sl, r4, r8
  4047a4:	f000 8155 	beq.w	404a52 <_malloc_r+0x4c2>
  4047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4047ac:	330f      	adds	r3, #15
  4047ae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4047b2:	f02b 0b0f 	bic.w	fp, fp, #15
  4047b6:	4659      	mov	r1, fp
  4047b8:	4628      	mov	r0, r5
  4047ba:	f000 fc17 	bl	404fec <_sbrk_r>
  4047be:	1c41      	adds	r1, r0, #1
  4047c0:	4602      	mov	r2, r0
  4047c2:	f000 80fc 	beq.w	4049be <_malloc_r+0x42e>
  4047c6:	4582      	cmp	sl, r0
  4047c8:	f200 80f7 	bhi.w	4049ba <_malloc_r+0x42a>
  4047cc:	4b43      	ldr	r3, [pc, #268]	; (4048dc <_malloc_r+0x34c>)
  4047ce:	6819      	ldr	r1, [r3, #0]
  4047d0:	4459      	add	r1, fp
  4047d2:	6019      	str	r1, [r3, #0]
  4047d4:	f000 814d 	beq.w	404a72 <_malloc_r+0x4e2>
  4047d8:	f8d9 0000 	ldr.w	r0, [r9]
  4047dc:	3001      	adds	r0, #1
  4047de:	bf1b      	ittet	ne
  4047e0:	eba2 0a0a 	subne.w	sl, r2, sl
  4047e4:	4451      	addne	r1, sl
  4047e6:	f8c9 2000 	streq.w	r2, [r9]
  4047ea:	6019      	strne	r1, [r3, #0]
  4047ec:	f012 0107 	ands.w	r1, r2, #7
  4047f0:	f000 8115 	beq.w	404a1e <_malloc_r+0x48e>
  4047f4:	f1c1 0008 	rsb	r0, r1, #8
  4047f8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4047fc:	4402      	add	r2, r0
  4047fe:	3108      	adds	r1, #8
  404800:	eb02 090b 	add.w	r9, r2, fp
  404804:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404808:	eba1 0909 	sub.w	r9, r1, r9
  40480c:	4649      	mov	r1, r9
  40480e:	4628      	mov	r0, r5
  404810:	9301      	str	r3, [sp, #4]
  404812:	9200      	str	r2, [sp, #0]
  404814:	f000 fbea 	bl	404fec <_sbrk_r>
  404818:	1c43      	adds	r3, r0, #1
  40481a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40481e:	f000 8143 	beq.w	404aa8 <_malloc_r+0x518>
  404822:	1a80      	subs	r0, r0, r2
  404824:	4448      	add	r0, r9
  404826:	f040 0001 	orr.w	r0, r0, #1
  40482a:	6819      	ldr	r1, [r3, #0]
  40482c:	60ba      	str	r2, [r7, #8]
  40482e:	4449      	add	r1, r9
  404830:	42bc      	cmp	r4, r7
  404832:	6050      	str	r0, [r2, #4]
  404834:	6019      	str	r1, [r3, #0]
  404836:	d017      	beq.n	404868 <_malloc_r+0x2d8>
  404838:	f1b8 0f0f 	cmp.w	r8, #15
  40483c:	f240 80fb 	bls.w	404a36 <_malloc_r+0x4a6>
  404840:	6860      	ldr	r0, [r4, #4]
  404842:	f1a8 020c 	sub.w	r2, r8, #12
  404846:	f022 0207 	bic.w	r2, r2, #7
  40484a:	eb04 0e02 	add.w	lr, r4, r2
  40484e:	f000 0001 	and.w	r0, r0, #1
  404852:	f04f 0c05 	mov.w	ip, #5
  404856:	4310      	orrs	r0, r2
  404858:	2a0f      	cmp	r2, #15
  40485a:	6060      	str	r0, [r4, #4]
  40485c:	f8ce c004 	str.w	ip, [lr, #4]
  404860:	f8ce c008 	str.w	ip, [lr, #8]
  404864:	f200 8117 	bhi.w	404a96 <_malloc_r+0x506>
  404868:	4b1d      	ldr	r3, [pc, #116]	; (4048e0 <_malloc_r+0x350>)
  40486a:	68bc      	ldr	r4, [r7, #8]
  40486c:	681a      	ldr	r2, [r3, #0]
  40486e:	4291      	cmp	r1, r2
  404870:	bf88      	it	hi
  404872:	6019      	strhi	r1, [r3, #0]
  404874:	4b1b      	ldr	r3, [pc, #108]	; (4048e4 <_malloc_r+0x354>)
  404876:	681a      	ldr	r2, [r3, #0]
  404878:	4291      	cmp	r1, r2
  40487a:	6862      	ldr	r2, [r4, #4]
  40487c:	bf88      	it	hi
  40487e:	6019      	strhi	r1, [r3, #0]
  404880:	f022 0203 	bic.w	r2, r2, #3
  404884:	4296      	cmp	r6, r2
  404886:	eba2 0306 	sub.w	r3, r2, r6
  40488a:	d801      	bhi.n	404890 <_malloc_r+0x300>
  40488c:	2b0f      	cmp	r3, #15
  40488e:	dc04      	bgt.n	40489a <_malloc_r+0x30a>
  404890:	4628      	mov	r0, r5
  404892:	f000 f9ff 	bl	404c94 <__malloc_unlock>
  404896:	2400      	movs	r4, #0
  404898:	e740      	b.n	40471c <_malloc_r+0x18c>
  40489a:	19a2      	adds	r2, r4, r6
  40489c:	f043 0301 	orr.w	r3, r3, #1
  4048a0:	f046 0601 	orr.w	r6, r6, #1
  4048a4:	6066      	str	r6, [r4, #4]
  4048a6:	4628      	mov	r0, r5
  4048a8:	60ba      	str	r2, [r7, #8]
  4048aa:	6053      	str	r3, [r2, #4]
  4048ac:	f000 f9f2 	bl	404c94 <__malloc_unlock>
  4048b0:	3408      	adds	r4, #8
  4048b2:	4620      	mov	r0, r4
  4048b4:	b003      	add	sp, #12
  4048b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048ba:	2b14      	cmp	r3, #20
  4048bc:	d971      	bls.n	4049a2 <_malloc_r+0x412>
  4048be:	2b54      	cmp	r3, #84	; 0x54
  4048c0:	f200 80a3 	bhi.w	404a0a <_malloc_r+0x47a>
  4048c4:	0b33      	lsrs	r3, r6, #12
  4048c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4048ca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4048ce:	00c3      	lsls	r3, r0, #3
  4048d0:	e680      	b.n	4045d4 <_malloc_r+0x44>
  4048d2:	bf00      	nop
  4048d4:	204005c8 	.word	0x204005c8
  4048d8:	20404304 	.word	0x20404304
  4048dc:	204042d4 	.word	0x204042d4
  4048e0:	204042fc 	.word	0x204042fc
  4048e4:	20404300 	.word	0x20404300
  4048e8:	204005d0 	.word	0x204005d0
  4048ec:	204009d0 	.word	0x204009d0
  4048f0:	0a5a      	lsrs	r2, r3, #9
  4048f2:	2a04      	cmp	r2, #4
  4048f4:	d95b      	bls.n	4049ae <_malloc_r+0x41e>
  4048f6:	2a14      	cmp	r2, #20
  4048f8:	f200 80ae 	bhi.w	404a58 <_malloc_r+0x4c8>
  4048fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404900:	00c9      	lsls	r1, r1, #3
  404902:	325b      	adds	r2, #91	; 0x5b
  404904:	eb07 0c01 	add.w	ip, r7, r1
  404908:	5879      	ldr	r1, [r7, r1]
  40490a:	f1ac 0c08 	sub.w	ip, ip, #8
  40490e:	458c      	cmp	ip, r1
  404910:	f000 8088 	beq.w	404a24 <_malloc_r+0x494>
  404914:	684a      	ldr	r2, [r1, #4]
  404916:	f022 0203 	bic.w	r2, r2, #3
  40491a:	4293      	cmp	r3, r2
  40491c:	d273      	bcs.n	404a06 <_malloc_r+0x476>
  40491e:	6889      	ldr	r1, [r1, #8]
  404920:	458c      	cmp	ip, r1
  404922:	d1f7      	bne.n	404914 <_malloc_r+0x384>
  404924:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404928:	687b      	ldr	r3, [r7, #4]
  40492a:	60e2      	str	r2, [r4, #12]
  40492c:	f8c4 c008 	str.w	ip, [r4, #8]
  404930:	6094      	str	r4, [r2, #8]
  404932:	f8cc 400c 	str.w	r4, [ip, #12]
  404936:	e68f      	b.n	404658 <_malloc_r+0xc8>
  404938:	19a1      	adds	r1, r4, r6
  40493a:	f046 0c01 	orr.w	ip, r6, #1
  40493e:	f042 0601 	orr.w	r6, r2, #1
  404942:	f8c4 c004 	str.w	ip, [r4, #4]
  404946:	4628      	mov	r0, r5
  404948:	6179      	str	r1, [r7, #20]
  40494a:	6139      	str	r1, [r7, #16]
  40494c:	f8c1 e00c 	str.w	lr, [r1, #12]
  404950:	f8c1 e008 	str.w	lr, [r1, #8]
  404954:	604e      	str	r6, [r1, #4]
  404956:	50e2      	str	r2, [r4, r3]
  404958:	f000 f99c 	bl	404c94 <__malloc_unlock>
  40495c:	3408      	adds	r4, #8
  40495e:	e6dd      	b.n	40471c <_malloc_r+0x18c>
  404960:	687b      	ldr	r3, [r7, #4]
  404962:	e679      	b.n	404658 <_malloc_r+0xc8>
  404964:	f108 0801 	add.w	r8, r8, #1
  404968:	f018 0f03 	tst.w	r8, #3
  40496c:	f10c 0c08 	add.w	ip, ip, #8
  404970:	f47f ae85 	bne.w	40467e <_malloc_r+0xee>
  404974:	e02d      	b.n	4049d2 <_malloc_r+0x442>
  404976:	68dc      	ldr	r4, [r3, #12]
  404978:	42a3      	cmp	r3, r4
  40497a:	bf08      	it	eq
  40497c:	3002      	addeq	r0, #2
  40497e:	f43f ae3e 	beq.w	4045fe <_malloc_r+0x6e>
  404982:	e6bb      	b.n	4046fc <_malloc_r+0x16c>
  404984:	4419      	add	r1, r3
  404986:	461c      	mov	r4, r3
  404988:	684a      	ldr	r2, [r1, #4]
  40498a:	68db      	ldr	r3, [r3, #12]
  40498c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404990:	f042 0201 	orr.w	r2, r2, #1
  404994:	604a      	str	r2, [r1, #4]
  404996:	4628      	mov	r0, r5
  404998:	60f3      	str	r3, [r6, #12]
  40499a:	609e      	str	r6, [r3, #8]
  40499c:	f000 f97a 	bl	404c94 <__malloc_unlock>
  4049a0:	e6bc      	b.n	40471c <_malloc_r+0x18c>
  4049a2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4049a6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4049aa:	00c3      	lsls	r3, r0, #3
  4049ac:	e612      	b.n	4045d4 <_malloc_r+0x44>
  4049ae:	099a      	lsrs	r2, r3, #6
  4049b0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4049b4:	00c9      	lsls	r1, r1, #3
  4049b6:	3238      	adds	r2, #56	; 0x38
  4049b8:	e7a4      	b.n	404904 <_malloc_r+0x374>
  4049ba:	42bc      	cmp	r4, r7
  4049bc:	d054      	beq.n	404a68 <_malloc_r+0x4d8>
  4049be:	68bc      	ldr	r4, [r7, #8]
  4049c0:	6862      	ldr	r2, [r4, #4]
  4049c2:	f022 0203 	bic.w	r2, r2, #3
  4049c6:	e75d      	b.n	404884 <_malloc_r+0x2f4>
  4049c8:	f859 3908 	ldr.w	r3, [r9], #-8
  4049cc:	4599      	cmp	r9, r3
  4049ce:	f040 8086 	bne.w	404ade <_malloc_r+0x54e>
  4049d2:	f010 0f03 	tst.w	r0, #3
  4049d6:	f100 30ff 	add.w	r0, r0, #4294967295
  4049da:	d1f5      	bne.n	4049c8 <_malloc_r+0x438>
  4049dc:	687b      	ldr	r3, [r7, #4]
  4049de:	ea23 0304 	bic.w	r3, r3, r4
  4049e2:	607b      	str	r3, [r7, #4]
  4049e4:	0064      	lsls	r4, r4, #1
  4049e6:	429c      	cmp	r4, r3
  4049e8:	f63f aec7 	bhi.w	40477a <_malloc_r+0x1ea>
  4049ec:	2c00      	cmp	r4, #0
  4049ee:	f43f aec4 	beq.w	40477a <_malloc_r+0x1ea>
  4049f2:	421c      	tst	r4, r3
  4049f4:	4640      	mov	r0, r8
  4049f6:	f47f ae3e 	bne.w	404676 <_malloc_r+0xe6>
  4049fa:	0064      	lsls	r4, r4, #1
  4049fc:	421c      	tst	r4, r3
  4049fe:	f100 0004 	add.w	r0, r0, #4
  404a02:	d0fa      	beq.n	4049fa <_malloc_r+0x46a>
  404a04:	e637      	b.n	404676 <_malloc_r+0xe6>
  404a06:	468c      	mov	ip, r1
  404a08:	e78c      	b.n	404924 <_malloc_r+0x394>
  404a0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404a0e:	d815      	bhi.n	404a3c <_malloc_r+0x4ac>
  404a10:	0bf3      	lsrs	r3, r6, #15
  404a12:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404a16:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404a1a:	00c3      	lsls	r3, r0, #3
  404a1c:	e5da      	b.n	4045d4 <_malloc_r+0x44>
  404a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404a22:	e6ed      	b.n	404800 <_malloc_r+0x270>
  404a24:	687b      	ldr	r3, [r7, #4]
  404a26:	1092      	asrs	r2, r2, #2
  404a28:	2101      	movs	r1, #1
  404a2a:	fa01 f202 	lsl.w	r2, r1, r2
  404a2e:	4313      	orrs	r3, r2
  404a30:	607b      	str	r3, [r7, #4]
  404a32:	4662      	mov	r2, ip
  404a34:	e779      	b.n	40492a <_malloc_r+0x39a>
  404a36:	2301      	movs	r3, #1
  404a38:	6053      	str	r3, [r2, #4]
  404a3a:	e729      	b.n	404890 <_malloc_r+0x300>
  404a3c:	f240 5254 	movw	r2, #1364	; 0x554
  404a40:	4293      	cmp	r3, r2
  404a42:	d822      	bhi.n	404a8a <_malloc_r+0x4fa>
  404a44:	0cb3      	lsrs	r3, r6, #18
  404a46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404a4a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404a4e:	00c3      	lsls	r3, r0, #3
  404a50:	e5c0      	b.n	4045d4 <_malloc_r+0x44>
  404a52:	f103 0b10 	add.w	fp, r3, #16
  404a56:	e6ae      	b.n	4047b6 <_malloc_r+0x226>
  404a58:	2a54      	cmp	r2, #84	; 0x54
  404a5a:	d829      	bhi.n	404ab0 <_malloc_r+0x520>
  404a5c:	0b1a      	lsrs	r2, r3, #12
  404a5e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404a62:	00c9      	lsls	r1, r1, #3
  404a64:	326e      	adds	r2, #110	; 0x6e
  404a66:	e74d      	b.n	404904 <_malloc_r+0x374>
  404a68:	4b20      	ldr	r3, [pc, #128]	; (404aec <_malloc_r+0x55c>)
  404a6a:	6819      	ldr	r1, [r3, #0]
  404a6c:	4459      	add	r1, fp
  404a6e:	6019      	str	r1, [r3, #0]
  404a70:	e6b2      	b.n	4047d8 <_malloc_r+0x248>
  404a72:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404a76:	2800      	cmp	r0, #0
  404a78:	f47f aeae 	bne.w	4047d8 <_malloc_r+0x248>
  404a7c:	eb08 030b 	add.w	r3, r8, fp
  404a80:	68ba      	ldr	r2, [r7, #8]
  404a82:	f043 0301 	orr.w	r3, r3, #1
  404a86:	6053      	str	r3, [r2, #4]
  404a88:	e6ee      	b.n	404868 <_malloc_r+0x2d8>
  404a8a:	207f      	movs	r0, #127	; 0x7f
  404a8c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404a90:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404a94:	e59e      	b.n	4045d4 <_malloc_r+0x44>
  404a96:	f104 0108 	add.w	r1, r4, #8
  404a9a:	4628      	mov	r0, r5
  404a9c:	9300      	str	r3, [sp, #0]
  404a9e:	f7ff fa59 	bl	403f54 <_free_r>
  404aa2:	9b00      	ldr	r3, [sp, #0]
  404aa4:	6819      	ldr	r1, [r3, #0]
  404aa6:	e6df      	b.n	404868 <_malloc_r+0x2d8>
  404aa8:	2001      	movs	r0, #1
  404aaa:	f04f 0900 	mov.w	r9, #0
  404aae:	e6bc      	b.n	40482a <_malloc_r+0x29a>
  404ab0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404ab4:	d805      	bhi.n	404ac2 <_malloc_r+0x532>
  404ab6:	0bda      	lsrs	r2, r3, #15
  404ab8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404abc:	00c9      	lsls	r1, r1, #3
  404abe:	3277      	adds	r2, #119	; 0x77
  404ac0:	e720      	b.n	404904 <_malloc_r+0x374>
  404ac2:	f240 5154 	movw	r1, #1364	; 0x554
  404ac6:	428a      	cmp	r2, r1
  404ac8:	d805      	bhi.n	404ad6 <_malloc_r+0x546>
  404aca:	0c9a      	lsrs	r2, r3, #18
  404acc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404ad0:	00c9      	lsls	r1, r1, #3
  404ad2:	327c      	adds	r2, #124	; 0x7c
  404ad4:	e716      	b.n	404904 <_malloc_r+0x374>
  404ad6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404ada:	227e      	movs	r2, #126	; 0x7e
  404adc:	e712      	b.n	404904 <_malloc_r+0x374>
  404ade:	687b      	ldr	r3, [r7, #4]
  404ae0:	e780      	b.n	4049e4 <_malloc_r+0x454>
  404ae2:	08f0      	lsrs	r0, r6, #3
  404ae4:	f106 0308 	add.w	r3, r6, #8
  404ae8:	e600      	b.n	4046ec <_malloc_r+0x15c>
  404aea:	bf00      	nop
  404aec:	204042d4 	.word	0x204042d4

00404af0 <__ascii_mbtowc>:
  404af0:	b082      	sub	sp, #8
  404af2:	b149      	cbz	r1, 404b08 <__ascii_mbtowc+0x18>
  404af4:	b15a      	cbz	r2, 404b0e <__ascii_mbtowc+0x1e>
  404af6:	b16b      	cbz	r3, 404b14 <__ascii_mbtowc+0x24>
  404af8:	7813      	ldrb	r3, [r2, #0]
  404afa:	600b      	str	r3, [r1, #0]
  404afc:	7812      	ldrb	r2, [r2, #0]
  404afe:	1c10      	adds	r0, r2, #0
  404b00:	bf18      	it	ne
  404b02:	2001      	movne	r0, #1
  404b04:	b002      	add	sp, #8
  404b06:	4770      	bx	lr
  404b08:	a901      	add	r1, sp, #4
  404b0a:	2a00      	cmp	r2, #0
  404b0c:	d1f3      	bne.n	404af6 <__ascii_mbtowc+0x6>
  404b0e:	4610      	mov	r0, r2
  404b10:	b002      	add	sp, #8
  404b12:	4770      	bx	lr
  404b14:	f06f 0001 	mvn.w	r0, #1
  404b18:	e7f4      	b.n	404b04 <__ascii_mbtowc+0x14>
  404b1a:	bf00      	nop
  404b1c:	0000      	movs	r0, r0
	...

00404b20 <memchr>:
  404b20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404b24:	2a10      	cmp	r2, #16
  404b26:	db2b      	blt.n	404b80 <memchr+0x60>
  404b28:	f010 0f07 	tst.w	r0, #7
  404b2c:	d008      	beq.n	404b40 <memchr+0x20>
  404b2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b32:	3a01      	subs	r2, #1
  404b34:	428b      	cmp	r3, r1
  404b36:	d02d      	beq.n	404b94 <memchr+0x74>
  404b38:	f010 0f07 	tst.w	r0, #7
  404b3c:	b342      	cbz	r2, 404b90 <memchr+0x70>
  404b3e:	d1f6      	bne.n	404b2e <memchr+0xe>
  404b40:	b4f0      	push	{r4, r5, r6, r7}
  404b42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404b46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404b4a:	f022 0407 	bic.w	r4, r2, #7
  404b4e:	f07f 0700 	mvns.w	r7, #0
  404b52:	2300      	movs	r3, #0
  404b54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404b58:	3c08      	subs	r4, #8
  404b5a:	ea85 0501 	eor.w	r5, r5, r1
  404b5e:	ea86 0601 	eor.w	r6, r6, r1
  404b62:	fa85 f547 	uadd8	r5, r5, r7
  404b66:	faa3 f587 	sel	r5, r3, r7
  404b6a:	fa86 f647 	uadd8	r6, r6, r7
  404b6e:	faa5 f687 	sel	r6, r5, r7
  404b72:	b98e      	cbnz	r6, 404b98 <memchr+0x78>
  404b74:	d1ee      	bne.n	404b54 <memchr+0x34>
  404b76:	bcf0      	pop	{r4, r5, r6, r7}
  404b78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404b7c:	f002 0207 	and.w	r2, r2, #7
  404b80:	b132      	cbz	r2, 404b90 <memchr+0x70>
  404b82:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b86:	3a01      	subs	r2, #1
  404b88:	ea83 0301 	eor.w	r3, r3, r1
  404b8c:	b113      	cbz	r3, 404b94 <memchr+0x74>
  404b8e:	d1f8      	bne.n	404b82 <memchr+0x62>
  404b90:	2000      	movs	r0, #0
  404b92:	4770      	bx	lr
  404b94:	3801      	subs	r0, #1
  404b96:	4770      	bx	lr
  404b98:	2d00      	cmp	r5, #0
  404b9a:	bf06      	itte	eq
  404b9c:	4635      	moveq	r5, r6
  404b9e:	3803      	subeq	r0, #3
  404ba0:	3807      	subne	r0, #7
  404ba2:	f015 0f01 	tst.w	r5, #1
  404ba6:	d107      	bne.n	404bb8 <memchr+0x98>
  404ba8:	3001      	adds	r0, #1
  404baa:	f415 7f80 	tst.w	r5, #256	; 0x100
  404bae:	bf02      	ittt	eq
  404bb0:	3001      	addeq	r0, #1
  404bb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404bb6:	3001      	addeq	r0, #1
  404bb8:	bcf0      	pop	{r4, r5, r6, r7}
  404bba:	3801      	subs	r0, #1
  404bbc:	4770      	bx	lr
  404bbe:	bf00      	nop

00404bc0 <memmove>:
  404bc0:	4288      	cmp	r0, r1
  404bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
  404bc4:	d90d      	bls.n	404be2 <memmove+0x22>
  404bc6:	188b      	adds	r3, r1, r2
  404bc8:	4298      	cmp	r0, r3
  404bca:	d20a      	bcs.n	404be2 <memmove+0x22>
  404bcc:	1884      	adds	r4, r0, r2
  404bce:	2a00      	cmp	r2, #0
  404bd0:	d051      	beq.n	404c76 <memmove+0xb6>
  404bd2:	4622      	mov	r2, r4
  404bd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  404bd8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404bdc:	4299      	cmp	r1, r3
  404bde:	d1f9      	bne.n	404bd4 <memmove+0x14>
  404be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404be2:	2a0f      	cmp	r2, #15
  404be4:	d948      	bls.n	404c78 <memmove+0xb8>
  404be6:	ea41 0300 	orr.w	r3, r1, r0
  404bea:	079b      	lsls	r3, r3, #30
  404bec:	d146      	bne.n	404c7c <memmove+0xbc>
  404bee:	f100 0410 	add.w	r4, r0, #16
  404bf2:	f101 0310 	add.w	r3, r1, #16
  404bf6:	4615      	mov	r5, r2
  404bf8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404bfc:	f844 6c10 	str.w	r6, [r4, #-16]
  404c00:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404c04:	f844 6c0c 	str.w	r6, [r4, #-12]
  404c08:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404c0c:	f844 6c08 	str.w	r6, [r4, #-8]
  404c10:	3d10      	subs	r5, #16
  404c12:	f853 6c04 	ldr.w	r6, [r3, #-4]
  404c16:	f844 6c04 	str.w	r6, [r4, #-4]
  404c1a:	2d0f      	cmp	r5, #15
  404c1c:	f103 0310 	add.w	r3, r3, #16
  404c20:	f104 0410 	add.w	r4, r4, #16
  404c24:	d8e8      	bhi.n	404bf8 <memmove+0x38>
  404c26:	f1a2 0310 	sub.w	r3, r2, #16
  404c2a:	f023 030f 	bic.w	r3, r3, #15
  404c2e:	f002 0e0f 	and.w	lr, r2, #15
  404c32:	3310      	adds	r3, #16
  404c34:	f1be 0f03 	cmp.w	lr, #3
  404c38:	4419      	add	r1, r3
  404c3a:	4403      	add	r3, r0
  404c3c:	d921      	bls.n	404c82 <memmove+0xc2>
  404c3e:	1f1e      	subs	r6, r3, #4
  404c40:	460d      	mov	r5, r1
  404c42:	4674      	mov	r4, lr
  404c44:	3c04      	subs	r4, #4
  404c46:	f855 7b04 	ldr.w	r7, [r5], #4
  404c4a:	f846 7f04 	str.w	r7, [r6, #4]!
  404c4e:	2c03      	cmp	r4, #3
  404c50:	d8f8      	bhi.n	404c44 <memmove+0x84>
  404c52:	f1ae 0404 	sub.w	r4, lr, #4
  404c56:	f024 0403 	bic.w	r4, r4, #3
  404c5a:	3404      	adds	r4, #4
  404c5c:	4421      	add	r1, r4
  404c5e:	4423      	add	r3, r4
  404c60:	f002 0203 	and.w	r2, r2, #3
  404c64:	b162      	cbz	r2, 404c80 <memmove+0xc0>
  404c66:	3b01      	subs	r3, #1
  404c68:	440a      	add	r2, r1
  404c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
  404c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404c72:	428a      	cmp	r2, r1
  404c74:	d1f9      	bne.n	404c6a <memmove+0xaa>
  404c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c78:	4603      	mov	r3, r0
  404c7a:	e7f3      	b.n	404c64 <memmove+0xa4>
  404c7c:	4603      	mov	r3, r0
  404c7e:	e7f2      	b.n	404c66 <memmove+0xa6>
  404c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404c82:	4672      	mov	r2, lr
  404c84:	e7ee      	b.n	404c64 <memmove+0xa4>
  404c86:	bf00      	nop

00404c88 <__malloc_lock>:
  404c88:	4801      	ldr	r0, [pc, #4]	; (404c90 <__malloc_lock+0x8>)
  404c8a:	f7ff bbfd 	b.w	404488 <__retarget_lock_acquire_recursive>
  404c8e:	bf00      	nop
  404c90:	20404c38 	.word	0x20404c38

00404c94 <__malloc_unlock>:
  404c94:	4801      	ldr	r0, [pc, #4]	; (404c9c <__malloc_unlock+0x8>)
  404c96:	f7ff bbf9 	b.w	40448c <__retarget_lock_release_recursive>
  404c9a:	bf00      	nop
  404c9c:	20404c38 	.word	0x20404c38

00404ca0 <_realloc_r>:
  404ca0:	2900      	cmp	r1, #0
  404ca2:	f000 8095 	beq.w	404dd0 <_realloc_r+0x130>
  404ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404caa:	460d      	mov	r5, r1
  404cac:	4616      	mov	r6, r2
  404cae:	b083      	sub	sp, #12
  404cb0:	4680      	mov	r8, r0
  404cb2:	f106 070b 	add.w	r7, r6, #11
  404cb6:	f7ff ffe7 	bl	404c88 <__malloc_lock>
  404cba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404cbe:	2f16      	cmp	r7, #22
  404cc0:	f02e 0403 	bic.w	r4, lr, #3
  404cc4:	f1a5 0908 	sub.w	r9, r5, #8
  404cc8:	d83c      	bhi.n	404d44 <_realloc_r+0xa4>
  404cca:	2210      	movs	r2, #16
  404ccc:	4617      	mov	r7, r2
  404cce:	42be      	cmp	r6, r7
  404cd0:	d83d      	bhi.n	404d4e <_realloc_r+0xae>
  404cd2:	4294      	cmp	r4, r2
  404cd4:	da43      	bge.n	404d5e <_realloc_r+0xbe>
  404cd6:	4bc4      	ldr	r3, [pc, #784]	; (404fe8 <_realloc_r+0x348>)
  404cd8:	6899      	ldr	r1, [r3, #8]
  404cda:	eb09 0004 	add.w	r0, r9, r4
  404cde:	4288      	cmp	r0, r1
  404ce0:	f000 80b4 	beq.w	404e4c <_realloc_r+0x1ac>
  404ce4:	6843      	ldr	r3, [r0, #4]
  404ce6:	f023 0101 	bic.w	r1, r3, #1
  404cea:	4401      	add	r1, r0
  404cec:	6849      	ldr	r1, [r1, #4]
  404cee:	07c9      	lsls	r1, r1, #31
  404cf0:	d54c      	bpl.n	404d8c <_realloc_r+0xec>
  404cf2:	f01e 0f01 	tst.w	lr, #1
  404cf6:	f000 809b 	beq.w	404e30 <_realloc_r+0x190>
  404cfa:	4631      	mov	r1, r6
  404cfc:	4640      	mov	r0, r8
  404cfe:	f7ff fc47 	bl	404590 <_malloc_r>
  404d02:	4606      	mov	r6, r0
  404d04:	2800      	cmp	r0, #0
  404d06:	d03a      	beq.n	404d7e <_realloc_r+0xde>
  404d08:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404d0c:	f023 0301 	bic.w	r3, r3, #1
  404d10:	444b      	add	r3, r9
  404d12:	f1a0 0208 	sub.w	r2, r0, #8
  404d16:	429a      	cmp	r2, r3
  404d18:	f000 8121 	beq.w	404f5e <_realloc_r+0x2be>
  404d1c:	1f22      	subs	r2, r4, #4
  404d1e:	2a24      	cmp	r2, #36	; 0x24
  404d20:	f200 8107 	bhi.w	404f32 <_realloc_r+0x292>
  404d24:	2a13      	cmp	r2, #19
  404d26:	f200 80db 	bhi.w	404ee0 <_realloc_r+0x240>
  404d2a:	4603      	mov	r3, r0
  404d2c:	462a      	mov	r2, r5
  404d2e:	6811      	ldr	r1, [r2, #0]
  404d30:	6019      	str	r1, [r3, #0]
  404d32:	6851      	ldr	r1, [r2, #4]
  404d34:	6059      	str	r1, [r3, #4]
  404d36:	6892      	ldr	r2, [r2, #8]
  404d38:	609a      	str	r2, [r3, #8]
  404d3a:	4629      	mov	r1, r5
  404d3c:	4640      	mov	r0, r8
  404d3e:	f7ff f909 	bl	403f54 <_free_r>
  404d42:	e01c      	b.n	404d7e <_realloc_r+0xde>
  404d44:	f027 0707 	bic.w	r7, r7, #7
  404d48:	2f00      	cmp	r7, #0
  404d4a:	463a      	mov	r2, r7
  404d4c:	dabf      	bge.n	404cce <_realloc_r+0x2e>
  404d4e:	2600      	movs	r6, #0
  404d50:	230c      	movs	r3, #12
  404d52:	4630      	mov	r0, r6
  404d54:	f8c8 3000 	str.w	r3, [r8]
  404d58:	b003      	add	sp, #12
  404d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d5e:	462e      	mov	r6, r5
  404d60:	1be3      	subs	r3, r4, r7
  404d62:	2b0f      	cmp	r3, #15
  404d64:	d81e      	bhi.n	404da4 <_realloc_r+0x104>
  404d66:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404d6a:	f003 0301 	and.w	r3, r3, #1
  404d6e:	4323      	orrs	r3, r4
  404d70:	444c      	add	r4, r9
  404d72:	f8c9 3004 	str.w	r3, [r9, #4]
  404d76:	6863      	ldr	r3, [r4, #4]
  404d78:	f043 0301 	orr.w	r3, r3, #1
  404d7c:	6063      	str	r3, [r4, #4]
  404d7e:	4640      	mov	r0, r8
  404d80:	f7ff ff88 	bl	404c94 <__malloc_unlock>
  404d84:	4630      	mov	r0, r6
  404d86:	b003      	add	sp, #12
  404d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d8c:	f023 0303 	bic.w	r3, r3, #3
  404d90:	18e1      	adds	r1, r4, r3
  404d92:	4291      	cmp	r1, r2
  404d94:	db1f      	blt.n	404dd6 <_realloc_r+0x136>
  404d96:	68c3      	ldr	r3, [r0, #12]
  404d98:	6882      	ldr	r2, [r0, #8]
  404d9a:	462e      	mov	r6, r5
  404d9c:	60d3      	str	r3, [r2, #12]
  404d9e:	460c      	mov	r4, r1
  404da0:	609a      	str	r2, [r3, #8]
  404da2:	e7dd      	b.n	404d60 <_realloc_r+0xc0>
  404da4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404da8:	eb09 0107 	add.w	r1, r9, r7
  404dac:	f002 0201 	and.w	r2, r2, #1
  404db0:	444c      	add	r4, r9
  404db2:	f043 0301 	orr.w	r3, r3, #1
  404db6:	4317      	orrs	r7, r2
  404db8:	f8c9 7004 	str.w	r7, [r9, #4]
  404dbc:	604b      	str	r3, [r1, #4]
  404dbe:	6863      	ldr	r3, [r4, #4]
  404dc0:	f043 0301 	orr.w	r3, r3, #1
  404dc4:	3108      	adds	r1, #8
  404dc6:	6063      	str	r3, [r4, #4]
  404dc8:	4640      	mov	r0, r8
  404dca:	f7ff f8c3 	bl	403f54 <_free_r>
  404dce:	e7d6      	b.n	404d7e <_realloc_r+0xde>
  404dd0:	4611      	mov	r1, r2
  404dd2:	f7ff bbdd 	b.w	404590 <_malloc_r>
  404dd6:	f01e 0f01 	tst.w	lr, #1
  404dda:	d18e      	bne.n	404cfa <_realloc_r+0x5a>
  404ddc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404de0:	eba9 0a01 	sub.w	sl, r9, r1
  404de4:	f8da 1004 	ldr.w	r1, [sl, #4]
  404de8:	f021 0103 	bic.w	r1, r1, #3
  404dec:	440b      	add	r3, r1
  404dee:	4423      	add	r3, r4
  404df0:	4293      	cmp	r3, r2
  404df2:	db25      	blt.n	404e40 <_realloc_r+0x1a0>
  404df4:	68c2      	ldr	r2, [r0, #12]
  404df6:	6881      	ldr	r1, [r0, #8]
  404df8:	4656      	mov	r6, sl
  404dfa:	60ca      	str	r2, [r1, #12]
  404dfc:	6091      	str	r1, [r2, #8]
  404dfe:	f8da 100c 	ldr.w	r1, [sl, #12]
  404e02:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404e06:	1f22      	subs	r2, r4, #4
  404e08:	2a24      	cmp	r2, #36	; 0x24
  404e0a:	60c1      	str	r1, [r0, #12]
  404e0c:	6088      	str	r0, [r1, #8]
  404e0e:	f200 8094 	bhi.w	404f3a <_realloc_r+0x29a>
  404e12:	2a13      	cmp	r2, #19
  404e14:	d96f      	bls.n	404ef6 <_realloc_r+0x256>
  404e16:	6829      	ldr	r1, [r5, #0]
  404e18:	f8ca 1008 	str.w	r1, [sl, #8]
  404e1c:	6869      	ldr	r1, [r5, #4]
  404e1e:	f8ca 100c 	str.w	r1, [sl, #12]
  404e22:	2a1b      	cmp	r2, #27
  404e24:	f200 80a2 	bhi.w	404f6c <_realloc_r+0x2cc>
  404e28:	3508      	adds	r5, #8
  404e2a:	f10a 0210 	add.w	r2, sl, #16
  404e2e:	e063      	b.n	404ef8 <_realloc_r+0x258>
  404e30:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404e34:	eba9 0a03 	sub.w	sl, r9, r3
  404e38:	f8da 1004 	ldr.w	r1, [sl, #4]
  404e3c:	f021 0103 	bic.w	r1, r1, #3
  404e40:	1863      	adds	r3, r4, r1
  404e42:	4293      	cmp	r3, r2
  404e44:	f6ff af59 	blt.w	404cfa <_realloc_r+0x5a>
  404e48:	4656      	mov	r6, sl
  404e4a:	e7d8      	b.n	404dfe <_realloc_r+0x15e>
  404e4c:	6841      	ldr	r1, [r0, #4]
  404e4e:	f021 0b03 	bic.w	fp, r1, #3
  404e52:	44a3      	add	fp, r4
  404e54:	f107 0010 	add.w	r0, r7, #16
  404e58:	4583      	cmp	fp, r0
  404e5a:	da56      	bge.n	404f0a <_realloc_r+0x26a>
  404e5c:	f01e 0f01 	tst.w	lr, #1
  404e60:	f47f af4b 	bne.w	404cfa <_realloc_r+0x5a>
  404e64:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404e68:	eba9 0a01 	sub.w	sl, r9, r1
  404e6c:	f8da 1004 	ldr.w	r1, [sl, #4]
  404e70:	f021 0103 	bic.w	r1, r1, #3
  404e74:	448b      	add	fp, r1
  404e76:	4558      	cmp	r0, fp
  404e78:	dce2      	bgt.n	404e40 <_realloc_r+0x1a0>
  404e7a:	4656      	mov	r6, sl
  404e7c:	f8da 100c 	ldr.w	r1, [sl, #12]
  404e80:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404e84:	1f22      	subs	r2, r4, #4
  404e86:	2a24      	cmp	r2, #36	; 0x24
  404e88:	60c1      	str	r1, [r0, #12]
  404e8a:	6088      	str	r0, [r1, #8]
  404e8c:	f200 808f 	bhi.w	404fae <_realloc_r+0x30e>
  404e90:	2a13      	cmp	r2, #19
  404e92:	f240 808a 	bls.w	404faa <_realloc_r+0x30a>
  404e96:	6829      	ldr	r1, [r5, #0]
  404e98:	f8ca 1008 	str.w	r1, [sl, #8]
  404e9c:	6869      	ldr	r1, [r5, #4]
  404e9e:	f8ca 100c 	str.w	r1, [sl, #12]
  404ea2:	2a1b      	cmp	r2, #27
  404ea4:	f200 808a 	bhi.w	404fbc <_realloc_r+0x31c>
  404ea8:	3508      	adds	r5, #8
  404eaa:	f10a 0210 	add.w	r2, sl, #16
  404eae:	6829      	ldr	r1, [r5, #0]
  404eb0:	6011      	str	r1, [r2, #0]
  404eb2:	6869      	ldr	r1, [r5, #4]
  404eb4:	6051      	str	r1, [r2, #4]
  404eb6:	68a9      	ldr	r1, [r5, #8]
  404eb8:	6091      	str	r1, [r2, #8]
  404eba:	eb0a 0107 	add.w	r1, sl, r7
  404ebe:	ebab 0207 	sub.w	r2, fp, r7
  404ec2:	f042 0201 	orr.w	r2, r2, #1
  404ec6:	6099      	str	r1, [r3, #8]
  404ec8:	604a      	str	r2, [r1, #4]
  404eca:	f8da 3004 	ldr.w	r3, [sl, #4]
  404ece:	f003 0301 	and.w	r3, r3, #1
  404ed2:	431f      	orrs	r7, r3
  404ed4:	4640      	mov	r0, r8
  404ed6:	f8ca 7004 	str.w	r7, [sl, #4]
  404eda:	f7ff fedb 	bl	404c94 <__malloc_unlock>
  404ede:	e751      	b.n	404d84 <_realloc_r+0xe4>
  404ee0:	682b      	ldr	r3, [r5, #0]
  404ee2:	6003      	str	r3, [r0, #0]
  404ee4:	686b      	ldr	r3, [r5, #4]
  404ee6:	6043      	str	r3, [r0, #4]
  404ee8:	2a1b      	cmp	r2, #27
  404eea:	d82d      	bhi.n	404f48 <_realloc_r+0x2a8>
  404eec:	f100 0308 	add.w	r3, r0, #8
  404ef0:	f105 0208 	add.w	r2, r5, #8
  404ef4:	e71b      	b.n	404d2e <_realloc_r+0x8e>
  404ef6:	4632      	mov	r2, r6
  404ef8:	6829      	ldr	r1, [r5, #0]
  404efa:	6011      	str	r1, [r2, #0]
  404efc:	6869      	ldr	r1, [r5, #4]
  404efe:	6051      	str	r1, [r2, #4]
  404f00:	68a9      	ldr	r1, [r5, #8]
  404f02:	6091      	str	r1, [r2, #8]
  404f04:	461c      	mov	r4, r3
  404f06:	46d1      	mov	r9, sl
  404f08:	e72a      	b.n	404d60 <_realloc_r+0xc0>
  404f0a:	eb09 0107 	add.w	r1, r9, r7
  404f0e:	ebab 0b07 	sub.w	fp, fp, r7
  404f12:	f04b 0201 	orr.w	r2, fp, #1
  404f16:	6099      	str	r1, [r3, #8]
  404f18:	604a      	str	r2, [r1, #4]
  404f1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404f1e:	f003 0301 	and.w	r3, r3, #1
  404f22:	431f      	orrs	r7, r3
  404f24:	4640      	mov	r0, r8
  404f26:	f845 7c04 	str.w	r7, [r5, #-4]
  404f2a:	f7ff feb3 	bl	404c94 <__malloc_unlock>
  404f2e:	462e      	mov	r6, r5
  404f30:	e728      	b.n	404d84 <_realloc_r+0xe4>
  404f32:	4629      	mov	r1, r5
  404f34:	f7ff fe44 	bl	404bc0 <memmove>
  404f38:	e6ff      	b.n	404d3a <_realloc_r+0x9a>
  404f3a:	4629      	mov	r1, r5
  404f3c:	4630      	mov	r0, r6
  404f3e:	461c      	mov	r4, r3
  404f40:	46d1      	mov	r9, sl
  404f42:	f7ff fe3d 	bl	404bc0 <memmove>
  404f46:	e70b      	b.n	404d60 <_realloc_r+0xc0>
  404f48:	68ab      	ldr	r3, [r5, #8]
  404f4a:	6083      	str	r3, [r0, #8]
  404f4c:	68eb      	ldr	r3, [r5, #12]
  404f4e:	60c3      	str	r3, [r0, #12]
  404f50:	2a24      	cmp	r2, #36	; 0x24
  404f52:	d017      	beq.n	404f84 <_realloc_r+0x2e4>
  404f54:	f100 0310 	add.w	r3, r0, #16
  404f58:	f105 0210 	add.w	r2, r5, #16
  404f5c:	e6e7      	b.n	404d2e <_realloc_r+0x8e>
  404f5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404f62:	f023 0303 	bic.w	r3, r3, #3
  404f66:	441c      	add	r4, r3
  404f68:	462e      	mov	r6, r5
  404f6a:	e6f9      	b.n	404d60 <_realloc_r+0xc0>
  404f6c:	68a9      	ldr	r1, [r5, #8]
  404f6e:	f8ca 1010 	str.w	r1, [sl, #16]
  404f72:	68e9      	ldr	r1, [r5, #12]
  404f74:	f8ca 1014 	str.w	r1, [sl, #20]
  404f78:	2a24      	cmp	r2, #36	; 0x24
  404f7a:	d00c      	beq.n	404f96 <_realloc_r+0x2f6>
  404f7c:	3510      	adds	r5, #16
  404f7e:	f10a 0218 	add.w	r2, sl, #24
  404f82:	e7b9      	b.n	404ef8 <_realloc_r+0x258>
  404f84:	692b      	ldr	r3, [r5, #16]
  404f86:	6103      	str	r3, [r0, #16]
  404f88:	696b      	ldr	r3, [r5, #20]
  404f8a:	6143      	str	r3, [r0, #20]
  404f8c:	f105 0218 	add.w	r2, r5, #24
  404f90:	f100 0318 	add.w	r3, r0, #24
  404f94:	e6cb      	b.n	404d2e <_realloc_r+0x8e>
  404f96:	692a      	ldr	r2, [r5, #16]
  404f98:	f8ca 2018 	str.w	r2, [sl, #24]
  404f9c:	696a      	ldr	r2, [r5, #20]
  404f9e:	f8ca 201c 	str.w	r2, [sl, #28]
  404fa2:	3518      	adds	r5, #24
  404fa4:	f10a 0220 	add.w	r2, sl, #32
  404fa8:	e7a6      	b.n	404ef8 <_realloc_r+0x258>
  404faa:	4632      	mov	r2, r6
  404fac:	e77f      	b.n	404eae <_realloc_r+0x20e>
  404fae:	4629      	mov	r1, r5
  404fb0:	4630      	mov	r0, r6
  404fb2:	9301      	str	r3, [sp, #4]
  404fb4:	f7ff fe04 	bl	404bc0 <memmove>
  404fb8:	9b01      	ldr	r3, [sp, #4]
  404fba:	e77e      	b.n	404eba <_realloc_r+0x21a>
  404fbc:	68a9      	ldr	r1, [r5, #8]
  404fbe:	f8ca 1010 	str.w	r1, [sl, #16]
  404fc2:	68e9      	ldr	r1, [r5, #12]
  404fc4:	f8ca 1014 	str.w	r1, [sl, #20]
  404fc8:	2a24      	cmp	r2, #36	; 0x24
  404fca:	d003      	beq.n	404fd4 <_realloc_r+0x334>
  404fcc:	3510      	adds	r5, #16
  404fce:	f10a 0218 	add.w	r2, sl, #24
  404fd2:	e76c      	b.n	404eae <_realloc_r+0x20e>
  404fd4:	692a      	ldr	r2, [r5, #16]
  404fd6:	f8ca 2018 	str.w	r2, [sl, #24]
  404fda:	696a      	ldr	r2, [r5, #20]
  404fdc:	f8ca 201c 	str.w	r2, [sl, #28]
  404fe0:	3518      	adds	r5, #24
  404fe2:	f10a 0220 	add.w	r2, sl, #32
  404fe6:	e762      	b.n	404eae <_realloc_r+0x20e>
  404fe8:	204005c8 	.word	0x204005c8

00404fec <_sbrk_r>:
  404fec:	b538      	push	{r3, r4, r5, lr}
  404fee:	4c07      	ldr	r4, [pc, #28]	; (40500c <_sbrk_r+0x20>)
  404ff0:	2300      	movs	r3, #0
  404ff2:	4605      	mov	r5, r0
  404ff4:	4608      	mov	r0, r1
  404ff6:	6023      	str	r3, [r4, #0]
  404ff8:	f7fc fa6e 	bl	4014d8 <_sbrk>
  404ffc:	1c43      	adds	r3, r0, #1
  404ffe:	d000      	beq.n	405002 <_sbrk_r+0x16>
  405000:	bd38      	pop	{r3, r4, r5, pc}
  405002:	6823      	ldr	r3, [r4, #0]
  405004:	2b00      	cmp	r3, #0
  405006:	d0fb      	beq.n	405000 <_sbrk_r+0x14>
  405008:	602b      	str	r3, [r5, #0]
  40500a:	bd38      	pop	{r3, r4, r5, pc}
  40500c:	20404c4c 	.word	0x20404c4c

00405010 <__sread>:
  405010:	b510      	push	{r4, lr}
  405012:	460c      	mov	r4, r1
  405014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405018:	f000 f9f6 	bl	405408 <_read_r>
  40501c:	2800      	cmp	r0, #0
  40501e:	db03      	blt.n	405028 <__sread+0x18>
  405020:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405022:	4403      	add	r3, r0
  405024:	6523      	str	r3, [r4, #80]	; 0x50
  405026:	bd10      	pop	{r4, pc}
  405028:	89a3      	ldrh	r3, [r4, #12]
  40502a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40502e:	81a3      	strh	r3, [r4, #12]
  405030:	bd10      	pop	{r4, pc}
  405032:	bf00      	nop

00405034 <__swrite>:
  405034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405038:	4616      	mov	r6, r2
  40503a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40503e:	461f      	mov	r7, r3
  405040:	05d3      	lsls	r3, r2, #23
  405042:	460c      	mov	r4, r1
  405044:	4605      	mov	r5, r0
  405046:	d507      	bpl.n	405058 <__swrite+0x24>
  405048:	2200      	movs	r2, #0
  40504a:	2302      	movs	r3, #2
  40504c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405050:	f000 f9c4 	bl	4053dc <_lseek_r>
  405054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40505c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405060:	81a2      	strh	r2, [r4, #12]
  405062:	463b      	mov	r3, r7
  405064:	4632      	mov	r2, r6
  405066:	4628      	mov	r0, r5
  405068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40506c:	f000 b8a4 	b.w	4051b8 <_write_r>

00405070 <__sseek>:
  405070:	b510      	push	{r4, lr}
  405072:	460c      	mov	r4, r1
  405074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405078:	f000 f9b0 	bl	4053dc <_lseek_r>
  40507c:	89a3      	ldrh	r3, [r4, #12]
  40507e:	1c42      	adds	r2, r0, #1
  405080:	bf0e      	itee	eq
  405082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40508a:	6520      	strne	r0, [r4, #80]	; 0x50
  40508c:	81a3      	strh	r3, [r4, #12]
  40508e:	bd10      	pop	{r4, pc}

00405090 <__sclose>:
  405090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405094:	f000 b908 	b.w	4052a8 <_close_r>

00405098 <__swbuf_r>:
  405098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40509a:	460d      	mov	r5, r1
  40509c:	4614      	mov	r4, r2
  40509e:	4606      	mov	r6, r0
  4050a0:	b110      	cbz	r0, 4050a8 <__swbuf_r+0x10>
  4050a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4050a4:	2b00      	cmp	r3, #0
  4050a6:	d04b      	beq.n	405140 <__swbuf_r+0xa8>
  4050a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050ac:	69a3      	ldr	r3, [r4, #24]
  4050ae:	60a3      	str	r3, [r4, #8]
  4050b0:	b291      	uxth	r1, r2
  4050b2:	0708      	lsls	r0, r1, #28
  4050b4:	d539      	bpl.n	40512a <__swbuf_r+0x92>
  4050b6:	6923      	ldr	r3, [r4, #16]
  4050b8:	2b00      	cmp	r3, #0
  4050ba:	d036      	beq.n	40512a <__swbuf_r+0x92>
  4050bc:	b2ed      	uxtb	r5, r5
  4050be:	0489      	lsls	r1, r1, #18
  4050c0:	462f      	mov	r7, r5
  4050c2:	d515      	bpl.n	4050f0 <__swbuf_r+0x58>
  4050c4:	6822      	ldr	r2, [r4, #0]
  4050c6:	6961      	ldr	r1, [r4, #20]
  4050c8:	1ad3      	subs	r3, r2, r3
  4050ca:	428b      	cmp	r3, r1
  4050cc:	da1c      	bge.n	405108 <__swbuf_r+0x70>
  4050ce:	3301      	adds	r3, #1
  4050d0:	68a1      	ldr	r1, [r4, #8]
  4050d2:	1c50      	adds	r0, r2, #1
  4050d4:	3901      	subs	r1, #1
  4050d6:	60a1      	str	r1, [r4, #8]
  4050d8:	6020      	str	r0, [r4, #0]
  4050da:	7015      	strb	r5, [r2, #0]
  4050dc:	6962      	ldr	r2, [r4, #20]
  4050de:	429a      	cmp	r2, r3
  4050e0:	d01a      	beq.n	405118 <__swbuf_r+0x80>
  4050e2:	89a3      	ldrh	r3, [r4, #12]
  4050e4:	07db      	lsls	r3, r3, #31
  4050e6:	d501      	bpl.n	4050ec <__swbuf_r+0x54>
  4050e8:	2d0a      	cmp	r5, #10
  4050ea:	d015      	beq.n	405118 <__swbuf_r+0x80>
  4050ec:	4638      	mov	r0, r7
  4050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4050f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4050f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4050fa:	81a2      	strh	r2, [r4, #12]
  4050fc:	6822      	ldr	r2, [r4, #0]
  4050fe:	6661      	str	r1, [r4, #100]	; 0x64
  405100:	6961      	ldr	r1, [r4, #20]
  405102:	1ad3      	subs	r3, r2, r3
  405104:	428b      	cmp	r3, r1
  405106:	dbe2      	blt.n	4050ce <__swbuf_r+0x36>
  405108:	4621      	mov	r1, r4
  40510a:	4630      	mov	r0, r6
  40510c:	f7fe fda4 	bl	403c58 <_fflush_r>
  405110:	b940      	cbnz	r0, 405124 <__swbuf_r+0x8c>
  405112:	6822      	ldr	r2, [r4, #0]
  405114:	2301      	movs	r3, #1
  405116:	e7db      	b.n	4050d0 <__swbuf_r+0x38>
  405118:	4621      	mov	r1, r4
  40511a:	4630      	mov	r0, r6
  40511c:	f7fe fd9c 	bl	403c58 <_fflush_r>
  405120:	2800      	cmp	r0, #0
  405122:	d0e3      	beq.n	4050ec <__swbuf_r+0x54>
  405124:	f04f 37ff 	mov.w	r7, #4294967295
  405128:	e7e0      	b.n	4050ec <__swbuf_r+0x54>
  40512a:	4621      	mov	r1, r4
  40512c:	4630      	mov	r0, r6
  40512e:	f7fe fc7f 	bl	403a30 <__swsetup_r>
  405132:	2800      	cmp	r0, #0
  405134:	d1f6      	bne.n	405124 <__swbuf_r+0x8c>
  405136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40513a:	6923      	ldr	r3, [r4, #16]
  40513c:	b291      	uxth	r1, r2
  40513e:	e7bd      	b.n	4050bc <__swbuf_r+0x24>
  405140:	f7fe fde2 	bl	403d08 <__sinit>
  405144:	e7b0      	b.n	4050a8 <__swbuf_r+0x10>
  405146:	bf00      	nop

00405148 <_wcrtomb_r>:
  405148:	b5f0      	push	{r4, r5, r6, r7, lr}
  40514a:	4606      	mov	r6, r0
  40514c:	b085      	sub	sp, #20
  40514e:	461f      	mov	r7, r3
  405150:	b189      	cbz	r1, 405176 <_wcrtomb_r+0x2e>
  405152:	4c10      	ldr	r4, [pc, #64]	; (405194 <_wcrtomb_r+0x4c>)
  405154:	4d10      	ldr	r5, [pc, #64]	; (405198 <_wcrtomb_r+0x50>)
  405156:	6824      	ldr	r4, [r4, #0]
  405158:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40515a:	2c00      	cmp	r4, #0
  40515c:	bf08      	it	eq
  40515e:	462c      	moveq	r4, r5
  405160:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405164:	47a0      	blx	r4
  405166:	1c43      	adds	r3, r0, #1
  405168:	d103      	bne.n	405172 <_wcrtomb_r+0x2a>
  40516a:	2200      	movs	r2, #0
  40516c:	238a      	movs	r3, #138	; 0x8a
  40516e:	603a      	str	r2, [r7, #0]
  405170:	6033      	str	r3, [r6, #0]
  405172:	b005      	add	sp, #20
  405174:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405176:	460c      	mov	r4, r1
  405178:	4906      	ldr	r1, [pc, #24]	; (405194 <_wcrtomb_r+0x4c>)
  40517a:	4a07      	ldr	r2, [pc, #28]	; (405198 <_wcrtomb_r+0x50>)
  40517c:	6809      	ldr	r1, [r1, #0]
  40517e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405180:	2900      	cmp	r1, #0
  405182:	bf08      	it	eq
  405184:	4611      	moveq	r1, r2
  405186:	4622      	mov	r2, r4
  405188:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40518c:	a901      	add	r1, sp, #4
  40518e:	47a0      	blx	r4
  405190:	e7e9      	b.n	405166 <_wcrtomb_r+0x1e>
  405192:	bf00      	nop
  405194:	20400028 	.word	0x20400028
  405198:	2040045c 	.word	0x2040045c

0040519c <__ascii_wctomb>:
  40519c:	b121      	cbz	r1, 4051a8 <__ascii_wctomb+0xc>
  40519e:	2aff      	cmp	r2, #255	; 0xff
  4051a0:	d804      	bhi.n	4051ac <__ascii_wctomb+0x10>
  4051a2:	700a      	strb	r2, [r1, #0]
  4051a4:	2001      	movs	r0, #1
  4051a6:	4770      	bx	lr
  4051a8:	4608      	mov	r0, r1
  4051aa:	4770      	bx	lr
  4051ac:	238a      	movs	r3, #138	; 0x8a
  4051ae:	6003      	str	r3, [r0, #0]
  4051b0:	f04f 30ff 	mov.w	r0, #4294967295
  4051b4:	4770      	bx	lr
  4051b6:	bf00      	nop

004051b8 <_write_r>:
  4051b8:	b570      	push	{r4, r5, r6, lr}
  4051ba:	460d      	mov	r5, r1
  4051bc:	4c08      	ldr	r4, [pc, #32]	; (4051e0 <_write_r+0x28>)
  4051be:	4611      	mov	r1, r2
  4051c0:	4606      	mov	r6, r0
  4051c2:	461a      	mov	r2, r3
  4051c4:	4628      	mov	r0, r5
  4051c6:	2300      	movs	r3, #0
  4051c8:	6023      	str	r3, [r4, #0]
  4051ca:	f7fc ff53 	bl	402074 <_write>
  4051ce:	1c43      	adds	r3, r0, #1
  4051d0:	d000      	beq.n	4051d4 <_write_r+0x1c>
  4051d2:	bd70      	pop	{r4, r5, r6, pc}
  4051d4:	6823      	ldr	r3, [r4, #0]
  4051d6:	2b00      	cmp	r3, #0
  4051d8:	d0fb      	beq.n	4051d2 <_write_r+0x1a>
  4051da:	6033      	str	r3, [r6, #0]
  4051dc:	bd70      	pop	{r4, r5, r6, pc}
  4051de:	bf00      	nop
  4051e0:	20404c4c 	.word	0x20404c4c

004051e4 <__register_exitproc>:
  4051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051e8:	4d2c      	ldr	r5, [pc, #176]	; (40529c <__register_exitproc+0xb8>)
  4051ea:	4606      	mov	r6, r0
  4051ec:	6828      	ldr	r0, [r5, #0]
  4051ee:	4698      	mov	r8, r3
  4051f0:	460f      	mov	r7, r1
  4051f2:	4691      	mov	r9, r2
  4051f4:	f7ff f948 	bl	404488 <__retarget_lock_acquire_recursive>
  4051f8:	4b29      	ldr	r3, [pc, #164]	; (4052a0 <__register_exitproc+0xbc>)
  4051fa:	681c      	ldr	r4, [r3, #0]
  4051fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405200:	2b00      	cmp	r3, #0
  405202:	d03e      	beq.n	405282 <__register_exitproc+0x9e>
  405204:	685a      	ldr	r2, [r3, #4]
  405206:	2a1f      	cmp	r2, #31
  405208:	dc1c      	bgt.n	405244 <__register_exitproc+0x60>
  40520a:	f102 0e01 	add.w	lr, r2, #1
  40520e:	b176      	cbz	r6, 40522e <__register_exitproc+0x4a>
  405210:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405214:	2401      	movs	r4, #1
  405216:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40521a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40521e:	4094      	lsls	r4, r2
  405220:	4320      	orrs	r0, r4
  405222:	2e02      	cmp	r6, #2
  405224:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405228:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40522c:	d023      	beq.n	405276 <__register_exitproc+0x92>
  40522e:	3202      	adds	r2, #2
  405230:	f8c3 e004 	str.w	lr, [r3, #4]
  405234:	6828      	ldr	r0, [r5, #0]
  405236:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40523a:	f7ff f927 	bl	40448c <__retarget_lock_release_recursive>
  40523e:	2000      	movs	r0, #0
  405240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405244:	4b17      	ldr	r3, [pc, #92]	; (4052a4 <__register_exitproc+0xc0>)
  405246:	b30b      	cbz	r3, 40528c <__register_exitproc+0xa8>
  405248:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40524c:	f7ff f998 	bl	404580 <malloc>
  405250:	4603      	mov	r3, r0
  405252:	b1d8      	cbz	r0, 40528c <__register_exitproc+0xa8>
  405254:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405258:	6002      	str	r2, [r0, #0]
  40525a:	2100      	movs	r1, #0
  40525c:	6041      	str	r1, [r0, #4]
  40525e:	460a      	mov	r2, r1
  405260:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405264:	f04f 0e01 	mov.w	lr, #1
  405268:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40526c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405270:	2e00      	cmp	r6, #0
  405272:	d0dc      	beq.n	40522e <__register_exitproc+0x4a>
  405274:	e7cc      	b.n	405210 <__register_exitproc+0x2c>
  405276:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40527a:	430c      	orrs	r4, r1
  40527c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405280:	e7d5      	b.n	40522e <__register_exitproc+0x4a>
  405282:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405286:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40528a:	e7bb      	b.n	405204 <__register_exitproc+0x20>
  40528c:	6828      	ldr	r0, [r5, #0]
  40528e:	f7ff f8fd 	bl	40448c <__retarget_lock_release_recursive>
  405292:	f04f 30ff 	mov.w	r0, #4294967295
  405296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40529a:	bf00      	nop
  40529c:	20400458 	.word	0x20400458
  4052a0:	004057e4 	.word	0x004057e4
  4052a4:	00404581 	.word	0x00404581

004052a8 <_close_r>:
  4052a8:	b538      	push	{r3, r4, r5, lr}
  4052aa:	4c07      	ldr	r4, [pc, #28]	; (4052c8 <_close_r+0x20>)
  4052ac:	2300      	movs	r3, #0
  4052ae:	4605      	mov	r5, r0
  4052b0:	4608      	mov	r0, r1
  4052b2:	6023      	str	r3, [r4, #0]
  4052b4:	f7fc f92c 	bl	401510 <_close>
  4052b8:	1c43      	adds	r3, r0, #1
  4052ba:	d000      	beq.n	4052be <_close_r+0x16>
  4052bc:	bd38      	pop	{r3, r4, r5, pc}
  4052be:	6823      	ldr	r3, [r4, #0]
  4052c0:	2b00      	cmp	r3, #0
  4052c2:	d0fb      	beq.n	4052bc <_close_r+0x14>
  4052c4:	602b      	str	r3, [r5, #0]
  4052c6:	bd38      	pop	{r3, r4, r5, pc}
  4052c8:	20404c4c 	.word	0x20404c4c

004052cc <_fclose_r>:
  4052cc:	b570      	push	{r4, r5, r6, lr}
  4052ce:	b159      	cbz	r1, 4052e8 <_fclose_r+0x1c>
  4052d0:	4605      	mov	r5, r0
  4052d2:	460c      	mov	r4, r1
  4052d4:	b110      	cbz	r0, 4052dc <_fclose_r+0x10>
  4052d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4052d8:	2b00      	cmp	r3, #0
  4052da:	d03c      	beq.n	405356 <_fclose_r+0x8a>
  4052dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4052de:	07d8      	lsls	r0, r3, #31
  4052e0:	d505      	bpl.n	4052ee <_fclose_r+0x22>
  4052e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052e6:	b92b      	cbnz	r3, 4052f4 <_fclose_r+0x28>
  4052e8:	2600      	movs	r6, #0
  4052ea:	4630      	mov	r0, r6
  4052ec:	bd70      	pop	{r4, r5, r6, pc}
  4052ee:	89a3      	ldrh	r3, [r4, #12]
  4052f0:	0599      	lsls	r1, r3, #22
  4052f2:	d53c      	bpl.n	40536e <_fclose_r+0xa2>
  4052f4:	4621      	mov	r1, r4
  4052f6:	4628      	mov	r0, r5
  4052f8:	f7fe fc0e 	bl	403b18 <__sflush_r>
  4052fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4052fe:	4606      	mov	r6, r0
  405300:	b133      	cbz	r3, 405310 <_fclose_r+0x44>
  405302:	69e1      	ldr	r1, [r4, #28]
  405304:	4628      	mov	r0, r5
  405306:	4798      	blx	r3
  405308:	2800      	cmp	r0, #0
  40530a:	bfb8      	it	lt
  40530c:	f04f 36ff 	movlt.w	r6, #4294967295
  405310:	89a3      	ldrh	r3, [r4, #12]
  405312:	061a      	lsls	r2, r3, #24
  405314:	d422      	bmi.n	40535c <_fclose_r+0x90>
  405316:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405318:	b141      	cbz	r1, 40532c <_fclose_r+0x60>
  40531a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40531e:	4299      	cmp	r1, r3
  405320:	d002      	beq.n	405328 <_fclose_r+0x5c>
  405322:	4628      	mov	r0, r5
  405324:	f7fe fe16 	bl	403f54 <_free_r>
  405328:	2300      	movs	r3, #0
  40532a:	6323      	str	r3, [r4, #48]	; 0x30
  40532c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40532e:	b121      	cbz	r1, 40533a <_fclose_r+0x6e>
  405330:	4628      	mov	r0, r5
  405332:	f7fe fe0f 	bl	403f54 <_free_r>
  405336:	2300      	movs	r3, #0
  405338:	6463      	str	r3, [r4, #68]	; 0x44
  40533a:	f7fe fd11 	bl	403d60 <__sfp_lock_acquire>
  40533e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405340:	2200      	movs	r2, #0
  405342:	07db      	lsls	r3, r3, #31
  405344:	81a2      	strh	r2, [r4, #12]
  405346:	d50e      	bpl.n	405366 <_fclose_r+0x9a>
  405348:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40534a:	f7ff f89b 	bl	404484 <__retarget_lock_close_recursive>
  40534e:	f7fe fd0d 	bl	403d6c <__sfp_lock_release>
  405352:	4630      	mov	r0, r6
  405354:	bd70      	pop	{r4, r5, r6, pc}
  405356:	f7fe fcd7 	bl	403d08 <__sinit>
  40535a:	e7bf      	b.n	4052dc <_fclose_r+0x10>
  40535c:	6921      	ldr	r1, [r4, #16]
  40535e:	4628      	mov	r0, r5
  405360:	f7fe fdf8 	bl	403f54 <_free_r>
  405364:	e7d7      	b.n	405316 <_fclose_r+0x4a>
  405366:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405368:	f7ff f890 	bl	40448c <__retarget_lock_release_recursive>
  40536c:	e7ec      	b.n	405348 <_fclose_r+0x7c>
  40536e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405370:	f7ff f88a 	bl	404488 <__retarget_lock_acquire_recursive>
  405374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405378:	2b00      	cmp	r3, #0
  40537a:	d1bb      	bne.n	4052f4 <_fclose_r+0x28>
  40537c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40537e:	f016 0601 	ands.w	r6, r6, #1
  405382:	d1b1      	bne.n	4052e8 <_fclose_r+0x1c>
  405384:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405386:	f7ff f881 	bl	40448c <__retarget_lock_release_recursive>
  40538a:	4630      	mov	r0, r6
  40538c:	bd70      	pop	{r4, r5, r6, pc}
  40538e:	bf00      	nop

00405390 <_fstat_r>:
  405390:	b538      	push	{r3, r4, r5, lr}
  405392:	460b      	mov	r3, r1
  405394:	4c07      	ldr	r4, [pc, #28]	; (4053b4 <_fstat_r+0x24>)
  405396:	4605      	mov	r5, r0
  405398:	4611      	mov	r1, r2
  40539a:	4618      	mov	r0, r3
  40539c:	2300      	movs	r3, #0
  40539e:	6023      	str	r3, [r4, #0]
  4053a0:	f7fc f8b9 	bl	401516 <_fstat>
  4053a4:	1c43      	adds	r3, r0, #1
  4053a6:	d000      	beq.n	4053aa <_fstat_r+0x1a>
  4053a8:	bd38      	pop	{r3, r4, r5, pc}
  4053aa:	6823      	ldr	r3, [r4, #0]
  4053ac:	2b00      	cmp	r3, #0
  4053ae:	d0fb      	beq.n	4053a8 <_fstat_r+0x18>
  4053b0:	602b      	str	r3, [r5, #0]
  4053b2:	bd38      	pop	{r3, r4, r5, pc}
  4053b4:	20404c4c 	.word	0x20404c4c

004053b8 <_isatty_r>:
  4053b8:	b538      	push	{r3, r4, r5, lr}
  4053ba:	4c07      	ldr	r4, [pc, #28]	; (4053d8 <_isatty_r+0x20>)
  4053bc:	2300      	movs	r3, #0
  4053be:	4605      	mov	r5, r0
  4053c0:	4608      	mov	r0, r1
  4053c2:	6023      	str	r3, [r4, #0]
  4053c4:	f7fc f8ac 	bl	401520 <_isatty>
  4053c8:	1c43      	adds	r3, r0, #1
  4053ca:	d000      	beq.n	4053ce <_isatty_r+0x16>
  4053cc:	bd38      	pop	{r3, r4, r5, pc}
  4053ce:	6823      	ldr	r3, [r4, #0]
  4053d0:	2b00      	cmp	r3, #0
  4053d2:	d0fb      	beq.n	4053cc <_isatty_r+0x14>
  4053d4:	602b      	str	r3, [r5, #0]
  4053d6:	bd38      	pop	{r3, r4, r5, pc}
  4053d8:	20404c4c 	.word	0x20404c4c

004053dc <_lseek_r>:
  4053dc:	b570      	push	{r4, r5, r6, lr}
  4053de:	460d      	mov	r5, r1
  4053e0:	4c08      	ldr	r4, [pc, #32]	; (405404 <_lseek_r+0x28>)
  4053e2:	4611      	mov	r1, r2
  4053e4:	4606      	mov	r6, r0
  4053e6:	461a      	mov	r2, r3
  4053e8:	4628      	mov	r0, r5
  4053ea:	2300      	movs	r3, #0
  4053ec:	6023      	str	r3, [r4, #0]
  4053ee:	f7fc f899 	bl	401524 <_lseek>
  4053f2:	1c43      	adds	r3, r0, #1
  4053f4:	d000      	beq.n	4053f8 <_lseek_r+0x1c>
  4053f6:	bd70      	pop	{r4, r5, r6, pc}
  4053f8:	6823      	ldr	r3, [r4, #0]
  4053fa:	2b00      	cmp	r3, #0
  4053fc:	d0fb      	beq.n	4053f6 <_lseek_r+0x1a>
  4053fe:	6033      	str	r3, [r6, #0]
  405400:	bd70      	pop	{r4, r5, r6, pc}
  405402:	bf00      	nop
  405404:	20404c4c 	.word	0x20404c4c

00405408 <_read_r>:
  405408:	b570      	push	{r4, r5, r6, lr}
  40540a:	460d      	mov	r5, r1
  40540c:	4c08      	ldr	r4, [pc, #32]	; (405430 <_read_r+0x28>)
  40540e:	4611      	mov	r1, r2
  405410:	4606      	mov	r6, r0
  405412:	461a      	mov	r2, r3
  405414:	4628      	mov	r0, r5
  405416:	2300      	movs	r3, #0
  405418:	6023      	str	r3, [r4, #0]
  40541a:	f7fa ff13 	bl	400244 <_read>
  40541e:	1c43      	adds	r3, r0, #1
  405420:	d000      	beq.n	405424 <_read_r+0x1c>
  405422:	bd70      	pop	{r4, r5, r6, pc}
  405424:	6823      	ldr	r3, [r4, #0]
  405426:	2b00      	cmp	r3, #0
  405428:	d0fb      	beq.n	405422 <_read_r+0x1a>
  40542a:	6033      	str	r3, [r6, #0]
  40542c:	bd70      	pop	{r4, r5, r6, pc}
  40542e:	bf00      	nop
  405430:	20404c4c 	.word	0x20404c4c
  405434:	6e656469 	.word	0x6e656469
  405438:	69666974 	.word	0x69666974
  40543c:	203a7265 	.word	0x203a7265
  405440:	63256325 	.word	0x63256325
  405444:	63256325 	.word	0x63256325
  405448:	63256325 	.word	0x63256325
  40544c:	63256325 	.word	0x63256325
  405450:	00000d0a 	.word	0x00000d0a
  405454:	6f63704f 	.word	0x6f63704f
  405458:	203a6564 	.word	0x203a6564
  40545c:	0d0a6425 	.word	0x0d0a6425
  405460:	00000000 	.word	0x00000000
  405464:	76696e75 	.word	0x76696e75
  405468:	65737265 	.word	0x65737265
  40546c:	0a642520 	.word	0x0a642520
  405470:	00000d0a 	.word	0x00000d0a
  405474:	6e616843 	.word	0x6e616843
  405478:	206c656e 	.word	0x206c656e
  40547c:	3a646c25 	.word	0x3a646c25
  405480:	646c2520 	.word	0x646c2520
  405484:	00000d0a 	.word	0x00000d0a
  405488:	4d202d2d 	.word	0x4d202d2d
  40548c:	25204341 	.word	0x25204341
  405490:	78253a78 	.word	0x78253a78
  405494:	3a78253a 	.word	0x3a78253a
  405498:	253a7825 	.word	0x253a7825
  40549c:	78253a78 	.word	0x78253a78
  4054a0:	00000d0a 	.word	0x00000d0a
  4054a4:	41203a45 	.word	0x41203a45
  4054a8:	53205052 	.word	0x53205052
  4054ac:	20646e65 	.word	0x20646e65
  4054b0:	7830202d 	.word	0x7830202d
  4054b4:	0d0a7825 	.word	0x0d0a7825
  4054b8:	00000000 	.word	0x00000000
  4054bc:	2d747241 	.word	0x2d747241
  4054c0:	2074654e 	.word	0x2074654e
  4054c4:	65746564 	.word	0x65746564
  4054c8:	64657463 	.word	0x64657463
  4054cc:	00000000 	.word	0x00000000
  4054d0:	20584d44 	.word	0x20584d44
  4054d4:	65766173 	.word	0x65766173
  4054d8:	00000064 	.word	0x00000064
  4054dc:	49203a45 	.word	0x49203a45
  4054e0:	20504d43 	.word	0x20504d43
  4054e4:	646e6553 	.word	0x646e6553
  4054e8:	30202d20 	.word	0x30202d20
  4054ec:	0a782578 	.word	0x0a782578
  4054f0:	0000000d 	.word	0x0000000d
  4054f4:	203d3d3d 	.word	0x203d3d3d
  4054f8:	61666544 	.word	0x61666544
  4054fc:	20746c75 	.word	0x20746c75
  405500:	6b705f77 	.word	0x6b705f77
  405504:	6f665f74 	.word	0x6f665f74
  405508:	74616d72 	.word	0x74616d72
  40550c:	7830203d 	.word	0x7830203d
  405510:	3d3d5825 	.word	0x3d3d5825
  405514:	000d0a3d 	.word	0x000d0a3d
  405518:	20594850 	.word	0x20594850
  40551c:	74696e49 	.word	0x74696e49
  405520:	696c6169 	.word	0x696c6169
  405524:	4520657a 	.word	0x4520657a
  405528:	524f5252 	.word	0x524f5252
  40552c:	00000d21 	.word	0x00000d21
  405530:	6f747541 	.word	0x6f747541
  405534:	67654e20 	.word	0x67654e20
  405538:	6169746f 	.word	0x6169746f
  40553c:	45206574 	.word	0x45206574
  405540:	524f5252 	.word	0x524f5252
  405544:	00000d21 	.word	0x00000d21
  405548:	20746553 	.word	0x20746553
  40554c:	6b6e696c 	.word	0x6b6e696c
  405550:	52524520 	.word	0x52524520
  405554:	0d21524f 	.word	0x0d21524f
  405558:	00000000 	.word	0x00000000
  40555c:	20495053 	.word	0x20495053
  405560:	65657053 	.word	0x65657053
  405564:	3d200964 	.word	0x3d200964
  405568:	646c2520 	.word	0x646c2520
  40556c:	7a484d20 	.word	0x7a484d20
  405570:	00000a0d 	.word	0x00000a0d
  405574:	54415453 	.word	0x54415453
  405578:	09095355 	.word	0x09095355
  40557c:	30203d20 	.word	0x30203d20
  405580:	32302578 	.word	0x32302578
  405584:	58522078 	.word	0x58522078
  405588:	3d52445f 	.word	0x3d52445f
  40558c:	54207825 	.word	0x54207825
  405590:	53445f58 	.word	0x53445f58
  405594:	2078253d 	.word	0x2078253d
  405598:	5f58414d 	.word	0x5f58414d
  40559c:	253d5452 	.word	0x253d5452
  4055a0:	58522078 	.word	0x58522078
  4055a4:	4e5f505f 	.word	0x4e5f505f
  4055a8:	78253d4f 	.word	0x78253d4f
  4055ac:	5f585420 	.word	0x5f585420
  4055b0:	4c4c5546 	.word	0x4c4c5546
  4055b4:	0d78253d 	.word	0x0d78253d
  4055b8:	0000000a 	.word	0x0000000a
  4055bc:	415f5852 	.word	0x415f5852
  4055c0:	5f524444 	.word	0x5f524444
  4055c4:	312d3050 	.word	0x312d3050
  4055c8:	00000000 	.word	0x00000000
  4055cc:	415f5852 	.word	0x415f5852
  4055d0:	5f524444 	.word	0x5f524444
  4055d4:	352d3250 	.word	0x352d3250
  4055d8:	00000000 	.word	0x00000000
  4055dc:	415f5854 	.word	0x415f5854
  4055e0:	09524444 	.word	0x09524444
  4055e4:	00000000 	.word	0x00000000
  4055e8:	505f5852 	.word	0x505f5852
  4055ec:	30505f57 	.word	0x30505f57
  4055f0:	0000352d 	.word	0x0000352d
  4055f4:	55544553 	.word	0x55544553
  4055f8:	57415f50 	.word	0x57415f50
  4055fc:	00000000 	.word	0x00000000
  405600:	415f4e45 	.word	0x415f4e45
  405604:	00000941 	.word	0x00000941
  405608:	525f4e45 	.word	0x525f4e45
  40560c:	44444158 	.word	0x44444158
  405610:	00000052 	.word	0x00000052
  405614:	435f4652 	.word	0x435f4652
  405618:	00000948 	.word	0x00000948
  40561c:	535f4652 	.word	0x535f4652
  405620:	50555445 	.word	0x50555445
  405624:	00000000 	.word	0x00000000
  405628:	464e4f43 	.word	0x464e4f43
  40562c:	00094749 	.word	0x00094749
  405630:	504e5944 	.word	0x504e5944
  405634:	45462f44 	.word	0x45462f44
  405638:	52555441 	.word	0x52555441
  40563c:	00000045 	.word	0x00000045
  405640:	61746144 	.word	0x61746144
  405644:	74615220 	.word	0x74615220
  405648:	3d200965 	.word	0x3d200965
  40564c:	0d732520 	.word	0x0d732520
  405650:	0000000a 	.word	0x0000000a
  405654:	65646f4d 	.word	0x65646f4d
  405658:	2009096c 	.word	0x2009096c
  40565c:	7325203d 	.word	0x7325203d
  405660:	00000a0d 	.word	0x00000a0d
  405664:	20435243 	.word	0x20435243
  405668:	676e654c 	.word	0x676e654c
  40566c:	20096874 	.word	0x20096874
  405670:	7325203d 	.word	0x7325203d
  405674:	00000a0d 	.word	0x00000a0d
  405678:	50204150 	.word	0x50204150
  40567c:	7265776f 	.word	0x7265776f
  405680:	203d2009 	.word	0x203d2009
  405684:	0a0d7325 	.word	0x0a0d7325
  405688:	00000000 	.word	0x00000000
  40568c:	00097325 	.word	0x00097325
  405690:	00783020 	.word	0x00783020
  405694:	78323025 	.word	0x78323025
  405698:	00000000 	.word	0x00000000
  40569c:	25783020 	.word	0x25783020
  4056a0:	00783230 	.word	0x00783230

004056a4 <rf24_crclength_e_str_0>:
  4056a4:	61736944 64656c62 00000000              Disabled....

004056b0 <rf24_crclength_e_str_1>:
  4056b0:	69622038 00007374                       8 bits..

004056b8 <rf24_crclength_e_str_2>:
  4056b8:	62203631 00737469                       16 bits.

004056c0 <rf24_crclength_e_str_P>:
  4056c0:	004056a4 004056b0 004056b8              .V@..V@..V@.

004056cc <rf24_datarate_e_str_0>:
  4056cc:	50424d31 00000053                       1MBPS...

004056d4 <rf24_datarate_e_str_1>:
  4056d4:	50424d32 00000053                       2MBPS...

004056dc <rf24_datarate_e_str_2>:
  4056dc:	4b303532 00535042                       250KBPS.

004056e4 <rf24_datarate_e_str_P>:
  4056e4:	004056cc 004056d4 004056dc              .V@..V@..V@.

004056f0 <rf24_model_e_str_1>:
  4056f0:	3246526e 31304c34 0000002b              nRF24L01+...

004056fc <rf24_pa_dbm_e_str_0>:
  4056fc:	4d5f4150 00004e49                       PA_MIN..

00405704 <rf24_pa_dbm_e_str_1>:
  405704:	4c5f4150 0000574f                       PA_LOW..

0040570c <rf24_pa_dbm_e_str_2>:
  40570c:	485f4150 00484749                       PA_HIGH.

00405714 <rf24_pa_dbm_e_str_3>:
  405714:	4d5f4150 00005841                       PA_MAX..

0040571c <rf24_pa_dbm_e_str_P>:
  40571c:	004056fc 00405704 0040570c 00405714     .V@..W@..W@..W@.
  40572c:	74746553 20676e69 20495053 636f6c63     Setting SPI cloc
  40573c:	2523206b 2e20756c 0a202e2e 0000000d     k #%lu ... .....
  40574c:	202d492d 74696e49 696c6169 5320657a     -I- Initialize S
  40575c:	61204950 616d2073 72657473 0000000d     PI as master....
  40576c:	4d202d2d 65747361 646f4e72 65525f65     -- MasterNode_Re
  40577c:	2d203076 2d0a0d2d 4153202d 3037454d     v0 --..-- SAME70
  40578c:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  40579c:	656c6970 53203a64 32207065 30322036     piled: Sep 26 20
  4057ac:	31203032 30353a37 2036353a 000d2d2d     20 17:50:56 --..
  4057bc:	49202d2d 25202050 64252e64 2e64252e     -- IP  %d.%d.%d.
  4057cc:	0d0a6425 00000000 6b6e696c 74656420     %d......link det
  4057dc:	65746365 00000d64                       ected...

004057e4 <_global_impure_ptr>:
  4057e4:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  4057f4:	46454443 00000000 33323130 37363534     CDEF....01234567
  405804:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405814:	0000296c                                l)..

00405818 <blanks.7217>:
  405818:	20202020 20202020 20202020 20202020                     

00405828 <zeroes.7218>:
  405828:	30303030 30303030 30303030 30303030     0000000000000000
  405838:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405848 <_ctype_>:
  405848:	20202000 20202020 28282020 20282828     .         ((((( 
  405858:	20202020 20202020 20202020 20202020                     
  405868:	10108820 10101010 10101010 10101010      ...............
  405878:	04040410 04040404 10040404 10101010     ................
  405888:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405898:	01010101 01010101 01010101 10101010     ................
  4058a8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4058b8:	02020202 02020202 02020202 10101010     ................
  4058c8:	00000020 00000000 00000000 00000000      ...............
	...

0040594c <_init>:
  40594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40594e:	bf00      	nop
  405950:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405952:	bc08      	pop	{r3}
  405954:	469e      	mov	lr, r3
  405956:	4770      	bx	lr

00405958 <__init_array_start>:
  405958:	00403af9 	.word	0x00403af9

0040595c <__frame_dummy_init_array_entry>:
  40595c:	0040018d                                ..@.

00405960 <_fini>:
  405960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405962:	bf00      	nop
  405964:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405966:	bc08      	pop	{r3}
  405968:	469e      	mov	lr, r3
  40596a:	4770      	bx	lr

0040596c <__fini_array_start>:
  40596c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <artnet_id>:
20400010:	7241 2d74 654e 0074                         Art-Net.

20400018 <gs_uc_ip_address>:
20400018:	a8c0 0200                                   ....

2040001c <gs_uc_mac_address>:
2040001c:	0400 1c25 02a0 0000                         ..%.....

20400024 <gs_ul_spi_clock>:
20400024:	4b40 004c                                   @KL.

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	4c28 2040                                   (L@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	519d 0040 4af1 0040 0000 0000 5848 0040     .Q@..J@.....HX@.
2040054c:	5844 0040 55e4 0040 55e4 0040 55e4 0040     DX@..U@..U@..U@.
2040055c:	55e4 0040 55e4 0040 55e4 0040 55e4 0040     .U@..U@..U@..U@.
2040056c:	55e4 0040 55e4 0040 ffff ffff ffff ffff     .U@..U@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
